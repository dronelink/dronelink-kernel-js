import { PlanComponent } from "../component/PlanComponent";
import { Engagement } from "./Engagement";
import { Execution } from "./Execution";
import { Drone } from "./Drone";
import { Descriptors } from "./Descriptors";
import { Serializable } from "./Serializable";
import { ExecutionStatus, TypeName, ExecutionEngine } from "./Enums";
import { Component } from "../component/Component";
import { Datetime } from "./Datetime";
import { Simulation } from "./Simulation";
import { ComponentExecuteContext } from "../component/ComponentExecuteContext";
import { ComponentEstimate } from "../component/ComponentEstimate";
import { ComponentEstimateContext } from "../component/ComponentEstimateContext";
import { Message } from "./Message";
import { Timeline } from "./Timeline";
import { ComponentNodeExecutionState } from "../component/ComponentNodeExecutionState";
import { MessageGroup } from "./MessageGroup";
import { AssetManifest } from "./AssetManifest";
import { Func } from "./Func";
import { GeoSpatial } from "./GeoSpatial";
import { Executable } from "./Executable";
import { ComponentContext } from "../component/ComponentContext";
import { CameraFile } from "./CameraFile";
import { Context } from "./Context";
import { GeoCoordinate } from "./GeoCoordinate";
import { CameraFocusCalibration } from "./CameraFocusCalibration";
import { Dictionary } from "./Dictionary";
import { ExecutionState } from "./ExecutionState";
export declare class Mission extends Executable implements Serializable {
    readonly type = TypeName.Mission;
    descriptors: Descriptors | null;
    func: Func | null;
    plan: PlanComponent;
    execution: Execution;
    applyJSON(json: any): void;
    static createFromComponent(component: Component): Mission;
    get coordinate(): GeoCoordinate;
    get verification(): Mission | null;
    get complete(): boolean;
    get state(): ExecutionState;
    get componentNodeExecutionStates(): ComponentNodeExecutionState[];
    executingMessageGroups(context: Context): MessageGroup[];
    get droneMotionComponentCount(): number;
    get componentCountsByType(): Dictionary<number>;
    get elevationsRequired(): boolean;
    get cameraFocusCalibrationsRequired(): CameraFocusCalibration[];
    get executionEngines(): ExecutionEngine[];
    executionEngineSupported(executionEngine: ExecutionEngine): boolean;
    get context(): ComponentContext;
    componentExecuteContext(context: Context, engagement: Engagement): ComponentExecuteContext;
    componentEstimateParams(pathRequired?: boolean, altitudeRequired?: boolean, timeRequired?: boolean, drone?: Drone | null): {
        context: ComponentEstimateContext;
        start: GeoSpatial;
    };
    estimate(altitudeRequired?: boolean, timeRequired?: boolean, drone?: Drone | null): ComponentEstimate;
    engageDisallowedReasons(context: Context): Message[];
    engage(context: Context, datetime?: Datetime | null, executionEngine?: ExecutionEngine): {
        engagement: Engagement;
        remainingSpatials: GeoSpatial[];
        reengagementSpatials: GeoSpatial[] | null;
    } | null;
    private executingEngagement;
    execute(context: Context, datetime?: Datetime | null, timeline?: Timeline | null, executionEngine?: ExecutionEngine): any;
    get executionDuration(): number;
    disengageWithStatus(context: Context, status: ExecutionStatus, error: string | null | undefined, overwrite: boolean): void;
    addCameraFile(channel: number, cameraFile: CameraFile): void;
    reengagementSpatial(drone: Drone): GeoSpatial | null;
    reengagement(drone: Drone): Mission | null;
    get assetManifest(): AssetManifest;
    simulate(drone: Drone | null | undefined, metadata: any, progress: (mission: Mission, timeline: Timeline) => boolean): Simulation;
    toJSONForExecutionEngine(executionEngine: ExecutionEngine): any;
}
