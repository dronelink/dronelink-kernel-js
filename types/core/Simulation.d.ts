import { Drone } from "./Drone";
import { GeoCoordinate } from "./GeoCoordinate";
import { Mission } from "./Mission";
import { User } from "./User";
import { Datetime } from "./Datetime";
import { MotionLimits6 } from "./MotionLimits6";
import { Message } from "./Message";
import { Device } from "./Device";
import { Timeline } from "./Timeline";
export declare class Simulation {
    updateInterval: number;
    missionExecuteIntervalTarget: number;
    preventThreadStarvation: boolean;
    user: User;
    device: Device;
    drone: Drone;
    droneMotionLimits: MotionLimits6;
    rate: number | null;
    started: Datetime | null;
    millisSinceStart: number;
    mission: Mission | null;
    engaged: boolean;
    timeline: Timeline | null;
    preview: boolean;
    private cameraFilesByChannel;
    private executionListeners;
    constructor(takeoffCoordinate?: GeoCoordinate, executionListener?: (simulation: Simulation) => void);
    get currentDatetime(): Datetime;
    start(): void;
    loadMission(mission: Mission, timeline?: Timeline | null): void;
    addExecutionListener(callback: (simulation: Simulation) => void): void;
    engage(mission?: Mission | null, timeline?: Timeline | null): void;
    disengage(reason: Message): void;
    stop(): void;
    private generateCameraFile;
    private execute;
    private processCommands;
    private applyCommandStart;
    private applyCommandFinish;
    private applyDroneCommandStart;
    private applyDroneCommandFinish;
    private applyPayloadCommandStart;
    private applyPayloadCommandFinish;
    private applyCameraCommandStart;
    private applyCameraCommandFinish;
    private applyGimbalCommandStart;
    private applyGimbalCommandFinish;
}
