import { Serializable } from "../core/Serializable";
import { Component } from "./Component";
import { SubComponent } from "./SubComponent";
import { TypeName, PlanCompleteAction } from "../core/Enums";
import { ComponentExecuteContext } from "./ComponentExecuteContext";
import { ComponentExecutionState } from "./ComponentExecutionState";
import { ComponentNode } from "./ComponentNode";
import { ComponentEstimate } from "./ComponentEstimate";
import { Vector2 } from "../core/Vector2";
import { DistanceTolerance } from "../core/DistanceTolerance";
import { MotionLimits6 } from "../core/MotionLimits6";
import { Node } from "../core/Node";
import { GeoSpatial } from "../core/GeoSpatial";
import { ComponentEstimateContext } from "./ComponentEstimateContext";
import { GeoCoordinate } from "../core/GeoCoordinate";
import { Context } from "../core/Context";
import { PlanRestrictionZone } from "./PlanRestrictionZone";
import { PlanReengagementRules } from "./PlanReengagementRules";
export declare class PlanComponent extends Component implements Serializable {
    readonly type = TypeName.PlanComponent;
    takeoffOffset: Vector2 | null;
    takeoffDistance: DistanceTolerance;
    droneMotionLimits: MotionLimits6;
    droneMotionErrorTolerance: DistanceTolerance;
    rootComponent: SubComponent;
    restrictionZones: PlanRestrictionZone[];
    reengagementRules: PlanReengagementRules;
    completeAction: PlanCompleteAction;
    applyJSON(json: any): void;
    verification(context: Context): Component | null;
    get referenceOffsets(): Vector2[];
    get requiredTakeoffCoordinate(): GeoCoordinate | null;
    get takeoffCoordinate(): GeoCoordinate;
    elevationCoordinates(context: Context): GeoCoordinate[];
    get context(): Context;
    node(parent?: Node | null): ComponentNode;
    estimate(context: ComponentEstimateContext, start: GeoSpatial): ComponentEstimate;
    execute(context: ComponentExecuteContext): ComponentExecutionState;
}
