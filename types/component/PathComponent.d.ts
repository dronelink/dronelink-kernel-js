import { ComponentExecutionState } from "./ComponentExecutionState";
import { ComponentExecuteContext } from "./ComponentExecuteContext";
import { Vector2 } from "../core/Vector2";
import { Serializable } from "../core/Serializable";
import { ComponentEstimate } from "./ComponentEstimate";
import { TypeName, PathCornering, ExecutionEngine } from "../core/Enums";
import { ApproachableAlignment, ApproachableComponent } from "./ApproachableComponent";
import { GeoCoordinate } from "../core/GeoCoordinate";
import { PathComponentWaypoint } from "./PathComponentWaypoint";
import { PathComponentMarker } from "./PathComponentMarker";
import { Path } from "../core/Path";
import { ComponentNode } from "./ComponentNode";
import { PointOfInterestReference } from "../core/PointOfInterest";
import { Node } from "../core/Node";
import { PathComponentModelSample, PathComponentModel, PathComponentModelParameters, PathComponentModelMarkerResolved } from "./PathComponentModel";
import { GeoSpatial } from "../core/GeoSpatial";
import { DroneMotionComponentModelData } from "./DroneMotionComponent";
import { ComponentEstimateContext } from "./ComponentEstimateContext";
import { Component } from "./Component";
import { SubComponent } from "./SubComponent";
import { ComponentContext } from "./ComponentContext";
import { LinkedValue } from "../core/LinkedValue";
export declare class PathComponent extends ApproachableComponent implements Serializable {
    readonly type = TypeName.PathComponent;
    cornering: PathCornering;
    cornerRadius: number;
    waypoints: PathComponentWaypoint[];
    markers: PathComponentMarker[];
    applyJSON(json: any): void;
    get subtitle(): string;
    get splittable(): boolean;
    toComponentForExecutionEngine(executionEngine: ExecutionEngine, context: ComponentContext): Component | null;
    verification(context: ComponentContext): Component | null;
    get pointsOfInterestEnabled(): boolean;
    get pointsOfInterestReferences(): PointOfInterestReference[];
    get droneRotationModeReadonly(): boolean;
    get waypointOffsets(): Vector2[];
    get referenceOffsets(): Vector2[];
    referenceOffsetsHandleCoordinate(context: ComponentContext): GeoCoordinate;
    elevationCoordinates(context: ComponentContext): GeoCoordinate[];
    node(parent?: Node | null): ComponentNode;
    centerCoordinate(context: ComponentContext): GeoCoordinate;
    waypointCoordinate(context: ComponentContext, index: number): GeoCoordinate;
    waypointCoordinates(context: ComponentContext): GeoCoordinate[];
    private splitResults;
    split(context: ComponentContext, params?: any | null): SubComponent[] | null;
    get firstWaypointApproachMismatched(): boolean;
    insertValidFirstWaypoint(): void;
    approachDestinationOffsetUpdated(context: ComponentContext): void;
    resetApproachDestinationOffset(context: ComponentContext): void;
    addWaypoint(waypoint: PathComponentWaypoint, context?: ComponentContext | null): PathComponentWaypoint;
    get markersCombined(): PathComponentMarker[];
    markerCoordinates(context: ComponentContext): GeoCoordinate[] | null;
    addMarker(marker: PathComponentMarker): PathComponentMarker;
    orderMarkers(): void;
    markersResolved(context: ComponentContext, path?: Path | null): PathComponentModelMarkerResolved[];
    path(context: ComponentContext): Path | null;
    alignment(context: ComponentContext): ApproachableAlignment | null;
    endSpatial(context: ComponentContext): GeoSpatial | null;
    estimate(context: ComponentEstimateContext, start: GeoSpatial): ComponentEstimate;
    cachedData(context: ComponentExecuteContext): PathComponentModelData | null;
    engaging(context: ComponentExecuteContext, start: GeoSpatial): GeoSpatial[] | null;
    execute(context: ComponentExecuteContext): ComponentExecutionState;
    reengagementDroneSpatial(context: ComponentExecuteContext): GeoSpatial | null;
    model(context: ComponentContext, positionOnly?: boolean, alignmentOrientationOnly?: boolean): PathComponentModel | null;
    modelParameters(context: ComponentContext, positionOnly?: boolean): PathComponentModelParameters | null;
}
export declare class PathComponentModelData extends DroneMotionComponentModelData<PathComponentModelSample> {
    parameters: PathComponentModelParameters;
    constructor(modelSample: LinkedValue<PathComponentModelSample>, parameters: PathComponentModelParameters);
}
