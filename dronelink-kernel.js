var Dronelink=function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=222)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.ATL="atl",e.AGL="agl",e.MSL="msl"}(t.AltitudeSystem||(t.AltitudeSystem={})),function(e){e._3="3",e._5="5",e._7="7",e.Unknown="unknown"}(t.CameraAEBCount||(t.CameraAEBCount={})),function(e){e.F1dot6="f/1dot6",e.F1dot7="f/1dot7",e.F1dot8="f/1dot8",e.F2="f/2",e.F2dot2="f/2dot2",e.F2dot4="f/2dot4",e.F2dot5="f/2dot5",e.F2dot6="f/2dot6",e.F2dot8="f/2dot8",e.F3dot2="f/3dot2",e.F3dot4="f/3dot4",e.F3dot5="f/3dot5",e.F4="f/4",e.F4dot5="f/4dot5",e.F4dot8="f/4dot8",e.F5="f/5",e.F5dot6="f/5dot6",e.F6dot3="f/6dot3",e.F6dot8="f/6dot8",e.F7dot1="f/7dot1",e.F8="f/8",e.F9="f/9",e.F9dot5="f/9dot5",e.F9dot6="f/9dot6",e.F10="f/10",e.F11="f/11",e.F13="f/13",e.F14="f/14",e.F16="f/16",e.F18="f/18",e.F19="f/19",e.F20="f/20",e.F22="f/22",e.Unknown="unknown"}(t.CameraAperture||(t.CameraAperture={})),function(e){e.None="none",e.Art="art",e.BlackAndWhite="blackAndWhite",e.Bright="bright",e.DCinelike="dCinelike",e.Portrait="portrait",e.M31="m31",e.KDX="kDX",e.Prismo="prismo",e.Jugo="jugo",e.DLog="dLog",e.TrueColor="trueColor",e.Inverse="inverse",e.Reminiscence="reminiscence",e.Solarize="solarize",e.Posterize="posterize",e.Whiteboard="whiteboard",e.Blackboard="blackboard",e.Aqua="aqua",e.Delta="delta",e.DK79="dk79",e.Vision4="vision4",e.Vision6="vision6",e.TrueColorExt="trueColorExt",e.FilmA="filmA",e.FilmB="filmB",e.FilmC="filmC",e.FilmD="filmD",e.FilmE="filmE",e.FilmF="filmF",e.FilmG="filmG",e.FilmH="filmH",e.FilmI="filmI",e.HLG="hlg",e.Unknown="unknown"}(t.CameraColor||(t.CameraColor={})),function(e){e.N50="n50",e.N47="n47",e.N43="n43",e.N40="n40",e.N37="n37",e.N33="n33",e.N30="n30",e.N27="n27",e.N23="n23",e.N20="n20",e.N17="n17",e.N13="n13",e.N10="n10",e.N07="n07",e.N03="n03",e.N00="n00",e.P03="p03",e.P07="p07",e.P10="p10",e.P13="p13",e.P17="p17",e.P20="p20",e.P23="p23",e.P27="p27",e.P30="p30",e.P33="p33",e.P37="p37",e.P40="p40",e.P43="p43",e.P47="p47",e.P50="p50",e.Fixed="fixed",e.Unknown="unknown"}(t.CameraExposureCompensation||(t.CameraExposureCompensation={})),function(e){e.Program="program",e.ShutterPriority="shutterPriority",e.AperturePriority="aperturePriority",e.Manual="manual",e.Unknown="unknown"}(t.CameraExposureMode||(t.CameraExposureMode={})),function(e){e.Reset="reset",e.Sequence="sequence",e.Unknown="unknown"}(t.CameraFileIndexMode||(t.CameraFileIndexMode={})),function(e){e.Manual="manual",e.Auto="auto",e.AutoContinuous="autoContinuous",e.Unknown="unknown"}(t.CameraFocusMode||(t.CameraFocusMode={})),function(e){e.Auto="auto",e._100="100",e._200="200",e._400="400",e._800="800",e._1600="1600",e._3200="3200",e._6400="6400",e._12800="12800",e._25600="25600",e.Fixed="fixed",e.Unknown="unknown"}(t.CameraISO||(t.CameraISO={})),function(e){e.Photo="photo",e.Video="video",e.Playback="playback",e.Download="download",e.Broadcast="broadcast",e.Unknown="unknown"}(t.CameraMode||(t.CameraMode={})),function(e){e._4_3="4:3",e._16_9="16:9",e._3_2="3:2",e.Unknown="unknown"}(t.CameraPhotoAspectRatio||(t.CameraPhotoAspectRatio={})),function(e){e.RAW="raw",e.JPEG="jpeg",e.RAWAndJPEG="raw+jpeg",e.TIFF14Bit="tiff14bit",e.RadiometricJPEG="radiometricJpeg",e.TIFF14BitLinearLowTempResolution="tiff14bitLinearLowTempResolution",e.TIFF14BitLinearHighTempResolution="tiff14bitLinearHighTempResolution",e.Unknown="unknown"}(t.CameraPhotoFileFormat||(t.CameraPhotoFileFormat={})),function(e){e.Single="single",e.Interval="interval",e.AEB="aeb",e.HDR="hdr",e.EHDR="ehdr",e.Burst="burst",e.RAWBurst="rawBurst",e.ShallowFocus="shallowFocus",e.Panorama="panorama",e.HyperLight="hyperLight",e.TimeLapse="timeLapse",e.Unknown="unknown"}(t.CameraPhotoMode||(t.CameraPhotoMode={})),function(e){e._1_8000="1/8000",e._1_6400="1/6400",e._1_6000="1/6000",e._1_5000="1/5000",e._1_4000="1/4000",e._1_3200="1/3200",e._1_3000="1/3000",e._1_2500="1/2500",e._1_2000="1/2000",e._1_1600="1/1600",e._1_1500="1/1500",e._1_1250="1/1250",e._1_1000="1/1000",e._1_800="1/800",e._1_750="1/750",e._1_725="1/725",e._1_640="1/640",e._1_500="1/500",e._1_400="1/400",e._1_350="1/350",e._1_320="1/320",e._1_250="1/250",e._1_240="1/240",e._1_200="1/200",e._1_180="1/180",e._1_160="1/160",e._1_125="1/125",e._1_120="1/120",e._1_100="1/100",e._1_90="1/90",e._1_80="1/80",e._1_60="1/60",e._1_50="1/50",e._1_45="1/45",e._1_40="1/40",e._1_30="1/30",e._1_25="1/25",e._1_20="1/20",e._1_15="1/15",e._1_12dot5="1/12dot5",e._1_10="1/10",e._1_8="1/8",e._1_6dot25="1/6dot25",e._1_6="1/6",e._1_5="1/5",e._1_4="1/4",e._1_3="1/3",e._1_2dot5="1/2dot5",e._0dot3="0dot3",e._1_2="1/2",e._1_1dot67="1/1dot67",e._1_1dot25="1/1dot25",e._0dot7="0dot7",e._1="1",e._1dot3="1dot3",e._1dot4="1dot4",e._1dot6="1dot6",e._2="2",e._2dot5="2dot5",e._3="3",e._3dot2="3dot2",e._4="4",e._5="5",e._6="6",e._7="7",e._8="8",e._9="9",e._10="10",e._11="11",e._13="13",e._15="15",e._16="16",e._20="20",e._23="23",e._25="25",e._30="30",e.Unknown="unknown"}(t.CameraShutterSpeed||(t.CameraShutterSpeed={})),function(e){e.SDCard="sdCard",e.Internal="internal",e.Unknown="unknown"}(t.CameraStorageLocation||(t.CameraStorageLocation={})),function(e){e.H264="h264",e.H265="h265",e.Unknown="unknown"}(t.CameraVideoFileCompressionStandard||(t.CameraVideoFileCompressionStandard={})),function(e){e.MOV="mov",e.MP4="mp4",e.TIFFSequence="tiffSequence",e.SEQ="seq",e.Unknown="unknown"}(t.CameraVideoFileFormat||(t.CameraVideoFileFormat={})),function(e){e.Default="default",e.Narrow="narrow",e.Wide="wide",e.Unknown="unknown"}(t.CameraVideoFieldOfView||(t.CameraVideoFieldOfView={})),function(e){e._23dot976="23dot976",e._24="24",e._25="25",e._29dot970="29dot970",e._30="30",e._47dot950="47dot950",e._48="48",e._50="50",e._59dot940="59dot940",e._60="60",e._90="90",e._96="96",e._100="100",e._120="120",e._8dot7="8dot7",e.Unknown="unknown"}(t.CameraVideoFrameRate||(t.CameraVideoFrameRate={})),function(e){e._336x256="336x256",e._640x360="640x360",e._640x480="640x480",e._640x512="640x512",e._1280x720="1280x720",e._1920x1080="1920x1080",e._2048x1080="2048x1080",e._2688x1512="2688x1512",e._2704x1520="2704x1520",e._2720x1530="2720x1530",e._3712x2088="3712x2088",e._3840x1572="3840x1572",e._3840x2160="3840x2160",e._3944x2088="3944x2088",e._4096x2160="4096x2160",e._4608x2160="4608x2160",e._4608x2592="4608x2592",e._5280x2160="5280x2160",e._5280x2972="5280x2972",e._5760x3240="5760x3240",e._6016x3200="6016x3200",e.Max="max",e.NoSSDVideo="noSSDVideo",e.Unknown="unknown"}(t.CameraVideoResolution||(t.CameraVideoResolution={})),function(e){e.PAL="pal",e.NTSC="ntsc",e.Unknown="unknown"}(t.CameraVideoStandard||(t.CameraVideoStandard={})),function(e){e.Auto="auto",e.Sunny="sunny",e.Cloudy="cloudy",e.WaterSurface="waterSurface",e.IndoorIncandescent="indoorIncandescent",e.IndoorFluorescent="indoorFluorescent",e.Custom="custom",e.Neutral="neutral",e.Unknown="unknown"}(t.CameraWhiteBalancePreset||(t.CameraWhiteBalancePreset={})),function(e){e.Pending="pending",e.Queued="queued",e.Executing="executing",e.Succeeded="succeeded",e.Failed="failed"}(t.CommandExecutionStatus||(t.CommandExecutionStatus={})),function(e){e.Never="never",e.Approach="approach",e.Destination="destination"}(t.CommandReengagementTiming||(t.CommandReengagementTiming={})),function(e){e.Pending="pending",e.Executing="executing",e.Succeeded="succeeded",e.Failed="failed"}(t.ComponentExecutionStatus||(t.ComponentExecutionStatus={})),function(e){e.Safely="safely",e.PointToPoint="pointToPoint"}(t.DJIWaypointMissionGotoWaypointMode||(t.DJIWaypointMissionGotoWaypointMode={})),function(e){e.Auto="auto",e.UsingInitialDirection="usingInitialDirection",e.ControlledByRemoteController="controlledByRemoteController",e.UsingWaypointHeading="usingWaypointHeading",e.TowardPointOfInterest="towardPointOfInterest"}(t.DJIWaypointMissionHeadingMode||(t.DJIWaypointMissionHeadingMode={})),function(e){e.Normal="normal",e.Curved="curved"}(t.DJIWaypointMissionFlightPathMode||(t.DJIWaypointMissionFlightPathMode={})),function(e){e.Clockwise="clockwise",e.DJIWaypointTurnCounterClockwise="counterClockwise"}(t.DJIWaypointTurnMode||(t.DJIWaypointTurnMode={})),function(e){e.Stay="stay",e.ShootPhoto="shootPhoto",e.StartRecord="startRecord",e.StopRecord="stopRecord",e.RotateAircraft="rotateAircraft",e.RotateGimbalPitch="rotateGimbalPitch"}(t.DJIWaypointMissionComponentWaypointActionType||(t.DJIWaypointMissionComponentWaypointActionType={})),function(e){e.Hover="hover",e.ReturnHome="returnHome",e.AutoLand="autoLand",e.Unknown="unknown"}(t.DroneConnectionFailSafeBehavior||(t.DroneConnectionFailSafeBehavior={})),function(e){e.Auto="auto",e.Manual="manual",e.Unknown="unknown"}(t.DroneLightbridgeChannelSelectionMode||(t.DroneLightbridgeChannelSelectionMode={})),function(e){e._2dot4ghz="2dot4ghz",e._5dot7ghz="5dot7ghz",e._5dot8ghz="5dot8ghz",e.Unknown="unknown"}(t.DroneLightbridgeFrequencyBand||(t.DroneLightbridgeFrequencyBand={})),function(e){e.Auto="auto",e.Manual="manual",e.Unknown="unknown"}(t.DroneOcuSyncChannelSelectionMode||(t.DroneOcuSyncChannelSelectionMode={})),function(e){e._2dot4ghz="2dot4ghz",e._5dot8ghz="5dot8ghz",e.Dual="dual",e.Unknown="unknown"}(t.DroneOcuSyncFrequencyBand||(t.DroneOcuSyncFrequencyBand={})),function(e){e.LineLeft="lineLeft",e.LineRight="lineRight",e.PolygonLeft="polygonLeft",e.PolygonRight="polygonRight",e.CircleClockwise="circleClockwise",e.CircleCounterclockwise="circleCounterclockwise",e.SpiralClockwise="spiralClockwise",e.SpiralCounterclockwise="spiralCounterclockwise"}(t.FacadeBoundaryFace||(t.FacadeBoundaryFace={})),function(e){e.Time="time",e.Distance="distance"}(t.FacadeCapturePriority||(t.FacadeCapturePriority={})),function(e){e.Horizontal="horizontal",e.Vertical="vertical"}(t.FacadePattern||(t.FacadePattern={})),function(e){e.Input="input",e.Plan="plan",e.Device="device",e.Drone="drone"}(t.GeoSpatialSource||(t.GeoSpatialSource={})),function(e){e.Free="free",e.FPV="fpv",e.YawFollow="yawFollow",e.Unknown="unknown"}(t.GimbalMode||(t.GimbalMode={})),function(e){e.None="none",e.Linear="linear",e.Sigmoid="sigmoid"}(t.InterpolationFunction||(t.InterpolationFunction={})),function(e){e.Distance="distance",e.VelocityHorizontal="velocityHorizontal",e.VelocityVertical="velocityVertical",e.VelocityRotational="velocityRotational",e.AccelerationHorizontal="accelerationHorizontal",e.AccelerationVertical="accelerationVertical",e.AccelerationRotational="accelerationRotational",e.Angle="angle",e.AngleMod="angleMod",e.Percent="percent"}(t.MeasurementType||(t.MeasurementType={})),function(e){e.Info="info",e.Warning="warning",e.Danger="danger",e.Error="error"}(t.MessageLevel||(t.MessageLevel={})),function(e){e.Normal="normal",e.Grid="grid"}(t.MapPattern||(t.MapPattern={})),function(e){e.Horizon="horizon",e.Path="path"}(t.OrientationXReference||(t.OrientationXReference={})),function(e){e.North="north",e.Course="course",e.Heading="heading",e.Path="path"}(t.OrientationZReference||(t.OrientationZReference={})),function(e){e.Clockwise="clockwise",e.Counterclockwise="counterclockwise"}(t.OrbitDirection||(t.OrbitDirection={})),function(e){e.Intersect="intersect",e.Rounded="rounded"}(t.PathCornering||(t.PathCornering={})),function(e){e.Absolute="absolute",e.Coordinate="coordinate"}(t.PathMarkerPositioning||(t.PathMarkerPositioning={})),function(e){e.None="none",e.ReturnHome="returnHome",e.AutoLand="autoLand"}(t.PlanCompleteAction||(t.PlanCompleteAction={})),function(e){e.Clockwise="clockwise",e.Counterclockwise="counterclockwise"}(t.RotationDirection||(t.RotationDirection={})),function(e){e.AEBCountCameraCommand="AEBCountCameraCommand",e.Altitude="Altitude",e.AltitudeRange="AltitudeRange",e.ApertureCameraCommand="ApertureCameraCommand",e.ApproachableComponent="ApproachableComponent",e.Asset="Asset",e.AssetManifest="AssetManifest",e.AssetSource="AssetSource",e.AutoExposureLockCameraCommand="AutoExposureLockCameraCommand",e.Camera="Camera",e.CameraFile="CameraFile",e.CameraImageSpecification="CameraImageSpecification",e.CameraLensSpecification="CameraLensSpecification",e.CameraSensorSpecification="CameraSensorSpecification",e.CameraCommand="CameraCommand",e.CameraSpecification="CameraSpecification",e.ColorCameraCommand="ColorCameraCommand",e.CommandComponent="CommandComponent",e.CommandExecutionState="CommandExecutionState",e.Component="Component",e.ComponentExecutionState="ComponentExecutionState",e.ComponentSource="ComponentSource",e.ConnectionFailSafeBehaviorDroneCommand="ConnectionFailSafeBehaviorDroneCommand",e.ContrastCameraCommand="ContrastCameraCommand",e.CourseComponent="CourseComponent",e.Datetime="Datetime",e.Descriptors="Descriptors",e.Disengagement="Disengagement",e.DestinationComponent="DestinationComponent",e.DistanceTolerance="DistanceTolerance",e.Device="Device",e.DJIWaypointMissionComponent="DJIWaypointMissionComponent",e.DJIWaypointMissionComponentWaypoint="DJIWaypointMissionComponentWaypoint",e.DJIWaypointMissionComponentWaypointAction="DJIWaypointMissionComponentWaypointAction",e.DJIWaypointMissionComponentWaypointActionType="DJIWaypointMissionComponentWaypointActionType",e.Drone="Drone",e.DroneCommand="DroneCommand",e.DroneMotionComponent="DroneMotionComponent",e.Engagement="Engagement",e.Execution="Execution",e.ExposureCompensationCameraCommand="ExposureCompensationCameraCommand",e.ExposureCompensationStepCameraCommand="ExposureCompensationStepCameraCommand",e.ExposureModeCameraCommand="ExposureModeCameraCommand",e.FacadeComponent="FacadeComponent",e.FacadeComponentBoundaryPoint="FacadeComponentBoundaryPoint",e.FacadeComponentModelSample="FacadeComponentModelSample",e.FocusCameraCommand="FocusCameraCommand",e.FocusModeCameraCommand="FocusModeCameraCommand",e.FieldOfView="FieldOfView",e.FileIndexModeCameraCommand="FileIndexModeCameraCommand",e.Func="Func",e.FuncInput="FuncInput",e.GeoCoordinate="GeoCoordinate",e.GeoLocation="GeoLocation",e.GeoReferencedOffset="GeoReferencedOffset",e.GeoSpatial="GeoSpatial",e.Gimbal="Gimbal",e.GimbalCommand="GimbalCommand",e.HeadingDroneCommand="HeadingDroneCommand",e.HeadingComponent="HeadingComponent",e.Interpolation="Interpolation",e.ISOCameraCommand="ISOCameraCommand",e.LandingGearAutomaticMovementDroneCommand="LandingGearAutomaticMovementDroneCommand",e.LandingGearDeployDroneCommand="LandingGearDeployDroneCommand",e.LandingGearRetractDroneCommand="LandingGearRetractDroneCommand",e.LightbridgeChannelDroneCommand="LightbridgeChannelDroneCommand",e.LightbridgeChannelSelectionModeDroneCommand="LightbridgeChannelSelectionModeDroneCommand",e.LightbridgeFrequencyBandDroneCommand="LightbridgeFrequencyBandDroneCommand",e.Limits="Limits",e.Line2="Line2",e.ListComponent="ListComponent",e.LowBatteryWarningThresholdDroneCommand="LowBatteryWarningThresholdDroneCommand",e.MapComponent="MapComponent",e.MapComponentBoundaryPoint="MapComponentBoundaryPoint",e.MaxAltitudeDroneCommand="MaxAltitudeDroneCommand",e.MaxDistanceDroneCommand="MaxDistanceDroneCommand",e.Message="Message",e.MessageGroup="MessageGroup",e.Mission="Mission",e.ModeCameraCommand="ModeCameraCommand",e.ModeGimbalCommand="ModeGimbalCommand",e.MotionLimits="MotionLimits",e.MotionLimitsOptional="MotionLimitsOptional",e.MotionLimits3="MotionLimits3",e.MotionLimits3Optional="MotionLimits3Optional",e.MotionLimits6="MotionLimits6",e.MotionLimits6Optional="MotionLimits6Optional",e.OcuSyncChannelDroneCommand="OcuSyncChannelDroneCommand",e.OcuSyncChannelSelectionModeDroneCommand="OcuSyncChannelSelectionModeDroneCommand",e.OcuSyncFrequencyBandDroneCommand="OcuSyncFrequencyBandDroneCommand",e.OrbitComponent="OrbitComponent",e.Orientation3="Orientation3",e.Orientation3Optional="Orientation3Optional",e.OrientationGimbalCommand="OrientationGimbalCommand",e.PhotoAspectRatioCameraCommand="PhotoAspectRatioCameraCommand",e.PhotoIntervalCameraCommand="PhotoIntervalCameraCommand",e.PhotoModeCameraCommand="PhotoModeCameraCommand",e.PointOfInterest="PointOfInterest",e.Position3="Position3",e.PathComponent="PathComponent",e.PathComponentWaypoint="PathComponentWaypoint",e.PathComponentMarker="PathComponentMarker",e.PathComponentModelSample="PathComponentModelSample",e.PlanComponent="PlanComponent",e.PhotoFileFormatCameraCommand="PhotoFileFormatCameraCommand",e.Point2="Point2",e.ReturnHomeAltitudeDroneCommand="ReturnHomeAltitudeDroneCommand",e.RotationComponent="RotationComponent",e.SaturationCameraCommand="SaturationCameraCommand",e.SharpnessCameraCommand="SharpnessCameraCommand",e.ShutterSpeedCameraCommand="ShutterSpeedCameraCommand",e.SourcedGeoSpatial="SourcedGeoSpatial",e.StorageLocationCameraCommand="StorageLocationCameraCommand",e.StartCaptureCameraCommand="StartCaptureCameraCommand",e.StopCaptureCameraCommand="StopCaptureCameraCommand",e.SubComponent="SubComponent",e.Timeline="Timeline",e.TimelineCameraCapture="TimelineCameraCapture",e.TimelineCommand="TimelineCommand",e.TimelineFrame="TimelineFrame",e.User="User",e.Variable="Variable",e.Vector2="Vector2",e.Velocity3="Velocity3",e.Velocity6="Velocity6",e.VelocityDroneCommand="VelocityDroneCommand",e.VelocityGimbalCommand="VelocityGimbalCommand",e.VideoFileCompressionStandardCameraCommand="VideoFileCompressionStandardCameraCommand",e.VideoFileFormatCameraCommand="VideoFileFormatCameraCommand",e.VideoResolutionFrameRateCameraCommand="VideoResolutionFrameRateCameraCommand",e.VideoStandardCameraCommand="VideoStandardCameraCommand",e.WaitComponent="WaitComponent",e.WhiteBalancePresetCameraCommand="WhiteBalancePresetCameraCommand",e.WhiteBalanceCustomCameraCommand="WhiteBalanceCustomCameraCommand"}(t.TypeName||(t.TypeName={})),function(e){e.Metric="metric",e.Imperial="imperial"}(t.UnitSystem||(t.UnitSystem={})),function(e){e.Drone="Drone",e.Boolean="boolean",e.Number="number",e.String="string"}(t.VariableValueType||(t.VariableValueType={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3);class o{static sleep(e){return new Promise(t=>setTimeout(t,e))}static uuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}static parseBoolean(e,t=!1){return null==e?t:!0===e}static parseFloat(e,t=0){const n=parseFloat(e);return Number.isNaN(n)?t:n}static parseInt(e,t=0){const n=parseInt(e);return Number.isNaN(n)?t:n}static parseString(e,t=null){return null==e||"string"!=typeof e?t:e}static sigmoidBase(e,t){return 1/(1+Math.exp(-t*e))-.5}static sigmoid(e,t=Math.E){return.5/o.sigmoidBase(1,t)*o.sigmoidBase(2*Math.max(Math.min(e,1),0)-1,t)+.5}static modSafe(e,t){return(e%t+t)%t}static matchSign(e,t){return t<0?-1*e:e}static movingAverage(e,t=1){const n=t/(e.length+1);return e.reduce((e,t)=>t*n+e*(1-n),0)}static debugLog(e){const t=new Date;console.debug(`[${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()} ${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}:${t.getMilliseconds()}] ${e}`)}static last(e){return e[e.length-1]}static lastSafe(e){return e.length>0?o.last(e):null}static remove(e,t){return e.filter(e=>e!==t&&(!t.id||!e.id||t.id!==e.id))}static joinNotEmpty(e,t=i.Strings.Common.delimeter){return e.filter(e=>e).join(t)}static descendantsMatching(e,t){if(!e)return[];const n=[];return t(e)&&n.push(e),Array.isArray(e)?n.push(...o.descendantsMatchingIterable(e,t)):e instanceof Object&&n.push(...o.descendantsMatchingIterable(Object.keys(e).map(t=>e[t]),t)),n}static descendantsMatchingIterable(e,t){if(!e||0===e.length)return[];const n=[];return e.forEach(e=>{n.push(...o.descendantsMatching(e,t))}),n.length>0?n:[]}}t.Common=o},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),r=n(3),a=i(n(150)),s=n(19),u=n(1);class l{static string(e){return r.Strings.getString(e,r.Strings.getLanguage(),!0)}static velocityHorizontal(e=0){switch(Math.abs(e)<.1&&(e=0),l.UnitSystem){case o.UnitSystem.Metric:return new c(l.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:r.Strings.Unit.values.kilometersPerHour.name,abbreviation:r.Strings.Unit.values.kilometersPerHour.abbreviation});case o.UnitSystem.Imperial:return new c(l.number(s.Convert.metersPerSecondToMilesPerHour(e)),{name:r.Strings.Unit.values.milesPerHour.name,abbreviation:r.Strings.Unit.values.milesPerHour.abbreviation})}}static velocityVertical(e=0){switch(Math.abs(e)<.1&&(e=0),l.UnitSystem){case o.UnitSystem.Metric:return new c(l.number(e),{name:r.Strings.Unit.values.metersPerSecond.name,abbreviation:r.Strings.Unit.values.metersPerSecond.abbreviation});case o.UnitSystem.Imperial:return new c(l.number(s.Convert.metersToFeet(e)),{name:r.Strings.Unit.values.feetPerSecond.name,abbreviation:r.Strings.Unit.values.feetPerSecond.abbreviation})}}static velocityRotational(e=0){return new c(l.angle(e,!1).value,{name:r.Strings.Unit.values.degreesPerSecond.name,abbreviation:r.Strings.Unit.values.degreesPerSecond.abbreviation})}static accelerationHorizontal(e=0){return new c(l.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:r.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:r.Strings.Unit.values.metersPerSecondSquared.abbreviation})}static accelerationVertical(e=0){return l.accelerationHorizontal(e)}static accelerationRotational(e=0){return new c(l.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:r.Strings.Unit.values.degreesPerSecondSquared.name,abbreviation:r.Strings.Unit.values.degreesPerSecondSquared.abbreviation})}static timeElapsed(e=0){if(e>0&&e<1)return a.default(e).format("0.00");const t=l.time(e),n=[];return"0"!==t.hours.value&&n.push(t.hours.value),n.push(t.minutes.value.length<2?"0"+t.minutes.value:t.minutes.value),n.push(t.seconds.value.length<2?"0"+t.seconds.value:t.seconds.value),n.join(":")}static time(e=0){const t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return{hours:new c(String(t),{name:r.Strings.Unit.values.hours.name,abbreviation:r.Strings.Unit.values.hours.abbreviation}),minutes:new c(String(n),{name:r.Strings.Unit.values.minutes.name,abbreviation:r.Strings.Unit.values.minutes.abbreviation}),seconds:new c(String(i),{name:r.Strings.Unit.values.seconds.name,abbreviation:r.Strings.Unit.values.seconds.abbreviation})}}static distance(e=0){switch(Math.abs(e)<.1&&(e=0),l.UnitSystem){case o.UnitSystem.Metric:return e>1e3?new c(l.number(e/1e3),{name:r.Strings.Unit.values.kilometers.name,abbreviation:r.Strings.Unit.values.kilometers.abbreviation}):new c(l.number(e),{name:r.Strings.Unit.values.meters.name,abbreviation:r.Strings.Unit.values.meters.abbreviation});case o.UnitSystem.Imperial:return e>1609.34?new c(l.number(e/1609.34),{name:r.Strings.Unit.values.miles.name,abbreviation:r.Strings.Unit.values.miles.abbreviation}):new c(l.number(s.Convert.metersToFeet(e)),{name:r.Strings.Unit.values.feet.name,abbreviation:r.Strings.Unit.values.feet.abbreviation})}}static altitude(e=0){switch(Math.abs(e)<.1&&(e=0),l.UnitSystem){case o.UnitSystem.Metric:return new c(l.number(e),{name:r.Strings.Unit.values.meters.name,abbreviation:r.Strings.Unit.values.meters.abbreviation});case o.UnitSystem.Imperial:return new c(l.number(s.Convert.metersToFeet(e)),{name:r.Strings.Unit.values.feet.name,abbreviation:r.Strings.Unit.values.feet.abbreviation})}}static angle(e=0,t=!0){if(Math.abs(e)<.01&&(e=0),t){if(e>2*Math.PI)return l.angle(e-2*Math.PI,t);if(e<0)return l.angle(e+2*Math.PI,t)}return new c(a.default(Math.round(s.Convert.radiansToDegrees(e))).format("0,0"),{name:r.Strings.Unit.values.degrees.name,abbreviation:r.Strings.Unit.values.degrees.abbreviation},"")}static area(e=0){switch(l.UnitSystem){case o.UnitSystem.Metric:return new c(a.default(s.Convert.squareMetersToHectares(e)).format("0,0.0"),{name:r.Strings.Unit.values.hectare.name,abbreviation:r.Strings.Unit.values.hectare.abbreviation});case o.UnitSystem.Imperial:return new c(a.default(s.Convert.squareMetersToAcres(e)).format("0,0.0"),{name:r.Strings.Unit.values.acres.name,abbreviation:r.Strings.Unit.values.acres.abbreviation})}}static cameraSpecificationLength(e=0){return new c(a.default(e).format(Math.round(e)===e?"0,0":"0,0.0"),{name:r.Strings.Unit.values.millimeters.name,abbreviation:r.Strings.Unit.values.millimeters.abbreviation})}static cameraSpecificationPixels(e=0){return new c(a.default(Math.round(e)).format("0,0"),{name:r.Strings.Unit.values.pixels.name,abbreviation:r.Strings.Unit.values.pixels.abbreviation})}static groundSampleDistance(e){const t=Math.max(e.width,e.height);switch(l.UnitSystem){case o.UnitSystem.Metric:return new c(a.default(100*t).format("0,0.00"),{name:r.Strings.Unit.values.centimetersPerPixel.name,abbreviation:r.Strings.Unit.values.centimetersPerPixel.abbreviation});case o.UnitSystem.Imperial:return new c(a.default(s.Convert.metersToInches(t)).format("0,0.00"),{name:r.Strings.Unit.values.inchesPerPixel.name,abbreviation:r.Strings.Unit.values.inchesPerPixel.abbreviation})}}static groundSampleDistanceCombined(e){const t=Math.max(e.width,e.height),n=new c(a.default(s.Convert.metersToInches(t)).format("0,0.00"),{name:r.Strings.Unit.values.inchesPerPixel.name,abbreviation:r.Strings.Unit.values.inchesPerPixel.abbreviation}).toString(),i=new c(a.default(100*t).format("0,0.00"),{name:r.Strings.Unit.values.centimetersPerPixel.name,abbreviation:r.Strings.Unit.values.centimetersPerPixel.abbreviation}).toString();switch(l.UnitSystem){case o.UnitSystem.Metric:return u.Common.joinNotEmpty([i,n]);case o.UnitSystem.Imperial:return u.Common.joinNotEmpty([n,i])}}static absoluteTemperature(e=0){return`${l.integer(e)} ${r.Strings.Unit.values.kelvin.abbreviation}`}static percent(e=0){return new c(a.default(100*e).format(e<.01?"0,0.0":"0,0"),{name:r.Strings.Unit.values.percent.name,abbreviation:r.Strings.Unit.values.percent.abbreviation},"")}static number(e){return Math.abs(e)<10?Math.abs(e)<.01?"0":a.default(e).format("0,0.0"):l.integer(e)}static integer(e,t=null){const n=a.default(Math.round(e)).format("0,0");return t?1===Math.abs(e)?`${n} ${t.singular}`:`${n} ${t.plural}`:n}static degreesMinutesAndSeconds(e){const t=Math.abs(e),n=Math.floor(t),i=60*(t-n),o=Math.floor(i),a=Math.floor(60*(i-o));return n+r.Strings.Unit.values.degrees.abbreviation+o+r.Strings.Unit.values.geoMinutes.abbreviation+a+r.Strings.Unit.values.geoSeconds.abbreviation}static geoCoordinate(e){const t=Math.sign(e.latitude)>=0?{name:r.Strings.Unit.values.geoNorth.name,abbreviation:r.Strings.Unit.values.geoNorth.abbreviation}:{name:r.Strings.Unit.values.geoSouth.name,abbreviation:r.Strings.Unit.values.geoSouth.abbreviation},n=Math.sign(e.longitude)>=0?{name:r.Strings.Unit.values.geoEast.name,abbreviation:r.Strings.Unit.values.geoEast.abbreviation}:{name:r.Strings.Unit.values.geoWest.name,abbreviation:r.Strings.Unit.values.geoWest.abbreviation};return{latitude:new c(l.degreesMinutesAndSeconds(e.latitude),t),longitude:new c(l.degreesMinutesAndSeconds(e.longitude),n)}}static enum(e,t,n=!1){return l.string(`${e}.values.${t}.${n?"abbreviation":"name"}`)}static fileSize(e,t=2){if(0===e)return new c("0",r.Strings.Unit.values.bytes);const n=t<0?0:t,i=[r.Strings.Unit.values.bytes,r.Strings.Unit.values.kilobytes,r.Strings.Unit.values.megabytes,r.Strings.Unit.values.gigabytes],o=Math.floor(Math.log(e)/Math.log(1024));return new c(String((e/Math.pow(1024,o)).toFixed(n)),i[o])}static icaoWords(e){const t=[];if(e<0)return t;let n,i=e+1;for(;0!==i;){let e=i-1;i=Math.floor(e/l.icaoAlphabet.length),n=e%l.icaoAlphabet.length,t.push(l.icaoAlphabet[n])}return t.reverse()}static icaoLetters(e){return l.icaoWords(e).map(e=>e.charAt(0)).join("")}}t.Format=l,l.UnitSystem=o.UnitSystem.Imperial,l.icaoAlphabet=["Alfa","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett","Kilo","Lima","Mike","November","Oscar","Papa","Quebec","Romeo","Sierra","Tango","Uniform","Victor","Whiskey","Xray","Yankee","Zulu"];class c{constructor(e,t,n=" "){this.toString=(()=>`${this.value}${this.spacer}${this.unit.abbreviation}`),this.value=e,this.unit=t,this.spacer=n}}t.FormattedValue=c},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(223));t.Strings=new o.default({en:{Common:{delimeter:" | ",set:"Set",new:"New",yes:"Yes",no:"No",more:"More",enabled:"Enabled",disabled:"Disabled"},AchievableDroneMotionComponent:{values:{immediateComponent:"Immediate",immediateComponentTooltip:"The immediate component will be executed before this component is achieved.",achievedComponent:"Achieved",achievedComponentTooltip:"The achieved component will be executed after this component is achieved and after the immediate component is finished (if it exists)."},messages:{waiting:{title:"Waiting for Achievement"}}},AEBCountCameraCommand:{name:"Camera AEB Count",values:{aebCount:"AEB Count"}},Altitude:{name:"Altitude",values:{value:"Altitude",system:"Reference"}},AltitudeSystem:{name:"Altitude System",values:{atl:{name:"Takeoff Location",abbreviation:"ATL"},agl:{name:"Ground Level",abbreviation:"AGL"},msl:{name:"Mean Sea Level",abbreviation:"MSL"}}},AltitudeRange:{name:"Altitude Range",values:{altitude:"Target",range:"Range",rangeMin:"Below",rangeMax:"Above"}},ApertureCameraCommand:{name:"Camera Aperture",values:{aperture:"Aperture"}},ApproachableComponent:{name:"Approachable",values:{approachComponent:"Approach"},messages:{aligning:{title:"Aligning..."}}},Asset:{name:"Asset",multiple:"Assets"},AssetManifest:{name:"Asset Manifest"},AssetSource:{name:"Asset Source",values:{key:"Key"}},AutoExposureLockCameraCommand:{name:"Camera Auto Exposure Lock",values:{enabled:"Auto Exposure Lock"}},Battery:{name:"Battery",multiple:"Batteries"},Camera:{name:"Camera"},CameraAEBCount:{name:"Camera AEB Count",values:{3:{name:"3"},5:{name:"5"},7:{name:"7"},unknown:{name:"Unknown"}}},CameraAperture:{name:"Camera Aperture",values:{auto:{name:"Auto"},"f/1dot6":{name:"f/1.6"},"f/1dot7":{name:"f/1.7"},"f/1dot8":{name:"f/1.8"},"f/2":{name:"f/2"},"f/2dot2":{name:"f/2.2"},"f/2dot4":{name:"f/2.4"},"f/2dot5":{name:"f/2.5"},"f/2dot6":{name:"f/2.6"},"f/2dot8":{name:"f/2.8"},"f/3dot2":{name:"f/3.2"},"f/3dot4":{name:"f/3.4"},"f/3dot5":{name:"f/3.5"},"f/4":{name:"f/4"},"f/4dot5":{name:"f/4.5"},"f/4dot8":{name:"f/4.8"},"f/5":{name:"f/5"},"f/5dot6":{name:"f/5.6"},"f/6dot3":{name:"f/6.3"},"f/6dot8":{name:"f/6.8"},"f/7dot1":{name:"f/7.1"},"f/8":{name:"f/8"},"f/9":{name:"f/9"},"f/9dot5":{name:"f/9.5"},"f/9dot6":{name:"f/9.6"},"f/10":{name:"f/10"},"f/11":{name:"f/11"},"f/13":{name:"f/13"},"f/14":{name:"f/14"},"f/16":{name:"f/16"},"f/18":{name:"f/18"},"f/19":{name:"f/19"},"f/20":{name:"f/20"},"f/22":{name:"f/22"},unknown:{name:"Unknown"}}},CameraColor:{name:"Camera Color",values:{none:{name:"Normal"},art:{name:"Art"},blackAndWhite:{name:"Black and White"},bright:{name:"Bright"},dCinelike:{name:"D-Cinelike"},portrait:{name:"Portrait"},m31:{name:"M31"},kDX:{name:"kDX"},prismo:{name:"Prismo"},jugo:{name:"Jugo"},dLog:{name:"DLog-M"},trueColor:{name:"True Color"},inverse:{name:"Inverse"},reminiscence:{name:"Reminiscence"},solarize:{name:"Solarize"},posterize:{name:"Posterize"},whiteboard:{name:"Whiteboard"},blackboard:{name:"Blackboard"},aqua:{name:"Aqua"},delta:{name:"Delta"},dk79:{name:"DK79"},vision4:{name:"Vision 4"},vision6:{name:"Vision6"},trueColorExt:{name:"True Color Extend"},filmA:{name:"Film A"},filmB:{name:"Film B"},filmC:{name:"Film C"},filmD:{name:"Film D"},filmE:{name:"Film E"},filmF:{name:"Film F"},filmG:{name:"Film G"},filmH:{name:"Film H"},filmI:{name:"Film I"},hlg:{name:"HLG"},unknown:{name:"Unknown"}}},CameraLensSpecification:{name:"Lens",values:{focalLength:"Focal Length"}},CameraCommand:{name:"Camera Command",description:""},CameraExposureCompensation:{name:"Camera Exposure Compensation",values:{n50:{name:"-5.0ev"},n47:{name:"-4.7ev"},n43:{name:"-4.3ev"},n40:{name:"-4.0ev"},n37:{name:"-3.7ev"},n33:{name:"-3.3ev"},n30:{name:"-3.0ev"},n27:{name:"-2.7ev"},n23:{name:"-2.3ev"},n20:{name:"-2.0ev"},n17:{name:"-1.7ev"},n13:{name:"-1.3ev"},n10:{name:"-1.0ev"},n07:{name:"-0.7ev"},n03:{name:"-0.3ev"},n00:{name:"0.0ev"},p03:{name:"+0.3ev"},p07:{name:"+0.7ev"},p10:{name:"+1.0ev"},p13:{name:"+1.3ev"},p17:{name:"+1.7ev"},p20:{name:"+2.0ev"},p23:{name:"+2.3ev"},p27:{name:"+2.7ev"},p30:{name:"+3.0ev"},p33:{name:"+3.3ev"},p37:{name:"+3.7ev"},p40:{name:"+4.0ev"},p43:{name:"+4.3ev"},p47:{name:"+4.7ev"},p50:{name:"+5.0ev"},fixed:{name:"Fixed"},unknown:{name:"Unknown"}}},CameraExposureMode:{name:"Camera Exposure Mode",values:{program:{name:"Auto"},shutterPriority:{name:"Shutter Priority"},aperturePriority:{name:"Aperture Priority"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},CameraFile:{name:"File",multiple:"Files"},CameraFileIndexMode:{name:"Camera File Index Mode",values:{reset:{name:"Reset"},sequence:{name:"Sequence"},unknown:{name:"Unknown"}}},CameraFocusMode:{name:"Camera Focus Mode",values:{manual:{name:"Manual"},auto:{name:"Auto"},autoContinuous:{name:"Continuous AF"},unknown:{name:"Unknown"}}},CameraISO:{name:"Camera ISO",values:{auto:{name:"Auto"},100:{name:"100"},200:{name:"200"},400:{name:"400"},800:{name:"800"},1600:{name:"1600"},3200:{name:"3200"},6400:{name:"6400"},12800:{name:"12800"},25600:{name:"25600"},fixed:{name:"Fixed"},unknown:{name:"Unknown"}}},CameraMode:{name:"Camera Mode",values:{photo:{name:"Photo"},video:{name:"Video"},playback:{name:"Playback"},download:{name:"Download"},broadcast:{name:"Broadcast"},unknown:{name:"None"}}},CameraPhotoAspectRatio:{name:"Camera Photo Aspect Ratio",values:{"4:3":{name:"4:3"},"16:9":{name:"16:9"},"3:2":{name:"3:2"},unknown:{name:"Unknown"}}},CameraPhotoFileFormat:{name:"Camera Photo File Format",values:{raw:{name:"RAW"},jpeg:{name:"JPEG"},"raw+jpeg":{name:"RAW+JPEG"},tiff14bit:{name:"TIFF (14bit)"},radiometricJpeg:{name:"Radiometric JPEG"},tiff14bitLinearLowTempResolution:{name:"TIFF Linear Low"},tiff14bitLinearHighTempResolution:{name:"TIFF Linear High"},unknown:{name:"Unknown"}}},CameraPhotoMode:{name:"Camera Photo Type",values:{single:{name:"Single"},interval:{name:"Interval"},aeb:{name:"AEB"},hdr:{name:"HDR"},ehdr:{name:"eHDR"},burst:{name:"Burst"},rawBurst:{name:"RAW Burst"},shallowFocus:{name:"Shallow Focus"},panorama:{name:"Panorama"},hyperLight:{name:"Hyper Light"},timeLapse:{name:"Time Lapse"},unknown:{name:"Unknown"}}},CameraImageSpecification:{name:"Image",values:{width:"Width",height:"Height"}},CameraSensorSpecification:{name:"Sensor",values:{width:"Width",height:"Height"}},CameraSpecification:{models:{zenmuseX7:"Zenmuse X7",zenmuseX5S:"Zenmuse X5S",zenmuseX4S:"Zenmuse X4S",zenmuseX5R:"Zenmuse X5R",zenmuseX5:"Zenmuse X5",zenmuseX3:"Zenmuse X3",zenmuseZ30Min:"Zenmuse Z30 (min)",zenmuseZ30Max:"Zenmuse Z30 (max)",mavic2Pro:"Mavic 2 - Pro (Full FOV)",mavic2ProHQ:"Mavic 2 - Pro (HQ)",mavic2ZoomMin:"Mavic 2 - Zoom (min)",mavic2ZoomMax:"Mavic 2 - Zoom (max)",mavicAir:"Mavic - Air",mavicPro:"Mavic - Pro",mavicProPlatinum:"Mavic - Pro Platinum",phantom4Pro2_0:"Phantom 4 - Pro v2.0",phantom4Pro:"Phantom 4 - Pro",phantom4Advanced:"Phantom 4 - Advanced",phantom4:"Phantom 4",phantom3Pro:"Phantom 3 - Pro",phantom3Advanced:"Phantom 3 - Advanced",phantom3Standard:"Phantom 3 - Standard",spark:"Spark"}},CameraShutterSpeed:{name:"Camera Shutter Speed",values:{"1/8000":{name:"1/8000 s"},"1/6400":{name:"1/6400 s"},"1/6000":{name:"1/6000 s"},"1/5000":{name:"1/5000 s"},"1/4000":{name:"1/4000 s"},"1/3200":{name:"1/3200 s"},"1/3000":{name:"1/3000 s"},"1/2500":{name:"1/2500 s"},"1/2000":{name:"1/2000 s"},"1/1600":{name:"1/1600 s"},"1/1500":{name:"1/1500 s"},"1/1250":{name:"1/1250 s"},"1/1000":{name:"1/1000"},"1/800":{name:"1/800 s"},"1/750":{name:"1/750 s"},"1/725":{name:"1/725 s"},"1/640":{name:"1/640 s"},"1/500":{name:"1/500 s"},"1/400":{name:"1/400 s"},"1/350":{name:"1/350 s"},"1/320":{name:"1/320 s"},"1/250":{name:"1/250 s"},"1/240":{name:"1/240 s"},"1/200":{name:"1/200 s"},"1/180":{name:"1/180 s"},"1/160":{name:"1/160 s"},"1/125":{name:"1/125 s"},"1/120":{name:"1/120 s"},"1/100":{name:"1/100 s"},"1/90":{name:"1/90 s"},"1/80":{name:"1/80 s"},"1/60":{name:"1/60 s"},"1/50":{name:"1/50 s"},"1/45":{name:"1/45 s"},"1/40":{name:"1/40 s"},"1/30":{name:"1/30 s"},"1/25":{name:"1/25 s"},"1/20":{name:"1/20 s"},"1/15":{name:"1/15 s"},"1/12dot5":{name:"1/12.5 s"},"1/10":{name:"1/10 s"},"1/8":{name:"1/8 s"},"1/6dot25":{name:"1/6.25 s"},"1/6":{name:"1/6 s"},"1/5":{name:"1/5 s"},"1/4":{name:"1/4 s"},"1/3":{name:"1/3 s"},"1/2dot5":{name:"1/2.5 s"},"0dot3":{name:"0.3 s"},"1/2":{name:"1/2 s"},"1/1dot67":{name:"1/1.67 s"},"1/1dot25":{name:"1/1.25 s"},"0dot7":{name:"0.7 s"},1:{name:"1.0 s"},"1dot3":{name:"1.3 s"},"1dot4":{name:"1.4 s"},"1dot6":{name:"1.6 s"},2:{name:"2.0 s"},"2dot5":{name:"2.5 s"},3:{name:"3.0 s"},"3dot2":{name:"3.2 s"},4:{name:"4.0 s"},5:{name:"5.0 s"},6:{name:"6.0 s"},7:{name:"7.0 s"},8:{name:"8.0 s"},9:{name:"9.0 s"},10:{name:"10.0 s"},11:{name:"11.0 s"},13:{name:"13.0 s"},15:{name:"15.0 s"},16:{name:"16.0 s"},20:{name:"20.0 s"},23:{name:"23.0 s"},25:{name:"25.0 s"},30:{name:"30.0 s"},unknown:{name:"Unknown"}}},CameraStorageLocation:{name:"Camera Storage Location",values:{sdCard:{name:"SD Card"},internal:{name:"Internal"},unknown:{name:"Unknown"}}},CameraVideoFileCompressionStandard:{name:"Camera Video File Compression Standard",values:{h264:{name:"H.264"},h265:{name:"H.265"},unknown:{name:"Unknown"}}},CameraVideoFileFormat:{name:"Camera Video File Format",values:{mov:{name:"MOV"},mp4:{name:"MP4"},tiffSequence:{name:"TIFF Sequence"},seq:{name:"SEQ"},unknown:{name:"Unknown"}}},CameraVideoFieldOfView:{name:"Camera Video Field of View",values:{default:{name:"Default"},narrow:{name:"HQ (Narrow)"},wide:{name:"Full FOV (Wide)"},unknown:{name:"Unknown"}}},CameraVideoFrameRate:{name:"Camera Video Frame Rate",values:{"23dot976":{name:"23.976fps"},24:{name:"24fps"},25:{name:"25fps"},"29dot970":{name:"29.970fps"},30:{name:"30fps"},"47dot950":{name:"47.950fps"},48:{name:"48fps"},50:{name:"50fps"},"59dot940":{name:"59.940fps"},60:{name:"60fps"},90:{name:"90fps"},96:{name:"96fps"},100:{name:"100fps"},120:{name:"120fps"},"8dot7":{name:"8.7fps"},unknown:{name:"Unknown"}}},CameraVideoResolution:{name:"Camera Video Resolution",values:{"336x256":{name:"336x256"},"640x360":{name:"640x360"},"640x480":{name:"640x480"},"640x512":{name:"640x512"},"1280x720":{name:"1280x720"},"1920x1080":{name:"1920x1080"},"2048x1080":{name:"2048x1080"},"2688x1512":{name:"2688x1512"},"2704x1520":{name:"2704x1520"},"2720x1530":{name:"2720x1530"},"3712x2088":{name:"3712x2088"},"3840x1572":{name:"3840x1572"},"3840x2160":{name:"3840x2160"},"3944x2088":{name:"3944x2088"},"4096x2160":{name:"4096x2160"},"4608x2160":{name:"4608x2160"},"4608x2592":{name:"4608x2592"},"5280x2160":{name:"5280x2160"},"5280x2972":{name:"5280x2972"},"5760x3240":{name:"5760x3240"},"6016x3200":{name:"6016x3200"},max:{name:"Max"},noSSDVideo:{name:"No SSD Video"},unknown:{name:"Unknown"}}},CameraVideoStandard:{name:"Camera Video Standard",values:{pal:{name:"PAL"},ntsc:{name:"NTSC"},unknown:{name:"Unknown"}}},CameraWhiteBalancePreset:{name:"Camera White Balance Preset",values:{auto:{name:"Auto"},sunny:{name:"Sunny"},cloudy:{name:"Cloudy"},waterSurface:{name:"Water Surface"},indoorIncandescent:{name:"Indoor Incandescent"},indoorFluorescent:{name:"Indoor Fluorescent"},custom:{name:"Custom"},neutral:{name:"Neutral"},unknown:{name:"Unknown"}}},ColorCameraCommand:{name:"Camera Color",values:{color:"Color"}},Component:{name:"Component",multiple:"Components",verification:"Verification",values:{coordinate:"Reference",referenceOffsetsHandleCoordinate:"Center",descriptors:"Descriptors"}},Command:{name:"Command"},CommandComponent:{name:"Command",description:"Perform a drone, camera, or gimbal command."},ComponentEstimate:{name:"Estimate",values:{time:"Total Time",distance:"Total Distance",velocityMax:"Max Speed",altitude:"Altitude",photos:"Photos",videos:"Videos"}},CommandExecutionStatus:{name:"Command Execution Status",values:{pending:{name:"Pending"},queued:{name:"Queued"},executing:{name:"Executing"},succeeded:{name:"Succeeded"},failed:{name:"Failed"}}},ComponentExecutionState:{name:"Component Execution State"},ComponentExecutionStatus:{name:"Component Execution Status",values:{pending:{name:"Pending"},executing:{name:"Executing"},succeeded:{name:"Succeeded"},failed:{name:"Failed"}}},ConnectionFailSafeBehaviorDroneCommand:{name:"Drone Connection Fail-Safe",values:{connectionFailSafeBehavior:"Behavior"}},ContrastCameraCommand:{name:"Camera Contrast",values:{contrast:"Contrast"}},CourseComponent:{name:"Course",description:"Fly the drone along a specific course.",subtitle:"{0} ±{1}"},Datetime:{name:"Datetime"},Descriptors:{name:"Descriptors",values:{name:"Name",description:"Description",tags:"Tags"}},DestinationComponent:{name:"Destination",description:"Fly the drone to a specific location.",values:{automaticOrientation:"Automatic Orientation",destinationOffset:"Destination",achievement:"Achievement",achievementTime:"Time",achievementDistance:"Distance",altitudeRange:"Altitude Range"},messages:{moving:{title:"Destination",details:{distance:"D {0}",altitude:"A {0}",heading:"H {0}"}}}},Device:{name:"Device",multiple:"Devices"},Disengagement:{name:"Disengagement"},DistanceTolerance:{name:"Distance Tolerance",values:{horizontal:"Distance",vertical:"Altitude"}},Drone:{name:"Drone",multiple:"Drones"},DroneCommand:{name:"Drone Command",description:""},DroneConnectionFailSafeBehavior:{name:"Drone Connection Fail-Safe Behavior",values:{hover:{name:"Hover"},returnHome:{name:"Return Home"},autoLand:{name:"Auto Land"},unknown:{name:"Unknown"}}},DroneLightbridgeChannelSelectionMode:{name:"Drone Lightbridge Channel Selection Mode",values:{auto:{name:"Auto"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},DroneLightbridgeFrequencyBand:{name:"Drone Lightbridge Frequency Band",values:{"2dot4ghz":{name:"2.4GHz"},"5dot7ghz":{name:"5.7GHz"},"5dot8ghz":{name:"5.8GHz"},unknown:{name:"Unknown"}}},DroneMotionComponent:{name:"Motion",values:{droneMotionLimits:"Motion Limits",droneMotionLimitsHorizontalVelocityMax:"Speed (max)",droneMotionLimitsHorizontalAccelerationMin:"H. Deceleration",droneMotionLimitsHorizontalAccelerationMax:"H. Acceleration",droneMotionLimitsVerticalVelocityMin:"Descent Rate",droneMotionLimitsVerticalVelocityMax:"Ascent Rate",droneMotionLimitsVerticalAccelerationMin:"V. Deceleration",droneMotionLimitsVerticalAccelerationMax:"V. Acceleration",droneMotionLimitsRotationalVelocityMax:"Rotation Rate",droneMotionLimitsRotationalAccelerationMin:"R. Deceleration",droneMotionLimitsRotationalAccelerationMax:"R. Acceleration"},messages:{disengageErrorTolerance:{title:"Drone Too Far Off Course",details:{distance:"D {0}",altitude:"A {0}"}}}},DroneOcuSyncChannelSelectionMode:{name:"Drone OcuSync Channel Selection Mode",values:{auto:{name:"Auto"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},DroneOcuSyncFrequencyBand:{name:"Drone OcuSync Frequency Band",values:{"2dot4ghz":{name:"2.4GHz"},"5dot8ghz":{name:"5.8GHz"},dual:{name:"Dual"},unknown:{name:"Unknown"}}},Engagement:{name:"Engagement",multiple:"Engagements"},Execution:{name:"Execution"},ExposureCompensationCameraCommand:{name:"Camera Exposure Compensation",values:{exposureCompensation:"Exposure Compensation"}},ExposureCompensationStepCameraCommand:{name:"Camera Exposure Compensation Step",values:{exposureCompensationStep:"Step",exposureCompensationSteps:"Steps"}},ExposureModeCameraCommand:{name:"Camera Exposure Mode",values:{exposureMode:"Exposure Mode"}},FacadeBoundaryFace:{name:"Facade Boundary Face",values:{lineLeft:{name:"Line - Left"},lineRight:{name:"Line - Right"},polygonLeft:{name:"Polygon - Left"},polygonRight:{name:"Polygon - Right"},circleClockwise:{name:"Circle - Clockwise"},circleCounterclockwise:{name:"Circle - Counterclockwise"},spiralClockwise:{name:"Spiral - Clockwise"},spiralCounterclockwise:{name:"Spiral - Counterclockwise"}}},FacadeComponent:{name:"Facade",description:"Fly the drone along a boundary to scan a facade.",values:{approachAltitude:"Approach Alt.",initialAltitude:"Initial Alt.",finalAltitude:"Final Alt.",gimbalOrientations:"Capture Angle",direction:"Direction",cameraMode:"Capture Mode",capturePriority:"Capture Priority",minCaptureInterval:"Min Capture Interval",targetDistance:"Target Distance",pattern:"Pattern",verticalOverlap:"V. Overlap",horizontalOverlap:"H. Overlap",boundaryFace:"Boundary Face",boundaryPoints:"Boundary Points",surfaceSampleDistance:"Sample Distance"},messages:{setup:{title:"Configuring camera..."}}},FacadeComponentBoundaryPoint:{name:"Boundary Point",multiple:"Boundary Points"},FacadeCapturePriority:{name:"Facade Capture Priority",values:{time:{name:"Time"},distance:{name:"Distance"}}},FacadePattern:{name:"Facade Pattern",values:{horizontal:{name:"Horizontal"},vertical:{name:"Vertical"}}},FileIndexModeCameraCommand:{name:"Camera File Index Mode",values:{fileIndexMode:"File Index Mode"}},FocusCameraCommand:{name:"Camera Focus",values:{focusTarget:"Focus Target",focusTargetX:"Horizontal",focusTargetY:"Vertical"}},FocusModeCameraCommand:{name:"Camera Focus Mode",values:{focusMode:"Focus Mode"}},Gimbal:{name:"Gimbal"},GimbalMode:{name:"Gimbal Mode",values:{free:{name:"Free"},fpv:{name:"FPV"},yawFollow:{name:"Yaw Follow"},unknown:{name:"Unknown"}}},Func:{name:"Function",multiple:"Functions",values:{components:"Components",inputs:"Inputs",dynamicInputs:"Dynamic Inputs",executable:"Code"}},FuncInput:{name:"Input",multiple:"Inputs",values:{optional:"Optional",enumValues:"Enumeration"}},GeoCoordinate:{name:"Geo Coordinate",multiple:"Geo Coordinates",values:{latitude:"Latitude",longitude:"Longitude"}},GeoLocation:{name:"Geo Location"},GeoReferencedOffset:{name:"Geo Referenced Offset",values:{altitudeOffset:"Altitude Offset"}},GeoSpatial:{name:"Geo Spatial"},GeoSpatialSource:{name:"Geo Spatial Source",values:{input:{name:"Input"},plan:{name:"Plan"},user:{name:"User"},drone:{name:"Drone"}}},GimbalCommand:{name:"Gimbal Command",description:""},GroundSampleDistance:{name:"Ground Sample Distance"},HeadingDroneCommand:{name:"Heading"},HeadingComponent:{name:"Heading",description:"Point the drone in a specific direction.",subtitle:"{0} ±{1}",values:{heading:"Heading",achievement:"Achievement",achievementTime:"Time",achievementDistance:"Distance"},messages:{rotating:{title:"Rotating"},waiting:{title:"Waiting"}}},InterpolationFunction:{name:"Interpolation",values:{none:{name:"None"},linear:{name:"Linear"},sigmoid:{name:"Curved"}}},ISOCameraCommand:{name:"Camera ISO",values:{iso:"ISO"}},LandingGearAutomaticMovementDroneCommand:{name:"Landing Gear Automatic Movement",values:{enabled:"Enabled"}},LandingGearDeployDroneCommand:{name:"Landing Gear Deploy"},LandingGearRetractDroneCommand:{name:"Landing Gear Retract"},LightbridgeChannelDroneCommand:{name:"Drone Lightbridge Channel",values:{lightbridgeChannel:"Channel"}},LightbridgeChannelSelectionModeDroneCommand:{name:"Drone Lightbridge Channel Selection Mode",values:{lightbridgeChannelSelectionMode:"Channel Selection Mode"}},LightbridgeFrequencyBandDroneCommand:{name:"Drone Lightbridge Frequency Band",values:{lightbridgeFrequencyBand:"Frequency Band"}},Limits:{name:"Limits",toString:{same:"±{0}",different:"{0}, +{1}"},values:{min:"Min",max:"Max"}},Line2:{name:"Line"},ListComponent:{name:"List",description:"Group components and create component hierarchies.",messages:{running:{title:{single:"Component {0} of {1}",multiple:"{0} of {1} Components Complete"}}}},LowBatteryWarningThresholdDroneCommand:{name:"Drone Low Battery Warning",values:{lowBatteryWarningThreshold:"Threshold"}},MapComponent:{name:"Map",description:"Fly the drone inside a boundary to create an orthomosaic or point cloud.",values:{pattern:"Pattern",direction:"Direction",cameraMode:"Capture Mode",boundaryPoints:"Boundary Points",frontOverlap:"Front Overlap",sideOverlap:"Side Overlap",minCaptureInterval:"Min Capture Interval",targetDistance:"Target Distance",gimbalOrientation:"Capture Angle"}},MapComponentBoundaryPoint:{name:"Boundary Point",multiple:"Boundary Points"},MapPattern:{name:"Map Pattern",values:{normal:{name:"Normal"},grid:{name:"Grid"}}},MaxAltitudeDroneCommand:{name:"Drone Max Altitude",values:{maxAltitude:"Altitude"}},MaxDistanceDroneCommand:{name:"Drone Max Distance",values:{maxDistance:"Distance"}},MeasurementType:{name:"Measurement",values:{distance:{name:"Distance"},velocityHorizontal:{name:"Velocity - Horizontal"},velocityVertical:{name:"Velocity - Vertical"},velocityRotational:{name:"Velocity - Rotational"},accelerationHorizontal:{name:"Acceleration Horizontal"},accelerationVertical:{name:"Acceleration - Vertical"},accelerationRotational:{name:"Acceleration - Rotational"},angle:{name:"Angle"},angleMod:{name:"Angle (360)"},percent:{name:"Percent"}}},Mission:{name:"Mission",multiple:"Missions",messages:{reengaging:"Resuming",reengagementFailed:"Unable to Resume",reengagementUserID:"User Changed",reengagementDeviceID:"Device Changed",reengagementDroneID:"Drone Changed",succeeded:"Mission Accomplished",failed:"Mission Failed",complete:"Mission Complete",engageDisallowed:{complete:"Mission Already Complete",requiredTakeoffInvalid:{title:"Invalid Drone Takeoff Location",details:"Drone takeoff location is {0} outside the required takeoff area."}}},values:{reengagement:"Resuming Mission"}},MissionIssue:{name:"Issue",multiple:"Issues",messages:{elevation:{requiredTakeoff:{title:"Ground elevations used without a takeoff takeoff restriction. Taking off from a different location could result in an unsafe altitude offset.",details:"Recommendation: Set the Plan Takeoff Restriction to a specific area."}},cameraCommand:{requiredNotCapturingUnknown:{title:"{0} attempted before camera stop capture.",details:"Recommendation: Add a camera stop capture command before this command."},requiredNotCapturingInvalid:{title:"{0} attempted while camera capturing. This command will always fail.",details:"Recommendation: Add a camera stop capture command before this command."},requiredModeUnknown:{title:"{0} attempted while camera in unknown mode.",details:"Recommendation: Add a camera mode command before this command."},requiredModeInvalid:{title:"{0} attempted while camera in {1} mode. This command will always fail.",details:"Recommendation: Add a camera mode command before this command."}},photoIntervalCommand:{beforePhotoFileFormat:{title:"Camera photo interval at or below two seconds attempted before setting camera photo file format to JPEG.",details:"Recommendation: Add a camera photo file format command set to JPEG before this command."},fastPhotoInterval:{title:"Camera photo interval at or below two seconds attempted while camera photo file format not set to JPEG.",details:"Recommendation: Add a camera photo file format command set to JPEG before this command."}},stopCaptureCameraCommand:{stoppedAlready:{title:"Camera stop capture attempted while camera already stopped.",details:"Recommendation: Remove this command."}},startCaptureCameraCommand:{beforeStopped:{title:"Camera start capture attempted before camera stop capture.",details:"Recommendation: Add a camera stop capture command before this command in case the camera is already capturing before the Mission starts."},startedAlready:{title:"Camera start capture attempted while camera already capturing.",details:"Recommendation: Remove this command."},beforeMode:{title:"Camera start capture attempted before setting camera mode.",details:"Recommendation: Add a camera mode command before this command."},invalidMode:{title:"Camera start capture attempted while camera in {0} mode. This command will always fail.",details:"Recommendation: Add a camera mode command before this command."},beforePhotoMode:{title:"Camera start capture in {0} mode attempted before setting camera photo type.",details:"Recommendation: Add a camera photo type command before this command."},beforePhotoInterval:{title:"Camera start capture in {0} {1} mode attempted before setting camera photo interval time.",details:"Recommendation: Add a camera photo interval command before this command."},videoNotStopped:{title:"Camera start capture in {0} mode never stopped.",details:"Add a camera stop capture command before the end of the mission."}}}},Message:{name:"Message"},MessageLevel:{name:"Message Level",values:{info:"Info",warning:"Warning",danger:"Danger",error:"Error"}},ModeCameraCommand:{name:"Camera Mode",values:{mode:"Mode"}},ModeGimbalCommand:{name:"Gimbal Mode",values:{mode:"Mode"}},MotionLimits:{name:"Motion Limits",values:{velocity:"Speed",acceleration:"Acceleration"}},MotionLimits6:{name:"Motion Limits (6D)",values:{horizontal:"Horizontal",vertical:"Vertical",rotational:"Rotational"}},OcuSyncChannelDroneCommand:{name:"Drone OcuSync Channel",values:{ocuSyncChannel:"Channel"}},OcuSyncChannelSelectionModeDroneCommand:{name:"Drone OcuSync Channel Selection Mode",values:{ocuSyncChannelSelectionMode:"Channel Selection Mode"}},OcuSyncFrequencyBandDroneCommand:{name:"Drone OcuSync Frequency Band",values:{ocuSyncFrequencyBand:"Frequency Band"}},OrbitComponent:{name:"Orbit",description:"Fly the drone in a circle around a point of interest.",subtitle:"{0} {1} → {2}",values:{centerOffset:"Orbit Center",radius:"Radius",finalRadius:"Final Radius",direction:"Direction",circumference:"Circumference",rotations:"Rotations",finalAltitude:"Final Altitude",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"}},OrbitDirection:{name:"Orbit Direction",values:{clockwise:{name:"Clockwise"},counterclockwise:{name:"Counterclockwise"}}},Orientation3:{name:"Orientation",values:{x:"Pitch",xReference:"Reference",y:"Roll",z:"Heading",zReference:"Reference"}},OrientationGimbalCommand:{name:"Gimbal Attitude"},OrientationXReference:{name:"Pitch Reference",values:{horizon:{name:"Horizon"},path:{name:"Path"}}},OrientationZReference:{name:"Heading Reference",values:{north:{name:"North"},course:{name:"Course"},heading:{name:"Heading"},path:{name:"Path"}}},PathMarkerPositioning:{name:"Marker Positioning",values:{absolute:{name:"Distance from Start"},coordinate:{name:"Nearest Coordinate"}}},PayloadCommand:{name:"Payload Command",values:{channel:"Channel"}},PlanCompleteAction:{name:"Plan Complete Action",values:{none:{name:"None"},returnHome:{name:"Return Home"},autoLand:{name:"Auto Land"}}},PhotoAspectRatioCameraCommand:{name:"Camera Photo Aspect Ratio",values:{photoAspectRatio:"Photo Aspect Ratio"}},PhotoFileFormatCameraCommand:{name:"Camera Photo File Format",values:{photoFileFormat:"Photo File Format"}},PhotoIntervalCameraCommand:{name:"Camera Photo Interval",values:{photoInterval:"Photo Interval"}},PhotoModeCameraCommand:{name:"Camera Photo Type",values:{photoMode:"Photo Type"}},PathComponent:{name:"Path",description:"Fly the drone along a path defined by a series of waypoints.",values:{cornering:"Pathing",cornerRadius:"Corner Radius",waypoints:"Waypoints",markers:"Markers"}},PathComponentMarker:{name:"Marker",multiple:"Markers",values:{positioning:"Positioning",interpolation:"Interpolation",component:"Component",altitude:"Altitude",pointOfInterestID:"Point of Interest",droneMotionLimits:"Drone Motion Limits",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"}},PathComponentWaypoint:{name:"Waypoint",multiple:"Waypoints"},PathCornering:{name:"Path Cornering",values:{intersect:{name:"Curved"},rounded:{name:"Straight"}}},PlanComponent:{name:"Plan",multiple:"Plans",values:{completeAction:"Action on Finish",droneMotionLimits:"Motion Limits",droneMotionErrorTolerance:"Motion Error Tolerance",rootComponent:"Root",takeoffOffset:"Restricted Takeoff"}},Point2:{name:"Point"},PointOfInterest:{name:"Point of Interest",multiple:"Points of Interest"},ReturnHomeAltitudeDroneCommand:{name:"Drone Return Home Altitude",values:{returnHomeAltitude:"Altitude"}},RotationComponent:{name:"Rotation",description:"Rotate the drone for specific amount of time or degrees.",values:{direction:"Direction",limit:"Limit",time:"Time",distance:"Distance"}},RotationDirection:{name:"Rotation Direction",values:{clockwise:{name:"Clockwise"},counterclockwise:{name:"Counterclockwise"}}},SaturationCameraCommand:{name:"Camera Saturation",values:{saturation:"Saturation"}},SharpnessCameraCommand:{name:"Camera Sharpness",values:{sharpness:"Sharpness"}},Simulation:{name:"Simulation",messages:{disengageStop:"Simulation Stopped"}},ShutterSpeedCameraCommand:{name:"Camera Shutter Speed",values:{shutterSpeed:"Shutter Speed"}},SourcedGeoSpatial:{name:"Sourced Geo Spatial"},StartCaptureCameraCommand:{name:"Camera Start Capture"},StopCaptureCameraCommand:{name:"Camera Stop Capture"},StorageLocationCameraCommand:{name:"Camera Storage Location",values:{storageLocation:"Storage Location"}},SubComponent:{name:"Component",multiple:"Components",values:{required:"Required",exclusive:"Exclusive",pointsOfInterest:"Points of Interest"},messages:{failedElevationsPending:{title:"Ground Elevations Unavailable"}}},Unit:{name:"Unit",values:{kilometersPerHour:{name:"Kilometers per Hour",abbreviation:"km/h"},milesPerHour:{name:"Miles per Hour",abbreviation:"mph"},metersPerSecond:{name:"Meters per Second",abbreviation:"m/s"},metersPerSecondSquared:{name:"Meters per Second Squared",abbreviation:"m/s²"},feetPerSecond:{name:"Feet per Second",abbreviation:"fps"},feetPerSecondSquared:{name:"Feet per Second Squared",abbreviation:"ft/s²"},kilometers:{name:"Kilometers",abbreviation:"km"},miles:{name:"Miles",abbreviation:"mi"},meters:{name:"Meters",abbreviation:"m"},millimeters:{name:"Millimeters",abbreviation:"mm"},feet:{name:"Feet",abbreviation:"ft"},acres:{name:"Acres",abbreviation:"ac"},hectare:{name:"Hectare",abbreviation:"ha"},degrees:{name:"Degrees",abbreviation:"°"},degreesPerSecond:{name:"Degrees per Second",abbreviation:"°/s"},degreesPerSecondSquared:{name:"Degrees per Second Squared",abbreviation:"°/s²"},radians:{name:"Radians",abbreviation:"c"},radiansPerSecond:{name:"Radians per Second",abbreviation:"c/s"},radiansPerSecondSquared:{name:"Radians per Second Squared",abbreviation:"c/s²"},geoMinutes:{name:"Minutes",abbreviation:"'"},geoSeconds:{name:"Seconds",abbreviation:'"'},geoNorth:{name:"North",abbreviation:"N"},geoSouth:{name:"South",abbreviation:"S"},geoEast:{name:"East",abbreviation:"E"},geoWest:{name:"West",abbreviation:"W"},hours:{name:"Hours",abbreviation:"h"},minutes:{name:"Minutes",abbreviation:"m"},seconds:{name:"Seconds",abbreviation:"s"},percent:{name:"Percent",abbreviation:"%"},kelvin:{name:"Kelvin",abbreviation:"K"},pixels:{name:"Pixels",abbreviation:"px"},centimetersPerPixel:{name:"Centimeters per Pixel",abbreviation:"cm/px"},inchesPerPixel:{name:"Inches per Pixel",abbreviation:"in/px"},bytes:{name:"Bytes",abbreviation:"B"},kilobytes:{name:"Kilobytes",abbreviation:"KB"},megabytes:{name:"Megabytes",abbreviation:"MB"},gigabytes:{name:"Gigabytes",abbreviation:"GB"}}},UnitSystem:{name:"Unit System",values:{metric:{name:"Metric"},imperial:{name:"Imperial"}}},User:{name:"User",multiple:"Users"},Variable:{name:"Variable",multiple:"Variables",nullValue:"No Input",values:{variableType:"Variable Type",valueArray:"Array",value:"Value",values:"Values"}},VariableValueType:{name:"Value Type",values:{boolean:{name:"Boolean"},number:{name:"Number"},string:{name:"String"},Drone:{name:"Drone"}}},Vector2:{name:"Vector"},Velocity3:{name:"Velocity"},Velocity6:{name:"Velocity",toString:{horizontal:"H/S {0} → {1}",vertical:"V/S {0}",rotational:"R/S {0}"}},VelocityDroneCommand:{name:"Drone Motion",messages:{controls:{title:"Drone",details:{horizontal:"H {0} → {1}",vertical:"V {0}",rotational:"R {0}",heading:"Y {0}"}}}},VelocityGimbalCommand:{name:"Gimbal Motion",messages:{controls:{title:"Gimbal",details:{pitch:"P {0}",roll:"R {0}",yaw:"Y {0}"}}}},VideoFileCompressionStandardCameraCommand:{name:"Camera Video File Compression Standard",values:{videoFileCompressionStandard:"Video File Compression Standard"}},VideoFileFormatCameraCommand:{name:"Camera Video File Format",values:{videoFileFormat:"Video File Format"}},VideoResolutionFrameRateCameraCommand:{name:"Camera Video Resolution & Frame Rate",values:{videoResolution:"Video Resolution",videoFrameRate:"Video Frame Rate",videoFieldOfView:"Video Field of View"}},VideoStandardCameraCommand:{name:"Camera Video Standard",values:{videoStandard:"Video Standard"}},WaitComponent:{name:"Wait",description:"Wait for a specified time before executing more components.",values:{time:"Time"},messages:{waiting:{title:"Waiting"}}},WhiteBalanceCustomCameraCommand:{name:"Camera White Balance Custom",values:{whiteBalanceCustom:"Temperature"}},WhiteBalancePresetCameraCommand:{name:"Camera White Balance Preset",values:{whiteBalancePreset:"White Balance Preset"}}}})},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(229)),r=n(1),a=n(2),s=n(81),u=n(161),l=n(162),c=n(163),m=n(164),d=n(165),h=n(166),p=n(167),f=n(168),g=n(169),y=n(170),C=n(171),v=n(172),S=n(173),b=n(174),w=n(40),x=n(175),M=n(176),O=n(177),D=n(178),P=n(179),T=n(180),F=n(181),E=n(119),_=n(182),N=n(120),A=n(183),I=n(184),L=n(41),R=n(185),k=n(86),z=n(42),B=n(43),V=n(186),j=n(187),U=n(188),J=n(35),G=n(36),W=n(189),q=n(190),H=n(121),$=n(191),K=n(192),Z=n(193),X=n(194),Y=n(87),Q=n(60),ee=n(88),te=n(89),ne=n(122),ie=n(44),oe=n(128),re=n(102),ae=n(204),se=n(73),ue=n(103),le=n(205),ce=n(74),me=n(206),de=n(207),he=n(75),pe=n(76),fe=n(208),ge=n(105),ye=n(209),Ce=n(210),ve=n(16),Se=n(108),be=n(78),we=n(109),xe=n(125),Me=n(99),Oe=n(66),De=n(115),Pe=n(116),Te=n(117),Fe=n(114),Ee=n(12),_e=n(17),Ne=n(211),Ae=n(71),Ie=n(52),Le=n(46),Re=n(131),ke=n(133),ze=n(118),Be=n(77),Ve=n(77),je=n(29),Ue=n(65),Je=n(126),Ge=n(23),We=n(61),qe=n(37),He=n(28),$e=n(54),Ke=n(55),Ze=n(10),Xe=n(148),Ye=n(132),Qe=n(84),et=n(101),tt=n(83),nt=n(129),it=n(82),ot=n(100),rt=n(67),at=n(48),st=n(21),ut=n(20),lt=n(90),ct=n(0),mt=n(31),dt=n(31),ht=n(31),pt=n(31),ft=n(51),gt=n(149),yt=n(8),Ct=n(34),vt=n(26),St=n(6);class bt{static typeDisplay(e,t="name"){return e?"string"==typeof e?a.Format.string(`${e}.${t}`):bt.typeDisplay(e.type,t):""}static clone(e,t=!1){const n=bt.deserialize(bt.serialize(e));if(t){const e={};r.Common.descendantsMatching(n,e=>e instanceof St.Identifiable&&e.resettable).forEach(t=>{const n=r.Common.uuid();e[t.id]=n,t.id=n}),r.Common.descendantsMatching(n,e=>"object"==typeof e).forEach(t=>{Object.keys(t).map(n=>{const i=t[n];"string"==typeof i&&e[i]&&(t[n]=e[i])})})}return n}static plainJSON(e){return JSON.parse(bt.serialize(e))}static write(e){return bt.WriteCompressByDefault?bt.compress(e):bt.serialize(e)}static read(e){try{const t=bt.decompress(e);if(t)return t}catch(e){}try{return bt.deserialize(e)}catch(e){}return null}static serialize(e){return JSON.stringify(e,(e,t)=>null===t||""===t||Array.isArray(t)&&0===t.length?void 0:t)}static compress(e){return e?o.default.compress("string"==typeof e?e:bt.serialize(e),{outputEncoding:"StorageBinaryString"}):null}static decompress(e){return e?bt.deserialize(o.default.decompress(e,{inputEncoding:"StorageBinaryString"})):null}static applyJSON(e,t){return t.applyJSON(e)?t:null}static deserialize(e){if(!e)return null;if("string"==typeof e)return bt.deserialize(JSON.parse(e));const t=bt.deserializeInstance(e);return null===t&&r.Common.debugLog(`Failed to deserialize: ${e.type}`),t}static createInstance(e){switch(e){case ct.TypeName.AEBCountCameraCommand:return new x.AEBCountCameraCommand;case ct.TypeName.Altitude:return new ve.Altitude;case ct.TypeName.AltitudeRange:return new Se.AltitudeRange;case ct.TypeName.Asset:return new be.Asset;case ct.TypeName.AssetManifest:return new we.AssetManifest;case ct.TypeName.AssetSource:return new xe.AssetSource;case ct.TypeName.ApertureCameraCommand:return new M.ApertureCameraCommand;case ct.TypeName.AutoExposureLockCameraCommand:return new O.AutoExposureLockCameraCommand;case ct.TypeName.Camera:return new Me.Camera;case ct.TypeName.CameraFile:return new Oe.CameraFile;case ct.TypeName.CameraImageSpecification:return new De.CameraImageSpecification;case ct.TypeName.CameraLensSpecification:return new Pe.CameraLensSpecification;case ct.TypeName.CameraSensorSpecification:return new Te.CameraSensorSpecification;case ct.TypeName.CameraSpecification:return new Fe.CameraSpecification;case ct.TypeName.ColorCameraCommand:return new D.ColorCameraCommand;case ct.TypeName.CommandComponent:return new ie.CommandComponent;case ct.TypeName.CommandExecutionState:return new s.CommandExecutionState;case ct.TypeName.ComponentExecutionState:return new te.ComponentExecutionState;case ct.TypeName.ComponentSource:return new ne.ComponentSource;case ct.TypeName.ConnectionFailSafeBehaviorDroneCommand:return new u.ConnectionFailSafeBehaviorDroneCommand;case ct.TypeName.ContrastCameraCommand:return new P.ContrastCameraCommand;case ct.TypeName.CourseComponent:return new oe.CourseComponent;case ct.TypeName.Datetime:return new Ee.Datetime;case ct.TypeName.Descriptors:return new _e.Descriptors;case ct.TypeName.Disengagement:return new Ne.Disengagement;case ct.TypeName.DestinationComponent:return new re.DestinationComponent;case ct.TypeName.DistanceTolerance:return new Ae.DistanceTolerance;case ct.TypeName.Device:return new Ie.Device;case ct.TypeName.Drone:return new Le.Drone;case ct.TypeName.Engagement:return new Re.Engagement;case ct.TypeName.Execution:return new ke.Execution;case ct.TypeName.ExposureCompensationCameraCommand:return new T.ExposureCompensationCameraCommand;case ct.TypeName.ExposureCompensationStepCameraCommand:return new F.ExposureCompensationStepCameraCommand;case ct.TypeName.ExposureModeCameraCommand:return new E.ExposureModeCameraCommand;case ct.TypeName.FacadeComponent:return new ae.FacadeComponent;case ct.TypeName.FacadeComponentBoundaryPoint:return new se.FacadeComponentBoundaryPoint;case ct.TypeName.FieldOfView:return new ze.FieldOfView;case ct.TypeName.FocusCameraCommand:return new N.FocusCameraCommand;case ct.TypeName.FocusModeCameraCommand:return new A.FocusModeCameraCommand;case ct.TypeName.ISOCameraCommand:return new I.ISOCameraCommand;case ct.TypeName.FileIndexModeCameraCommand:return new _.FileIndexModeCameraCommand;case ct.TypeName.Func:return new Be.Func;case ct.TypeName.FuncInput:return new Ve.FuncInput;case ct.TypeName.GeoCoordinate:return new je.GeoCoordinate;case ct.TypeName.GeoLocation:return new Ue.GeoLocation;case ct.TypeName.GeoReferencedOffset:return new Je.GeoReferencedOffset;case ct.TypeName.GeoSpatial:return new Ge.GeoSpatial;case ct.TypeName.Gimbal:return new We.Gimbal;case ct.TypeName.HeadingComponent:return new ue.HeadingComponent;case ct.TypeName.Interpolation:return new qe.Interpolation;case ct.TypeName.LandingGearAutomaticMovementDroneCommand:return new l.LandingGearAutomaticMovementDroneCommand;case ct.TypeName.LandingGearDeployDroneCommand:return new c.LandingGearDeployDroneCommand;case ct.TypeName.LandingGearRetractDroneCommand:return new m.LandingGearRetractDroneCommand;case ct.TypeName.LightbridgeChannelDroneCommand:return new d.LightbridgeChannelDroneCommand;case ct.TypeName.LightbridgeChannelSelectionModeDroneCommand:return new h.LightbridgeChannelSelectionModeDroneCommand;case ct.TypeName.LightbridgeFrequencyBandDroneCommand:return new p.LightbridgeFrequencyBandDroneCommand;case ct.TypeName.Limits:return new He.Limits;case ct.TypeName.Line2:return new $e.Line2;case ct.TypeName.ListComponent:return new Ke.ListComponent;case ct.TypeName.LowBatteryWarningThresholdDroneCommand:return new f.LowBatteryWarningThresholdDroneCommand;case ct.TypeName.MapComponent:return new le.MapComponent;case ct.TypeName.MapComponentBoundaryPoint:return new ce.MapComponentBoundaryPoint;case ct.TypeName.MaxAltitudeDroneCommand:return new g.MaxAltitudeDroneCommand;case ct.TypeName.MaxDistanceDroneCommand:return new y.MaxDistanceDroneCommand;case ct.TypeName.Mission:return new Ye.Mission;case ct.TypeName.Message:return new Ze.Message;case ct.TypeName.MessageGroup:return new Xe.MessageGroup;case ct.TypeName.ModeCameraCommand:return new L.ModeCameraCommand;case ct.TypeName.ModeGimbalCommand:return new Y.ModeGimbalCommand;case ct.TypeName.MotionLimits:return new Qe.MotionLimits;case ct.TypeName.MotionLimitsOptional:return new et.MotionLimitsOptional;case ct.TypeName.MotionLimits3:return new tt.MotionLimits3;case ct.TypeName.MotionLimits3Optional:return new nt.MotionLimits3Optional;case ct.TypeName.MotionLimits6:return new it.MotionLimits6;case ct.TypeName.MotionLimits6Optional:return new ot.MotionLimits6Optional;case ct.TypeName.PointOfInterest:return new rt.PointOfInterest;case ct.TypeName.OcuSyncChannelDroneCommand:return new C.OcuSyncChannelDroneCommand;case ct.TypeName.OcuSyncChannelSelectionModeDroneCommand:return new v.OcuSyncChannelSelectionModeDroneCommand;case ct.TypeName.OcuSyncFrequencyBandDroneCommand:return new S.OcuSyncFrequencyBandDroneCommand;case ct.TypeName.OrbitComponent:return new me.OrbitComponent;case ct.TypeName.Orientation3:return new at.Orientation3;case ct.TypeName.Orientation3Optional:return new st.Orientation3Optional;case ct.TypeName.OrientationGimbalCommand:return new Q.OrientationGimbalCommand;case ct.TypeName.PhotoAspectRatioCameraCommand:return new R.PhotoAspectRatioCameraCommand;case ct.TypeName.PhotoFileFormatCameraCommand:return new k.PhotoFileFormatCameraCommand;case ct.TypeName.PhotoModeCameraCommand:return new B.PhotoModeCameraCommand;case ct.TypeName.PhotoIntervalCameraCommand:return new z.PhotoIntervalCameraCommand;case ct.TypeName.PathComponent:return new de.PathComponent;case ct.TypeName.PathComponentWaypoint:return new he.PathComponentWaypoint;case ct.TypeName.PathComponentMarker:return new pe.PathComponentMarker;case ct.TypeName.PathComponentModelSample:return new fe.PathComponentModelSample;case ct.TypeName.PlanComponent:return new ge.PlanComponent;case ct.TypeName.Point2:return new ut.Point2;case ct.TypeName.ReturnHomeAltitudeDroneCommand:return new b.ReturnHomeAltitudeDroneCommand;case ct.TypeName.RotationComponent:return new ye.RotationComponent;case ct.TypeName.SaturationCameraCommand:return new V.SaturationCameraCommand;case ct.TypeName.SharpnessCameraCommand:return new j.SharpnessCameraCommand;case ct.TypeName.ShutterSpeedCameraCommand:return new U.ShutterSpeedCameraCommand;case ct.TypeName.SourcedGeoSpatial:return new lt.SourcedGeoSpatial;case ct.TypeName.StartCaptureCameraCommand:return new J.StartCaptureCameraCommand;case ct.TypeName.StopCaptureCameraCommand:return new G.StopCaptureCameraCommand;case ct.TypeName.StorageLocationCameraCommand:return new W.StorageLocationCameraCommand;case ct.TypeName.Timeline:return new mt.Timeline;case ct.TypeName.TimelineCameraCapture:return new dt.TimelineCameraCapture;case ct.TypeName.TimelineCommand:return new ht.TimelineCommand;case ct.TypeName.TimelineFrame:return new pt.TimelineFrame;case ct.TypeName.User:return new ft.User;case ct.TypeName.Variable:return new gt.Variable;case ct.TypeName.Vector2:return new yt.Vector2;case ct.TypeName.Velocity3:return new Ct.Velocity3;case ct.TypeName.Velocity6:return new vt.Velocity6;case ct.TypeName.VelocityDroneCommand:return new w.VelocityDroneCommand;case ct.TypeName.VelocityGimbalCommand:return new ee.VelocityGimbalCommand;case ct.TypeName.VideoFileCompressionStandardCameraCommand:return new q.VideoFileCompressionStandardCameraCommand;case ct.TypeName.VideoFileFormatCameraCommand:return new H.VideoFileFormatCameraCommand;case ct.TypeName.VideoResolutionFrameRateCameraCommand:return new $.VideoResolutionFrameRateCameraCommand;case ct.TypeName.VideoStandardCameraCommand:return new K.VideoStandardCameraCommand;case ct.TypeName.WaitComponent:return new Ce.WaitComponent;case ct.TypeName.WhiteBalanceCustomCameraCommand:return new Z.WhiteBalanceCustomCameraCommand;case ct.TypeName.WhiteBalancePresetCameraCommand:return new X.WhiteBalancePresetCameraCommand}return null}static deserializeInstance(e){const t=bt.createInstance(e.type);if(null!==t)return bt.applyJSON(e,t)}static generateCode(e,t=0,n="Dronelink"){if(!e||!e.type)return null;const i=e.type.charAt(0).toLowerCase()+e.type.slice(1),o=[];return t>0&&o.push("(() => {"),o.push(`${bt.indent(t+1)}const ${i} = new ${n?n+".":""}${e.type}()`),Object.keys(e).forEach(r=>{if("type"===r)return;if("id"===r&&e.type!==ct.TypeName.PointOfInterest)return;const a=e[r];e.type===ct.TypeName.Datetime&&"value"===r?o.push(`${bt.indent(t+1)}${i}.${r} = new Date(${a.getTime()})`):null===a?o.push(`${bt.indent(t+1)}${i}.${r} = null`):Array.isArray(a)?(o.push(`${bt.indent(t+1)}${i}.${r} = [`),a.forEach(e=>{o.push(`${bt.indent(t+2)}${bt.generateCode(e,t+2,n)},`)}),o.push(bt.indent(t+1)+"]")):"object"==typeof a?o.push(`${bt.indent(t+1)}${i}.${r} = ${bt.generateCode(a,t+1,n)}`):"string"==typeof a?o.push(`${bt.indent(t+1)}${i}.${r} = "${a.replace('"','\\"')}"`):"function"==typeof a||o.push(`${bt.indent(t+1)}${i}.${r} = ${a}`)}),t>0&&(o.push(`${bt.indent(t+1)}return ${i}`),o.push(`${bt.indent(t)}})()`)),o.join("\n")}static indent(e){return Array(e).join("    ")}}t.Serialization=bt,bt.WriteCompressByDefault=!0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(58);t.CameraCommand=class extends i.PayloadCommand{get requiredMode(){return null}get requiredCapturing(){return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1);t.Identifiable=class{constructor(e=null){this.id=e||i.Common.uuid()}applyJSON(e){return!!e&&(this.id=i.Common.parseString(e.id,i.Common.uuid()),!0)}get resettable(){return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(19),o=n(82),r=n(28),a=n(114),s=n(3),u=n(83),l=n(84),c=n(0),m=n(21),d=n(243);class h{}t.Constants=h,h.Version=d.version,h.MissionExecuteIntervalTarget=.05,h.MissionExecuteIntervalMax=.5,h.ComponentEstimateTolerance=3,h.SimulationUpdateInterval=.1,h.DroneConnectionLatency=.1,h.DroneMotionLimits={Generic:()=>{const e=new o.MotionLimits6;return e.horizontal.velocity.max=15,e.horizontal.acceleration.max=3,e.horizontal.acceleration.min=-e.horizontal.acceleration.max,e.vertical.velocity.max=4,e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=2,e.vertical.acceleration.min=-e.vertical.acceleration.max,e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(45),e.rotational.acceleration.min=-e.rotational.acceleration.max,e},Conservative:()=>{const e=new o.MotionLimits6;return e.horizontal.velocity.max=i.Convert.milesPerHourToMetersPerSecond(10),e.horizontal.acceleration.max=i.Convert.feetToMeters(6),e.horizontal.acceleration.min=i.Convert.feetToMeters(-2),e.vertical.velocity.max=i.Convert.feetToMeters(10),e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=i.Convert.feetToMeters(6),e.vertical.acceleration.min=i.Convert.feetToMeters(-3),e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(10),e.rotational.acceleration.min=-e.rotational.acceleration.max,e},Max:()=>{const e=new o.MotionLimits6;return e.horizontal.velocity.max=15,e.horizontal.acceleration.max=4,e.horizontal.acceleration.min=-e.horizontal.acceleration.max,e.vertical.velocity.max=4,e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=4,e.vertical.acceleration.min=-e.vertical.acceleration.max,e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(45),e.rotational.acceleration.min=-e.rotational.acceleration.max,e}},h.DroneOrientationLimits={Yaw:new r.Limits(i.Convert.degreesToRadians(359),0)},h.GimbalLimits={Pitch:new r.Limits(i.Convert.degreesToRadians(30),i.Convert.degreesToRadians(-90)),Roll:new r.Limits(i.Convert.degreesToRadians(15),i.Convert.degreesToRadians(-15)),Yaw:new r.Limits(i.Convert.degreesToRadians(359),0)},h.GimbalMotionLimits=new u.MotionLimits3(new l.MotionLimits(new r.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new r.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90))),new l.MotionLimits(new r.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new r.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90))),new l.MotionLimits(new r.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new r.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90)))),h.CameraSpecifications=[new a.CameraSpecification("zenmuseX7",s.Strings.CameraSpecification.models.zenmuseX7,25,23.5,15.7,6016,4008),new a.CameraSpecification("zenmuseX5S",s.Strings.CameraSpecification.models.zenmuseX5S,15,17.3,13,5820,3956),new a.CameraSpecification("zenmuseX4S",s.Strings.CameraSpecification.models.zenmuseX4S,8.8,12.8,9.6,5472,3648),new a.CameraSpecification("zenmuseX5R",s.Strings.CameraSpecification.models.zenmuseX5R,15,17.3,13,4608,3456),new a.CameraSpecification("zenmuseX5",s.Strings.CameraSpecification.models.zenmuseX5,15,17.3,13,4608,3456),new a.CameraSpecification("zenmuseX3",s.Strings.CameraSpecification.models.zenmuseX3,3.61,6.17,4.65,4e3,3e3),new a.CameraSpecification("zenmuseZ30Min",s.Strings.CameraSpecification.models.zenmuseZ30Min,4.3,4.71,3.54,1920,1080),new a.CameraSpecification("zenmuseZ30Max",s.Strings.CameraSpecification.models.zenmuseZ30Max,129,4.71,3.54,1920,1080),new a.CameraSpecification("mavic2Pro",s.Strings.CameraSpecification.models.mavic2Pro,10.27,13.2,8.2,5472,3648),new a.CameraSpecification("mavic2ProHQ",s.Strings.CameraSpecification.models.mavic2ProHQ,10.27,9.4,5.9,5472,3648),new a.CameraSpecification("mavic2ZoomMin",s.Strings.CameraSpecification.models.mavic2ZoomMin,8.8,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavic2ZoomMax",s.Strings.CameraSpecification.models.mavic2ZoomMax,17.6,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavicAir",s.Strings.CameraSpecification.models.mavicAir,4,6.17,4.65,4056,3040),new a.CameraSpecification("mavicPro",s.Strings.CameraSpecification.models.mavicPro,5,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavicProPlatinum",s.Strings.CameraSpecification.models.mavicProPlatinum,5,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom4Pro2_0",s.Strings.CameraSpecification.models.phantom4Pro2_0,8.8,12.8,9.6,5472,3648),new a.CameraSpecification("phantom4Pro",s.Strings.CameraSpecification.models.phantom4Pro,8.8,12.8,9.6,5472,3648),new a.CameraSpecification("phantom4Advanced",s.Strings.CameraSpecification.models.phantom4Advanced,8.8,12.8,9.6,5472,3648),new a.CameraSpecification("phantom4",s.Strings.CameraSpecification.models.phantom4,3.61,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom3Pro",s.Strings.CameraSpecification.models.phantom3Pro,3.61,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom3Advanced",s.Strings.CameraSpecification.models.phantom3Advanced,3.61,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom3Standard",s.Strings.CameraSpecification.models.phantom3Standard,3.61,6.17,4.65,4e3,3e3),new a.CameraSpecification("spark",s.Strings.CameraSpecification.models.spark,4,6.17,4.65,3968,2976)],h.MissionReengagementAltitudeRange=i.Convert.feetToMeters(5),h.ComponentElevationTolerance=1,h.PlanComponentTakeoffDistanceHorizontal=i.Convert.feetToMeters(20),h.DroneMotionComponentGimbalOrientation=new m.Orientation3Optional(i.Convert.degreesToRadians(-12),c.OrientationXReference.Horizon,0,0,c.OrientationZReference.Path),h.DroneMotionComponentModelSampleTimeMax=2,h.DroneMotionComponentHorizontalErrorMax=2,h.DroneMotionComponentVerticalErrorMax=2,h.DroneMotionComponentRotationalErrorMax=i.Convert.degreesToRadians(60),h.DroneMotionComponentRotationalSmoothingTolerance=i.Convert.degreesToRadians(1),h.DroneMotionComponentErrorK=2*Math.E,h.DroneMotionErrorToleranceHorizontal=i.Convert.feetToMeters(75),h.DroneMotionErrorToleranceVertical=i.Convert.feetToMeters(25),h.DestinationComponentHeadingAchievement=i.Convert.degreesToRadians(45),h.DestinationComponentEstimateSampleDistance=1,h.DestinationComponentAchievementTime=4,h.DestinationComponentAchievementDistanceHorizontal=i.Convert.feetToMeters(10),h.DestinationComponentAchievementDistanceVertical=i.Convert.feetToMeters(5),h.DestinationComponentAltitude=i.Convert.feetToMeters(100),h.DestinationComponentAltitudeRange=i.Convert.feetToMeters(15),h.CourseComponentAchievementTime=1,h.CourseComponentAchievementDistance=i.Convert.degreesToRadians(5),h.CourseComponentAchievementVelocity=i.Convert.milesPerHourToMetersPerSecond(.5),h.FacadeComponentDistance=i.Convert.feetToMeters(30),h.FacadeComponentMinCaptureInterval=2,h.FacadeComponentFrontOverlap=.5,h.FacadeComponentSideOverlap=.5,h.FacadeComponentGimbalPitch=i.Convert.degreesToRadians(0),h.FacadeComponentBaseDistanceMultiplier=1.5,h.FacadeComponentInitialAltitude=i.Convert.feetToMeters(100),h.FacadeComponentFinalAltitude=i.Convert.feetToMeters(300),h.FacadeComponentCornerRadius=i.Convert.feetToMeters(20),h.FacadeComponentOrbitSteps=360,h.FacadeComponentSampleDistanceMax=.3,h.FacadeComponentSampleDistanceMin=.1,h.FacadeGimbalPitchLimits=new r.Limits(i.Convert.degreesToRadians(30),i.Convert.degreesToRadians(-90)),h.HeadingComponentAchievementTime=1,h.HeadingComponentAchievementDistance=i.Convert.degreesToRadians(5),h.MapComponentMaxHorizontalVelocity=i.Convert.milesPerHourToMetersPerSecond(26),h.MapComponentMinCaptureInterval=2,h.MapComponentFrontOverlap=.8,h.MapComponentSideOverlap=.7,h.MapComponentGimbalPitch=i.Convert.degreesToRadians(-90),h.MapComponentBaseDistanceMultiplier=1.5,h.MapComponentSampleDistance=.3,h.MapComponentMinimumTargetDistance=i.Convert.feetToMeters(5),h.MapComponentTerrainFollowGranularity=30,h.MapCameraSpecification=new a.CameraSpecification("phantom4Pro2_0",s.Strings.CameraSpecification.models.phantom4Pro2_0,8.8,12.8,9.6,5472,3648),h.MapGimbalPitchLimits=new r.Limits(i.Convert.degreesToRadians(-35),i.Convert.degreesToRadians(-90)),h.OrbitComponentEstimateSampleDistance=1,h.OrbitComponentSampleDistance=.3,h.PathComponentCornerRadius=i.Convert.feetToMeters(20),h.PathComponentModelSampleDistance=.3,h.PathComponentModelSampleDistancePosition=1,h.RotationComponentVelocity=i.Convert.degreesToRadians(45),h.RotationComponentDistance=2*Math.PI,h.RotationAchievementDistance=i.Convert.degreesToRadians(1),h.WaitComponentTime=1,h.VelocityHorizontalDampenThreshold=2,h.VelocityVerticalDampenThreshold=2,h.VelocityRotationalDampenThreshold=i.Convert.degreesToRadians(5),h.LowBatteryWarningThresholdDroneCommandValue=.2,h.ReturnHomeAltitudeDroneCommandValue=i.Convert.feetToMeters(100),h.MaxAltitudeDroneCommandValue=i.Convert.feetToMeters(400),h.MaxDistanceDroneCommandValue=i.Convert.feetToMeters(1e4),h.PhotoIntervalCommandValue=2},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(20),o=n(0),r=n(1);class a{constructor(e=0,t=0){this.type=o.TypeName.Vector2,this.direction=e,this.magnitude=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.direction=r.Common.parseFloat(e.direction),this.magnitude=r.Common.parseFloat(e.magnitude),!0)}copy(){return new a(this.direction,this.magnitude)}get x(){return this.magnitude*Math.cos(this.direction)}get y(){return this.magnitude*Math.sin(this.direction)}toPoint2(){return new i.Point2(this.x,this.y)}inverse(){return new a(this.direction+Math.PI,this.magnitude)}add(e){return new i.Point2(this.x+e.x,this.y+e.y).toVector2()}addToSelf(e){const t=this.add(e);this.direction=t.direction,this.magnitude=t.magnitude}subtract(e){return new i.Point2(this.x-e.x,this.y-e.y).toVector2()}subtractFromSelf(e){const t=this.subtract(e);this.direction=t.direction,this.magnitude=t.magnitude}static center(e){return i.Point2.center(e.map(e=>e.toPoint2())).toVector2()}}t.Vector2=a},function(e,t){(function(){e.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1);t.Message=class{constructor(e="",t=null,n=i.MessageLevel.Info){this.type=i.TypeName.Message,this.toString=(()=>this.details?`${this.title}: ${this.details}`:this.title),this.title=e,this.details=t,this.level=n}applyJSON(e){return!!(e&&e.type===this.type&&e.title&&e.level)&&(this.title=o.Common.parseString(e.title,""),this.details=o.Common.parseString(e.details),this.level=e.level,!0)}select(e){if(null===e)return this;switch(e.level){case i.MessageLevel.Info:switch(this.level){case i.MessageLevel.Warning:case i.MessageLevel.Danger:case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Warning:switch(this.level){case i.MessageLevel.Danger:case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Danger:switch(this.level){case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Error:return e}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(33);t.DroneCommand=class extends i.Command{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1);class r{constructor(e=new Date){this.type=i.TypeName.Datetime,this.value=e}toJSON(){return{type:this.type,value:this.value.getTime()}}applyJSON(e){if(e.type!==this.type)return!1;const t=o.Common.parseInt(e.value,null);return null!==t&&(this.value=new Date(t),!0)}interpolate(e,t){return new r(new Date(t(this.value.getTime(),e.value.getTime())))}elapsedTime(e){return(this.value.getTime()-e.value.getTime())/1e3}increment(e){this.value=new Date(this.value.getTime()+1e3*e)}}t.Datetime=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.areaConversion=t.timeConversion=t.distanceConversion=t.altitudeKeys=t.latitudeKeys=t.longitudeKeys=t.MAXLON=t.MINLON=t.MAXLAT=t.MINLAT=t.earthRadius=t.sexagesimalPattern=void 0;t.sexagesimalPattern=/^([0-9]{1,3})°\s*([0-9]{1,3}(?:\.(?:[0-9]{1,}))?)['′]\s*(([0-9]{1,3}(\.([0-9]{1,}))?)["″]\s*)?([NEOSW]?)$/;t.earthRadius=6378137;t.MINLAT=-90;t.MAXLAT=90;t.MINLON=-180;t.MAXLON=180;t.longitudeKeys=["lng","lon","longitude",0];t.latitudeKeys=["lat","latitude",1];t.altitudeKeys=["alt","altitude","elevation","elev",2];t.distanceConversion={m:1,km:.001,cm:100,mm:1e3,mi:1/1609.344,sm:1/1852.216,ft:100/30.48,in:100/2.54,yd:1/.9144};t.timeConversion={m:60,h:3600,d:86400};var i={m2:1,km2:1e-6,ha:1e-4,a:.01,ft2:10.763911,yd2:1.19599,in2:1550.0031};t.areaConversion=i,i.sqm=i.m2,i.sqkm=i.km2,i.sqft=i.ft2,i.sqyd=i.yd2,i.sqin=i.in2},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(20),r=i(n(225)),a=n(1);class s{static angleDifferenceSigned(e,t){return Math.atan2(Math.sin(e-t),Math.cos(e-t))}static roundedCorners(e,t,n=!1){if(e.length<2)return[e];if(e.length<3)return[[e[0],e[1]]];n&&e.push(e[0]);const i=[[e[0]]];for(let n=1;n<e.length-1;n++){const a=e[n-1],s=e[n],u=e[n+1],l=new o.Point2(a.x-s.x,a.y-s.y).toVector2(),c=s.toVector2(),m=new o.Point2(u.x-s.x,u.y-s.y).toVector2();let d=10;t&&(d=Array.isArray(t)?t[n]:t),l.magnitude=Math.min(l.magnitude/2,d),m.magnitude=Math.min(m.magnitude/2,d);const h=new r.default(c.add(l).toPoint2(),s,c.add(m).toPoint2());let p=Math.max(10,Math.floor(2*h.length()));p%2==1&&p++,h.getLUT(p).forEach((e,t)=>{t===p/2&&i.push([]),i[i.length-1].push(new o.Point2(e.x,e.y))})}if(n){const n=e[e.length-2],a=e[0],s=e[1],u=new o.Point2(n.x-a.x,n.y-a.y).toVector2(),l=a.toVector2(),c=new o.Point2(s.x-a.x,s.y-a.y).toVector2();let m=10;t&&(m=Array.isArray(t)?t[0]:t),u.magnitude=Math.min(u.magnitude/2,m),c.magnitude=Math.min(c.magnitude/2,m);const d=new r.default(l.add(u).toPoint2(),a,l.add(c).toPoint2());let h=Math.max(10,Math.floor(2*d.length()));h%2==1&&h++;const p=d.getLUT(h).map(e=>new o.Point2(e.x,e.y));i[i.length-1].push(...p.filter((e,t)=>t<=h/2)),i[0].splice(0,1,...p.filter((e,t)=>t>=h/2))}else i[i.length-1].push(a.Common.last(e));return i}static cardinalSplinePoint2(e,t=!1,n=.5,i=100){if(e.length<2)return[e];if(e.length<3)return[[e[0],e[1]]];const r=[];e.forEach(e=>{r.push(e.x),r.push(e.y)});const a=[[]],u=s.cardinalSpline(r,n,i,t);let l=0;for(let e=0;e<u.length;e+=2)1===a.length?a[l].length===i+1&&(a[++l]=[]):a[l].length===i&&e<u.length-2&&(a[++l]=[]),a[l].push(new o.Point2(u[e],u[e+1]));return a}static cardinalSpline(e,t=.5,n=100,i=!1){let o,r=1,a=e.length,s=0,u=new Float32Array((a-2)*n+2+(i?2*n:0)),l=new Float32Array(4*(n+2)),c=4;for(o=e.slice(0),i?(o.unshift(e[a-1]),o.unshift(e[a-2]),o.push(e[0],e[1])):(o.unshift(e[1]),o.unshift(e[0]),o.push(e[a-2],e[a-1])),l[0]=1;r<n;r++){let e=r/n,t=e*e,i=t*e,o=2*i,a=3*t;l[c++]=o-a+1,l[c++]=a-o,l[c++]=i-2*t+e,l[c++]=i-t}l[++c]=1;const m=(e,i,o)=>{for(let r,a=2;a<o;a+=2){let o=e[a],l=e[a+1],c=e[a+2],m=e[a+3],d=(c-e[a-2])*t,h=(m-e[a-1])*t,p=(e[a+4]-o)*t,f=(e[a+5]-l)*t;for(r=0;r<n;r++){let e=r<<2,t=i[e],n=i[e+1],a=i[e+2],g=i[e+3];u[s++]=t*o+n*c+a*d+g*p,u[s++]=t*l+n*m+a*h+g*f}}};return m(o,l,a),i&&((o=[]).push(e[a-4],e[a-3],e[a-2],e[a-1]),o.push(e[0],e[1],e[2],e[3]),m(o,l,4)),a=i?0:e.length-2,u[s++]=e[a],u[s]=e[a+1],u}static polygonArea(e){let t=0,n=e.length-1;for(let i=0;i<e.length;i++)t+=(e[n].x+e[i].x)*(e[n].y-e[i].y),n=i;return Math.abs(t/2)}}t.Geometry=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static t1(e,t){return 0===e?0:t/e}static t2(e,t,n){if(0===t)return 0;const i=e+2*t*n;return i<=0?0:(-e+Math.sqrt(i))/t}static d1(e,t){return e*t}static d2(e,t,n){return(e+t)/2*n}static d3(e,t,n){return e*n+.5*t*Math.pow(n,2)}static d4(e,t,n){return(Math.pow(t,2)-Math.pow(e,2))/(2*n)}static v1(e,t){return i.v2(0,e,t)}static v2(e,t,n){return e+t*n}static v3(e,t,n){return Math.sqrt(Math.pow(e,2)+2*t*n)}static v4(e,t){return 0===t?0:e/t}static tLine(e,t,n,o,r=0){if(o<=0)return 0;(r<=0||r>o)&&(r=o);const a=i.d4(0,e,n),s=i.d4(0,e,-t),u=o-a-s;if(u>0){const l=i.t2(0,n,a),c=i.t1(e,u),m=i.t2(0,-t,s);return r===o?l+c+m:r>a+u?l+c+(m-i.t2(0,-t,s-(r-u-a))):r>a?l+i.t1(e,r-a):i.t2(0,n,r)}const l=o*(a/(a+s)),c=o-l,m=i.t2(0,n,l),d=i.t2(0,-t,c);if(r===o)return m+d;if(r>l){return m+(d-i.t2(0,-t,c-(r-l)))}return i.t2(0,n,r)}static vLine(e,t,n,o,r){return r<=0||r>=o?0:r<i.d4(0,e,n)?i.v3(0,n,r):o-r<i.d4(0,e,-t)?i.v3(0,-t,o-r):e}static dampen(e,t,n=2){return Math.abs(e)<t?t*Math.pow(Math.abs(e)/t,n):e}}t.Kinematic=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),r=n(2);class a{constructor(e=0,t=i.AltitudeSystem.ATL){this.type=i.TypeName.Altitude,this.system=i.AltitudeSystem.ATL,this.value=e,this.system=t}applyJSON(e){return!(!e||e.type!==this.type||!e.system)&&(this.system=e.system,this.value=o.Common.parseFloat(e.value),!0)}interpolate(e,t){return this.system===e.system?new a(t(this.value,e.value),this.system):this}toString(){return`${r.Format.altitude(this.value).toString()} ${r.Format.string(`AltitudeSystem.values.${this.system}.abbreviation`)}`}}t.Altitude=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1);t.Descriptors=class{constructor(e="",t="",n=[]){this.type=i.TypeName.Descriptors,this.name=e,this.description=t,this.tags=n}applyJSON(e){return!(!e||e.type!==this.type||(this.name=o.Common.parseString(e.name,this.name),this.description=o.Common.parseString(e.description,this.description),this.tags=e.tags||this.tags,0))}toString(){return o.Common.joinNotEmpty([this.name,this.description])}merge(e){this.name=this.name||e.name,this.description=this.description||e.description,this.tags=Array.from(new Set([...this.tags,...e.tags]))}}},function(e,t,n){(function(){var t,i,o,r,a,s,u,l,c,m,d,h,p,f,g,y,C={}.hasOwnProperty,v=[].splice;({isObject:y,isFunction:g,isEmpty:f,getValue:p}=n(32)),l=null,o=null,r=null,a=null,s=null,d=null,h=null,m=null,u=null,i=null,c=null,t=null,e.exports=function(){class e{constructor(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,l||(l=n(134),o=n(136),r=n(137),a=n(138),s=n(139),d=n(144),h=n(145),m=n(146),u=n(218),i=n(9),c=n(272),n(135),t=n(273))}setParent(e){var t,n,i,o,r;for(this.parent=e,e&&(this.options=e.options,this.stringify=e.stringify),r=[],n=0,i=(o=this.children).length;n<i;n++)t=o[n],r.push(t.setParent(this));return r}element(e,t,n){var i,o,r,a,s,u,l,c,m;if(u=null,null===t&&null==n&&([t,n]=[{},null]),null==t&&(t={}),t=p(t),y(t)||([n,t]=[t,n]),null!=e&&(e=p(e)),Array.isArray(e))for(r=0,l=e.length;r<l;r++)o=e[r],u=this.element(o);else if(g(e))u=this.element(e.apply());else if(y(e)){for(s in e)if(C.call(e,s))if(m=e[s],g(m)&&(m=m.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===s.indexOf(this.stringify.convertAttKey))u=this.attribute(s.substr(this.stringify.convertAttKey.length),m);else if(!this.options.separateArrayItems&&Array.isArray(m)&&f(m))u=this.dummy();else if(y(m)&&f(m))u=this.element(s);else if(this.options.keepNullNodes||null!=m)if(!this.options.separateArrayItems&&Array.isArray(m))for(a=0,c=m.length;a<c;a++)o=m[a],(i={})[s]=o,u=this.element(i);else y(m)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===s.indexOf(this.stringify.convertTextKey)?u=this.element(m):(u=this.element(s)).element(m):u=this.element(s,m);else u=this.dummy()}else u=this.options.keepNullNodes||null!==n?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===e.indexOf(this.stringify.convertTextKey)?this.text(n):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===e.indexOf(this.stringify.convertCDataKey)?this.cdata(n):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===e.indexOf(this.stringify.convertCommentKey)?this.comment(n):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===e.indexOf(this.stringify.convertRawKey)?this.raw(n):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===e.indexOf(this.stringify.convertPIKey)?this.instruction(e.substr(this.stringify.convertPIKey.length),n):this.node(e,t,n):this.dummy();if(null==u)throw new Error("Could not create any elements with: "+e+". "+this.debugInfo());return u}insertBefore(e,t,n){var i,o,r,a,s;if(null!=e?e.type:void 0)return a=t,(r=e).setParent(this),a?(o=children.indexOf(a),s=children.splice(o),children.push(r),Array.prototype.push.apply(children,s)):children.push(r),r;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return o=this.parent.children.indexOf(this),s=this.parent.children.splice(o),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,s),i}insertAfter(e,t,n){var i,o,r;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return o=this.parent.children.indexOf(this),r=this.parent.children.splice(o+1),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,r),i}remove(){var e;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return e=this.parent.children.indexOf(this),v.apply(this.parent.children,[e,e-e+1].concat([])),this.parent}node(e,t,n){var i;return null!=e&&(e=p(e)),t||(t={}),t=p(t),y(t)||([n,t]=[t,n]),i=new l(this,e,t),null!=n&&i.text(n),this.children.push(i),i}text(e){var t;return y(e)&&this.element(e),t=new h(this,e),this.children.push(t),this}cdata(e){var t;return t=new o(this,e),this.children.push(t),this}comment(e){var t;return t=new r(this,e),this.children.push(t),this}commentBefore(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this}commentAfter(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t+1),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this}raw(e){var t;return t=new d(this,e),this.children.push(t),this}dummy(){return new u(this)}instruction(e,t){var n,i,o,r,a;if(null!=e&&(e=p(e)),null!=t&&(t=p(t)),Array.isArray(e))for(r=0,a=e.length;r<a;r++)n=e[r],this.instruction(n);else if(y(e))for(n in e)C.call(e,n)&&(i=e[n],this.instruction(n,i));else g(t)&&(t=t.apply()),o=new m(this,e,t),this.children.push(o);return this}instructionBefore(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this}instructionAfter(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n+1),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this}declaration(e,t,n){var o,r;return o=this.document(),r=new a(o,e,t,n),0===o.children.length?o.children.unshift(r):o.children[0].type===i.Declaration?o.children[0]=r:o.children.unshift(r),o.root()||o}dtd(e,t){var n,o,r,a,u,l,c,m,d;for(n=this.document(),o=new s(n,e,t),r=a=0,l=(m=n.children).length;a<l;r=++a)if(m[r].type===i.DocType)return n.children[r]=o,o;for(r=u=0,c=(d=n.children).length;u<c;r=++u)if(d[r].isRoot)return n.children.splice(r,0,o),o;return n.children.push(o),o}up(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent}root(){var e;for(e=this;e;){if(e.type===i.Document)return e.rootObject;if(e.isRoot)return e;e=e.parent}}document(){var e;for(e=this;e;){if(e.type===i.Document)return e;e=e.parent}}end(e){return this.document().end(e)}prev(){var e;if((e=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[e-1]}next(){var e;if(-1===(e=this.parent.children.indexOf(this))||e===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[e+1]}importDocument(e){var t,n,o,r,a;if((n=e.root().clone()).parent=this,n.isRoot=!1,this.children.push(n),this.type===i.Document&&(n.isRoot=!0,n.documentObject=this,this.rootObject=n,this.children))for(o=0,r=(a=this.children).length;o<r;o++)if((t=a[o]).type===i.DocType){t.name=n.name;break}return this}debugInfo(e){var t,n;return null!=(e=e||this.name)||(null!=(t=this.parent)?t.name:void 0)?null==e?"parent: <"+this.parent.name+">":(null!=(n=this.parent)?n.name:void 0)?"node: <"+e+">, parent: <"+this.parent.name+">":"node: <"+e+">":""}ele(e,t,n){return this.element(e,t,n)}nod(e,t,n){return this.node(e,t,n)}txt(e){return this.text(e)}dat(e){return this.cdata(e)}com(e){return this.comment(e)}ins(e,t){return this.instruction(e,t)}doc(){return this.document()}dec(e,t,n){return this.declaration(e,t,n)}e(e,t,n){return this.element(e,t,n)}n(e,t,n){return this.node(e,t,n)}t(e){return this.text(e)}d(e){return this.cdata(e)}c(e){return this.comment(e)}r(e){return this.raw(e)}i(e,t){return this.instruction(e,t)}u(){return this.up()}importXMLBuilder(e){return this.importDocument(e)}attribute(e,t){throw new Error("attribute() applies to element nodes only.")}att(e,t){return this.attribute(e,t)}a(e,t){return this.attribute(e,t)}removeAttribute(e){throw new Error("attribute() applies to element nodes only.")}replaceChild(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeChild(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}appendChild(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}hasChildNodes(){return 0!==this.children.length}cloneNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}normalize(){throw new Error("This DOM method is not implemented."+this.debugInfo())}isSupported(e,t){return!0}hasAttributes(){return 0!==this.attribs.length}compareDocumentPosition(e){var n;return this,this===e?0:this.document()!==e.document()?(n=t.Disconnected|t.ImplementationSpecific,Math.random()<.5?n|=t.Preceding:n|=t.Following,n):this.isAncestor(e)?t.Contains|t.Preceding:this.isDescendant(e)?t.Contains|t.Following:this.isPreceding(e)?t.Preceding:t.Following}isSameNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}lookupPrefix(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isDefaultNamespace(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}lookupNamespaceURI(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){var t,n,i;if(e.nodeType!==this.nodeType)return!1;if(e.children.length!==this.children.length)return!1;for(t=n=0,i=this.children.length-1;0<=i?n<=i:n>=i;t=0<=i?++n:--n)if(!this.children[t].isEqualNode(e.children[t]))return!1;return!0}getFeature(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setUserData(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}getUserData(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}contains(e){return!!e&&(e===this||this.isDescendant(e))}isDescendant(e){var t,n,i,o;for(n=0,i=(o=this.children).length;n<i;n++){if(e===(t=o[n]))return!0;if(t.isDescendant(e))return!0}return!1}isAncestor(e){return e.isDescendant(this)}isPreceding(e){var t,n;return t=this.treePosition(e),n=this.treePosition(this),-1!==t&&-1!==n&&t<n}isFollowing(e){var t,n;return t=this.treePosition(e),n=this.treePosition(this),-1!==t&&-1!==n&&t>n}treePosition(e){var t,n;return n=0,t=!1,this.foreachTreeNode(this.document(),function(i){if(n++,!t&&i===e)return t=!0}),t?n:-1}foreachTreeNode(e,t){var n,i,o,r,a;for(e||(e=this.document()),i=0,o=(r=e.children).length;i<o;i++){if(a=t(n=r[i]))return a;if(a=this.foreachTreeNode(n,t))return a}}}return Object.defineProperty(e.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.childNodeList&&this.childNodeList.nodes||(this.childNodeList=new c(this.children)),this.childNodeList}}),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){var e;return e=this.parent.children.indexOf(this),this.parent.children[e-1]||null}}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){var e;return e=this.parent.children.indexOf(this),this.parent.children[e+1]||null}}),Object.defineProperty(e.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(e.prototype,"textContent",{get:function(){var e,t,n,o,r;if(this.nodeType===i.Element||this.nodeType===i.DocumentFragment){for(r="",t=0,n=(o=this.children).length;t<n;t++)(e=o[t]).textContent&&(r+=e.textContent);return r}return null},set:function(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e}.call(this)}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(3),r=n(2);class a{static feetToMeters(e){return.3048*e}static metersToFeet(e){return 3.28084*e}static metersToInches(e){return 39.3701*e}static milesPerHourToMetersPerSecond(e){return.44704*e}static metersPerSecondToMilesPerHour(e){return 2.23694*e}static metersPerSecondToKilometersPerHour(e){return 3.6*e}static kilometersPerHourToMetersPerSecond(e){return.277778*e}static squareMetersToAcres(e){return 247105e-9*e}static squareMetersToHectares(e){return 1e-4*e}static radiansToDegrees(e,t=!1){if(t){if(e>2*Math.PI)return a.radiansToDegrees(e-2*Math.PI,t);if(e<0)return a.radiansToDegrees(e+2*Math.PI,t)}return 57.2958*e}static degreesToRadians(e,t=!1){if(t){if(e>360)return a.degreesToRadians(e-360,t);if(e<0)return a.degreesToRadians(e+360,t)}return.0174533*e}static distance(){switch(r.Format.UnitSystem){case i.UnitSystem.Metric:return new u(r.Format.distance,new s({name:o.Strings.Unit.values.meters.name,abbreviation:o.Strings.Unit.values.meters.abbreviation},1));case i.UnitSystem.Imperial:return new u(r.Format.distance,new s({name:o.Strings.Unit.values.feet.name,abbreviation:o.Strings.Unit.values.feet.abbreviation},0,a.metersToFeet),new s({name:o.Strings.Unit.values.meters.name,abbreviation:o.Strings.Unit.values.meters.abbreviation},1,a.feetToMeters))}}static angle(e=!1){return new u(t=>r.Format.angle(t,e),new s({name:o.Strings.Unit.values.degrees.name,abbreviation:o.Strings.Unit.values.degrees.abbreviation},0,t=>a.radiansToDegrees(t,e)),new s({name:o.Strings.Unit.values.radians.name,abbreviation:o.Strings.Unit.values.radians.abbreviation},0,t=>a.degreesToRadians(t,e)))}static percent(){return new u(r.Format.percent,new s({name:o.Strings.Unit.values.percent.name,abbreviation:o.Strings.Unit.values.percent.abbreviation},0,e=>100*e),new s({name:o.Strings.Unit.values.percent.name,abbreviation:o.Strings.Unit.values.percent.abbreviation},2,e=>e/100))}static velocityHorizontal(){switch(r.Format.UnitSystem){case i.UnitSystem.Metric:return new u(r.Format.velocityHorizontal,new s({name:o.Strings.Unit.values.kilometersPerHour.name,abbreviation:o.Strings.Unit.values.kilometersPerHour.abbreviation},1,a.metersPerSecondToKilometersPerHour),new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1,a.kilometersPerHourToMetersPerSecond));case i.UnitSystem.Imperial:return new u(r.Format.velocityHorizontal,new s({name:o.Strings.Unit.values.milesPerHour.name,abbreviation:o.Strings.Unit.values.milesPerHour.abbreviation},1,a.metersPerSecondToMilesPerHour),new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1,a.milesPerHourToMetersPerSecond))}}static velocityVertical(){switch(r.Format.UnitSystem){case i.UnitSystem.Metric:return new u(r.Format.velocityVertical,new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1));case i.UnitSystem.Imperial:return new u(r.Format.velocityVertical,new s({name:o.Strings.Unit.values.feetPerSecond.name,abbreviation:o.Strings.Unit.values.feetPerSecond.abbreviation},1,a.metersToFeet),new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1,a.feetToMeters))}}static velocityRotational(){return new u(r.Format.velocityRotational,new s({name:o.Strings.Unit.values.degreesPerSecond.name,abbreviation:o.Strings.Unit.values.degreesPerSecond.abbreviation},1,a.radiansToDegrees),new s({name:o.Strings.Unit.values.radiansPerSecond.name,abbreviation:o.Strings.Unit.values.radiansPerSecond.abbreviation},1,a.degreesToRadians))}static accelerationHorizontal(){switch(r.Format.UnitSystem){case i.UnitSystem.Metric:return new u(r.Format.accelerationHorizontal,new s({name:o.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:o.Strings.Unit.values.metersPerSecondSquared.abbreviation},1));case i.UnitSystem.Imperial:return new u(r.Format.accelerationHorizontal,new s({name:o.Strings.Unit.values.feetPerSecondSquared.name,abbreviation:o.Strings.Unit.values.feetPerSecondSquared.abbreviation},1,a.metersToFeet),new s({name:o.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:o.Strings.Unit.values.metersPerSecondSquared.abbreviation},1,a.feetToMeters))}}static accelerationVertical(){return a.accelerationHorizontal()}static accelerationRotational(){return new u(r.Format.accelerationRotational,new s({name:o.Strings.Unit.values.degreesPerSecondSquared.name,abbreviation:o.Strings.Unit.values.degreesPerSecondSquared.abbreviation},1,a.radiansToDegrees),new s({name:o.Strings.Unit.values.radiansPerSecondSquared.name,abbreviation:o.Strings.Unit.values.radiansPerSecondSquared.abbreviation},1,a.degreesToRadians))}static converters(e){switch(e){case i.MeasurementType.Distance:return a.distance();case i.MeasurementType.VelocityHorizontal:return a.velocityHorizontal();case i.MeasurementType.VelocityVertical:return a.velocityVertical();case i.MeasurementType.VelocityRotational:return a.velocityRotational();case i.MeasurementType.AccelerationHorizontal:return a.accelerationHorizontal();case i.MeasurementType.AccelerationVertical:return a.accelerationVertical();case i.MeasurementType.AccelerationRotational:return a.accelerationRotational();case i.MeasurementType.Angle:return a.angle();case i.MeasurementType.AngleMod:return a.angle(!0);case i.MeasurementType.Percent:return a.percent()}}}t.Convert=a;class s{constructor(e,t,n=null){this.unit=e,this.precision=t,this.convert=n||(e=>e)}get increment(){return 1/Math.pow(10,this.precision)}get incrementConverted(){return this.convert(this.increment)}display(e){return this.convert(e).toFixed(this.precision)}}t.Converter=s;class u{constructor(e,t,n=null){this.format=e,this.modelToUser=t,this.userToModel=n||t}}t.Converters=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(8),o=n(0),r=n(1);class a{constructor(e=0,t=0){this.type=o.TypeName.Point2,this.x=e,this.y=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=r.Common.parseFloat(e.x),this.y=r.Common.parseFloat(e.y),!0)}get direction(){return Math.atan2(this.y,this.x)}get magnitude(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}toVector2(){return new i.Vector2(this.direction,this.magnitude)}distance(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))}midPoint(e){return this.interpolate(e,.5)}interpolateDistance(e,t){return 0===this.distance(e)?this:this.interpolate(e,Math.min(Math.max(t/this.distance(e),0),1))}interpolate(e,t){return new a(this.x+(e.x-this.x)*t,this.y+(e.y-this.y)*t)}static center(e){const t=new a;return e.forEach(n=>{t.x+=n.x/e.length,t.y+=n.y/e.length}),t}static boundingBox(e,t=0,n=1){const i=a.center(e).toVector2(),o=e.map(e=>{const n=e.toVector2().subtract(i);return n.direction-=t,n.toPoint2()});let r=new a,s=new a;o.forEach((e,t)=>{(0===t||e.x<r.x)&&(r.x=e.x),(0===t||e.y<r.y)&&(r.y=e.y),(0===t||e.x>s.x)&&(s.x=e.x),(0===t||e.y>s.y)&&(s.y=e.y)});const u={topLeft:new a(s.x,r.y).toVector2(),topRight:s.toVector2(),bottomLeft:r.toVector2(),bottomRight:new a(r.x,s.y).toVector2()};return u.topLeft.direction+=t,u.topLeft.magnitude=u.topLeft.magnitude*=n,u.topRight.direction+=t,u.topRight.magnitude=u.topRight.magnitude*=n,u.bottomLeft.direction+=t,u.bottomLeft.magnitude=u.bottomLeft.magnitude*=n,u.bottomRight.direction+=t,u.bottomRight.magnitude=u.bottomRight.magnitude*=n,{topLeft:i.add(u.topLeft).toPoint2(),topRight:i.add(u.topRight).toPoint2(),bottomLeft:i.add(u.bottomLeft).toPoint2(),bottomRight:i.add(u.bottomRight).toPoint2()}}}t.Point2=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(3),r=n(2),a=n(1),s=n(14),u=n(34),l=n(15),c=n(85);class m{constructor(e=null,t=i.OrientationXReference.Horizon,n=null,a=null,s=i.OrientationZReference.North){this.type=i.TypeName.Orientation3Optional,this.toString=(()=>{let e=[];return null!==this.x&&(this.xReference===i.OrientationXReference.Horizon?e.push(`${o.Strings.Orientation3.values.x} ${r.Format.angle(this.x,!1)}`):e.push(`${o.Strings.Orientation3.values.x} ${r.Format.angle(this.x,!1)} ∠ ${r.Format.enum("OrientationXReference",this.xReference)}`)),null!==this.y&&e.push(`${o.Strings.Orientation3.values.y} ${r.Format.angle(this.y,!1)}`),null!==this.z&&(this.zReference===i.OrientationZReference.North?e.push(`${o.Strings.Orientation3.values.z} ${r.Format.angle(this.z,!0)}`):e.push(`${o.Strings.Orientation3.values.z} ${r.Format.angle(this.z,!0)} ∠ ${r.Format.enum("OrientationZReference",this.zReference)}`)),e.join(o.Strings.Common.delimeter)}),this.x=e,this.xReference=t,this.y=n,this.z=a,this.zReference=s}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=a.Common.parseFloat(e.x,null),this.xReference=e.xReference||i.OrientationXReference.Horizon,this.y=a.Common.parseFloat(e.y,null),this.z=a.Common.parseFloat(e.z,null),this.zReference=e.zReference||i.OrientationZReference.North,!0)}interpolate(e,t,n,o){let r=this.x,a=this.xReference;if(null!==this.x&&null!==e.x){let n=this.x,u=e.x;e.xReference!==this.xReference&&(n=t.x.value(this.xReference)+this.x,u=t.x.value(e.xReference)+e.x,a=i.OrientationXReference.Horizon),r=n-o(0,s.Geometry.angleDifferenceSigned(n,u))}let u=this.z,l=this.zReference;if(null!==this.z&&null!==e.z){let n=this.z,r=e.z;e.zReference!==this.zReference&&(n=t.z.value(this.zReference)+this.z,r=t.z.value(e.zReference)+e.z,l=i.OrientationZReference.North),u=n-o(0,s.Geometry.angleDifferenceSigned(n,r))}const c=new m(r,a,null===this.y?null:null===e.y?this.y:o(this.y,e.y),u,l);return c.convertReferences(t,n),c}convertReferences(e,t=new c.OrientationReferenceTargets){this.xReference!==t.x&&(null!==this.x&&(this.x=e.x.value(this.xReference)+this.x-e.x.value(t.x)),this.xReference=t.x),this.zReference!==t.z&&(null!==this.z&&(this.z=e.z.value(this.zReference)+this.z-e.z.value(t.z)),this.zReference=t.z)}velocity(e,t){const n=new u.Velocity3;return null!==this.x&&null!==e.x&&this.xReference===e.xReference&&(n.x=l.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.x,e.x),t)),null!==this.y&&null!==e.y&&(n.y=l.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.y,e.y),t)),null!==this.z&&null!==e.z&&this.zReference===e.zReference&&(n.z=l.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.z,e.z),t)),n}get pitch(){return this.x}set pitch(e){this.x=e}get pitchReference(){return this.xReference}set pitchReference(e){this.xReference=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get yawReference(){return this.zReference}set yawReference(e){this.zReference=e}apply(e){return this.x=e.x,this.xReference=e.xReference,this.y=e.y,this.z=e.z,this.zReference=e.zReference,this}}t.Orientation3Optional=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(90),o=n(95),r=n(67),a=n(4),s=n(8),u=n(1),l=n(0),c=n(3);t.SubComponent=class extends o.Component{constructor(){super(...arguments),this.required=!0,this.exclusive=!1,this.reference=new i.SourcedGeoSpatial,this.pointsOfInterest=[]}applyJSON(e){if(!super.applyJSON(e))return!1;if(!this.descriptors.applyJSON(e.descriptors)||!this.coordinate.applyJSON(e.coordinate))return!1;if(this.required=u.Common.parseBoolean(e.required,!0),this.exclusive=u.Common.parseBoolean(e.exclusive,!1),!this.reference.applyJSON(e.reference))return!1;if(this.pointsOfInterest=[],Array.isArray(e.pointsOfInterest))for(let t of e.pointsOfInterest){const e=a.Serialization.deserialize(t);if(!(e&&e instanceof r.PointOfInterest))return!1;this.pointsOfInterest.push(e)}return!0}get pointsOfInterestEnabled(){return!1}get pointsOfInterestReferences(){return[]}get exclusiveReadonly(){return!1}get exclusiveExecution(){return this.exclusive}get repositionIfIncluded(){return!1}reposition(e,t){const n=this.node().referenceOffsets;if(n.length>0){const i=t?this.referenceCoordinate(t,null).offset(e).subtract(n[0]):new s.Vector2;n.forEach(e=>{e.addToSelf(i)})}}get referenceOffsets(){return this.pointsOfInterestEnabled?super.referenceOffsets.concat(this.pointsOfInterest.map(e=>e.referencedOffset.coordinateOffset)):super.referenceOffsets}referenceSpatial(e){return this.reference.value(e.spatialSources)}referenceCoordinate(e,t=null){return this.referenceSpatial(e).coordinate.geoCoordinate(t||new s.Vector2)}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.pointsOfInterest.forEach(n=>{const i=n.referenceSpatial(e.spatialSources,this.reference);i.altitude.system===l.AltitudeSystem.AGL&&t.push(i.coordinate)}),t}pointOfInterestCoordinate(e,t){return this.pointsOfInterest[t].referenceCoordinate(e.spatialSources,this.reference)}pointsOfInterestCoordinates(e){return this.pointsOfInterest.map(t=>t.referenceCoordinate(e.spatialSources,this.reference))}pointOfInterestByID(e){return this.pointsOfInterest.find(t=>t.id===e)}pointOfInterestCoordinateByID(e,t){const n=this.pointOfInterestByID(t);return n?n.referenceCoordinate(e.spatialSources,this.reference):null}pointOfInterestReferencedAltitudeByID(e,t){const n=this.pointOfInterestByID(t);if(!n)return null;const i=n.referenceSpatial(e.spatialSources,this.reference);return this.referencedAltitude(e,i.altitude,i.coordinate)}node(e=null){const t=super.node(e);return this.pointsOfInterestEnabled&&t.children.push(new r.PointsOfInterestNode(t,()=>this.pointsOfInterest)),t}engaging(e){super.engaging(e),this.elevationsPending(e)&&e.execution.getComponentState(this).failed(c.Strings.SubComponent.messages.failedElevationsPending.title,e.engagement.currentDatetime)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(16),o=n(48),r=n(29),a=n(15),s=n(8),u=n(0),l=n(12),c=n(26),m=n(14),d=n(19);t.GeoSpatial=class{constructor(){this.type=u.TypeName.GeoSpatial,this.updated=new l.Datetime,this.coordinate=new r.GeoCoordinate,this.altitude=new i.Altitude,this.orientation=new o.Orientation3,this.velocity=new c.Velocity6}applyJSON(e){return!(!e||e.type!==this.type)&&this.updated.applyJSON(e.updated)&&this.coordinate.applyJSON(e.coordinate)&&this.altitude.applyJSON(e.altitude)&&this.orientation.applyJSON(e.orientation)&&this.velocity.applyJSON(e.velocity)}applyVelocity(e){this.coordinate=this.coordinate.geoCoordinate(new s.Vector2(this.velocity.horizontal.direction,a.Kinematic.d1(e,this.velocity.horizontal.magnitude))),this.altitude.value+=a.Kinematic.d1(this.velocity.vertical,e),this.orientation.applyVelocity(this.velocity.orientation,e)}interpolate(e,t,n,i){const o=this.coordinate.interpolate(e.coordinate,e=>i(0,e)).toGeoSpatial();return o.updated=this.updated.interpolate(e.updated,i),o.altitude=this.altitude.interpolate(e.altitude,i),o.orientation=this.orientation.interpolate(e.orientation,t,n,i),o.velocity=this.velocity.interpolate(e.velocity,i),o}projectCoordinate(e){return this.coordinate.geoCoordinate(new s.Vector2(this.velocity.horizontal.direction,a.Kinematic.d1(this.velocity.horizontal.magnitude,e)))}projectAltitude(e){return new i.Altitude(this.altitude.value+a.Kinematic.d1(this.velocity.vertical,e),this.altitude.system)}projectOrientation(e){return new o.Orientation3(this.orientation.x+a.Kinematic.d1(this.velocity.orientation.x,e),this.orientation.xReference,this.orientation.y+a.Kinematic.d1(this.velocity.orientation.y,e),this.orientation.z+a.Kinematic.d1(this.velocity.orientation.z,e),this.orientation.zReference)}groundCoordinate(e,t=0,n=d.Convert.degreesToRadians(-5)){e=Math.min(e,n);const i=m.Geometry.angleDifferenceSigned(e,-Math.PI/2);return 0===i?this.coordinate:this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+t,Math.tan(i)*Math.abs(this.altitude.value)))}groundCoordinates(e,t,n=d.Convert.degreesToRadians(-5)){if(t<-d.Convert.degreesToRadians(35)||t>d.Convert.degreesToRadians(15)){const i=t+e.vertical/2;if(i>n)return this.groundCoordinates(e,n-e.vertical/2-.01,n);const o=this.groundCoordinate(t),r=this.groundCoordinate(t-e.vertical/2),a=o.distance(r),u=this.groundCoordinate(i),l=o.distance(u),c=Math.atan2(e.horizontal,e.vertical),m=[];if(m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw+Math.PI+c,a*Math.tan(c)))),Math.abs(i-n)<.01){const e=25;for(let t=0;t<=e;t++)m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw-c+t/e*2*c,l*Math.tan(c))))}else m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw-c,l*Math.tan(c)))),m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw+c,l*Math.tan(c))));return m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw+Math.PI-c,a*Math.tan(c)))),m}const i=Math.min(t+e.vertical/2,n),o=t-e.vertical/2;if(o>=i)return[];const r=this.groundCoordinate(o),a=this.coordinate.distance(r);if(o<-Math.PI/2||a>1e3)return[];const u=this.groundCoordinate(i),l=this.coordinate.distance(u),c=e.horizontal/2,m=[];if(m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c,a))),i>=n){const e=25;for(let t=0;t<=e;t++)m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c+t/e*2*c,l)))}else m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c,l))),m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+c,l)));return m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+e.horizontal/2,a))),m}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=a(n(91)),r=a(n(123));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=(0,o.default)(e,i.latitudeKeys);if(null!=n){var a=e[n];return!0===t?a:(0,r.default)(a)}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=a(n(91)),r=a(n(123));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=(0,o.default)(e,i.longitudeKeys);if(null!=n){var a=e[n];return!0===t?a:(0,r.default)(a)}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(34),r=n(1),a=n(3),s=n(2);class u{constructor(e=new o.Velocity3,t=new o.Velocity3){this.type=i.TypeName.Velocity6,this.toString=(()=>r.Common.joinNotEmpty([0===this.horizontal.magnitude?"":a.Strings.formatString(a.Strings.Velocity6.toString.horizontal,s.Format.velocityHorizontal(this.horizontal.magnitude).toString(),s.Format.angle(this.horizontal.direction).toString()),0===this.vertical?"":a.Strings.formatString(a.Strings.Velocity6.toString.vertical,s.Format.velocityVertical(this.vertical).toString()),0===this.rotational?"":a.Strings.formatString(a.Strings.Velocity6.toString.rotational,s.Format.velocityRotational(this.rotational).toString())])),this.position=e,this.orientation=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.position.applyJSON(e.position)&&this.orientation.applyJSON(e.orientation))}interpolate(e,t){return new u(this.position.interpolate(e.position,t),this.orientation.interpolate(e.orientation,t))}get horizontal(){return this.position.horizontal}set horizontal(e){this.position.horizontal=e}get vertical(){return this.position.vertical}set vertical(e){this.position.vertical=e}get rotational(){return this.orientation.z}set rotational(e){this.orientation.z=e}}t.Velocity6=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(40),r=n(0),a=n(100),s=n(26),u=n(23),l=n(21),c=n(70),m=n(37),d=n(4),h=n(34),p=n(1),f=n(8),g=n(15),y=n(20),C=n(7),v=n(97),S=n(64),b=n(85),w=n(3),x=n(10),M=n(2),O=n(14),D=n(71);class P extends i.SubComponent{constructor(){super(...arguments),this.droneMotionLimits=new a.MotionLimits6Optional,this.droneMotionErrorTolerance=null}applyJSON(e){if(!super.applyJSON(e))return!1;if(e.droneMotionErrorTolerance){if(this.droneMotionErrorTolerance=new D.DistanceTolerance,!this.droneMotionErrorTolerance.applyJSON(e.droneMotionErrorTolerance))return!1}else this.droneMotionErrorTolerance=null;return this.droneMotionLimits.applyJSON(e.droneMotionLimits)}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!0}get repositionIfIncluded(){return!0}descendantAllowed(e){return!!super.descendantAllowed(e)&&(!(e instanceof P)&&0===e.node().descendants.filter(e=>e instanceof v.ComponentNode&&e.component instanceof P).length)}resolveDroneMotionLimits(e,t=null){return e.plan.droneMotionLimits.resolve(t||this.droneMotionLimits)}resolveDroneMotionErrorTolerance(e,t=null){return t||e.plan.droneMotionErrorTolerance}addVelocityCommandsFromModel(e,t,n){const i=t.sampleInterpolated,{drone:r,execution:a}=e,u=this.referenceSpatial(e),l=r.projectSpatial(e.engagement.currentDatetime),c=d.Serialization.clone(i.droneSpatial.velocity),m=new s.Velocity6,h=l.coordinate.offset(i.droneSpatial.coordinate);o.VelocityDroneCommand.updateBoundedVelocityHorizontal(m,h.direction,h.magnitude<C.Constants.DroneMotionComponentHorizontalErrorMax?p.Common.sigmoid(h.magnitude/C.Constants.DroneMotionComponentHorizontalErrorMax,C.Constants.DroneMotionComponentErrorK):h.magnitude,i.droneMotionLimits,u.velocity.horizontal);const f=i.droneSpatial.altitude.value-l.altitude.value;o.VelocityDroneCommand.updateBoundedVelocityVertical(m,Math.abs(f)<C.Constants.DroneMotionComponentVerticalErrorMax?p.Common.matchSign(p.Common.sigmoid(Math.abs(f)/C.Constants.DroneMotionComponentVerticalErrorMax,C.Constants.DroneMotionComponentErrorK),f):f,i.droneMotionLimits,u.velocity.vertical);const g=[],y=this.resolveDroneMotionErrorTolerance(e,this.droneMotionErrorTolerance);if(y.validHorizontal(h.magnitude)||g.push(w.Strings.formatString(w.Strings.DroneMotionComponent.messages.disengageErrorTolerance.details.distance,M.Format.distance(h.magnitude).toString())),y.validVertical(f)||g.push(w.Strings.formatString(w.Strings.DroneMotionComponent.messages.disengageErrorTolerance.details.altitude,M.Format.altitude(f).toString())),g.length>0)return void e.engagement.disengage(e.drone,new x.Message(w.Strings.DroneMotionComponent.messages.disengageErrorTolerance.title,p.Common.joinNotEmpty(g)));const v=O.Geometry.angleDifferenceSigned(i.droneSpatial.orientation.yaw,l.orientation.yaw);o.VelocityDroneCommand.updateBoundedVelocityRotational(m,Math.abs(v)<C.Constants.DroneMotionComponentRotationalErrorMax?p.Common.matchSign(p.Common.sigmoid(Math.abs(v)/C.Constants.DroneMotionComponentRotationalErrorMax,C.Constants.DroneMotionComponentErrorK),v):v,i.droneMotionLimits,u.velocity.rotational),c.horizontal=c.horizontal.add(m.horizontal),c.vertical+=m.vertical,c.rotational+=m.rotational;const S=new o.VelocityDroneCommand;S.velocity=c,n&&(S.velocity.rotational=0,S.heading=i.droneSpatial.orientation.yaw);const b=S.toMessage();b.details&&a.getComponentState(this).messages.push(b),r.addStatelessCommand(S);for(const t of Object.keys(i.gimbalOrientations))this.addGimbalVelocityCommand(e,parseInt(t),i.gimbalOrientations[t],{x:0,z:0},i.gimbalVelocities[t])}addDroneVelocityCommand(e,t,n=null){const i=e.execution.getComponentState(this),a=i.cachedData(r.TypeName.DroneMotionComponent,()=>new T),s=this.resolveDroneMotionLimits(e),u=new o.VelocityDroneCommand;return u.velocity=o.VelocityDroneCommand.boundedVelocity(a.previousVelocity,t,e.engagement.timeSinceLastExecution,s),u.heading=n,u.toMessage().details&&i.messages.push(u.toMessage()),e.drone.addStatelessCommand(u),a.previousVelocity=u.velocity,u}reengagementDroneSpatial(e){return null}}t.DroneMotionComponent=P;class T{constructor(){this.previousVelocity=new s.Velocity6}}t.DroneMotionComponentModelData=class{constructor(e){this.currentTime=0,this._sample=e.first,this.totalTime=e.last.current.time}updateProgress(e){this.updateTime(Math.max(0,Math.min(1,e))*this.totalTime)}updateTime(e){for(e<this.currentTime&&(this._sample=this._sample.first),this.currentTime=e;this._sample.next&&this._sample.next.current.time<this.currentTime;)this._sample=this._sample.next}incrementTime(e){this.updateTime(this.currentTime+e)}get sampleLinked(){return this._sample}get sampleInterpolated(){if(!this._sample.next)return this._sample.current;const e=(this.currentTime-this._sample.current.time)/(this._sample.next.current.time-this._sample.current.time);return this._sample.current.interpolate(this._sample.next.current,e)}get progress(){return Math.min(1,this.currentTime/this.totalTime)}};class F{constructor(e){this.firstSample=e.first,this.samples=this.firstSample.list}addToEstimate(e){var t;if(this.samples.length>0){let n=(null===(t=e.lastDroneSpatial)||void 0===t?void 0:t.updated.value)||new Date;this.samples.forEach(t=>{const i=t.current.droneSpatial;i.updated.value=new Date(n.getTime()+1e3*t.current.time),e.droneSpatials.push(i)}),e.time+=p.Common.last(this.samples).current.time}}static updateSamplesContrainVelocities(e,t){F.updateSamplesContrainHorizontalVelocitiesByAcceleration(e),F.updateSamplesContrainVerticalVelocitiesByAcceleration(e,t),F.updateSamplesTime(e),F.updateSamplesContrainHorizontalVelocitiesByTime(e),F.updateSamplesContrainHorizontalVelocitiesByAcceleration(e),F.updateSamplesTime(e),F.updateSamplesContrainVerticalVelocitiesByTime(e),F.updateSamplesContrainVerticalVelocitiesByAcceleration(e,t),F.updateSamplesTime(e),F.updateSamplesContrainVerticalVelocitiesByTime(e),F.updateSamplesContrainHorizontalVelocitiesByTime(e),F.updateSamplesOrientationVelocities(e)}static updateSamplesContrainHorizontalVelocitiesByAcceleration(e){const t=(e,t,n)=>{const i=t.droneSpatial.coordinate.offset(e.droneSpatial.coordinate);if(0===i.magnitude)return void(e.droneSpatial.velocity.horizontal=new f.Vector2);const o=e.droneSpatial.velocity.horizontal,r=t.droneSpatial.velocity.horizontal,a=0===r.magnitude?o.direction:r.direction;if(o.direction-=a,r.direction=0,o.x<=0)return void(e.droneSpatial.velocity.horizontal=new f.Vector2);const s=new f.Vector2(o.direction,i.magnitude),u=new y.Point2(Math.min(o.x,g.Kinematic.v3(r.x,n,s.x)),g.Kinematic.v3(0,n,Math.abs(s.y)));o.x>u.x&&(o.magnitude*=u.x/o.x),Math.abs(o.y)>u.y&&(o.magnitude*=u.y/Math.abs(o.y)),o.direction+=a,e.droneSpatial.velocity.horizontal=o};let n=e.first;for(n.current.droneSpatial.velocity.horizontal=new f.Vector2;n.next;)(n=n.next).next&&n.previous&&t(n.current,n.previous.current,n.current.droneMotionLimits.horizontal.acceleration.max);for((n=e.last).current.droneSpatial.velocity.horizontal=new f.Vector2;n.previous;)(n=n.previous).next&&n.previous&&t(n.current,n.next.current,-n.current.droneMotionLimits.horizontal.acceleration.min);for((n=e.first).current.droneSpatial.velocity.horizontal=new f.Vector2;n.next;)(n=n.next).next&&n.previous&&t(n.current,n.previous.current,n.current.droneMotionLimits.horizontal.acceleration.max)}static updateSamplesContrainVerticalVelocitiesByAcceleration(e,t){let n=e.first;for(;n.next;)if((n=n.next).next&&n.previous){let e=0;const i=n.current.droneSpatial.altitude.value-n.previous.current.droneSpatial.altitude.value;if(Math.abs(i)>.01*t){const t=n.previous.current.droneSpatial.velocity.vertical;i>0&&t>0?e=t:i<0&&t<0&&(e=Math.abs(t)),e=g.Kinematic.v3(e,n.current.droneMotionLimits.vertical.acceleration.max,Math.abs(i))}n.current.droneSpatial.velocity.vertical=n.current.droneMotionLimits.vertical.velocity.bound((i<0?-1:1)*e)}for((n=e.last).current.droneSpatial.velocity.vertical=0;n.previous;)if((n=n.previous).next&&n.previous&&0!==n.current.droneSpatial.velocity.vertical){let e=0;n.current.droneSpatial.velocity.vertical>0&&n.next.current.droneSpatial.velocity.vertical>0?e=n.next.current.droneSpatial.velocity.vertical:n.current.droneSpatial.velocity.vertical<0&&n.next.current.droneSpatial.velocity.vertical<0&&(e=Math.abs(n.next.current.droneSpatial.velocity.vertical));const t=n.current.droneSpatial.altitude.value-n.next.current.droneSpatial.altitude.value;e=g.Kinematic.v3(e,-n.current.droneMotionLimits.vertical.acceleration.min,Math.abs(t)),n.current.droneSpatial.velocity.vertical<0?(e=-e,n.current.droneSpatial.velocity.vertical<e&&(n.current.droneSpatial.velocity.vertical=e)):n.current.droneSpatial.velocity.vertical>e&&(n.current.droneSpatial.velocity.vertical=e)}}static updateSamplesContrainHorizontalVelocitiesByTime(e){let t=e.first;for(;t.next;)if((t=t.next).next&&t.previous){const e=t.current.droneSpatial.velocity.horizontal;e.magnitude=Math.min(e.magnitude,g.Kinematic.v4(t.current.droneSpatial.coordinate.distance(t.previous.current.droneSpatial.coordinate),t.current.time-t.previous.current.time)),t.current.droneSpatial.velocity.horizontal=e}}static updateSamplesContrainVerticalVelocitiesByTime(e){let t=e.first;for(;t.next;)if((t=t.next).next&&t.previous){const e=g.Kinematic.v4(Math.abs(t.current.droneSpatial.altitude.value-t.previous.current.droneSpatial.altitude.value),t.current.time-t.previous.current.time);t.current.droneSpatial.velocity.vertical=(t.current.droneSpatial.velocity.vertical<0?-1:1)*Math.min(Math.abs(t.current.droneSpatial.velocity.vertical),e)}}static updateSamplesTime(e){let t=e.first;for(;t.next;)if((t=t.next).previous){let e=0;const n=(null===t.next?t.previous:t).current.droneSpatial.velocity.horizontal.magnitude,i=Math.abs((null===t.next?t.previous:t).current.droneSpatial.velocity.vertical);if(n>0){const i=t.previous.current.droneSpatial.coordinate.distance(t.current.droneSpatial.coordinate);e=g.Kinematic.t1(n,i)}if(i>0&&(0===n||i>.1*n)){const n=Math.abs(t.current.droneSpatial.altitude.value-t.previous.current.droneSpatial.altitude.value);e=Math.max(g.Kinematic.t1(i,n),e)}e=Math.min(C.Constants.DroneMotionComponentModelSampleTimeMax,e),t.current.time=t.previous.current.time+e}}static updateSamplesOrientationVelocities(e){let t=e.first;for(;t.next;){const e=t.next.current.time-t.current.time,n=O.Geometry.angleDifferenceSigned(t.next.current.droneSpatial.orientation.yaw,t.current.droneSpatial.orientation.yaw);t.current.droneSpatial.velocity.rotational=g.Kinematic.v4(n,e);for(const n of Object.keys(t.current.gimbalOrientations)){const i=t.current.gimbalOrientations[n],o=t.next.current.gimbalOrientations[n];o&&(t.current.gimbalVelocities[n]=o.velocity(i,e))}t=t.next}for(t=e.first;t.next;)t.previous&&Math.abs(t.previous.current.droneSpatial.velocity.rotational-t.next.current.droneSpatial.velocity.rotational)<C.Constants.DroneMotionComponentRotationalSmoothingTolerance&&Math.abs(t.current.droneSpatial.velocity.rotational-t.previous.current.droneSpatial.velocity.rotational)>C.Constants.DroneMotionComponentRotationalSmoothingTolerance&&(t.current.droneSpatial.velocity.rotational=(t.previous.current.droneSpatial.velocity.rotational+t.next.current.droneSpatial.velocity.rotational)/2),t=t.next}}t.DroneMotionComponentModel=F;t.DroneMotionComponentModelSampleLinked=class extends c.LinkedValue{};class E{constructor(e,t,n,i){this.time=0,this.droneSpatial=new u.GeoSpatial,this.droneSpatial=e,this.droneMotionLimits=t,this.gimbalOrientations=n,this.gimbalVelocities=i}applyJSON(e){if(this.time=p.Common.parseFloat(e.time),!this.droneSpatial.applyJSON(e.droneSpatial))return!1;if(this.gimbalOrientations={},e.gimbalOrientations)for(let t of Object.keys(e.gimbalOrientations)){const n=new l.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}if(this.gimbalVelocities={},e.gimbalVelocities)for(let t of Object.keys(e.gimbalVelocities)){const n=new h.Velocity3;if(!n.applyJSON(e.gimbalVelocities[t]))return!1;this.gimbalVelocities[t]=n}return!0}interpolate(e,t,n=new S.OrientationReferenceSources){const i=(e,n)=>m.Interpolation.linear(e,n,t),o={};for(const t of Object.keys(this.gimbalOrientations))e.gimbalOrientations[t]?o[t]=this.gimbalOrientations[t].interpolate(e.gimbalOrientations[t],n,new b.OrientationReferenceTargets,i):o[t]=d.Serialization.clone(this.gimbalOrientations[t]);const r={};for(const t of Object.keys(this.gimbalVelocities))e.gimbalVelocities[t]?r[t]=this.gimbalVelocities[t].interpolate(e.gimbalVelocities[t],i):r[t]=d.Serialization.clone(this.gimbalVelocities[t]);const a=new E(this.droneSpatial.interpolate(e.droneSpatial,n,new b.OrientationReferenceTargets,i),this.droneMotionLimits.interpolate(e.droneMotionLimits,i),o,r);return a.time=i(this.time,e.time),a}}t.DroneMotionComponentModelSample=E},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),r=n(3),a=n(2);class s{constructor(e=0,t){this.type=i.TypeName.Limits,this.max=e,this.min=void 0===t?0===e?0:-e:t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.max=o.Common.parseFloat(e.max),this.min=o.Common.parseFloat(e.min),!0)}bound(e){return Math.max(Math.min(e,this.max),this.min)}valid(e){return e<=this.max&&e>=this.min}interpolate(e,t){return new s(t(this.max,e.max),t(this.min,e.min))}toString(e=null,t={min:!0,max:!0}){return t.min||t.max?(e||(e=a.Format.distance),t.min&&!t.max?e(this.min).toString():!t.min&&t.max?e(this.max).toString():this.max>0&&this.min<0&&Math.abs(this.max+this.min)<.01*Math.abs(this.max)?r.Strings.formatString(r.Strings.Limits.toString.same,e(this.max).toString()):r.Strings.formatString(r.Strings.Limits.toString.different,e(this.min).toString(),e(this.max).toString())):""}}t.Limits=s},function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(244)),r=n(19),a=n(8),s=n(0),u=n(2),l=n(1),c=n(23);class m{constructor(e=0,t=0){this.type=s.TypeName.GeoCoordinate,this.latitude=e,this.longitude=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.latitude=l.Common.parseFloat(e.latitude),this.longitude=l.Common.parseFloat(e.longitude),!0)}get valid(){return 0!==this.latitude&&0!==this.longitude}distance(e){const t=r.Convert.degreesToRadians(e.latitude-this.latitude),n=r.Convert.degreesToRadians(e.longitude-this.longitude),i=Math.sin(t/2)*Math.sin(t/2)+Math.cos(r.Convert.degreesToRadians(this.latitude))*Math.cos(r.Convert.degreesToRadians(e.latitude))*Math.sin(n/2)*Math.sin(n/2),o=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i));return m.GeoRadius*o}bearing(e){return r.Convert.degreesToRadians(o.getGreatCircleBearing(this,e))}geoCoordinate(e=null){if(e){const t=o.computeDestinationPoint(this,e.magnitude,r.Convert.radiansToDegrees(e.direction),m.GeoRadius);return new m(t.latitude,t.longitude)}return new m(this.latitude,this.longitude)}offset(e){return new a.Vector2(this.bearing(e),this.distance(e))}interpolate(e,t){const n=this.offset(e);return this.geoCoordinate(new a.Vector2(n.direction,t(n.magnitude)))}toRadians(){return new m(r.Convert.degreesToRadians(this.latitude),r.Convert.degreesToRadians(this.longitude))}toLngLat(){return[this.longitude,this.latitude]}toGeoSpatial(){const e=new c.GeoSpatial;return e.coordinate=this,e}toString(){const e=u.Format.geoCoordinate(this);return`${e.latitude.toString()} ${e.longitude.toString()}`}}t.GeoCoordinate=m,m.GeoRadius=6378137},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return e*Math.PI/180};t.default=i},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),r=n(0),a=n(4),s=n(33),u=n(81),l=n(12),c=n(52),m=n(46),d=n(89),h=n(127),p=n(3),f=i(n(268)),g=n(19),y=n(66);t.Timeline=class{constructor(){this.type=r.TypeName.Timeline,this.frames=[],this.commands={},this.captures=[]}applyJSON(e){if(!e&&e.type!==this.type)return!1;if(this.frames=[],Array.isArray(e.frames))for(let t of e.frames){const e=new C;if(!e.applyJSON(t))return!1;this.frames.push(e)}return!0}addFrame(e,t){const n=new C(t);n.device=a.Serialization.clone(e.device),n.drone=a.Serialization.clone(e.drone);for(const t in e.execution.componentStates){const i=e.execution.componentStates[t];i.status===r.ComponentExecutionStatus.Executing&&(n.executingComponentStates[t]=a.Serialization.clone(i))}let i=this.lastFrame;return null===i?(n.datetime=a.Serialization.clone(e.engagement.engaged),this.frames.push(n),n):(n.distanceTravelledHorizontal=i.distanceTravelledHorizontal+n.drone.spatial.coordinate.distance(i.drone.spatial.coordinate),n.datetime=a.Serialization.clone(e.engagement.currentDatetime),this.frames.push(n),n)}get firstFrame(){return this.frames.length>0?this.frames[0]:null}get lastFrame(){return this.frames.length>0?o.Common.last(this.frames):null}getFrame(e){const t=this.getFrameIndex(e);return t?this.frames[t]:null}getFrameIndex(e){if(this.lastFrame){const t=this.lastFrame.elapsedTime;for(let n=0;n<this.frames.length;n++)if(this.frames[n].elapsedTime/t>=e)return n}return null}addCapture(e,t,n=0){let i=0;for(let e=this.frames.length-1;e>0;e--)if(this.frames[e].datetime.value.getTime()<=t.created.value.getTime()){i=e;break}const o=new S(i,e.channel,e.settings.mode,e.settings.photoMode,t.created,new l.Datetime(new Date(t.created.value.getTime()+1e3*n)),t);return this.captures.push(o),o}updateCommandExecutionState(e,t){let n=this.commands[e.id];return n||(n=new v(e,t),this.commands[e.id]=n),n.executionState=t,n}toKML(e,t=0){const n=e=>[`${e.drone.spatial.coordinate.longitude}`,`${e.drone.spatial.coordinate.latitude}`,`${t+e.drone.spatial.altitude.value}`].join(","),i=f.default.begin().e("kml",{xmlns:"http://www.opengis.net/kml/2.2","xmlns:gx":"http://www.google.com/kml/ext/2.2"}),o=i.e("Document");o.e("name",e.name),o.e("description",e.description);const r=o.e("Style",{id:"dronePath"}),a=r.e("LineStyle");a.e("color","ffffe500"),a.e("width","4");const s=r.e("PolyStyle");s.e("color","ffffe500"),s.e("width","4");const u=o.e("Placemark");u.e("name","Flight Path"),u.e("styleUrl","#dronePath");const l=u.e("LineString");l.e("altitudeMode","absolute"),l.e("coordinates",this.frames.map(e=>n(e)).join("\n"));const c=o.e("gx:Tour");c.e("name","Flight Motion");const m=c.e("gx:Playlist");let d=null;if(this.frames.forEach(e=>{const n=m.e("gx:FlyTo");n.e("gx:duration",d?e.elapsedTime-d.elapsedTime:.1),n.e("gx:flyToMode","smooth");const i=n.e("Camera");i.e("longitude",`${e.drone.spatial.coordinate.longitude}`),i.e("latitude",`${e.drone.spatial.coordinate.latitude}`),i.e("altitude",`${t+e.drone.spatial.altitude.value}`),i.e("altitudeMode","absolute"),i.e("heading",`${g.Convert.radiansToDegrees(e.drone.spatial.orientation.yaw,!0)}`),i.e("tilt",`${g.Convert.radiansToDegrees(e.drone.gimbal().orientation.pitch)+90}`),d=e}),this.captures.length>0){o.e("Style",{id:"capture"}).e("IconStyle").e("Icon").e("href","http://maps.google.com/mapfiles/kml/shapes/placemark_circle_highlight.png");const e=o.e("Folder");e.e("name","Captures"),this.captures.forEach((t,i)=>{const o=this.frames[t.frameIndex],r=e.e("Placemark");r.e("name",`${i+1}`),r.e("description",t.title),r.e("styleUrl","#capture");const a=r.e("Point");a.e("altitudeMode","absolute"),a.e("coordinates",n(o))})}return i.end({pretty:!0})}};class C{constructor(e=0,t=0,n=new l.Datetime,i=new c.Device,o=new m.Drone,a={}){this.type=r.TypeName.TimelineFrame,this.elapsedTime=e,this.distanceTravelledHorizontal=t,this.datetime=n,this.device=i,this.drone=o,this.executingComponentStates=a}applyJSON(e){if(!e||e.type!==this.type)return!1;if(this.elapsedTime=o.Common.parseFloat(e.elapsedTime,0),this.distanceTravelledHorizontal=o.Common.parseFloat(e.distanceTravelledHorizontal,0),!this.datetime.applyJSON(e.datetime)||!this.device.applyJSON(e.device)||!this.drone.applyJSON(e.drone))return!1;this.executingComponentStates={};for(let t of Object.keys(e.executingComponentStates)){const n=new d.ComponentExecutionState(t);if(!n.applyJSON(e.executingComponentStates[t]))return!1;this.executingComponentStates[t]=n}return!0}}t.TimelineFrame=C;class v{constructor(e=new h.DefaultCommand,t=new u.CommandExecutionState){this.type=r.TypeName.TimelineFrame,this.command=e,this.executionState=t}applyJSON(e){if(!e||e.type!==this.type)return!1;if(!e.command)return!1;{const t=a.Serialization.deserialize(e.command);if(!(t&&t instanceof s.Command))return!1;this.command=t}return this.executionState.applyJSON(e.executionState)}}t.TimelineCommand=v;class S{constructor(e=0,t=0,n=r.CameraMode.Photo,i=r.CameraPhotoMode.Single,o=new l.Datetime,a=null,s=new y.CameraFile){this.type=r.TypeName.TimelineCameraCapture,this.frameIndex=e,this.channel=t,this.mode=n,this.photoMode=i,this.started=o,this.finished=a,this.file=s}applyJSON(e){if(!(e&&e.type===this.type&&void 0!==e.frameIndex&&void 0!==e.channel&&e.mode&&e.photoMode&&e.started&&e.file))return!1;if(this.frameIndex=o.Common.parseInt(e.frameIndex),this.channel=o.Common.parseInt(e.channel),this.mode=e.mode,this.photoMode=e.photoMode,this.started=new l.Datetime,!this.started.applyJSON(e.started))return!1;if(e.finished){if(this.finished=new l.Datetime,!this.finished.applyJSON(e.finished))return!1}else this.finished=null;return this.file=new y.CameraFile,!!this.file.applyJSON(e.file)}get title(){let e=p.Strings.CameraMode.values[this.mode].name;return this.mode===r.CameraMode.Photo&&(e=`${p.Strings.CameraPhotoMode.values[this.photoMode].name} ${e}`),e}get subtitle(){return this.file.name}}t.TimelineCameraCapture=S},function(e,t){(function(){var t,n,i,o,r,a,s,u={}.hasOwnProperty;t=function(e,...t){var n,i,o,a;if(r(Object.assign))Object.assign.apply(null,arguments);else for(n=0,o=t.length;n<o;n++)if(null!=(a=t[n]))for(i in a)u.call(a,i)&&(e[i]=a[i]);return e},r=function(e){return!!e&&"[object Function]"===Object.prototype.toString.call(e)},a=function(e){var t;return!!e&&("function"==(t=typeof e)||"object"===t)},i=function(e){return r(Array.isArray)?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},o=function(e){var t;if(i(e))return!e.length;for(t in e)if(u.call(e,t))return!1;return!0},s=function(e){var t,n;return a(e)&&(n=Object.getPrototypeOf(e))&&(t=n.constructor)&&"function"==typeof t&&t instanceof t&&Function.prototype.toString.call(t)===Function.prototype.toString.call(Object)},n=function(e){return r(e.valueOf)?e.valueOf():e},e.exports.assign=t,e.exports.isFunction=r,e.exports.isObject=a,e.exports.isArray=i,e.exports.isEmpty=o,e.exports.isPlainObject=s,e.exports.getValue=n}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(4),r=n(0);t.Command=class extends i.Identifiable{get title(){return o.Serialization.typeDisplay(this)}get subtitle(){return""}get estimatedTime(){return.3}get verifiable(){return!0}get reengagementTiming(){return r.CommandReengagementTiming.Never}get reengagementReplaceable(){return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(20),r=n(1);class a{constructor(e=0,t=0,n=0){this.type=i.TypeName.Velocity3,this.x=e,this.y=t,this.z=n}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=r.Common.parseFloat(e.x),this.y=r.Common.parseFloat(e.y),this.z=r.Common.parseFloat(e.z),!0)}interpolate(e,t){return new a(t(this.x,e.x),t(this.y,e.y),t(this.z,e.z))}get horizontal(){return new o.Point2(this.x,this.y).toVector2()}set horizontal(e){this.x=e.x,this.y=e.y}get vertical(){return this.z}set vertical(e){this.z=e}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}}t.Velocity3=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0);t.StartCaptureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.StartCaptureCameraCommand}static possible(e){return e===o.CameraMode.Photo||e===o.CameraMode.Video}static continuous(e,t){return e===o.CameraMode.Video||e===o.CameraMode.Photo&&t===o.CameraPhotoMode.Interval}get estimatedTime(){return 1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0);t.StopCaptureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.StopCaptureCameraCommand}get estimatedTime(){return 1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1);class r{constructor(){this.type=i.TypeName.Interpolation,this.f=i.InterpolationFunction.Linear,this.sigmoidK=Math.E}applyJSON(e){return!(!e||e.type!==this.type||!e.f)&&(this.f=e.f,this.sigmoidK=o.Common.parseFloat(e.sigmoidK,Math.E),!0)}interpolate(e,t,n){switch(this.f){case i.InterpolationFunction.None:return e;case i.InterpolationFunction.Linear:return r.linear(e,t,n);case i.InterpolationFunction.Sigmoid:return r.sigmoid(e,t,n,this.sigmoidK)}}static linear(e,t,n){return e+(t-e)*Math.max(Math.min(1,n),0)}static sigmoid(e,t,n,i){return e+(t-e)*o.Common.sigmoid(Math.max(Math.min(1,n),0),i)}}t.Interpolation=r},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var i=n(79),o=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=m;var r=n(57);r.inherits=n(47);var a=n(156),s=n(113);r.inherits(m,a);for(var u=o(s.prototype),l=0;l<u.length;l++){var c=u[l];m.prototype[c]||(m.prototype[c]=s.prototype[c])}function m(e){if(!(this instanceof m))return new m(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||i.nextTick(h,this)}function h(e){e.end()}Object.defineProperty(m.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),m.prototype._destroy=function(e,t){this.push(null),this.end(),i.nextTick(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),o=n(10),r=n(2),a=n(11),s=n(26),u=n(8),l=n(7),c=n(15),m=n(0),d=n(1);t.VelocityDroneCommand=class extends a.DroneCommand{constructor(){super(m.TypeName.VelocityDroneCommand),this.type=m.TypeName.VelocityDroneCommand,this.velocity=new s.Velocity6,this.heading=null}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(void 0===e.heading&&null===e.heading?this.heading=null:this.heading=d.Common.parseFloat(e.heading),this.velocity.applyJSON(e.velocity))}get verifiable(){return!1}toMessage(){return new o.Message(i.Strings.VelocityDroneCommand.messages.controls.title,d.Common.joinNotEmpty([this.velocity.horizontal.magnitude<.1?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.horizontal,r.Format.velocityHorizontal(this.velocity.horizontal.magnitude).toString(),r.Format.angle(this.velocity.horizontal.direction).toString()),Math.abs(this.velocity.vertical)<.1?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.vertical,r.Format.velocityVertical(this.velocity.vertical).toString()),null===this.heading?Math.abs(this.velocity.rotational)<.01?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.rotational,r.Format.velocityRotational(this.velocity.rotational).toString()):i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.heading,r.Format.angle(this.heading).toString())]))}static boundedVelocity(e,t,n,i){const o=new s.Velocity6,r=t.horizontal.subtract(e.horizontal);return o.horizontal=e.horizontal.add(new u.Vector2(r.direction,i.horizontal.currentVelocityLimits(0,n).bound(r.magnitude))),o.vertical=i.vertical.currentVelocityLimits(e.vertical,n).bound(t.vertical),o.rotational=i.rotational.currentVelocityLimits(e.rotational,n).bound(t.rotational),o}static updateBoundedVelocityHorizontal(e,t,n,i,o=new u.Vector2){const r=c.Kinematic.dampen(c.Kinematic.v3(0,-i.horizontal.acceleration.min,n),l.Constants.VelocityHorizontalDampenThreshold);e.horizontal=o.add(new u.Vector2(t,i.horizontal.velocity.bound(r)))}static updateBoundedVelocityVertical(e,t,n,i=0){const o=c.Kinematic.dampen(c.Kinematic.v3(0,-n.vertical.acceleration.min,Math.abs(t)),l.Constants.VelocityVerticalDampenThreshold);e.vertical=i+(t<0?-1:1)*n.vertical.velocity.bound(o)}static updateBoundedVelocityRotational(e,t,n,i=0){const o=Math.min(Math.abs(t),c.Kinematic.v3(0,-n.rotational.acceleration.min,Math.abs(t)));e.rotational=i+(t<0?-1:1)*n.rotational.velocity.bound(o)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ModeCameraCommand,this.mode=o.CameraMode.Photo}applyJSON(e){return!(!super.applyJSON(e)||!e.mode||(this.mode=e.mode,0))}get subtitle(){return r.Format.enum("CameraMode",this.mode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get reengagementReplaceable(){return!1}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(7),a=n(1),s=n(3);t.PhotoIntervalCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoIntervalCameraCommand,this.photoInterval=r.Constants.PhotoIntervalCommandValue}applyJSON(e){return!(!super.applyJSON(e)||!e.photoInterval||(this.photoInterval=a.Common.parseInt(e.photoInterval,r.Constants.PhotoIntervalCommandValue),0))}get subtitle(){return`${this.photoInterval} ${s.Strings.Unit.values.seconds.name}`}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.PhotoModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoModeCameraCommand,this.photoMode=o.CameraPhotoMode.Single}applyJSON(e){return!(!super.applyJSON(e)||!e.photoMode||(this.photoMode=e.photoMode,0))}get subtitle(){return r.Format.enum("CameraPhotoMode",this.photoMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}get reengagementReplaceable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(0),r=n(33),a=n(4),s=n(127),u=n(10),l=n(2),c=n(1),m=n(35),d=n(41),h=n(36),p=n(42),f=n(43),g=n(5);t.CommandComponent=class extends i.SubComponent{constructor(e=new s.DefaultCommand){super(),this.type=o.TypeName.CommandComponent,this.command=e}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(!e.command)return!1;{const t=a.Serialization.deserialize(e.command);if(!(t&&t instanceof r.Command))return!1;this.command=t}return!0}get title(){return this.command.title}get subtitle(){return this.command.subtitle}get verification(){return this.command.verifiable?a.Serialization.clone(this,!0):null}estimate(e,t){const n=super.estimate(e,t);if(e.timeRequired&&(n.time=this.command.estimatedTime),this.command instanceof g.CameraCommand){const i=e.camera(this.command.channel);if(this.command instanceof d.ModeCameraCommand)i.settings.mode=this.command.mode;else if(this.command instanceof f.PhotoModeCameraCommand)i.settings.photoMode=this.command.photoMode;else if(this.command instanceof p.PhotoIntervalCameraCommand)i.settings.photoInterval=this.command.photoInterval;else if(this.command instanceof m.StartCaptureCameraCommand){if(!i.capturing)switch(i.settings.mode){case o.CameraMode.Photo:i.updated=t.updated,i.settings.photoMode===o.CameraPhotoMode.Interval?i.capturing=!0:n.cameraCapture(this.command.channel).photos+=1;break;case o.CameraMode.Video:i.updated=t.updated,i.capturing=!0}}else if(this.command instanceof h.StopCaptureCameraCommand&&i.capturing){i.capturing=!1;const e=n.cameraCapture(this.command.channel);switch(i.settings.mode){case o.CameraMode.Photo:i.settings.photoMode===o.CameraPhotoMode.Interval&&(e.photos+=Math.floor(t.updated.elapsedTime(i.updated)/i.settings.photoInterval));break;case o.CameraMode.Video:e.videos+=1}}}return n}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,i=n.commandExecutionState(this.command.id);if(i)switch(i.status){case o.CommandExecutionStatus.Pending:case o.CommandExecutionStatus.Queued:case o.CommandExecutionStatus.Executing:return t.messages.push(new u.Message(l.Format.enum("CommandExecutionStatus",i.status))),t;case o.CommandExecutionStatus.Failed:return n.removeStatefulCommand(this.command),t.failed(i.error?c.Common.joinNotEmpty([this.command.title,this.command.subtitle,i.error]):null,e.engagement.currentDatetime);case o.CommandExecutionStatus.Succeeded:return n.removeStatefulCommand(this.command),t.succeeded(e.engagement.currentDatetime)}else n.addStatefulCommand(this.command);return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(24)),o=s(n(25)),r=s(n(30)),a=n(13);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;n=void 0===n||isNaN(n)?1:n;var s,u=(0,i.default)(e),l=(0,o.default)(e),c=(0,i.default)(t),m=(0,o.default)(t),d=Math.acos((s=Math.sin((0,r.default)(c))*Math.sin((0,r.default)(u))+Math.cos((0,r.default)(c))*Math.cos((0,r.default)(u))*Math.cos((0,r.default)(l)-(0,r.default)(m)))>1?1:s<-1?-1:s)*a.earthRadius;return Math.round(d/n)*n};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),o=n(29),r=n(6),a=n(23),s=n(33),u=n(81),l=n(0),c=n(61),m=n(99),d=n(12),h=n(62),p=n(7),f=n(63),g=n(64),y=n(65),C=n(16),v=n(1),S=n(66);t.Drone=class extends r.Identifiable{constructor(){super(...arguments),this.type=l.TypeName.Drone,this.model=null,this.serialNumber=null,this.takeoffCoordinate=new o.GeoCoordinate,this.takeoffAltitude=null,this.spatial=new a.GeoSpatial,this.obstacleDistance=null,this.cameras={},this.gimbals={},this.statelessCommands=[],this.statefulCommands=[],this.commandExecutionStates={}}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.model=v.Common.parseString(e.model),this.serialNumber=v.Common.parseString(e.serialNumber),!this.takeoffCoordinate.applyJSON(e.takeoffCoordinate)||!this.spatial.applyJSON(e.spatial))return!1;if(e.takeoffAltitude){if(this.takeoffAltitude=new C.Altitude,!this.takeoffAltitude.applyJSON(e.takeoffAltitude))return!1}else this.takeoffAltitude=null;this.obstacleDistance=v.Common.parseFloat(e.obstacleDistance,null),this.cameras={};for(let t of Object.keys(e.cameras)){const n=new m.Camera(parseInt(t));if(!n.applyJSON(e.cameras[t]))return!1;this.cameras[t]=n}this.gimbals={};for(let t of Object.keys(e.gimbals)){const n=new c.Gimbal(parseInt(t));if(!n.applyJSON(e.gimbals[t]))return!1;this.gimbals[t]=n}if(this.statelessCommands=[],Array.isArray(e.statelessCommands))for(let t of e.statelessCommands){const e=i.Serialization.deserialize(t);if(!(e&&e instanceof s.Command))return!1;this.statelessCommands.push(e)}if(this.statefulCommands=[],Array.isArray(e.statefulCommands))for(let t of e.statefulCommands){const e=i.Serialization.deserialize(t);if(!(e&&e instanceof s.Command))return!1;this.statefulCommands.push(e)}this.commandExecutionStates={};for(let t of Object.keys(e.commandExecutionStates)){const n=new u.CommandExecutionState(t);if(!n.applyJSON(e.commandExecutionStates[t]))return!1;this.commandExecutionStates[t]=n}return!0}referenceSources(e){return new g.OrientationReferenceSources(new f.OrientationXReferenceSources(e.x),new h.OrientationZReferenceSources(this.spatial.velocity.horizontal.direction,this.spatial.orientation.yaw,e.z))}projectSpatial(e){const t=new a.GeoSpatial;t.updated=new d.Datetime(new Date(e.value.getTime()+2*p.Constants.DroneConnectionLatency));const n=t.updated.elapsedTime(this.spatial.updated);return t.coordinate=this.spatial.projectCoordinate(n),t.altitude=this.spatial.projectAltitude(n),t.orientation=this.spatial.projectOrientation(n),t.velocity=this.spatial.velocity,t}projectGimbalOrientation(e,t){const n=new d.Datetime(new Date(t.value.getTime()+2*p.Constants.DroneConnectionLatency)).elapsedTime(this.spatial.updated);return this.gimbal(e).projectOrientation(n)}camera(e=0){return this.cameras[e]||(this.cameras[e]=new m.Camera(e)),this.cameras[e]}gimbal(e=0){return this.gimbals[e]||(this.gimbals[e]=new c.Gimbal(e)),this.gimbals[e]}createCameraFile(e,t,n,o){const r=i.Serialization.clone(this.spatial.orientation),a=this.gimbal(e);return r.x=a.orientation.x,r.xReference=a.orientation.xReference,r.y=a.orientation.y,new S.CameraFile(t,n,o,null,i.Serialization.clone(this.spatial.coordinate),i.Serialization.clone(this.spatial.altitude),r)}addStatelessCommand(e){this.statelessCommands.push(e)}addStatefulCommand(e){this.statefulCommands.push(e),this.commandExecutionStates[e.id]=new u.CommandExecutionState(e.id)}removeStatefulCommand(e){this.statefulCommands=this.statefulCommands.filter(t=>t.id!==e.id),delete this.commandExecutionStates[e.id]}removeAllStatefulCommands(){this.statefulCommands=[],this.commandExecutionStates={}}commandExecutionState(e){return this.commandExecutionStates[e]}updateCommandExecutionState(e,t,n=null,i=null){const o=this.commandExecutionState(e);o&&o.update(t,n,i)}statefulCommandsWhereStatus(e){return this.statefulCommands.filter(t=>{const n=this.commandExecutionState(t.id);return n&&n.status===e})}get takeoffLocation(){return this.takeoffAltitude?new y.GeoLocation(this.takeoffCoordinate,this.takeoffAltitude):null}get groundCoordinateInView(){return this.spatial.groundCoordinate(this.gimbal().orientation.pitch)}groundCoordinatesInView(e){return this.spatial.groundCoordinates(e,this.gimbal().orientation.pitch)}}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(3),r=n(2),a=n(1),s=n(21),u=n(14),l=n(15),c=n(85);class m{constructor(e=0,t=i.OrientationXReference.Horizon,n=0,a=0,s=i.OrientationZReference.North){this.type=i.TypeName.Orientation3,this.toString=(()=>{const e=[];return this.xReference===i.OrientationXReference.Horizon?e.push(`${o.Strings.Orientation3.values.x} ${r.Format.angle(this.x,!1)}`):e.push(`${o.Strings.Orientation3.values.x} ${r.Format.angle(this.x,!1)} ∠ ${r.Format.enum("OrientationXReference",this.xReference)}`),this.zReference===i.OrientationZReference.North?e.push(`${o.Strings.Orientation3.values.z} ${r.Format.angle(this.z,!0)}`):e.push(`${o.Strings.Orientation3.values.z} ${r.Format.angle(this.z,!0)} ∠ ${r.Format.enum("OrientationZReference",this.zReference)}`),0!==this.y&&e.push(`${o.Strings.Orientation3.values.y} ${r.Format.angle(this.y,!1)}`),e.join(o.Strings.Common.delimeter)}),this.x=e,this.xReference=t,this.y=n,this.z=a,this.zReference=s}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=a.Common.parseFloat(e.x),this.xReference=e.xReference||i.OrientationXReference.Horizon,this.y=a.Common.parseFloat(e.y),this.z=a.Common.parseFloat(e.z),this.zReference=e.zReference||i.OrientationZReference.North,!0)}applyVelocity(e,t){this.x+=l.Kinematic.d1(e.x,t),this.y+=l.Kinematic.d1(e.y,t),this.z+=l.Kinematic.d1(e.z,t)}interpolate(e,t,n,o){let r=this.x,a=this.xReference,s=this.x,l=e.x;e.xReference!==this.xReference&&(s=t.x.value(this.xReference)+this.x,l=t.x.value(e.xReference)+e.x,a=i.OrientationXReference.Horizon),r=s-o(0,u.Geometry.angleDifferenceSigned(s,l));let c=this.z,d=this.zReference,h=this.z,p=e.z;e.zReference!==this.zReference&&(h=t.z.value(this.zReference)+this.z,p=t.z.value(e.zReference)+e.z,d=i.OrientationZReference.North),c=h-o(0,u.Geometry.angleDifferenceSigned(h,p));const f=new m(r,a,o(this.y,e.y),c,d);return f.convertReferences(t,n),f}convertReferences(e,t=new c.OrientationReferenceTargets){this.xReference!==t.x&&(this.x=e.x.value(this.xReference)+this.x-e.x.value(t.x),this.xReference=t.x),this.zReference!==t.z&&(this.z=e.z.value(this.zReference)+this.z-e.z.value(t.z),this.zReference=t.z)}apply(e){return null!==e.x&&(this.x=e.x),e.xReference&&(this.xReference=e.xReference),null!==e.y&&(this.y=e.y),null!==e.z&&(this.z=e.z),e.zReference&&(this.zReference=e.zReference),this}get pitch(){return this.x}set pitch(e){this.x=e}get pitchReference(){return this.xReference}set pitchReference(e){this.xReference=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get yawReference(){return this.zReference}set yawReference(e){this.zReference=e}asOptional(){const e=new s.Orientation3Optional;return e.apply(this),e}}t.Orientation3=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return 180*e/Math.PI};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(46),o=n(51),r=n(203),a=n(52),s=n(7),u=n(265);t.Context=class{constructor(e){this.user=new o.User,this.device=new a.Device,this.drone=new i.Drone,this.plan=e,this.device.spatial.coordinate=this.plan.takeoffCoordinate,this.drone.takeoffCoordinate=this.plan.takeoffCoordinate,this.drone.spatial.coordinate=this.plan.takeoffCoordinate}get spatialSources(){return new r.GeoSpatialSources(this.plan.coordinate.toGeoSpatial(),this.drone.spatial,this.device.spatial)}referencedAltitude(e,t=null,n=s.Constants.ComponentElevationTolerance){return new u.ReferencedAltitude(e,this.drone.takeoffLocation||this.plan.elevation(this.plan.takeoffCoordinate,n),t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0);t.User=class extends i.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.User}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(23),r=n(0);t.Device=class extends i.Identifiable{constructor(){super(...arguments),this.type=r.TypeName.Device,this.spatial=new o.GeoSpatial}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||!this.spatial.applyJSON(e.spatial))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(98),o=n(2);t.ListNode=class extends i.Node{constructor(e,t){super(`${e.id}-${t}`,e)}get subtitle(){return this.children.length>0?o.Format.integer(this.children.length):""}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(20),r=n(8);class a{constructor(e=new o.Point2,t=new o.Point2){this.type=i.TypeName.Point2,this.a=e,this.b=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.a.applyJSON(e.a)&&this.b.applyJSON(e.b))}get length(){return this.a.distance(this.b)}get direction(){return this.b.toVector2().subtract(this.a.toVector2()).direction}add(e){return new a(this.a.toVector2().add(e).toPoint2(),this.b.toVector2().add(e).toPoint2())}lengthen(e,t=null){return new a(this.a.toVector2().add(new r.Vector2(this.direction+Math.PI,e)).toPoint2(),this.b.toVector2().add(new r.Vector2(this.direction,t||e)).toPoint2())}interpolate(e){return this.a.interpolate(this.b,e<0?0:Math.min(1,e/this.a.distance(this.b)))}closestPoint(e=new o.Point2){var t=this.b.x-this.a.x,n=this.b.y-this.a.y,i=t*t+n*n,r=(e.x-this.a.x)*t+(e.y-this.a.y)*n,a=Math.min(1,Math.max(0,0===i?0:r/i));return r=(this.b.x-this.a.x)*(e.y-this.a.y)-(this.b.y-this.a.y)*(e.x-this.a.x),new o.Point2(this.a.x+t*a,this.a.y+n*a)}static intersection(e,t){if(e.a.x===e.b.x&&e.a.y===e.b.y||t.a.x===t.b.x&&t.a.y===t.b.y)return null;const n=(t.b.y-t.a.y)*(e.b.x-e.a.x)-(t.b.x-t.a.x)*(e.b.y-e.a.y);if(0===n)return null;let i=((t.b.x-t.a.x)*(e.a.y-t.a.y)-(t.b.y-t.a.y)*(e.a.x-t.a.x))/n,r=((e.b.x-e.a.x)*(e.a.y-t.a.y)-(e.b.y-e.a.y)*(e.a.x-t.a.x))/n;return i<0||i>1||r<0||r>1?null:new o.Point2(e.a.x+i*(e.b.x-e.a.x),e.a.y+i*(e.b.y-e.a.y))}}t.Line2=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(4),r=n(1),a=n(22),s=n(3),u=n(8),l=n(10),c=n(2);t.ListComponent=class extends a.SubComponent{constructor(){super(...arguments),this.type=i.TypeName.ListComponent,this.childComponents=[],this.toString=(()=>r.Common.joinNotEmpty(this.childComponents.map(e=>e.toString()))||this.title)}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.childComponents=[],Array.isArray(e.childComponents))for(let t of e.childComponents){const e=o.Serialization.deserialize(t);if(!(e&&e instanceof a.SubComponent))return!1;this.childComponents.push(e)}return!0}get subtitle(){return this.childComponents.length>0?r.Common.joinNotEmpty(this.childComponents.map(e=>e.title),", "):super.subtitle}get verification(){const e=this.childComponents.map(e=>e.verification).filter(e=>null!=e);if(e.length>0){const t=o.Serialization.clone(this,!0);return t.childComponents=e,t}return null}get exclusiveReadonly(){for(let e of this.childComponents)if(e.exclusiveReadonly)return!0;return!1}get exclusiveExecution(){if(super.exclusiveExecution)return!0;for(let e of this.childComponents)if(e.exclusiveExecution)return!0;return!1}get repositionIfIncluded(){for(let e of this.childComponents)if(e.repositionIfIncluded)return!0;return!1}referenceOffsetsHandleCoordinate(e){const t=[];if(this.childComponents.forEach(n=>{t.push(...n.referenceOffsets.map(t=>n.referenceCoordinate(e,t)))}),t.length<=1)return null;const n=[new u.Vector2];for(let e=1;e<t.length;e++)n.push(t[0].offset(t[e]));return t[0].geoCoordinate(u.Vector2.center(n))}node(e=null){const t=super.node(e);t.emptyChildrenNavigationEnabled=!0,this.childComponents.forEach(e=>{t.addChild(e).remove=(()=>{this.childComponents=r.Common.remove(this.childComponents,e)})});for(const e of t.children)if(null!==e.ordinal){t.ordinal=t.nextOrdinal();break}return t.appends.push({title:`${s.Strings.Common.new} ${s.Strings.Component.name}`,tooltip:null,execute:e=>{e instanceof a.SubComponent&&this.childComponents.push(e)}}),t}estimate(e,t){const n=super.estimate(e,t);return this.childComponents.forEach(i=>{const r=i.estimate(e,t);n.children.push(r);const a=n.lastDroneSpatial;a?t=a:(t=o.Serialization.clone(t)).updated.increment(r.time)}),n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;let n=0,o=0,r=[];for(let a of this.childComponents){const s=a.execute(e);if(s.status===i.ComponentExecutionStatus.Pending){if(a.exclusiveExecution)break}else if(s.status===i.ComponentExecutionStatus.Executing){if(r.push(n),a.exclusiveExecution)break}else if(s.status===i.ComponentExecutionStatus.Succeeded)o++;else if(s.status===i.ComponentExecutionStatus.Failed&&(o++,a.required))return t.failed(s.error,e.engagement.currentDatetime);n++}return t.progress=Math.min(1,(o+1)/this.childComponents.length),o===this.childComponents.length?t.succeeded(e.engagement.currentDatetime):(r.length>0&&t.messages.push(new l.Message(1===r.length?s.Strings.formatString(s.Strings.ListComponent.messages.running.title.single,c.Format.integer(r[0]+1),c.Format.integer(this.childComponents.length)):s.Strings.formatString(s.Strings.ListComponent.messages.running.title.multiple,c.Format.integer(this.childComponents.length-r.length),c.Format.integer(this.childComponents.length)))),t)}}},function(e,t){var n,i,o=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var u,l=[],c=!1,m=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):m=-1,l.length&&h())}function h(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(u=l,l=[];++m<t;)u&&u[m].run();m=-1,t=l.length}u=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new p(e,t)),1!==l.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=f,o.addListener=f,o.once=f,o.off=f,o.removeListener=f,o.removeAllListeners=f,o.emit=f,o.prependListener=f,o.prependOnceListener=f,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(110).Buffer)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(33),o=n(1);t.PayloadCommand=class extends i.Command{constructor(){super(...arguments),this.channel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.channel=o.Common.parseInt(e.channel),!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(58);t.GimbalCommand=class extends i.PayloadCommand{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(59),o=n(0),r=n(21);t.OrientationGimbalCommand=class extends i.GimbalCommand{constructor(){super(...arguments),this.type=o.TypeName.OrientationGimbalCommand,this.orientation=new r.Orientation3Optional}applyJSON(e){return!!super.applyJSON(e)&&this.orientation.applyJSON(e.orientation)}get subtitle(){return this.orientation.toString()}get verifiable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(202),o=n(0),r=n(34),a=n(48),s=n(12),u=n(15);t.Gimbal=class extends i.Payload{constructor(){super(...arguments),this.type=o.TypeName.Gimbal,this.updated=new s.Datetime,this.settings={mode:o.GimbalMode.YawFollow},this.orientation=new a.Orientation3,this.velocity=new r.Velocity3}applyJSON(e){return!(!e||e.type!==this.type||!e.settings)&&(this.settings.mode=e.settings.mode,this.updated.applyJSON(e.updated)&&this.orientation.applyJSON(e.orientation)&&this.velocity.applyJSON(e.velocity))}projectOrientation(e){return new a.Orientation3(this.orientation.x+u.Kinematic.d1(this.velocity.x,e),this.orientation.xReference,this.orientation.y+u.Kinematic.d1(this.velocity.y,e),this.orientation.z+u.Kinematic.d1(this.velocity.z,e),this.orientation.zReference)}static pitch(e,t){return 0===t?0:t<0?Math.PI/2-Math.atan(e/-t):Math.atan(e/t)-Math.PI/2}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationZReferenceSources=class{constructor(e=0,t=0,n=0){this.course=e,this.heading=t,this.path=n}value(e){switch(e){case i.OrientationZReference.North:return 0;case i.OrientationZReference.Course:return this.course;case i.OrientationZReference.Heading:return this.heading;case i.OrientationZReference.Path:return this.path}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationXReferenceSources=class{constructor(e=0){this.path=e}value(e){switch(e){case i.OrientationXReference.Horizon:return 0;case i.OrientationXReference.Path:return this.path}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(62),o=n(63);t.OrientationReferenceSources=class{constructor(e=new o.OrientationXReferenceSources,t=new i.OrientationZReferenceSources){this.x=e,this.z=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(16),o=n(29),r=n(0),a=n(23);t.GeoLocation=class{constructor(e=new o.GeoCoordinate,t=new i.Altitude){this.type=r.TypeName.GeoLocation,this.altitude=new i.Altitude,this.coordinate=e,this.altitude=t}applyJSON(e){return!(!e||e.type!==this.type)&&this.coordinate.applyJSON(e.coordinate)&&this.altitude.applyJSON(e.altitude)}toGeoSpatial(){const e=new a.GeoSpatial;return e.coordinate=this.coordinate,e.altitude=this.altitude,e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(12),r=n(1),a=n(6),s=n(29),u=n(16),l=n(48);t.CameraFile=class extends a.Identifiable{constructor(e="",t=0,n=new o.Datetime,r=null,a=null,s=null,u=null){super(),this.type=i.TypeName.CameraFile,this.name=e,this.size=t,this.created=n,this.metadata=r,this.coordinate=a,this.altitude=s,this.orientation=u}applyJSON(e){if(!e||e.type!==this.type)return!1;if(this.name=r.Common.parseString(e.name,""),this.size=r.Common.parseInt(e.size,0),!this.created.applyJSON(e.created))return!1;if(this.metadata=r.Common.parseString(e.metadata),e.coordinate){if(this.coordinate=new s.GeoCoordinate,!this.coordinate.applyJSON(e.coordinate))return!1}else this.coordinate=null;if(e.altitude){if(this.altitude=new u.Altitude,!this.altitude.applyJSON(e.altitude))return!1}else this.altitude=null;if(e.orientation){if(this.orientation=new l.Orientation3,!this.orientation.applyJSON(e.orientation))return!1}else this.orientation=null;return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0),r=n(17),a=n(126),s=n(2),u=n(68),l=n(4),c=n(53),m=n(3);class d extends i.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.PointOfInterest,this.referencedOffset=new a.GeoReferencedOffset,this.descriptors=new r.Descriptors}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(!!this.descriptors.applyJSON(e.descriptors)&&this.referencedOffset.applyJSON(e.referencedOffset))}node(e,t){return new h(e,t,this)}referenceSpatial(e,t){return this.referencedOffset.value(e,t)}referenceCoordinate(e,t){return this.referenceSpatial(e,t).coordinate}title(e){return s.Format.icaoWords(e).join(" ")}abbreviation(e){return s.Format.icaoLetters(e)}}t.PointOfInterest=d;t.PointsOfInterestNode=class extends c.ListNode{constructor(e,t){super(e,"points-of-interest"),this.listAccessor=t,this.list.forEach((e,t)=>{this.children.push(new h(this,t,e))}),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0,this.appends.push({title:`${m.Strings.Common.new} ${m.Strings.PointOfInterest.name}`,tooltip:null,execute:e=>{e instanceof d&&this.list.push(e)}})}get title(){return m.Strings.PointOfInterest.multiple}get list(){return this.listAccessor()}};class h extends u.ListElementNode{constructor(e,t,n){super(n.id,e,t,l.Serialization.typeDisplay(n),!0),this.pointOfInterest=n}get subtitle(){return this.pointOfInterest.descriptors.description}}t.PointOfInterestNode=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(98),o=n(2),r=n(3);t.ListElementNode=class extends i.Node{constructor(e,t,n,i,o){super(e,t),this.index=n,this.typeName=i,this.icaoIndex=o}get title(){return`${this.typeName} ${this.icaoIndex?r.Strings.Common.delimeter+o.Format.icaoWords(this.index):o.Format.integer(this.index+1)}`}get abbreviation(){return this.icaoIndex?o.Format.icaoLetters(this.index):o.Format.integer(this.index+1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(22),r=n(3),a=n(4),s=n(27);t.AchievableDroneMotionComponent=class extends s.DroneMotionComponent{constructor(){super(...arguments),this.immediateComponent=null,this.achievedComponent=null}applyJSON(e){if(!super.applyJSON(e))return!1;if(e.immediateComponent){const t=a.Serialization.deserialize(e.immediateComponent);if(!(t&&t instanceof o.SubComponent))return!1;this.immediateComponent=t}else this.immediateComponent=null;if(e.achievedComponent){const t=a.Serialization.deserialize(e.achievedComponent);if(!(t&&t instanceof o.SubComponent))return!1;this.achievedComponent=t}else this.achievedComponent=null;return!0}get verification(){const e=a.Serialization.clone(this,!0);return e.pointsOfInterest=[],e.immediateComponent=this.immediateComponent?this.immediateComponent.verification:null,e.achievedComponent=this.achievedComponent?this.achievedComponent.verification:null,e}node(e=null){const t=super.node(e);if(t.emptyChildrenNavigationEnabled=!0,this.immediateComponent){const e=t.addChild(this.immediateComponent);e.label=r.Strings.AchievableDroneMotionComponent.values.immediateComponent,e.remove=(()=>{this.immediateComponent=null})}else t.inserts.push({title:`${r.Strings.Common.set} ${r.Strings.AchievableDroneMotionComponent.values.immediateComponent} ${r.Strings.Component.name}`,tooltip:r.Strings.AchievableDroneMotionComponent.values.immediateComponentTooltip,execute:e=>{e instanceof o.SubComponent&&(this.immediateComponent=e)}});if(this.achievedComponent){const e=t.addChild(this.achievedComponent);e.label=r.Strings.AchievableDroneMotionComponent.values.achievedComponent,e.remove=(()=>{this.achievedComponent=null})}else t.appends.push({title:`${r.Strings.Common.set} ${r.Strings.AchievableDroneMotionComponent.values.achievedComponent} ${r.Strings.Component.name}`,tooltip:r.Strings.AchievableDroneMotionComponent.values.achievedComponentTooltip,execute:e=>{e instanceof o.SubComponent&&(this.achievedComponent=e)}});return t}achieved(e){return!1}estimate(e,t){const n=super.estimate(e,t);if(this.immediateComponent){const i=this.immediateComponent.estimate(e,t);i.timeConcurrent=!0,n.children.push(i)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;let n=!0;if(this.immediateComponent){const o=this.immediateComponent.execute(e);switch(o.status){case i.ComponentExecutionStatus.Pending:case i.ComponentExecutionStatus.Executing:n=!1;break;case i.ComponentExecutionStatus.Failed:if(this.immediateComponent.required)return t.update(i.ComponentExecutionStatus.Failed,o.error,e.engagement.currentDatetime);break;case i.ComponentExecutionStatus.Succeeded:}}if(n&&this.achieved(e)){if(!this.achievedComponent)return t.update(i.ComponentExecutionStatus.Succeeded,null,e.engagement.currentDatetime);if(n){const n=this.achievedComponent.execute(e);switch(n.status){case i.ComponentExecutionStatus.Pending:case i.ComponentExecutionStatus.Executing:break;case i.ComponentExecutionStatus.Failed:if(this.achievedComponent.required)return t.failed(n.error,e.engagement.currentDatetime);break;case i.ComponentExecutionStatus.Succeeded:return t.succeeded(e.engagement.currentDatetime)}}}return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e,t=null){this._previous=null,this._next=null,this.current=e,this.previous=t}insertBefore(e){const t=new i(e);return t._next=this,this._previous&&(t._previous=this._previous,this._previous._next=t),this._previous=t,t}insertAfter(e){const t=new i(e);return t._previous=this,this._next&&(t._next=this._next,this._next._previous=t),this._next=t,t}get list(){const e=[];let t=this.first;for(;t;)e.push(t),t=t.next;return e}get valueList(){return this.list.map(e=>e.current)}get previous(){return this._previous}set previous(e){this._previous=e,e&&(e._next=this)}get next(){return this._next}set next(e){this._next=e,e&&(e._previous=this)}get first(){let e=this;for(;e._previous;)e=e._previous;return e}get last(){let e=this;for(;e._next;)e=e._next;return e}}t.LinkedValue=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1);t.DistanceTolerance=class{constructor(e=0,t=0){this.type=i.TypeName.DistanceTolerance,this.horizontal=e,this.vertical=t}valid(e,t){return this.validHorizontal(e)&&this.validVertical(t)}validHorizontal(e){return e<=this.horizontal}validVertical(e){return Math.abs(e)<=this.vertical}applyJSON(e){return!(!e||e.type!==this.type||(this.horizontal=o.Common.parseFloat(e.horizontal),this.vertical=o.Common.parseFloat(e.vertical),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(102),o=n(4),r=n(0),a=n(3),s=n(27),u=n(103),l=n(60),c=n(44),m=n(10),d=n(55);t.ApproachableComponent=class extends s.DroneMotionComponent{constructor(){super(...arguments),this.approachComponent=new i.DestinationComponent}applyJSON(e){if(!super.applyJSON(e))return!1;const t=o.Serialization.deserialize(e.approachComponent);return!!(t&&t instanceof i.DestinationComponent)&&(this.approachComponent=t,!0)}get subtitle(){return this.approachComponent.subtitle}get verification(){const e=this.approachComponent.verification;if(!e)return null;const t=o.Serialization.clone(this,!0);return t.pointsOfInterest=[],t.approachComponent=e,t}approachCoordinate(e){return this.approachComponent.destinationCoordinate(e)}alignment(e){return null}node(e=null){const t=super.node(e);t.emptyChildrenNavigationEnabled=!0,t.ordinal=t.nextOrdinal();const n=t.addChild(this.approachComponent,!0);return n.ordinal=t.ordinal,n.label=a.Strings.ApproachableComponent.values.approachComponent,t}estimate(e,t){const n=super.estimate(e,t);n.children.push(this.approachComponent.estimate(e,t));let i=0;const r=o.Serialization.clone(n.lastDroneSpatial||t),a=this.alignment(e);if(a){if(a.droneOrientation){const t=new u.HeadingComponent;t.heading=a.droneOrientation.yaw||0;const n=t.estimate(e,r);r.orientation.apply(a.droneOrientation),i=Math.max(i,n.totalTime)}a.gimbalOrientations&&(i=Math.max(i,(new l.OrientationGimbalCommand).estimatedTime))}return i&&(n.time+=i,r.updated.increment(i),n.droneSpatials.push(r)),n}aligned(e){const t=e.execution.getComponentState(this).cachedData(r.TypeName.ApproachableComponent);if(t&&t.alignmentComponent)switch(e.execution.getComponentState(t.alignmentComponent).status){case r.ComponentExecutionStatus.Pending:case r.ComponentExecutionStatus.Executing:return!1}return!0}execute(e){const t=super.execute(e);if(t.status!==r.ComponentExecutionStatus.Executing)return t;const n=this.approachComponent.execute(e);switch(n.status){case r.ComponentExecutionStatus.Pending:case r.ComponentExecutionStatus.Executing:return t.cachedData(r.TypeName.ApproachableComponent,()=>{let t=null,n=null;const i=this.alignment(e);if(i&&(i.droneOrientation&&null!==i.droneOrientation.yaw&&((n=new u.HeadingComponent).heading=i.droneOrientation.yaw,t=n),i.gimbalOrientations)){const e=new d.ListComponent;if(Object.keys(i.gimbalOrientations).forEach(t=>{if(i.gimbalOrientations){const n=new l.OrientationGimbalCommand;n.channel=parseInt(t),n.orientation=i.gimbalOrientations[t],e.childComponents.push(new c.CommandComponent(n))}}),e.childComponents.length>0){const i=1===e.childComponents.length?e.childComponents[0]:e;n?n.immediateComponent=i:t=i}}return new h(t)}),t;case r.ComponentExecutionStatus.Failed:return t.failed(n.error,e.engagement.currentDatetime);case r.ComponentExecutionStatus.Succeeded:const i=t.cachedData(r.TypeName.ApproachableComponent);i&&i.alignmentComponent&&i.alignmentComponent.execute(e).status===r.ComponentExecutionStatus.Executing&&t.messages.push(new m.Message(a.Strings.ApproachableComponent.messages.aligning.title))}return t}};class h{constructor(e=null){this.alignmentComponent=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(53),o=n(8),r=n(0),a=n(6),s=n(3),u=n(2),l=n(266);t.FacadeComponentBoundaryPoint=class extends a.Identifiable{constructor(){super(...arguments),this.type=r.TypeName.FacadeComponentBoundaryPoint,this.offset=new o.Vector2}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.offset.applyJSON(e.offset)}node(e,t){return new c(e,t,this)}title(e){return u.Format.icaoWords(e).join(" ")}abbreviation(e){return u.Format.icaoLetters(e)}};t.FacadeComponentBoundaryPointsNode=class extends i.ListNode{constructor(e){super(e,"boundaryPoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return s.Strings.FacadeComponent.values.boundaryPoints}};class c extends l.FacadeComponentElementNode{constructor(e,t,n){super(n.id,e,t,s.Strings.FacadeComponentBoundaryPoint.name,!0),this.boundaryPoint=n}}t.FacadeComponentBoundaryPointNode=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(53),o=n(8),r=n(0),a=n(6),s=n(3),u=n(2),l=n(267);t.MapComponentBoundaryPoint=class extends a.Identifiable{constructor(){super(...arguments),this.type=r.TypeName.MapComponentBoundaryPoint,this.offset=new o.Vector2}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.offset.applyJSON(e.offset)}node(e,t){return new c(e,t,this)}title(e){return u.Format.icaoWords(e).join(" ")}abbreviation(e){return u.Format.icaoLetters(e)}};t.MapComponentBoundaryPointsNode=class extends i.ListNode{constructor(e){super(e,"boundaryPoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return s.Strings.MapComponent.values.boundaryPoints}};class c extends l.MapComponentElementNode{constructor(e,t,n){super(n.id,e,t,s.Strings.MapComponentBoundaryPoint.name,!0),this.boundaryPoint=n}}t.MapComponentBoundaryPointNode=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(53),o=n(8),r=n(0),a=n(1),s=n(17),u=n(6),l=n(3),c=n(2),m=n(130);t.PathComponentWaypoint=class extends u.Identifiable{constructor(){super(...arguments),this.type=r.TypeName.PathComponentWaypoint,this.offset=new o.Vector2,this.cornerRadius=null,this.descriptors=new s.Descriptors}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(this.cornerRadius=a.Common.parseFloat(e.cornerRadius,null),!!this.descriptors.applyJSON(e.descriptors)&&this.offset.applyJSON(e.offset))}node(e,t){return new d(e,t,this)}title(e){return c.Format.icaoWords(e).join(" ")}abbreviation(e){return c.Format.icaoLetters(e)}};t.PathComponentWaypointsNode=class extends i.ListNode{constructor(e){super(e,"waypoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return l.Strings.PathComponent.values.waypoints}};class d extends m.PathComponentElementNode{constructor(e,t,n){super(n.id,e,t,l.Strings.PathComponentWaypoint.name,!0),this.waypoint=n}get subtitle(){return this.waypoint.descriptors.description}}t.PathComponentWaypointNode=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),r=n(6),a=n(16),s=n(100),u=n(21),l=n(4),c=n(22),m=n(3),d=n(2),h=n(53),p=n(130),f=n(37);t.PathComponentMarker=class extends r.Identifiable{constructor(e=0){super(),this.type=i.TypeName.PathComponentMarker,this.positioning=i.PathMarkerPositioning.Coordinate,this.interpolation=new f.Interpolation,this.component=null,this.altitude=null,this.pointOfInterestID=null,this.droneMotionLimits=null,this.droneOrientation=null,this.gimbalOrientations=null,this.toString=((e={horizontal:d.Format.velocityHorizontal,vertical:d.Format.velocityVertical,rotational:d.Format.velocityRotational})=>{const t=[this.altitude?this.altitude.toString():"",this.pointOfInterestID?m.Strings.PathComponentMarker.values.pointOfInterestID:"",this.droneMotionLimits&&this.droneMotionLimits.horizontal&&this.droneMotionLimits.horizontal.velocity?this.droneMotionLimits.horizontal.velocity.toString(e.horizontal,{min:!1,max:!0}):"",this.droneMotionLimits&&this.droneMotionLimits.vertical&&this.droneMotionLimits.vertical.velocity?this.droneMotionLimits.vertical.velocity.toString(e.vertical):"",this.droneMotionLimits&&this.droneMotionLimits.rotational&&this.droneMotionLimits.rotational.velocity?this.droneMotionLimits.rotational.velocity.toString(e.rotational):"",this.droneOrientation?this.droneOrientation.toString():""];if(this.gimbalOrientations)for(const e of Object.keys(this.gimbalOrientations)){const n=this.gimbalOrientations[e].toString();n&&("0"!==e||Object.keys(this.gimbalOrientations).length>1?t.push(...[`${m.Strings.Gimbal.name} ${e}`,n]):t.push(...[m.Strings.Gimbal.name,n]))}return this.component&&t.push(this.component.toString()),o.Common.joinNotEmpty(t)}),this.distance=e}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.distance=o.Common.parseFloat(e.distance),this.positioning=e.positioning||i.PathMarkerPositioning.Coordinate,!this.interpolation.applyJSON(e.interpolation))return!1;if(e.component){const t=l.Serialization.deserialize(e.component);if(!(t&&t instanceof c.SubComponent))return!1;this.component=t}else this.component=null;if(e.altitude){if(this.altitude=new a.Altitude,!this.altitude.applyJSON(e.altitude))return!1}else this.altitude=null;if(this.pointOfInterestID=e.pointOfInterestID,e.droneMotionLimits){if(this.droneMotionLimits=new s.MotionLimits6Optional,!this.droneMotionLimits.applyJSON(e.droneMotionLimits))return!1}else this.droneMotionLimits=null;if(e.droneOrientation){if(this.droneOrientation=new u.Orientation3Optional,!this.droneOrientation.applyJSON(e.droneOrientation))return!1}else this.droneOrientation=null;if(e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new u.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null;return!0}node(e,t){const n=new g(e,t,this);if(this.component){const e=this.component.node(n);e.remove=(()=>{this.component=null}),n.children.push(e)}return n}get interpolationPossible(){return Boolean(this.altitude||this.pointOfInterestID||this.droneMotionLimits||this.droneOrientation||this.gimbalOrientations)}get interpolationPreferred(){return this.interpolationPossible&&null===this.pointOfInterestID}};t.PathComponentMarkersNode=class extends h.ListNode{constructor(e){super(e,"markers"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return m.Strings.PathComponent.values.markers}};class g extends p.PathComponentElementNode{constructor(e,t,n){super(n.id,e,t,m.Strings.PathComponentMarker.name,!1),this.marker=n,n.component||this.appends.push({title:`${m.Strings.Common.set} ${m.Strings.Component.name}`,tooltip:null,execute:e=>{e instanceof c.SubComponent&&(this.marker.component=e)}})}get subtitle(){return this.marker.toString()}}t.PathComponentMarkerNode=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(105),r=n(6),a=n(149),s=n(17),u=n(29),l=n(4),c=n(2),m=n(3),d=n(50),h=n(1),p=n(22);t.Func=class extends r.Identifiable{constructor(){super(...arguments),this.type=i.TypeName.Func,this.coordinate=new u.GeoCoordinate,this.descriptors=new s.Descriptors,this.components=[],this.inputs=[],this.dynamicInputs=null,this.executable=""}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(!this.descriptors.applyJSON(e.descriptors)||!this.coordinate.applyJSON(e.coordinate))return!1;if(this.components=[],Array.isArray(e.components))for(let t of e.components){const e=l.Serialization.deserialize(t);if(!(e&&e instanceof p.SubComponent))return!1;this.components.push(e)}if(this.inputs=[],Array.isArray(e.inputs))for(let t of e.inputs){const e=l.Serialization.deserialize(t);if(!(e&&e instanceof f))return!1;this.inputs.push(e)}return this.dynamicInputs=h.Common.parseString(e.dynamicInputs,null),this.executable=h.Common.parseString(e.executable,""),!0}get title(){return this.descriptors.name||l.Serialization.typeDisplay(this)}get subtitle(){return c.Format.integer(this.inputs.length,{singular:m.Strings.FuncInput.name,plural:m.Strings.FuncInput.multiple}).toString()}evaluate(e=null,t,n=null,i=null,r=new o.PlanComponent){const a=new d.Context(r);a.drone=l.Serialization.clone(n||a.drone),n||(a.drone.takeoffCoordinate=l.Serialization.clone(this.coordinate),a.drone.spatial.coordinate=l.Serialization.clone(this.coordinate)),a.device=l.Serialization.clone(i||a.device),i||(a.device.spatial.coordinate=l.Serialization.clone(this.coordinate)),r.coordinate=l.Serialization.clone(a.drone.takeoffCoordinate),r.descriptors.name=this.descriptors.name,r.descriptors.tags=this.descriptors.tags;const s={};this.components.forEach((e,t)=>{const n=l.Serialization.clone(e);n.descriptors.name&&(s[n.descriptors.name]=n),s[t]=n});const u={};this.inputs.forEach((e,t)=>{const n=l.Serialization.clone(e.variable);u[t]=n.value,n.descriptors.name&&(u[n.descriptors.name]=n.value)});const c=["plan","context","components","inputs","variables"];e&&c.push("Dronelink"),c.push(t);const m=[r,a,s,this.inputs,u];e&&m.push(e);try{return Function(...c)(...m)}catch(e){throw"string"==typeof e?new Error(e):e}}validate(e=null,t=null){const n=l.Serialization.clone(this);if(n.inputs.forEach(e=>{e.optional||null!==e.variable.value||(e.enumValues&&e.enumValues.length>0?e.variable.value=e.enumValues[0]:e.variable.value=e.variable.defaultValue(t))}),n.dynamicInputs)try{for(;n.addNextDynamicInput(e)&&n.inputs.length<100;);}catch(e){throw h.Common.joinNotEmpty([m.Strings.Func.values.dynamicInputs,e])}try{n.evaluate(e,n.executable)}catch(e){if(!n.dynamicInputs)throw e;throw h.Common.joinNotEmpty([m.Strings.Func.values.executable,e])}}nextDynamicInput(e=null,t=null,n=null){if(!this.dynamicInputs)return null;const i=this.evaluate(e,this.dynamicInputs,t,n);return i&&i instanceof f?(i.dynamic=!0,i):null}addNextDynamicInput(e=null,t=null,n=null){const i=this.nextDynamicInput(e,t,n);return i?(this.inputs.push(i),i):null}removeLastDynamicInput(){const e=h.Common.lastSafe(this.inputs);return!(!e||!e.dynamic||(this.inputs.pop(),0))}execute(e=null,t=null,n=null){const i=new o.PlanComponent;return this.evaluate(e,this.executable,t,n,i),i}};class f{constructor(){this.type=i.TypeName.FuncInput,this.descriptors=new s.Descriptors,this.variable=new a.Variable,this.optional=!1,this.enumValues=null,this.dynamic=!1}applyJSON(e){return!(!e||e.type!==this.type)&&(!(!this.descriptors.applyJSON(e.descriptors)||!this.variable.applyJSON(e.variable))&&(this.optional=h.Common.parseBoolean(e.optional,!1),e.enumValues?this.enumValues=e.enumValues.map(e=>l.Serialization.read(e)||e):this.enumValues=null,this.dynamic=h.Common.parseBoolean(e.dynamic,!1),!0))}get title(){return this.descriptors.name}get subtitle(){return this.descriptors.description}}t.FuncInput=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),r=n(1);t.Asset=class{constructor(e=null,t=new o.Descriptors){this.type=i.TypeName.Asset,this.cameraFiles=[],this.key=e||r.Common.uuid(),this.descriptors=t}applyJSON(e){return!(!e||e.type!==this.type||(this.key=r.Common.parseString(e.key,r.Common.uuid()),!this.descriptors.applyJSON(e.descriptors)))}merge(e){this.key=this.key||e.key,this.descriptors.merge(e.descriptors),this.cameraFiles=Array.from(new Set([...this.cameraFiles,...e.cameraFiles]))}get size(){return this.cameraFiles.reduce((e,t)=>e+t.size,0)}}},function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,i,o){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var r,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,i)});case 4:return t.nextTick(function(){e.call(null,n,i,o)});default:for(r=new Array(s-1),a=0;a<r.length;)r[a++]=arguments[a];return t.nextTick(function(){e.apply(null,r)})}}}:e.exports=t}).call(this,n(56))},function(e,t,n){var i=n(110),o=i.Buffer;function r(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return o(e,t,n)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=i:(r(i,t),t.Buffer=a),r(o,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return o(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=o(e);return void 0!==t?"string"==typeof n?i.fill(t,n):i.fill(t):i.fill(0),i},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(6),r=n(12),a=n(1);t.CommandExecutionState=class extends o.Identifiable{constructor(e=null){super(e),this.type=i.TypeName.CommandExecutionState,this.status=i.CommandExecutionStatus.Pending,this.started=null,this.finished=null,this.error=null}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.status)return!1;if(this.status=e.status,e.started){if(this.started=new r.Datetime,!this.started.applyJSON(e.started))return!1}else this.started=null;if(e.finished){if(this.finished=new r.Datetime,!this.finished.applyJSON(e.finished))return!1}else this.finished=null;return this.error=a.Common.parseString(e.error),!0}update(e,t=null,n=null){switch(e){case i.CommandExecutionStatus.Pending:break;case i.CommandExecutionStatus.Queued:this.status===i.CommandExecutionStatus.Pending&&(this.status=e);break;case i.CommandExecutionStatus.Executing:this.status!==i.CommandExecutionStatus.Pending&&this.status!==i.CommandExecutionStatus.Queued||(this.status=e,this.started=n||new r.Datetime);break;case i.CommandExecutionStatus.Succeeded:case i.CommandExecutionStatus.Failed:this.status!==i.CommandExecutionStatus.Queued&&this.status!==i.CommandExecutionStatus.Executing||(this.status=e,this.finished=n||new r.Datetime,this.error=t)}return this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(83),r=n(1),a=n(2),s=n(15);class u{constructor(e=new o.MotionLimits3,t=new o.MotionLimits3){this.type=i.TypeName.MotionLimits6,this.toString=((e={position:{x:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},y:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},z:{velocity:a.Format.velocityVertical,acceleration:a.Format.accelerationVertical}},orientation:{x:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},y:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},z:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational}}})=>r.Common.joinNotEmpty([this.position.toString(e.position),this.orientation.toString(e.orientation)])),this.position=e,this.orientation=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.position.applyJSON(e.position)&&this.orientation.applyJSON(e.orientation))}resolve(e){return new u(this.position.resolve(e.position),this.orientation.resolve(e.orientation))}interpolate(e,t){return new u(this.position.interpolate(e.position,t),this.orientation.interpolate(e.orientation,t))}get horizontal(){return this.position.forwardBackward}set horizontal(e){this.position.forwardBackward=e}get vertical(){return this.position.upDown}set vertical(e){this.position.upDown=e}get rotational(){return this.orientation.yaw}set rotational(e){this.orientation.yaw=e}timeLineHorizontal(e,t=null){return s.Kinematic.tLine(this.horizontal.velocity.max,this.horizontal.acceleration.min,this.horizontal.acceleration.max,e,t||e)}timeLineVertical(e,t=null){return s.Kinematic.tLine(e<0?Math.abs(this.vertical.velocity.min):this.vertical.velocity.max,e<0?-this.vertical.acceleration.max:this.vertical.acceleration.min,e<0?-this.vertical.acceleration.min:this.vertical.acceleration.max,Math.abs(e),t||Math.abs(e))}timeLineRotational(e,t=null){return s.Kinematic.tLine(this.rotational.velocity.max,this.rotational.acceleration.min,this.rotational.acceleration.max,Math.abs(e),t||Math.abs(e))}}t.MotionLimits6=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(84),r=n(1);class a{constructor(e=new o.MotionLimits,t=new o.MotionLimits,n=new o.MotionLimits){this.type=i.TypeName.MotionLimits3,this.toString=(e=>r.Common.joinNotEmpty([this.x.toString(e.x),this.y.toString(e.y),this.z.toString(e.z)])),this.x=e,this.y=t,this.z=n}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x.applyJSON(e.x)&&this.y.applyJSON(e.y)&&this.z.applyJSON(e.z))}resolve(e){return new a(this.x.resolve(e?e.x:null),this.y.resolve(e?e.y:null),this.z.resolve(e?e.z:null))}interpolate(e,t){return new a(this.x.interpolate(e.x,t),this.y.interpolate(e.y,t),this.z.interpolate(e.z,t))}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get forwardBackward(){return this.x}set forwardBackward(e){this.x=e}get leftRight(){return this.y}set leftRight(e){this.y=e}get upDown(){return this.z}set upDown(e){this.z=e}}t.MotionLimits3=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(15),o=n(28),r=n(0),a=n(1);class s{constructor(e=new o.Limits,t=new o.Limits){this.type=r.TypeName.MotionLimits,this.toString=(e=>a.Common.joinNotEmpty([this.velocity.toString(e.velocity),this.acceleration.toString(e.acceleration)])),this.velocity=e,this.acceleration=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.velocity.applyJSON(e.velocity)&&this.acceleration.applyJSON(e.acceleration))}currentVelocityLimits(e,t){return new o.Limits(Math.min(this.velocity.max,i.Kinematic.v2(e,this.acceleration.max,t)),Math.max(this.velocity.min,i.Kinematic.v2(e,this.acceleration.min,t)))}resolve(e){return new s(e&&e.velocity?e.velocity:this.velocity,e&&e.acceleration?e.acceleration:this.acceleration)}interpolate(e,t){return new s(this.velocity.interpolate(e.velocity,t),this.acceleration.interpolate(e.acceleration,t))}}t.MotionLimits=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationReferenceTargets=class{constructor(e=i.OrientationXReference.Horizon,t=i.OrientationZReference.North){this.x=e,this.z=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.PhotoFileFormatCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoFileFormatCameraCommand,this.photoFileFormat=o.CameraPhotoFileFormat.JPEG}applyJSON(e){return!(!super.applyJSON(e)||!e.photoFileFormat||(this.photoFileFormat=e.photoFileFormat,0))}get subtitle(){return r.Format.enum("CameraPhotoFileFormat",this.photoFileFormat)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(59),o=n(0),r=n(2);t.ModeGimbalCommand=class extends i.GimbalCommand{constructor(){super(...arguments),this.type=o.TypeName.ModeGimbalCommand,this.mode=o.GimbalMode.YawFollow}applyJSON(e){return!(!super.applyJSON(e)||!e.mode||(this.mode=e.mode,0))}get subtitle(){return r.Format.enum("GimbalMode",this.mode)}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),o=n(10),r=n(2),a=n(0),s=n(59),u=n(34),l=n(1);t.VelocityGimbalCommand=class extends s.GimbalCommand{constructor(){super(a.TypeName.VelocityGimbalCommand),this.type=a.TypeName.VelocityGimbalCommand,this.velocity=new u.Velocity3}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.velocity.applyJSON(e.velocity)}get verifiable(){return!1}toMessage(){return new o.Message(i.Strings.VelocityGimbalCommand.messages.controls.title,l.Common.joinNotEmpty([Math.abs(this.velocity.x)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.pitch,r.Format.velocityRotational(this.velocity.x).toString()),Math.abs(this.velocity.y)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.roll,r.Format.velocityRotational(this.velocity.y).toString()),Math.abs(this.velocity.z)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.yaw,r.Format.velocityRotational(this.velocity.z).toString())]))}static boundedVelocity(e,t,n,i){const o=new u.Velocity3;return o.x=i.x.currentVelocityLimits(e.x,n).bound(t.x),o.y=i.y.currentVelocityLimits(e.y,n).bound(t.y),o.z=i.z.currentVelocityLimits(e.z,n).bound(t.z),o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(12),r=n(10),a=n(6),s=n(1),u=n(4);t.ComponentExecutionState=class extends a.Identifiable{constructor(e=null){super(e),this.type=i.TypeName.ComponentExecutionState,this.status=i.ComponentExecutionStatus.Pending,this.progress=0,this.duration=0,this.started=null,this.finished=null,this.error=null,this.messages=[],this.cache={}}toJSON(){return{id:this.id,type:this.type,status:this.status,progress:this.progress,duration:this.duration,started:this.started,finished:this.finished,error:this.error,messages:this.messages}}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.status)return!1;if(this.status=e.status,this.progress=s.Common.parseFloat(e.progress),this.duration=s.Common.parseFloat(e.duration),e.started){if(this.started=new o.Datetime,!this.started.applyJSON(e.started))return!1}else this.started=null;if(e.finished){if(this.finished=new o.Datetime,!this.finished.applyJSON(e.finished))return!1}else this.finished=null;if(this.error=s.Common.parseString(e.error),this.messages=[],Array.isArray(e.messages))for(let t of e.messages){const e=u.Serialization.deserialize(t);if(!(e&&e instanceof r.Message))return!1;this.messages.push(e)}return this.cache={},!0}cachedData(e,t=null){if(!this.cache[e]&&t){const n=t();n&&(this.cache[e]=n)}return this.cache[e]}update(e,t=null,n=null,r=0){switch(this.messages=[],e){case i.ComponentExecutionStatus.Pending:break;case i.ComponentExecutionStatus.Executing:this.status===i.ComponentExecutionStatus.Pending&&(this.status=e,this.progress=0,this.duration=0,this.started=n||new o.Datetime),this.status===i.ComponentExecutionStatus.Executing&&(this.duration+=r);break;case i.ComponentExecutionStatus.Succeeded:case i.ComponentExecutionStatus.Failed:this.status===i.ComponentExecutionStatus.Executing&&(this.status=e,this.progress=1,this.duration+=r,this.cache={},this.finished=n||new o.Datetime,this.error=t)}return this}executing(e,t=null){return this.update(i.ComponentExecutionStatus.Executing,null,t,e)}succeeded(e=null){return this.update(i.ComponentExecutionStatus.Succeeded,null,e)}failed(e=null,t=null){return this.update(i.ComponentExecutionStatus.Failed,e,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(23),r=n(6);t.SourcedGeoSpatial=class extends r.Identifiable{constructor(){super(...arguments),this.type=i.TypeName.SourcedGeoSpatial,this.source=i.GeoSpatialSource.Plan,this.input=null}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.source)return!1;if(this.source=e.source,this.source===i.GeoSpatialSource.Input){const t=new o.GeoSpatial;if(!t.applyJSON(e.input))return!1;this.input=t}return!0}value(e){return e.value(this.source,this.input)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e,t){return t.reduce(function(t,n){if(null==e)throw new Error("'".concat(e,"' is no valid coordinate."));return e.hasOwnProperty(n)&&void 0!==n&&void 0===t?(t=n,n):t},void 0)};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){var t=e.toString().trim();return!isNaN(parseFloat(t))&&parseFloat(t)===Number(t)};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=function(e){return i.sexagesimalPattern.test(e.toString().trim())};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=function(e){var t=new RegExp(i.sexagesimalPattern).exec(e);if(null==t)throw new Error("Given value is not in sexagesimal format");var n=Number(t[2])/60||0,o=Number(t[4])/3600||0,r=parseFloat(t[1])+n+o;return["S","W"].includes(t[7])?-r:r};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(96),o=n(97),r=n(17),a=n(29),s=n(6),u=n(4),l=n(1),c=n(34),m=n(88),d=n(14),h=n(0),p=n(122),f=n(125),g=n(65),y=n(7);t.Component=class extends s.Identifiable{constructor(){super(...arguments),this.coordinate=new a.GeoCoordinate,this.descriptors=new r.Descriptors,this.source=null,this.assetSource=null,this.elevations=null,this.toString=(()=>this.title)}applyJSON(e){if(!super.applyJSON(e))return!1;if(!this.descriptors.applyJSON(e.descriptors)||!this.coordinate.applyJSON(e.coordinate))return!1;if(e.source){if(this.source=new p.ComponentSource,!this.source.applyJSON(e.source))return!1}else this.source=null;if(e.assetSource){if(this.assetSource=new f.AssetSource,!this.assetSource.applyJSON(e.assetSource))return!1}else this.assetSource=null;if(Array.isArray(e.elevations)){this.elevations=[];for(let t of e.elevations){const e=u.Serialization.deserialize(t);if(!(e&&e instanceof g.GeoLocation))return!1;this.elevations.push(e)}}else this.elevations=null;return!0}get title(){return this.descriptors.name||u.Serialization.typeDisplay(this)}get subtitle(){return this.descriptors.name?l.Common.joinNotEmpty([u.Serialization.typeDisplay(this),this.descriptors.description]):this.descriptors.description}get verification(){return null}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!1}get referenceOffsets(){return[]}referenceOffsetsHandleCoordinate(e){return null}elevationCoordinates(e){return[]}elevationsPending(e){const t=this.elevationCoordinates(e);return 0!==t.length&&(!this.elevations||this.elevations.length!==t.length||t.filter((e,t)=>!this.elevations||e.distance(this.elevations[t].coordinate)>y.Constants.ComponentElevationTolerance).length>0)}referencedAltitude(e,t,n,i=y.Constants.ComponentElevationTolerance){return e.referencedAltitude(t,this.elevation(n,i),i)}elevation(e,t=y.Constants.ComponentElevationTolerance){let n=null;return this.elevations&&this.elevations.forEach(i=>{const o=i.coordinate.distance(e);(null===t||o<=t)&&(!n||n.coordinate.distance(e)>o)&&(n=i)}),n}node(e=null){return new o.ComponentNode(e,this)}descendantAllowed(e){return!0}estimate(e,t){return new i.ComponentEstimate(this)}engaging(e){}execute(e){return e.execution.getComponentState(this).executing(e.engagement.timeSinceLastExecution,e.engagement.currentDatetime)}addGimbalVelocityCommand(e,t,n,i,o){const r=new m.VelocityGimbalCommand;r.channel=t;const a=e.drone.projectGimbalOrientation(t,e.engagement.currentDatetime),s=o?u.Serialization.clone(o):new c.Velocity3;null!==n.x&&(s.x+=d.Geometry.angleDifferenceSigned(n.x,a.x)),null!==n.y&&(s.y+=d.Geometry.angleDifferenceSigned(n.y,a.y)),n.convertReferences(e.drone.referenceSources(i)),null!==n.z&&e.drone.gimbal(t).settings.mode===h.GimbalMode.Free&&(s.z+=d.Geometry.angleDifferenceSigned(n.z,a.z)),r.velocity=s,e.drone.addStatelessCommand(r);const l=r.toMessage();return l.details&&e.execution.getComponentState(this).messages.push(l),r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(7),r=n(28),a=n(1);class s{constructor(e=0,t=0,n=0){this.channel=e,this.photos=t,this.videos=t}}t.ComponentEstimateCameraCapture=s;t.ComponentEstimate=class extends i.Identifiable{constructor(e,t=[],n=0){super(e.id),this.timeConcurrent=!1,this.cameraCaptures={},this.level=0,this.children=[],this.component=e,this.droneSpatials=t,this.time=n}get list(){const e=[];return this.children.forEach(t=>{e.push(...t.list)}),e.push(this),e}startWithinTolerance(e,t=o.Constants.ComponentEstimateTolerance){let n=this.firstDroneSpatial;return!!n&&n.coordinate.distance(e.coordinate)<t&&Math.abs(n.altitude.value-e.altitude.value)<t}get firstDroneSpatial(){for(let e of this.children){let t=e.firstDroneSpatial;if(t)return t}return this.droneSpatials.length>0?this.droneSpatials[0]:null}get lastDroneSpatial(){if(this.droneSpatials.length>0)return a.Common.lastSafe(this.droneSpatials);for(var e=this.children.length-1;e>=0;e--){const t=this.children[e].lastDroneSpatial;if(t)return t}return null}get allDroneSpatials(){const e=[];return this.list.forEach(t=>{e.push(...t.droneSpatials)}),e}segments(e){return this.list.filter(t=>t.droneSpatials.length>0&&(!e||e(t)))}cameraCapture(e=0){return this.cameraCaptures[e]||(this.cameraCaptures[e]=new s(e)),this.cameraCaptures[e]}get totalTime(){let e=this.time;return this.children.forEach(t=>{t.timeConcurrent||(e+=t.totalTime)}),e}get totalPhotos(){let e=0;for(let t of Object.keys(this.cameraCaptures))e+=this.cameraCaptures[t].photos;return this.children.forEach(t=>{e+=t.totalPhotos}),e}get totalVideos(){let e=0;for(let t of Object.keys(this.cameraCaptures))e+=this.cameraCaptures[t].videos;return this.children.forEach(t=>{e+=t.totalVideos}),e}get summary(){const e={time:this.totalTime,distance:0,altitude:new r.Limits,horizontalVelocityMax:0,verticalVelocity:new r.Limits,photos:this.totalPhotos,videos:this.totalVideos};let t;return this.allDroneSpatials.forEach(n=>{t&&(e.distance+=n.coordinate.distance(t.coordinate)),e.altitude.max=Math.max(e.altitude.max,n.altitude.value),e.altitude.min=Math.min(e.altitude.min,n.altitude.value),e.horizontalVelocityMax=Math.max(e.horizontalVelocityMax,n.velocity.horizontal.magnitude),e.verticalVelocity.max=Math.max(e.verticalVelocity.max,n.velocity.vertical),e.verticalVelocity.min=Math.min(e.verticalVelocity.min,n.velocity.vertical),t=n}),e}findDescendant(e){if(this.id===e)return this;for(let t=0;t<this.children.length;t++){const n=this.children[t].findDescendant(e);if(n)return n}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(98),o=n(95),r=n(1),a=n(22),s=n(5),u=n(2),l=n(41),c=n(43),m=n(0),d=n(10),h=n(35),p=n(36),f=n(3),g=n(44),y=n(42),C=n(86),v=n(50);class S extends i.Node{constructor(e,t){super(t.id,e),this.label="",this.component=t}get name(){return r.Common.joinNotEmpty([this.component.title]," - ")}get title(){return this.label||this.name}get subtitle(){return this.label?r.Common.joinNotEmpty([this.ordinalDisplay?this.name:this.component.title,this.component.subtitle]):this.component.subtitle}get subComponentCount(){return this.descendants.filter(e=>e instanceof S&&e.component instanceof a.SubComponent).length}descendantAllowed(e){return!(e instanceof o.Component&&!this.component.descendantAllowed(e))&&super.descendantAllowed(e)}addChild(e,t=!1){const n=e.node(this);return t?this.children.splice(0,0,n):this.children.push(n),n}get referenceOffsets(){const e=[];return this.children.forEach(t=>{t instanceof S&&e.push(...t.referenceOffsets)}),e.push(...this.component.referenceOffsets),e}get issues(){const e=[],t=this.descendants,n=this.component;if(n.hasOwnProperty("takeoffOffset")&&null===n.takeoffOffset){const i=new v.Context(n);let o=!1;t.forEach(e=>{e instanceof S&&!o&&e.component.elevationCoordinates(i).length>0&&(o=!0)}),o&&e.push({message:new d.Message(f.Strings.MissionIssue.messages.elevation.requiredTakeoff.title,f.Strings.MissionIssue.messages.elevation.requiredTakeoff.details,m.MessageLevel.Danger),node:this})}const i=new Set;return t.forEach(e=>{e instanceof S&&e.component instanceof g.CommandComponent&&e.component.command instanceof s.CameraCommand&&i.add(e.component.command.channel)}),i.forEach(n=>{let i=null,o=null,r=null,a=null,v=null,b=null;t.filter(e=>e instanceof S&&e.component instanceof g.CommandComponent&&e.component.command instanceof s.CameraCommand&&e.component.command.channel===n).forEach(t=>{const n=t.component.command,g=[];n instanceof s.CameraCommand&&(null===n.requiredCapturing||n.requiredCapturing||(null===v?g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingUnknown.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingUnknown.details,m.MessageLevel.Warning)):v&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingInvalid.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingInvalid.details,m.MessageLevel.Error))),n.requiredMode&&(null===i?g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredModeUnknown.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredModeUnknown.details,m.MessageLevel.Warning)):n.requiredMode!==i&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredModeInvalid.title,n.title,u.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.cameraCommand.requiredModeInvalid.details,m.MessageLevel.Error)))),n instanceof p.StopCaptureCameraCommand&&(v=!1),n instanceof h.StartCaptureCameraCommand&&(b=t,i&&!h.StartCaptureCameraCommand.possible(i)&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.invalidMode.title,u.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.invalidMode.details,m.MessageLevel.Error)),null===i?g.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeMode.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeMode.details,m.MessageLevel.Warning)):i===m.CameraMode.Photo&&(null===o?g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoMode.title,u.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoMode.details,m.MessageLevel.Info)):o===m.CameraPhotoMode.Interval&&null===a&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoInterval.title,u.Format.enum("CameraMode",i),u.Format.enum("CameraPhotoMode",o)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoInterval.details,m.MessageLevel.Warning))),null===v?g.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeStopped.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeStopped.details,m.MessageLevel.Info)):v&&g.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.startedAlready.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.startedAlready.details,m.MessageLevel.Info)),v=h.StartCaptureCameraCommand.continuous(i||m.CameraMode.Photo,o||m.CameraPhotoMode.Single)),n instanceof l.ModeCameraCommand&&(i=n.mode),n instanceof c.PhotoModeCameraCommand&&(o=n.photoMode),n instanceof C.PhotoFileFormatCameraCommand&&(r=n.photoFileFormat),n instanceof y.PhotoIntervalCameraCommand&&(a=n.photoInterval)<=2&&(null===r?g.push(new d.Message(f.Strings.MissionIssue.messages.photoIntervalCommand.beforePhotoFileFormat.title,f.Strings.MissionIssue.messages.photoIntervalCommand.beforePhotoFileFormat.details,m.MessageLevel.Warning)):r!==m.CameraPhotoFileFormat.JPEG&&g.push(new d.Message(f.Strings.MissionIssue.messages.photoIntervalCommand.fastPhotoInterval.title,f.Strings.MissionIssue.messages.photoIntervalCommand.fastPhotoInterval.details,m.MessageLevel.Warning))),g.forEach(n=>{e.push({message:n,node:t})})}),v&&b&&i===m.CameraMode.Video&&e.push({message:new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.videoNotStopped.title,u.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.videoNotStopped.details,m.MessageLevel.Warning),node:b})}),e}}t.ComponentNode=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6);t.Node=class extends i.Identifiable{constructor(e,t){super(e),this.children=[],this.ordinal=null,this.remove=null,this.inserts=[],this.appends=[],this.emptyChildrenNavigationEnabled=!1,this.propertiesEditorDisabled=!1,this.parent=t;let n=0;this.nextOrdinal=t?t.nextOrdinal:()=>n++}get ordinalDisplay(){return null===this.ordinal?"":`${this.ordinal+1}`}get title(){return this.ordinalDisplay||this.id}get subtitle(){return""}get depth(){return null===this.parent?0:this.parent.depth+1}get root(){return null===this.parent?this:this.parent.root}get ancestors(){const e=[];return this.parent&&(e.push(this.parent),e.push(...this.parent.ancestors)),e}get descendants(){const e=[];return this.children.forEach(t=>{e.push(t),e.push(...t.descendants)}),e}find(e){return this.root.findDescendant(e)}findDescendant(e){if(this.id===e)return this;for(let t=0;t<this.children.length;t++){const n=this.children[t].findDescendant(e);if(n)return n}return null}descendantAllowed(e){return!(this.parent&&!this.parent.descendantAllowed(e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(202),o=n(0),r=n(12),a=n(1),s=n(7);t.Camera=class extends i.Payload{constructor(){super(...arguments),this.type=o.TypeName.Camera,this.model=null,this.updated=new r.Datetime,this.capturing=!1,this.settings={mode:o.CameraMode.Photo,photoMode:o.CameraPhotoMode.Single,photoFileFormat:o.CameraPhotoFileFormat.JPEG,photoInterval:2,videoFileFormat:o.CameraVideoFileFormat.MP4}}applyJSON(e){return!(!e||e.type!==this.type||!e.settings||(this.model=a.Common.parseString(e.model),this.capturing=a.Common.parseBoolean(e.capturing,!1),this.settings.mode=e.settings.mode||this.settings.mode,this.settings.photoMode=e.settings.photoMode||this.settings.photoMode,this.settings.photoFileFormat=e.settings.photoFileFormat||this.settings.photoFileFormat,this.settings.photoInterval=a.Common.parseInt(e.settings.photoInterval,2),this.settings.videoFileFormat=e.settings.videoFileFormat||this.settings.videoFileFormat,0))}get specification(){const e={};if(s.Constants.CameraSpecifications.forEach(t=>{e[t.id]=t}),!this.model)return e.phantom4Pro2_0;if(e[this.model])return e[this.model];switch(this.model){case"Phantom 3 Standard Camera":return e.phantom3Standard;case"Phantom 3 Advanced Camera":return e.phantom3Advanced;case"Phantom 3 Professional Camera":return e.phantom3Pro;case"Zenmuse X3":return e.zenmuseX3;case"Zenmuse X5":return e.zenmuseX5;case"Zenmuse X5R":return e.zenmuseX5R;case"Phantom 4 Camera":return e.phantom4;case"Phantom 4 Pro Camera":return e.phantom4Pro;case"Mavic Pro Camera":return e.mavicPro;case"Zenmuse Z30":return e.zenmuseZ30Max;case"Zenmuse X4S":return e.zenmuseX4S;case"Zenmuse X5S":return e.zenmuseX5S;case"Phantom 4 Advanced Camera":return e.phantom4Advanced;case"Spark Camera":return e.spark;case"Phantom 4 Pro V2 Camera":case"Phantom 4 RTK Camera":return e.phantom4Pro2_0;case"Zenmuse X7":return e.zenmuseX7;case"Mavic Air Camera":return e.mavicAir;case"Mavic 2 Zoom Camera":return e.mavic2ZoomMax;case"Mavic 2 Pro Camera":return e.mavic2Pro;case"Zenmuse XT":case"Zenmuse Z3":case"Zenmuse XT2-Thermal":case"Zenmuse XT2-Visual":case"Mavic 2 Enterprise Dual-Thermal":case"Mavic 2 Enterprise Camera":case"Mavic 2 Enterprise Dual-Visual":default:return e.phantom4Pro2_0}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(129),r=n(1),a=n(2);t.MotionLimits6Optional=class{constructor(e=null,t=null){this.type=i.TypeName.MotionLimits6Optional,this.toString=((e={position:{x:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},y:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},z:{velocity:a.Format.velocityVertical,acceleration:a.Format.accelerationVertical}},orientation:{x:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},y:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},z:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational}}})=>r.Common.joinNotEmpty([this.position?this.position.toString(e.position):"",this.orientation?this.orientation.toString(e.orientation):""])),this.position=e,this.orientation=t}applyJSON(e){if(!e)return this.position=null,this.orientation=null,!0;if(e.type!==this.type)return!1;if(e.position){if(this.position=new o.MotionLimits3Optional,!this.position.applyJSON(e.position))return!1}else this.position=null;if(e.orientation){if(this.orientation=new o.MotionLimits3Optional,!this.orientation.applyJSON(e.orientation))return!1}else this.orientation=null;return!0}get horizontal(){return this.position?this.position.forwardBackward:null}set horizontal(e){this.position||(this.position=new o.MotionLimits3Optional(e)),this.position.forwardBackward=e}get vertical(){return this.position?this.position.upDown:null}set vertical(e){this.position||(this.position=new o.MotionLimits3Optional),this.position.upDown=e}get rotational(){return this.orientation?this.orientation.yaw:null}set rotational(e){this.orientation||(this.orientation=new o.MotionLimits3Optional),this.orientation.yaw=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(28),o=n(0),r=n(1);t.MotionLimitsOptional=class{constructor(e=null,t=null){this.type=o.TypeName.MotionLimitsOptional,this.toString=(e=>r.Common.joinNotEmpty([this.velocity?this.velocity.toString(e.velocity):"",this.acceleration?this.acceleration.toString(e.acceleration):""])),this.velocity=e,this.acceleration=t}applyJSON(e){if(!e)return this.velocity=null,this.acceleration=null,!0;if(e.type!==this.type)return!1;if(e.velocity){if(this.velocity=new i.Limits,!this.velocity.applyJSON(e.velocity))return!1}else this.velocity=null;if(e.acceleration){if(this.acceleration=new i.Limits,!this.acceleration.applyJSON(e.acceleration))return!1}else this.acceleration=null;return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(8),r=n(14),a=n(108),s=n(28),u=n(7),l=n(71),c=n(3),m=n(10),d=n(2),h=n(40),p=n(26),f=n(1),g=n(69),y=n(16),C=n(27),v=n(4),S=n(20),b=n(54);t.DestinationComponent=class extends g.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.DestinationComponent,this.automaticOrientation=!0,this.destinationOffset=new o.Vector2,this.altitudeRange=new a.AltitudeRange(new y.Altitude(u.Constants.DestinationComponentAltitude),new s.Limits(u.Constants.DestinationComponentAltitudeRange)),this.achievementTime=u.Constants.DestinationComponentAchievementTime,this.achievementDistance=new l.DistanceTolerance(u.Constants.DestinationComponentAchievementDistanceHorizontal,u.Constants.DestinationComponentAchievementDistanceVertical)}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(this.automaticOrientation=f.Common.parseBoolean(e.automaticOrientation,!0),this.achievementTime=f.Common.parseFloat(e.achievementTime,u.Constants.DestinationComponentAchievementTime),this.destinationOffset.applyJSON(e.destinationOffset)&&this.altitudeRange.applyJSON(e.altitudeRange)&&this.achievementDistance.applyJSON(e.achievementDistance))}get subtitle(){return f.Common.joinNotEmpty([super.subtitle,this.altitudeRange.toString()])}get referenceOffsets(){return[this.destinationOffset].concat(super.referenceOffsets)}node(e=null){const t=super.node(e);return null===t.ordinal&&0===t.ancestors.filter(e=>e.component instanceof C.DroneMotionComponent).length&&(t.ordinal=t.nextOrdinal()),t}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.altitudeRange.altitude.system===i.AltitudeSystem.AGL&&t.push(this.destinationCoordinate(e)),t}destinationCoordinate(e){return this.referenceCoordinate(e,this.destinationOffset)}destinationReferencedAltitude(e){return this.referencedAltitude(e,this.altitudeRange.altitude,this.destinationCoordinate(e))}estimate(e,t){const n=super.estimate(e,t);n.level=1,n.droneSpatials.push(t);const o=this.destinationCoordinate(e).toGeoSpatial();o.updated=v.Serialization.clone(t.updated),this.automaticOrientation&&(o.orientation.yaw=t.coordinate.bearing(o.coordinate));let a=0;if(e.altitudeRequired||e.timeRequired){const s=this.destinationReferencedAltitude(e).toSystem(i.AltitudeSystem.ATL);o.altitude.system=i.AltitudeSystem.ATL,o.altitude.value=null===s?0:s.value;const l=o.altitude.value-t.altitude.value;if(e.altitudeRequired&&!this.altitudeRange.range.valid(-l)){const e=v.Serialization.clone(t);e.altitude.value=o.altitude.value+this.altitudeRange.range.bound(-l),n.droneSpatials.push(e)}if(e.timeRequired){const i=this.resolveDroneMotionLimits(e),s=t.coordinate.distance(o.coordinate),c=s-this.achievementDistance.horizontal>0?i.timeLineHorizontal(s,s-this.achievementDistance.horizontal):0,m=r.Geometry.angleDifferenceSigned(o.orientation.yaw,t.orientation.yaw),d=i.timeLineRotational(m),h=m-u.Constants.DestinationComponentHeadingAchievement>0?i.timeLineRotational(m,m-u.Constants.DestinationComponentHeadingAchievement):0,p=Math.abs(l)-this.achievementDistance.vertical>0?i.timeLineVertical(l,Math.abs(l)-this.achievementDistance.vertical):0,f=this.altitudeRange.range.valid(-l)?0:i.timeLineVertical(l,Math.abs(l)-Math.abs(this.altitudeRange.range.bound(-l))),g=c+Math.max(f,h),y=n.time;n.time+=Math.max(d,p,g)+this.achievementTime,a=n.time-y;const C=n.children.find(e=>e.component===this.immediateComponent);C&&C.totalTime>n.time&&(n.time+=C.totalTime-n.time,a=C.totalTime),o.updated.increment(n.time-y)}}if(this.achievedComponent){const i=v.Serialization.clone(o);i.updated.value=new Date(t.updated.value.getTime()+1e3*a);const r=this.achievedComponent.estimate(e,i);n.children.push(r)}return n.droneSpatials.push(o),n}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.DestinationComponent);if(t&&t.achievementDistanceValidSince){const{drone:n}=e,o=n.projectSpatial(e.engagement.currentDatetime),r=this.destinationCoordinate(e),a=this.destinationReferencedAltitude(e).toSystem(i.AltitudeSystem.ATL),s=null===a?0:a.value,u=o.coordinate.distance(r),l=s-o.altitude.value;if(this.achievementDistance.valid(u,l)&&e.elapsedTime(t.achievementDistanceValidSince)>=this.achievementTime)return!0}return!1}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,o=this.destinationReferencedAltitude(e).toSystem(i.AltitudeSystem.ATL);if(null===o)return t;const a=this.referenceSpatial(e),s=this.destinationCoordinate(e),l=t.cachedData(i.TypeName.DestinationComponent,()=>{const e=n.spatial.coordinate.geoCoordinate();return new w(e,e.distance(s))}),g=new p.Velocity6,y=n.projectSpatial(e.engagement.currentDatetime),C=y.coordinate.bearing(s),x=y.coordinate.distance(s),M=o.value-y.altitude.value,O=this.automaticOrientation&&!this.achievementDistance.validHorizontal(x)?r.Geometry.angleDifferenceSigned(C,y.orientation.yaw):0,D=this.resolveDroneMotionLimits(e);if(this.altitudeRange.range.valid(-M)&&(this.achievementDistance.validHorizontal(x)||Math.abs(O)<u.Constants.DestinationComponentHeadingAchievement)){h.VelocityDroneCommand.updateBoundedVelocityHorizontal(g,C,x,D,a.velocity.horizontal);const e=l.startCoordinate,t=e.geoCoordinate(new b.Line2(new S.Point2,e.offset(s).toPoint2()).closestPoint(e.offset(y.coordinate).toPoint2()).toVector2()),n=y.coordinate.offset(t),i=new p.Velocity6;h.VelocityDroneCommand.updateBoundedVelocityHorizontal(i,n.direction,n.magnitude,D),g.horizontal=g.horizontal.add(i.horizontal)}if(h.VelocityDroneCommand.updateBoundedVelocityVertical(g,M,D,a.velocity.vertical),0!==O&&h.VelocityDroneCommand.updateBoundedVelocityRotational(g,O,D,a.velocity.rotational),this.achievementDistance.valid(x,M)){l.achievementDistanceValidSince||(l.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(l.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new m.Message(c.Strings.AchievableDroneMotionComponent.messages.waiting.title,d.Format.number(this.achievementTime-n)))}else{l.achievementDistanceValidSince=null;const n=new m.Message(c.Strings.DestinationComponent.messages.moving.title,f.Common.joinNotEmpty([x<.1?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.distance,d.Format.distance(x).toString()),Math.abs(M)<.1?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.altitude,d.Format.altitude(M).toString()),Math.abs(O)<.01?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.heading,d.Format.angle(O,!1).toString())]));n.details&&t.messages.push(n),this.automaticOrientation&&this.addGimbalVelocityCommand(e,0,v.Serialization.clone(u.Constants.DroneMotionComponentGimbalOrientation),{x:0,z:C})}return this.addDroneVelocityCommand(e,g,0===O?null:y.coordinate.bearing(s)),t.progress=l.progress(y.coordinate.distance(s)),t}};class w{constructor(e,t){this.achievementDistanceValidSince=null,this.startCoordinate=e,this.totalDistance=t}progress(e){return e>this.totalDistance?0:(this.totalDistance-e)/this.totalDistance}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(14),r=n(7),a=n(3),s=n(10),u=n(2),l=n(40),c=n(26),m=n(1),d=n(69),h=n(4);t.HeadingComponent=class extends d.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.HeadingComponent,this.heading=0,this.achievementTime=r.Constants.HeadingComponentAchievementTime,this.achievementDistance=r.Constants.HeadingComponentAchievementDistance}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||(this.heading=m.Common.parseFloat(e.heading),this.achievementTime=m.Common.parseFloat(e.achievementTime),this.achievementDistance=m.Common.parseFloat(e.achievementDistance),0))}get subtitle(){const e=u.Format.angle(this.heading).toString();return this.achievementDistance>0?a.Strings.formatString(a.Strings.HeadingComponent.subtitle,e,u.Format.angle(this.achievementDistance).toString()):e}get repositionIfIncluded(){return!1}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.HeadingComponent);if(t&&t.achievementDistanceValidSince){const n=o.Geometry.angleDifferenceSigned(this.heading,e.drone.projectSpatial(e.engagement.currentDatetime).orientation.yaw);if(Math.abs(n)<=this.achievementDistance&&e.elapsedTime(t.achievementDistanceValidSince)>=this.achievementTime)return!0}return!1}estimate(e,t){const n=super.estimate(e,t),i=h.Serialization.clone(t);i.orientation.yaw=this.heading,n.droneSpatials.push(i);let a=0;if(e.timeRequired){const e=r.Constants.DroneMotionLimits.Max(),s=n.time,u=Math.abs(o.Geometry.angleDifferenceSigned(this.heading,t.orientation.yaw));u-this.achievementDistance>0&&(n.time+=(u-this.achievementDistance)/e.rotational.velocity.max),n.time+=this.achievementTime,a=n.time-s;const l=n.children.find(e=>e.component===this.immediateComponent);l&&l.totalTime>n.time&&(n.time+=l.totalTime-n.time,a=l.totalTime),i.updated.increment(n.time-s)}if(this.achievedComponent){const o=h.Serialization.clone(i);o.updated.value=new Date(t.updated.value.getTime()+1e3*a);const r=this.achievedComponent.estimate(e,o);n.children.push(r)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,r=n.projectSpatial(e.engagement.currentDatetime),m=o.Geometry.angleDifferenceSigned(this.heading,r.orientation.yaw),d=this.resolveDroneMotionLimits(e),h=t.cachedData(i.TypeName.HeadingComponent,()=>new p(n.spatial.coordinate.geoCoordinate(),Math.abs(m))),f=new c.Velocity6;l.VelocityDroneCommand.updateBoundedVelocityRotational(f,m,d,this.referenceSpatial(e).velocity.rotational);const g=h.startCoordinate,y=r.coordinate.offset(g),C=new c.Velocity6;if(l.VelocityDroneCommand.updateBoundedVelocityHorizontal(C,y.direction,y.magnitude,d),f.horizontal=f.horizontal.add(C.horizontal),Math.abs(m)<=this.achievementDistance){h.achievementDistanceValidSince||(h.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(h.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new s.Message(a.Strings.AchievableDroneMotionComponent.messages.waiting.title,u.Format.number(this.achievementTime-n)))}else h.achievementDistanceValidSince=null,Math.abs(m)>.01&&t.messages.push(new s.Message(a.Strings.HeadingComponent.messages.rotating.title,u.Format.angle(m,!1).toString()));return this.addDroneVelocityCommand(e,f,this.heading),t.progress=h.progress(Math.abs(m)),t}};class p{constructor(e,t){this.achievementDistanceValidSince=null,this.startCoordinate=e,this.totalDistance=t}progress(e){return e>this.totalDistance?0:(this.totalDistance-e)/this.totalDistance}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(20),o=n(1),r=n(8),a=n(54);t.Path=class{constructor(e){let t=0,n=-1,i=0,o=null;this.segments=e.map(e=>{n++;let r=0;return e.map((e,a)=>{if(o){const t=e.distance(o);i+=t,a>0&&(r+=t)}return o=e,new s(e,t++,i,n,a,r)})}),this.distance=i}get points(){const e=[];return this.segments.forEach(t=>{e.push(...t)}),e}get coordinates(){return this.points.map(e=>e.coordinate)}get segmentEndPoints(){return this.segments.map(e=>o.Common.last(e))}get segmentCenterCoordinates(){return this.segments.map(e=>{if(e.length>1){const t=o.Common.last(e).segmentDistance/2;for(const n of e)if(n.segmentDistance>=t){if(n.segmentIndex>0)return n.coordinate.geoCoordinate(new r.Vector2(n.coordinate.bearing(e[n.segmentIndex-1].coordinate),n.segmentDistance-t));break}}return e[0].coordinate})}nextCoordinate(e=null,t=5){return null===e&&(e=this.distance),this.sampleForDistance(e+t,!1).coordinate}nearestDistance(e){const t=this.points;if(t.length<2)return 0;const n=t.map(n=>{if(0===n.index)return{point:n,intersect:n.coordinate,distance:e.distance(n.coordinate)};const o=t[n.index-1],r=o.coordinate.geoCoordinate(new a.Line2(new i.Point2,o.coordinate.offset(n.coordinate).toPoint2()).closestPoint(o.coordinate.offset(e).toPoint2()).toVector2());return{point:o,intersect:r,distance:e.distance(r)}}).sort((e,t)=>e.distance-t.distance)[0];return n.point.distance+n.intersect.distance(n.point.coordinate)}sampleForDistance(e,t=!0){return this.samplesForDistances([e],t)[0]}samplesForMaxDistance(e,t=!0){const n=Math.ceil(this.distance/e),i=this.distance/n,o=[];for(let e=0;e<this.distance;e+=i)o.push(e);return o.push(this.distance),this.samplesForDistances(o)}samplesForDistances(e,t=!0){if(0===e.length)return[];const n=this.points;if(0===n.length)return[];if(1===n.length)return e.map(e=>new u(n[0].coordinate,0,0));const i=e.map((e,t)=>({index:t,distance:e,coordinate:n[0].coordinate,direction:n[0].coordinate.bearing(n[1].coordinate)})).sort((e,t)=>e.distance-t.distance);let o=0;for(const e of n){for(;o<i.length;){const a=i[o],s=e.index===n.length-1;if(!(e.distance>=a.distance||s))break;s&&t&&a.distance>e.distance?(e.index>0?a.direction=n[e.index-1].coordinate.bearing(e.coordinate):e.index+1<n.length&&(a.direction=e.coordinate.bearing(n[e.index+1].coordinate)),a.coordinate=e.coordinate):e.index>0?(a.direction=n[e.index-1].coordinate.bearing(e.coordinate),a.coordinate=e.coordinate.geoCoordinate(new r.Vector2(a.direction+Math.PI,e.distance-a.distance))):(a.direction=e.coordinate.bearing(n[e.index+1].coordinate),a.coordinate=e.coordinate),o++}if(o===i.length)break}return i.sort((e,t)=>e.index-t.index).map(e=>new u(e.coordinate,e.direction,e.distance))}};class s{constructor(e,t,n,i,o,r){this.coordinate=e,this.index=t,this.distance=n,this.segment=i,this.segmentIndex=o,this.segmentDistance=r}}t.PathPoint=s;class u{constructor(e,t,n){this.coordinate=e,this.direction=t,this.distance=n}}t.PathSample=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(95),o=n(4),r=n(22),a=n(0),s=n(8),u=n(71),l=n(7),c=n(55),m=n(50);t.PlanComponent=class extends i.Component{constructor(){super(...arguments),this.type=a.TypeName.PlanComponent,this.takeoffOffset=null,this.takeoffDistance=new u.DistanceTolerance(l.Constants.PlanComponentTakeoffDistanceHorizontal),this.droneMotionLimits=l.Constants.DroneMotionLimits.Conservative(),this.droneMotionErrorTolerance=new u.DistanceTolerance(l.Constants.DroneMotionErrorToleranceHorizontal,l.Constants.DroneMotionErrorToleranceVertical),this.rootComponent=new c.ListComponent,this.completeAction=a.PlanCompleteAction.None}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.completeAction)return!1;if(!(this.descriptors.applyJSON(e.descriptors)&&this.coordinate.applyJSON(e.coordinate)&&this.droneMotionLimits.applyJSON(e.droneMotionLimits)&&this.takeoffDistance.applyJSON(e.takeoffDistance)))return!1;if(e.takeoffOffset){if(this.takeoffOffset=new s.Vector2,!this.takeoffOffset.applyJSON(e.takeoffOffset))return!1}else this.takeoffOffset=null;if(e.droneMotionErrorTolerance&&!this.droneMotionErrorTolerance.applyJSON(e.droneMotionErrorTolerance))return!1;if(e.rootComponent){const t=o.Serialization.deserialize(e.rootComponent);if(!(t&&t instanceof r.SubComponent))return!1;this.rootComponent=t}return this.completeAction=e.completeAction,!0}get verification(){const e=this.rootComponent.verification;if(!e)return null;const t=o.Serialization.clone(this,!0);return t.rootComponent=e,t}get requiredTakeoffCoordinate(){return this.takeoffOffset?this.coordinate.geoCoordinate(this.takeoffOffset):null}get takeoffCoordinate(){return this.requiredTakeoffCoordinate||this.coordinate}elevationCoordinates(e){const t=super.elevationCoordinates(e);return t.push(this.takeoffCoordinate),t}get context(){return new m.Context(this)}node(e=null){const t=super.node(e);return t.addChild(this.rootComponent,!1),t}estimate(e,t){return this.rootComponent.estimate(e,t)}execute(e){const t=super.execute(e);if(t.status!==a.ComponentExecutionStatus.Executing)return t;const n=this.rootComponent.execute(e);switch(n.status){case a.ComponentExecutionStatus.Pending:case a.ComponentExecutionStatus.Executing:return t;case a.ComponentExecutionStatus.Succeeded:case a.ComponentExecutionStatus.Failed:if(n.status===a.ComponentExecutionStatus.Failed&&this.rootComponent.required)return t.failed(n.error,e.engagement.currentDatetime)}return t.succeeded(e.engagement.currentDatetime)}}},function(e,t,n){(function(){var t;t=n(18),e.exports=function(){class e extends t{constructor(e){super(e),this.value=""}clone(){return Object.create(this)}substringData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}appendData(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}insertData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}deleteData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}replaceData(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){return!!super.isEqualNode(e)&&e.data===this.data}}return Object.defineProperty(e.prototype,"data",{get:function(){return this.value},set:function(e){return this.value=e||""}}),Object.defineProperty(e.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(e){return this.value=e||""}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(28),r=n(16),a=n(3),s=n(2);t.AltitudeRange=class{constructor(e=new r.Altitude,t=new o.Limits){this.type=i.TypeName.AltitudeRange,this.altitude=new r.Altitude,this.altitude=e,this.range=t}applyJSON(e){return!(!e||e.type!==this.type)&&this.altitude.applyJSON(e.altitude)&&this.range.applyJSON(e.range)}toString(){return[this.altitude.toString(),this.range.toString(s.Format.altitude)].join(a.Strings.Common.delimeter)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(78),r=n(4),a=n(17),s=n(6);t.AssetManifest=class extends s.Identifiable{constructor(e=null,t=new a.Descriptors,n=[]){super(e),this.type=i.TypeName.AssetManifest,this.assets=[],this.descriptors=t,this.assets=n}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.missionID||!e.planID)return!1;if(!this.descriptors.applyJSON(e.descriptors))return!1;if(this.assets=[],Array.isArray(e.assets))for(let t of e.assets){const e=r.Serialization.deserialize(t);if(!(e&&e instanceof o.Asset))return!1;this.assets.push(e)}return!0}add(e){const t=this.assets.find(t=>t.key===e.key);t?t.merge(e):this.assets.push(e)}get size(){return this.assets.reduce((e,t)=>e+t.size,0)}}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var i=n(231),o=n(232),r=n(153);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return m(this,e)}return l(this,e,t,n)}function l(e,t,n,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,i){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,n):new Uint8Array(t,n,i);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=d(e,t);return e}(e,t,n,i):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var i=0|p(t,n),o=(e=s(e,i)).write(t,n);o!==i&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|h(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?s(e,0):d(e,t);if("Buffer"===t.type&&r(t.data))return d(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function m(e,t){if(c(t),e=s(e,t<0?0:0|h(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|h(t.length);e=s(e,n);for(var i=0;i<n;i+=1)e[i]=255&t[i];return e}function h(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return j(e).length;default:if(i)return V(e).length;t=(""+t).toLowerCase(),i=!0}}function f(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function g(e,t,n,i,o){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,i)),u.isBuffer(t))return 0===t.length?-1:y(e,t,n,i,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,i,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,i,o){var r,a=1,s=e.length,u=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var c=-1;for(r=n;r<s;r++)if(l(e,r)===l(t,-1===c?0:r-c)){if(-1===c&&(c=r),r-c+1===u)return c*a}else-1!==c&&(r-=r-c),c=-1}else for(n+u>s&&(n=s-u),r=n;r>=0;r--){for(var m=!0,d=0;d<u;d++)if(l(e,r+d)!==l(t,d)){m=!1;break}if(m)return r}return-1}function C(e,t,n,i){n=Number(n)||0;var o=e.length-n;i?(i=Number(i))>o&&(i=o):i=o;var r=t.length;if(r%2!=0)throw new TypeError("Invalid hex string");i>r/2&&(i=r/2);for(var a=0;a<i;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function v(e,t,n,i){return U(V(t,e.length-n),e,n,i)}function S(e,t,n,i){return U(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,i)}function b(e,t,n,i){return S(e,t,n,i)}function w(e,t,n,i){return U(j(t),e,n,i)}function x(e,t,n,i){return U(function(e,t){for(var n,i,o,r=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),i=n>>8,o=n%256,r.push(o),r.push(i);return r}(t,e.length-n),e,n,i)}function M(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function O(e,t,n){n=Math.min(e.length,n);for(var i=[],o=t;o<n;){var r,a,s,u,l=e[o],c=null,m=l>239?4:l>223?3:l>191?2:1;if(o+m<=n)switch(m){case 1:l<128&&(c=l);break;case 2:128==(192&(r=e[o+1]))&&(u=(31&l)<<6|63&r)>127&&(c=u);break;case 3:r=e[o+1],a=e[o+2],128==(192&r)&&128==(192&a)&&(u=(15&l)<<12|(63&r)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:r=e[o+1],a=e[o+2],s=e[o+3],128==(192&r)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&r)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,m=1):c>65535&&(c-=65536,i.push(c>>>10&1023|55296),c=56320|1023&c),i.push(c),o+=m}return function(e){var t=e.length;if(t<=D)return String.fromCharCode.apply(String,e);var n="",i=0;for(;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=D));return n}(i)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return l(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,i){return c(t),t<=0?s(e,t):void 0!==n?"string"==typeof i?s(e,t).fill(n,i):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return m(null,e)},u.allocUnsafeSlow=function(e){return m(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,i=t.length,o=0,r=Math.min(n,i);o<r;++o)if(e[o]!==t[o]){n=e[o],i=t[o];break}return n<i?-1:i<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!r(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var i=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,o),o+=a.length}return i},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)f(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)f(this,t,t+3),f(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)f(this,t,t+7),f(this,t+1,t+6),f(this,t+2,t+5),f(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?O(this,0,e):function(e,t,n){var i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return F(this,t,n);case"utf8":case"utf-8":return O(this,t,n);case"ascii":return P(this,t,n);case"latin1":case"binary":return T(this,t,n);case"base64":return M(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,n);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,i,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),t<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&t>=n)return 0;if(i>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var r=(o>>>=0)-(i>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(r,a),l=this.slice(i,o),c=e.slice(t,n),m=0;m<s;++m)if(l[m]!==c[m]){r=l[m],a=c[m];break}return r<a?-1:a<r?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},u.prototype.write=function(e,t,n,i){if(void 0===t)i="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)i=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var r=!1;;)switch(i){case"hex":return C(this,e,t,n);case"utf8":case"utf-8":return v(this,e,t,n);case"ascii":return S(this,e,t,n);case"latin1":case"binary":return b(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,n);default:if(r)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),r=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var D=4096;function P(e,t,n){var i="";n=Math.min(e.length,n);for(var o=t;o<n;++o)i+=String.fromCharCode(127&e[o]);return i}function T(e,t,n){var i="";n=Math.min(e.length,n);for(var o=t;o<n;++o)i+=String.fromCharCode(e[o]);return i}function F(e,t,n){var i=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>i)&&(n=i);for(var o="",r=t;r<n;++r)o+=B(e[r]);return o}function E(e,t,n){for(var i=e.slice(t,n),o="",r=0;r<i.length;r+=2)o+=String.fromCharCode(i[r]+256*i[r+1]);return o}function _(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,i,o,r){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<r)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function A(e,t,n,i){t<0&&(t=65535+t+1);for(var o=0,r=Math.min(e.length-n,2);o<r;++o)e[n+o]=(t&255<<8*(i?o:1-o))>>>8*(i?o:1-o)}function I(e,t,n,i){t<0&&(t=4294967295+t+1);for(var o=0,r=Math.min(e.length-n,4);o<r;++o)e[n+o]=t>>>8*(i?o:3-o)&255}function L(e,t,n,i,o,r){if(n+i>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(e,t,n,i,r){return r||L(e,0,n,4),o.write(e,t,n,i,23,4),n+4}function k(e,t,n,i,r){return r||L(e,0,n,8),o.write(e,t,n,i,52,8),n+8}u.prototype.slice=function(e,t){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var r=0;r<o;++r)n[r]=this[r+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||_(e,t,this.length);for(var i=this[e],o=1,r=0;++r<t&&(o*=256);)i+=this[e+r]*o;return i},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||_(e,t,this.length);for(var i=this[e+--t],o=1;t>0&&(o*=256);)i+=this[e+--t]*o;return i},u.prototype.readUInt8=function(e,t){return t||_(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||_(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||_(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||_(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||_(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||_(e,t,this.length);for(var i=this[e],o=1,r=0;++r<t&&(o*=256);)i+=this[e+r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||_(e,t,this.length);for(var i=t,o=1,r=this[e+--i];i>0&&(o*=256);)r+=this[e+--i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readInt8=function(e,t){return t||_(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||_(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||_(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||_(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||_(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||_(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||_(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||_(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||_(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,r=0;for(this[t]=255&e;++r<n&&(o*=256);)this[t+r]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,r=1;for(this[t+o]=255&e;--o>=0&&(r*=256);)this[t+o]=e/r&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):A(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):A(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):I(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var r=0,a=1,s=0;for(this[t]=255&e;++r<n&&(a*=256);)e<0&&0===s&&0!==this[t+r-1]&&(s=1),this[t+r]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var r=n-1,a=1,s=0;for(this[t+r]=255&e;--r>=0&&(a*=256);)e<0&&0===s&&0!==this[t+r+1]&&(s=1),this[t+r]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):A(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):A(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):I(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return R(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return R(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return k(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return k(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,i){if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);var o,r=i-n;if(this===e&&n<t&&t<i)for(o=r-1;o>=0;--o)e[o+t]=this[o+n];else if(r<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<r;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+r),t);return r},u.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!u.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var r;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(r=t;r<n;++r)this[r]=e;else{var a=u.isBuffer(e)?e:V(new u(e,i).toString()),s=a.length;for(r=0;r<n-t;++r)this[r+t]=a[r%s]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function V(e,t){var n;t=t||1/0;for(var i=e.length,o=null,r=[],a=0;a<i;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&r.push(239,191,189);continue}if(a+1===i){(t-=3)>-1&&r.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&r.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&r.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;r.push(n)}else if(n<2048){if((t-=2)<0)break;r.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;r.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;r.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return r}function j(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,n,i){for(var o=0;o<i&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(38))},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return"function"==typeof e}function o(e){return"object"==typeof e&&null!==e}function r(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,a,s,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||o(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(r(n=this._events[e]))return!1;if(i(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(o(n))for(s=Array.prototype.slice.call(arguments,1),a=(l=n.slice()).length,u=0;u<a;u++)l[u].apply(this,s);return!0},n.prototype.addListener=function(e,t){var a;if(!i(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,i(t.listener)?t.listener:t),this._events[e]?o(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,o(this._events[e])&&!this._events[e].warned&&(a=r(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[e].length>a&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!i(t))throw TypeError("listener must be a function");var n=!1;function o(){this.removeListener(e,o),n||(n=!0,t.apply(this,arguments))}return o.listener=t,this.on(e,o),this},n.prototype.removeListener=function(e,t){var n,r,a,s;if(!i(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(a=(n=this._events[e]).length,r=-1,n===t||i(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(o(n)){for(s=a;s-- >0;)if(n[s]===t||n[s].listener&&n[s].listener===t){r=s;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(i(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){(t=e.exports=n(156)).Stream=t,t.Readable=t,t.Writable=n(113),t.Duplex=n(39),t.Transform=n(160),t.PassThrough=n(238)},function(e,t,n){"use strict";(function(t,i,o){var r=n(79);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var i=e.entry;e.entry=null;for(;i;){var o=i.callback;t.pendingcb--,o(n),i=i.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=C;var s,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?i:r.nextTick;C.WritableState=y;var l=n(57);l.inherits=n(47);var c={deprecate:n(237)},m=n(157),d=n(80).Buffer,h=o.Uint8Array||function(){};var p,f=n(158);function g(){}function y(e,t){s=s||n(39),e=e||{};var i=t instanceof s;this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var o=e.highWaterMark,l=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:i&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var m=!1===e.decodeStrings;this.decodeStrings=!m,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,i=n.sync,o=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,i,o){--t.pendingcb,n?(r.nextTick(o,i),r.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",i)):(o(i),e._writableState.errorEmitted=!0,e.emit("error",i),M(e,t))}(e,n,i,t,o);else{var a=w(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||b(e,n),i?u(S,e,n,a,o):S(e,n,a,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function C(e){if(s=s||n(39),!(p.call(C,this)||this instanceof s))return new C(e);this._writableState=new y(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),m.call(this)}function v(e,t,n,i,o,r,a){t.writelen=i,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(o,t.onwrite):e._write(o,r,t.onwrite),t.sync=!1}function S(e,t,n,i){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,i(),M(e,t)}function b(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var i=t.bufferedRequestCount,o=new Array(i),r=t.corkedRequestsFree;r.entry=n;for(var s=0,u=!0;n;)o[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;o.allBuffers=u,v(e,t,!0,t.length,o,"",r.finish),t.pendingcb++,t.lastBufferedRequest=null,r.next?(t.corkedRequestsFree=r.next,r.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,m=n.callback;if(v(e,t,!1,t.objectMode?1:l.length,l,c,m),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function w(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),M(e,t)})}function M(e,t){var n=w(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,r.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}l.inherits(C,m),y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(y.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(C,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===C&&(e&&e._writableState instanceof y)}})):p=function(e){return e instanceof this},C.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},C.prototype.write=function(e,t,n){var i,o=this._writableState,a=!1,s=!o.objectMode&&(i=e,d.isBuffer(i)||i instanceof h);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof n&&(n=g),o.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),r.nextTick(t,n)}(this,n):(s||function(e,t,n,i){var o=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),r.nextTick(i,a),o=!1),o}(this,o,e,n))&&(o.pendingcb++,a=function(e,t,n,i,o,r){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n));return t}(t,i,o);i!==a&&(n=!0,o="buffer",i=a)}var s=t.objectMode?1:i.length;t.length+=s;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:i,encoding:o,isBuf:n,callback:r,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,s,i,o,r);return u}(this,o,s,e,t,n)),a},C.prototype.cork=function(){this._writableState.corked++},C.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||b(this,e))},C.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(C.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),C.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},C.prototype._writev=null,C.prototype.end=function(e,t,n){var i=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||function(e,t,n){t.ending=!0,M(e,t),n&&(t.finished?r.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,i,n)},Object.defineProperty(C.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),C.prototype.destroy=f.destroy,C.prototype._undestroy=f.undestroy,C.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(56),n(154).setImmediate,n(38))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),r=n(115),a=n(116),s=n(117),u=n(118),l=n(6),c=n(1);t.CameraSpecification=class extends l.Identifiable{constructor(e=null,t="",n=9,u=12.8,l=9.6,m=5472,d=3648){super(e),this.type=i.TypeName.CameraSpecification,this.toString=((e=!1)=>c.Common.joinNotEmpty([this.lens.toString(),this.sensor.toString(),e?this.image.toString():""])),this.descriptors=new o.Descriptors(t),this.lens=new a.CameraLensSpecification(n),this.sensor=new s.CameraSensorSpecification(u,l),this.image=new r.CameraImageSpecification(m,d)}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.descriptors.applyJSON(e.descriptors)&&this.lens.applyJSON(e.lens)&&this.sensor.applyJSON(e.sensor)&&this.image.applyJSON(e.image)}get resettable(){return!1}get fieldOfView(){return new u.FieldOfView(2*Math.atan(this.sensor.width/(2*this.lens.focalLength)),2*Math.atan(this.sensor.height/(2*this.lens.focalLength)),2*Math.atan(Math.sqrt(Math.pow(this.sensor.width,2)+Math.pow(this.sensor.height,2))/(2*this.lens.focalLength)))}groundSampleDistance(e){const t=this.sensor.width/1e3,n=this.sensor.height/1e3,i=this.lens.focalLength/1e3;return{width:e*t/(i*this.image.width),height:e*n/(i*this.image.height)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),r=n(3),a=n(2);t.CameraImageSpecification=class{constructor(e=1,t=1){this.type=i.TypeName.CameraImageSpecification,this.toString=(()=>`${r.Strings.CameraImageSpecification.name}: ${a.Format.cameraSpecificationPixels(this.width).toString()} x ${a.Format.cameraSpecificationPixels(this.height).toString()}`),this.width=e,this.height=t}applyJSON(e){return!(!e||e.type!==this.type||(this.width=o.Common.parseFloat(e.width),this.height=o.Common.parseFloat(e.height),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),r=n(3),a=n(2);t.CameraLensSpecification=class{constructor(e=1){this.type=i.TypeName.CameraLensSpecification,this.toString=(()=>`${r.Strings.CameraLensSpecification.name}: ${a.Format.cameraSpecificationLength(this.focalLength).toString()}`),this.focalLength=e}applyJSON(e){return!(!e||e.type!==this.type||(this.focalLength=o.Common.parseFloat(e.focalLength),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),r=n(3),a=n(2);t.CameraSensorSpecification=class{constructor(e=1,t=1){this.type=i.TypeName.CameraSensorSpecification,this.toString=(()=>`${r.Strings.CameraSensorSpecification.name}: ${a.Format.cameraSpecificationLength(this.width).toString()} x ${a.Format.cameraSpecificationLength(this.height).toString()}`),this.width=e,this.height=t}applyJSON(e){return!(!e||e.type!==this.type||(this.width=o.Common.parseFloat(e.width),this.height=o.Common.parseFloat(e.height),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1);t.FieldOfView=class{constructor(e=0,t=0,n=0){this.type=i.TypeName.FieldOfView,this.horizontal=e,this.vertical=t,this.diagonal=n}applyJSON(e){return!(!e||e.type!==this.type||(this.horizontal=o.Common.parseFloat(e.horizontal),this.vertical=o.Common.parseFloat(e.vertical),this.diagonal=o.Common.parseFloat(e.diagonal),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ExposureModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ExposureModeCameraCommand,this.exposureMode=o.CameraExposureMode.Program}applyJSON(e){return!(!super.applyJSON(e)||!e.exposureMode||(this.exposureMode=e.exposureMode,0))}get subtitle(){return r.Format.enum("CameraExposureMode",this.exposureMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get reengagementReplaceable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2),a=n(20),s=n(1);t.FocusCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.FocusCameraCommand,this.focusTarget=new a.Point2(.5,.5)}applyJSON(e){return!!super.applyJSON(e)&&!!this.focusTarget.applyJSON(e.focusTarget)}get subtitle(){return s.Common.joinNotEmpty([r.Format.percent(this.focusTarget.x).toString(),r.Format.percent(this.focusTarget.y).toString()])}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.VideoFileFormatCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoFileFormatCameraCommand,this.videoFileFormat=o.CameraVideoFileFormat.MP4}applyJSON(e){return!(!super.applyJSON(e)||!e.videoFileFormat||(this.videoFileFormat=e.videoFileFormat,0))}get subtitle(){return r.Format.enum("CameraVideoFileFormat",this.videoFileFormat)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(12);t.ComponentSource=class{constructor(e="",t=new o.Datetime){this.type=i.TypeName.ComponentSource,this.path=e,this.updated=t}applyJSON(e){return!(!e||e.type!==this.type||!e.path||!this.updated.applyJSON(e.updated)||(this.path=e.path,0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=u(n(92)),o=u(n(93)),r=u(n(94)),a=u(n(195)),s=u(n(124));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function e(t){if((0,i.default)(t))return Number(t);if((0,o.default)(t))return(0,r.default)(t);if((0,a.default)(t)){var n=(0,s.default)(t);return Array.isArray(t)?t.map(function(t,n){return[0,1].includes(n)?e(t):t}):function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){l(e,t,n[t])})}return e}({},t,n.latitude&&l({},n.latitude,e(t[n.latitude])),n.longitude&&l({},n.longitude,e(t[n.longitude])))}return Array.isArray(t)?t.map(function(t){return(0,a.default)(t)?e(t):t}):t};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=n(13),r=(i=n(91))&&i.__esModule?i:{default:i};function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(e){var t=(0,r.default)(e,o.longitudeKeys),n=(0,r.default)(e,o.latitudeKeys),i=(0,r.default)(e,o.altitudeKeys);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){a(e,t,n[t])})}return e}({latitude:n,longitude:t},i?{altitude:i}:{})};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),r=n(78),a=n(4),s=n(1);t.AssetSource=class{constructor(e=""){this.type=i.TypeName.AssetSource,this.descriptors=new o.Descriptors,this.key=e}applyJSON(e){return!(!e||e.type!==this.type||(this.key=s.Common.parseString(e.key,""),!this.descriptors.applyJSON(e.descriptors)))}toAsset(e=null){return new r.Asset(this.key||e,a.Serialization.clone(this.descriptors))}get title(){return s.Common.joinNotEmpty([this.key,this.descriptors.name,this.descriptors.description])}get subtitle(){return s.Common.joinNotEmpty(this.descriptors.tags)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(8),r=n(90),a=n(1),s=n(0),u=n(4);t.GeoReferencedOffset=class extends i.Identifiable{constructor(){super(...arguments),this.type=s.TypeName.GeoReferencedOffset,this.reference=null,this.coordinateOffset=new o.Vector2,this.altitudeOffset=0}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(e.reference){if(this.reference=new r.SourcedGeoSpatial,!this.reference.applyJSON(e.reference))return!1}else this.reference=null;return this.altitudeOffset=a.Common.parseFloat(e.altitudeOffset),this.coordinateOffset.applyJSON(e.coordinateOffset)}value(e,t){const n=u.Serialization.clone((this.reference||t).value(e));return n.coordinate=n.coordinate.geoCoordinate(this.coordinateOffset),n.altitude.value+=this.altitudeOffset,n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(33);t.DefaultCommand=class extends i.Command{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(14),r=n(7),a=n(3),s=n(10),u=n(2),l=n(26),c=n(1),m=n(69),d=n(8);t.CourseComponent=class extends m.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.CourseComponent,this.course=0,this.achievementTime=r.Constants.CourseComponentAchievementTime,this.achievementDistance=r.Constants.CourseComponentAchievementDistance}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||(this.course=c.Common.parseFloat(e.course),this.achievementTime=c.Common.parseFloat(e.achievementTime),this.achievementDistance=c.Common.parseFloat(e.achievementDistance),0))}get subtitle(){const e=u.Format.angle(this.course).toString();return this.achievementDistance>0?a.Strings.formatString(a.Strings.CourseComponent.subtitle,e,u.Format.angle(this.achievementDistance).toString()):e}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.CourseComponent);if(t&&t.achievementDistanceVelocityValidSince){const n=e.drone.projectSpatial(e.engagement.currentDatetime),i=this.resolveDroneMotionLimits(e),a=o.Geometry.angleDifferenceSigned(this.course,n.velocity.horizontal.direction);if(Math.abs(a)<=this.achievementDistance&&Math.abs(n.velocity.horizontal.magnitude-i.horizontal.velocity.max)<=r.Constants.CourseComponentAchievementVelocity&&e.elapsedTime(t.achievementDistanceVelocityValidSince)>=this.achievementTime)return!0}return!1}estimate(e,t){const n=super.estimate(e,t);if(this.achievedComponent){const i=this.achievedComponent.estimate(e,n.lastDroneSpatial||t);n.children.push(i)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,c=n.projectSpatial(e.engagement.currentDatetime),m=this.resolveDroneMotionLimits(e),p=Math.abs(c.velocity.horizontal.magnitude-m.horizontal.velocity.max),f=t.cachedData(i.TypeName.CourseComponent,()=>new h(p)),g=o.Geometry.angleDifferenceSigned(this.course,c.velocity.horizontal.direction);if(Math.abs(g)<=this.achievementDistance&&p<=r.Constants.CourseComponentAchievementVelocity){f.achievementDistanceVelocityValidSince||(f.achievementDistanceVelocityValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(f.achievementDistanceVelocityValidSince);n<this.achievementTime&&t.messages.push(new s.Message(a.Strings.AchievableDroneMotionComponent.messages.waiting.title,u.Format.number(this.achievementTime-n)))}else f.achievementDistanceVelocityValidSince=null;const y=new l.Velocity6;return y.horizontal=new d.Vector2(this.course,m.horizontal.velocity.max),this.addDroneVelocityCommand(e,y),t.progress=f.progress(p),t}};class h{constructor(e){this.achievementDistanceVelocityValidSince=null,this.totalVelocity=e,this.totalVelocity=e}progress(e){return e>this.totalVelocity?0:(this.totalVelocity-e)/this.totalVelocity}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(101),r=n(1);t.MotionLimits3Optional=class{constructor(e=null,t=null,n=null){this.type=i.TypeName.MotionLimits3Optional,this.toString=(e=>r.Common.joinNotEmpty([this.x?this.x.toString(e.x):"",this.y?this.y.toString(e.y):"",this.z?this.z.toString(e.z):""])),this.x=e,this.y=t,this.z=n}applyJSON(e){if(!e)return this.x=null,this.z=null,this.z=null,!0;if(e.type!==this.type)return!1;if(e.x){if(this.x=new o.MotionLimitsOptional,!this.x.applyJSON(e.x))return!1}else this.x=null;if(e.y){if(this.y=new o.MotionLimitsOptional,!this.y.applyJSON(e.y))return!1}else this.y=null;if(e.z){if(this.z=new o.MotionLimitsOptional,!this.z.applyJSON(e.z))return!1}else this.z=null;return!0}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get forwardBackward(){return this.x}set forwardBackward(e){this.x=e}get leftRight(){return this.y}set leftRight(e){this.y=e}get upDown(){return this.z}set upDown(e){this.z=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(68);t.PathComponentElementNode=class extends i.ListElementNode{get pathComponentNode(){return this.parent.parent}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(1),r=n(0),a=n(12),s=n(46),u=n(4),l=n(132),c=n(211),m=n(51),d=n(52);t.Engagement=class extends i.Identifiable{constructor(e=null,t=new m.User,n=new d.Device,i=new s.Drone,o=null){super(),this.type=r.TypeName.Engagement,this.reengagement=null,this.lastExecuted=null,this.timeSinceLastExecution=0,this.totalExecutes=0,this.disengagement=null,this.engaged=e||new a.Datetime,this.reengagement=o,this.lastUserSnapshot=u.Serialization.clone(t),this.startDeviceSpatial=u.Serialization.clone(n.spatial),this.lastDeviceSnapshot=u.Serialization.clone(n),this.startDroneSpatial=u.Serialization.clone(i.spatial),this.lastDroneSnapshot=u.Serialization.clone(i)}applyJSON(e){return!(!super.applyJSON(e)&&e.type!==this.type||!this.engaged.applyJSON(e.engaged)||(this.reengagement=null,e.reengagement&&(this.reengagement=new l.Mission,!this.reengagement.applyJSON(e.reengagement))||!this.lastUserSnapshot.applyJSON(e.lastUserSnapshot)||!this.startDeviceSpatial.applyJSON(e.startDeviceSpatial)||!this.lastDeviceSnapshot.applyJSON(e.lastDeviceSnapshot)||!this.startDroneSpatial.applyJSON(e.startDroneSpatial)||!this.lastDroneSnapshot.applyJSON(e.lastDroneSnapshot)||e.lastExecuted&&(this.lastExecuted=new a.Datetime,!this.lastExecuted.applyJSON(e.lastExecuted))||(this.timeSinceLastExecution=o.Common.parseFloat(e.timeSinceLastExecution),this.totalExecutes=o.Common.parseInt(e.totalExecutes),this.disengagement=null,e.disengagement&&(this.disengagement=new c.Disengagement,!this.disengagement.applyJSON(e.disengagement)))))}execute(e,t,n=new d.Device,i){this.lastExecuted&&(this.timeSinceLastExecution=e.elapsedTime(this.lastExecuted)),this.lastUserSnapshot=u.Serialization.clone(t),this.lastDeviceSnapshot=u.Serialization.clone(n),this.lastDroneSnapshot=u.Serialization.clone(i),this.lastExecuted=e,this.totalExecutes++}disengage(e,t){this.disengagement||(e.removeAllStatefulCommands(),this.disengagement=new c.Disengagement(t))}get currentDatetime(){return this.lastExecuted||this.engaged}get timeElapsed(){return(this.currentDatetime.value.getTime()-this.engaged.value.getTime())/1e3}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(105),o=n(131),r=n(133),a=n(1),s=n(17),u=n(6),l=n(51),c=n(0),m=n(22),d=n(12),h=n(212),p=n(213),f=n(4),g=n(7),y=n(97),C=n(214),v=n(10),S=n(31),b=n(3),w=n(221),x=n(55),M=n(102),O=n(103),D=n(44),P=n(60),T=n(87),F=n(36),E=n(28),_=n(35),N=n(148),A=n(8),I=n(15),L=n(128),R=n(101),k=n(2),z=n(27),B=n(109),V=n(77);class j extends u.Identifiable{constructor(){super(...arguments),this.type=c.TypeName.Mission,this.descriptors=null,this.func=null,this.plan=new i.PlanComponent,this.execution=new r.Execution,this.engagements=[]}applyJSON(e){if(!super.applyJSON(e)&&e.type!==this.type)return!1;if(e.descriptors){if(this.descriptors=this.descriptors||new s.Descriptors,!this.descriptors.applyJSON(e.descriptors))return!1}else this.descriptors=null;if(!this.plan.applyJSON(e.plan)||!this.execution.applyJSON(e.execution))return!1;if(e.func){if(this.func=new V.Func,!this.func.applyJSON(e.func))return!1}else this.func=null;if(this.engagements=[],Array.isArray(e.engagements))for(let t of e.engagements){const e=new o.Engagement;if(!e.applyJSON(t))return!1;this.engagements.push(e)}return!0}static createFromComponent(e){const t=new j;return e instanceof i.PlanComponent?t.plan=e:e instanceof m.SubComponent&&(Object.assign(t.plan.coordinate,e.coordinate),t.plan.descriptors.name=e.descriptors.name,t.plan.rootComponent=e,t.plan.elevations=e.elevations?e.elevations.filter(t=>t.coordinate.distance(e.coordinate)<=g.Constants.ComponentElevationTolerance):null),t.descriptors=f.Serialization.clone(t.plan.descriptors),t}get verification(){const e=new j,t=this.plan.verification;return t&&(e.plan=t),e.descriptors=f.Serialization.clone(this.descriptors||this.plan.descriptors),e}get complete(){switch(this.execution.getComponentState(this.plan).status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:return!1;case c.ComponentExecutionStatus.Succeeded:case c.ComponentExecutionStatus.Failed:return!0}return!1}get state(){return this.execution.getComponentState(this.plan.rootComponent)}get componentNodeExecutionStates(){const e=this.plan.node(),t=[new w.ComponentNodeExecutionState(e,this.execution.getComponentState(this.plan))];return e.descendants.forEach(e=>{e instanceof y.ComponentNode&&t.push(new w.ComponentNodeExecutionState(e,this.execution.getComponentState(e.component)))}),t}get executingMessageGroups(){const e=[];if(!this.engaged)return e;if(this.reengaging){const t=a.Common.lastSafe(this.engagements);if(t&&t.reengagement){const n=new N.MessageGroup;return n.descriptors.name=b.Strings.Mission.values.reengagement,e.push(n),e.concat(t.reengagement.executingMessageGroups)}}return this.componentNodeExecutionStates.forEach(t=>{if(t.state.status===c.ComponentExecutionStatus.Executing){if(t.node.component instanceof i.PlanComponent)return;if(t.node.parent&&t.node.parent instanceof y.ComponentNode&&t.node.parent.component instanceof i.PlanComponent)return;const n=new N.MessageGroup;n.descriptors.name=t.node.title,n.messages.push(...t.state.messages),e.push(n)}}),e}get timeElapsed(){let e=0;return this.engagements.forEach(t=>{e+=t.timeElapsed}),e}get engaged(){const e=a.Common.lastSafe(this.engagements);return!!e&&!e.disengagement}get reengaging(){if(this.engaged){const e=a.Common.lastSafe(this.engagements);if(e&&e.reengagement)return!e.reengagement.complete}return!1}get context(){return this.plan.context}componentExecuteContext(e,t,n){const i=new p.ComponentExecuteContext(this.plan,this.execution,n);return i.user=e,i.drone=t,i}estimate(e=!1,t=!1,n=null){const i=new C.ComponentEstimateContext(this.plan);return n&&(i.drone=n),i.altitudeRequired=e,i.timeRequired=t,this.plan.estimate(i,f.Serialization.clone(this.engagements.length>0?this.engagements[0].startDroneSpatial:i.drone.spatial))}engageDisallowedReasons(e,t,n){if(this.complete)return[new v.Message(b.Strings.Mission.messages.engageDisallowed.complete)];const i=[],o=this.plan.requiredTakeoffCoordinate;return o&&n.takeoffCoordinate.distance(o)>this.plan.takeoffDistance.horizontal&&i.push(new v.Message(b.Strings.Mission.messages.engageDisallowed.requiredTakeoffInvalid.title,b.Strings.formatString(b.Strings.Mission.messages.engageDisallowed.requiredTakeoffInvalid.details,k.Format.distance(n.takeoffCoordinate.distance(o)-this.plan.takeoffDistance.horizontal).toString()))),i}engage(e,t,n,i=null){if(this.complete)return a.Common.last(this.engagements);let r=a.Common.lastSafe(this.engagements);r&&this.disengage(n,new v.Message(b.Strings.Mission.messages.reengaging)),r=new o.Engagement(i,e,t,n,this.reengagement(n)),this.engagements.push(r);const s=this.componentExecuteContext(e,n,r);return this.plan.node().descendants.forEach(e=>{e instanceof y.ComponentNode&&e.component.engaging(s)}),r.reengagement&&r.reengagement.engage(e,t,n,i),r}execute(e,t,n,i=null,o=null){let r=this.state;switch(r.status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:o=o||new d.Datetime;let s=a.Common.lastSafe(this.engagements);if(s&&(s.disengagement?s=null:s.lastUserSnapshot.id!==e.id?(this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementUserID)),s=null):s.lastDeviceSnapshot.id!==t.id?(this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementDeviceID)),s=null):s.lastDroneSnapshot.id!==n.id&&(this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementDroneID)),s=null)),!s)return r;let u=!0;if(s.reengagement&&s.reengagement.engaged)switch(s.reengagement.state.status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:u=!1,s.reengagement.execute(e,t,n,null,o);break;case c.ComponentExecutionStatus.Failed:this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementFailed,s.reengagement.state.error)),u=!1;break;case c.ComponentExecutionStatus.Succeeded:}if(u){s.execute(o,e,t,n),n.statefulCommands.forEach(e=>{n.commandExecutionState(e.id).status===c.CommandExecutionStatus.Succeeded&&this.execution.addReengagementCommand(e)});const a=this.componentExecuteContext(e,n,s);if(r=this.plan.execute(a),this.complete)switch(r.status){case c.ComponentExecutionStatus.Failed:this.disengage(n,new v.Message(b.Strings.Mission.messages.failed,r.error));break;case c.ComponentExecutionStatus.Succeeded:this.disengage(n,new v.Message(b.Strings.Mission.messages.succeeded))}i&&i.addFrame(a,r.duration)}return r;default:return r}}disengage(e,t){const n=a.Common.lastSafe(this.engagements);n&&n.disengage(e,t)}get disengagement(){const e=a.Common.lastSafe(this.engagements);return e?e.disengagement:null}reengagement(e){if(this.complete)return null;const t=a.Common.lastSafe(this.engagements.filter(e=>!e.reengagement||e.reengagement.state.status===c.ComponentExecutionStatus.Succeeded));if(!t)return null;const n=e=>this.execution.reengagementCommands.filter(t=>t.reengagementTiming===e).map(e=>f.Serialization.clone(e,!0)),i=this.componentExecuteContext(new l.User,e,t),o=new j;o.plan.descriptors=this.plan.descriptors,o.plan.droneMotionLimits=this.plan.droneMotionLimits,o.plan.coordinate=this.plan.coordinate;const r=new x.ListComponent;o.plan.rootComponent=r;let s=t.lastDroneSnapshot.spatial,u=!1,m=null;for(const e of this.componentNodeExecutionStates)e.state.status===c.ComponentExecutionStatus.Executing&&e.node.component instanceof z.DroneMotionComponent&&(s=e.node.component.reengagementDroneSpatial(i)||s,e.node.component instanceof M.DestinationComponent&&(m=e.node.component)),e.state.status!==c.ComponentExecutionStatus.Pending&&e.node.component instanceof z.DroneMotionComponent&&(u=!0);let d=!1;const h=new M.DestinationComponent;if(h.destinationOffset=o.plan.coordinate.offset(s.coordinate),h.altitudeRange.altitude.value=s.altitude.value,h.altitudeRange.range=new E.Limits(g.Constants.MissionReengagementAltitudeRange),m){if(e.spatial.altitude.value>s.altitude.value){const t=m.destinationReferencedAltitude(i).toSystem(c.AltitudeSystem.ATL);if(null===t)return null;h.altitudeRange.altitude.value=Math.max(s.altitude.value,Math.min(e.spatial.altitude.value,t.value))}r.childComponents.push(h)}else if(u)if((d=s.velocity.horizontal.magnitude>g.Constants.CourseComponentAchievementVelocity)&&h.destinationOffset.addToSelf(new A.Vector2(s.velocity.horizontal.direction+Math.PI,I.Kinematic.d4(0,s.velocity.horizontal.magnitude,o.plan.droneMotionLimits.horizontal.acceleration.max))),e.spatial.altitude.value>s.altitude.value){const t=f.Serialization.clone(h,!0);h.altitudeRange.altitude.value=e.spatial.altitude.value,r.childComponents.push(h),r.childComponents.push(t)}else r.childComponents.push(h);else h.destinationOffset=o.plan.coordinate.offset(e.spatial.coordinate),h.altitudeRange.altitude.value=e.spatial.altitude.value,r.childComponents.push(h);const p=new x.ListComponent;for(const e of Object.keys(t.lastDroneSnapshot.cameras)){const t=new F.StopCaptureCameraCommand;t.channel=parseInt(e),p.childComponents.push(new D.CommandComponent(t))}for(const e of Object.keys(t.lastDroneSnapshot.gimbals)){const t=new T.ModeGimbalCommand;t.channel=parseInt(e),t.mode=c.GimbalMode.YawFollow,p.childComponents.push(new D.CommandComponent(t))}n(c.CommandReengagementTiming.Approach).forEach(e=>{p.childComponents.push(new D.CommandComponent(e))}),h.immediateComponent=p;const y=new O.HeadingComponent;y.heading=s.orientation.yaw,r.childComponents.push(y);const C=new x.ListComponent;n(c.CommandReengagementTiming.Destination).forEach(e=>{C.childComponents.push(new D.CommandComponent(e))});for(const e of Object.keys(t.lastDroneSnapshot.gimbals)){const n=new P.OrientationGimbalCommand;n.channel=parseInt(e),n.orientation.apply(t.lastDroneSnapshot.gimbal(n.channel).orientation),C.childComponents.push(new D.CommandComponent(n))}C.childComponents.length>0&&(y.immediateComponent=C);const v=new x.ListComponent;for(const e of Object.keys(t.lastDroneSnapshot.cameras)){if(t.lastDroneSnapshot.camera(parseInt(e)).capturing){const t=new _.StartCaptureCameraCommand;t.channel=parseInt(e),v.childComponents.push(new D.CommandComponent(t))}}if(v.childComponents.length>0&&(y.achievedComponent=v),d){const e=new L.CourseComponent;e.course=s.velocity.horizontal.direction,e.droneMotionLimits.horizontal=new R.MotionLimitsOptional(new E.Limits(s.velocity.horizontal.magnitude,0)),e.achievementTime=0,r.childComponents.push(e)}return o}get assetManifest(){const e=new B.AssetManifest(this.id);e.descriptors.tags=[`dronelink.mission:${this.id}`,`dronelink.plan:${this.plan.id}`];const t=this.execution.allCameraFiles;return this.componentNodeExecutionStates.forEach(n=>{if(n.node.component.assetSource){const i=n.node.component.assetSource.toAsset(n.node.id);if(!n.state.started)return void e.add(i);const o=n.state.started.value.getTime();let r=n.state.finished?n.state.finished.value.getTime():null;i.cameraFiles=t.filter(e=>!(e.created.value.getTime()<o)&&!(null!=r&&e.created.value.getTime()>r)),e.add(i)}}),e}simulate(e){const t=f.Serialization.clone(this),n=new S.Timeline;let i=!1;const o=new h.Simulation(t.plan.takeoffCoordinate,o=>{if(i&&!o.engaged)return o.stop(),void e(t,n);switch(t.state.status){case c.ComponentExecutionStatus.Pending:break;case c.ComponentExecutionStatus.Executing:const i=n.lastFrame;i&&(e&&!1===e(t,n)&&o.stop(),i.elapsedTime>18e3&&(o.disengage(new v.Message("timeout")),e(t,n)));break;case c.ComponentExecutionStatus.Failed:case c.ComponentExecutionStatus.Succeeded:o.stop(),e(t,n)}});o.missionExecuteIntervalTarget=g.Constants.SimulationUpdateInterval,o.engage(t,n),i=!0,o.rate=null}}t.Mission=j},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(89),o=n(0),r=n(33),a=n(4),s=n(66),u=n(58);t.Execution=class{constructor(){this.type=o.TypeName.Execution,this.componentStates={},this.reengagementCommands=[],this.cameraFiles={}}applyJSON(e){if(!e||e.type!==this.type)return!1;this.componentStates={};for(let t of Object.keys(e.componentStates)){const n=new i.ComponentExecutionState(t);if(!n.applyJSON(e.componentStates[t]))return!1;this.componentStates[t]=n}if(this.reengagementCommands=[],Array.isArray(e.reengagementCommands))for(let t of e.reengagementCommands){const e=a.Serialization.deserialize(t);if(!(e&&e instanceof r.Command))return!1;this.reengagementCommands.push(e)}if(this.cameraFiles={},e.cameraFiles)for(let t of Object.keys(e.cameraFiles)){const n=e.cameraFiles[t];if(!Array.isArray(n))return!1;const i=[];for(let e of n){const t=a.Serialization.deserialize(e);if(!(t&&t instanceof s.CameraFile))return!1;i.push(t)}this.cameraFiles[parseInt(t)]=i}return!0}getComponentStateByID(e){let t=this.componentStates[e];return t||(t=new i.ComponentExecutionState(e),this.componentStates[e]=t),t}getComponentState(e){return this.getComponentStateByID(e.id)}addReengagementCommand(e){if(-1===this.reengagementCommands.indexOf(e))if(e.reengagementReplaceable){for(var t=0;t<this.reengagementCommands.length;t++){const n=this.reengagementCommands[t];if(n.type===e.type&&!(n instanceof u.PayloadCommand&&e instanceof u.PayloadCommand&&n.channel!==e.channel)){this.reengagementCommands.splice(t,1);break}}this.reengagementCommands.push(e)}else this.reengagementCommands.push(e)}addCameraFile(e,t){const n=this.cameraFiles[e]||[];n.push(t),this.cameraFiles[e]=n}get allCameraFiles(){const e=[];for(let t of Object.values(this.cameraFiles))e.push(...t);return e}}},function(e,t,n){(function(){var t,i,o,r,a,s,u,l={}.hasOwnProperty;({isObject:u,isFunction:s,getValue:a}=n(32)),r=n(18),t=n(9),i=n(217),o=n(135),e.exports=function(){class e extends r{constructor(e,n,i){var o,r,a,s;if(super(e),null==n)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(n),this.type=t.Element,this.attribs={},this.schemaTypeInfo=null,null!=i&&this.attribute(i),e.type===t.Document&&(this.isRoot=!0,this.documentObject=e,e.rootObject=this,e.children))for(r=0,a=(s=e.children).length;r<a;r++)if((o=s[r]).type===t.DocType){o.name=this.name;break}}clone(){var e,t,n,i;for(t in(n=Object.create(this)).isRoot&&(n.documentObject=null),n.attribs={},i=this.attribs)l.call(i,t)&&(e=i[t],n.attribs[t]=e.clone());return n.children=[],this.children.forEach(function(e){var t;return(t=e.clone()).parent=n,n.children.push(t)}),n}attribute(e,t){var n,o;if(null!=e&&(e=a(e)),u(e))for(n in e)l.call(e,n)&&(o=e[n],this.attribute(n,o));else s(t)&&(t=t.apply()),this.options.keepNullAttributes&&null==t?this.attribs[e]=new i(this,e,""):null!=t&&(this.attribs[e]=new i(this,e,t));return this}removeAttribute(e){var t,n,i;if(null==e)throw new Error("Missing attribute name. "+this.debugInfo());if(e=a(e),Array.isArray(e))for(n=0,i=e.length;n<i;n++)t=e[n],delete this.attribs[t];else delete this.attribs[e];return this}toString(e){return this.options.writer.element(this,this.options.writer.filterOptions(e))}att(e,t){return this.attribute(e,t)}a(e,t){return this.attribute(e,t)}getAttribute(e){return this.attribs.hasOwnProperty(e)?this.attribs[e].value:null}setAttribute(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNode(e){return this.attribs.hasOwnProperty(e)?this.attribs[e]:null}setAttributeNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeAttributeNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setAttributeNS(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNodeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setAttributeNodeNS(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}hasAttribute(e){return this.attribs.hasOwnProperty(e)}hasAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setIdAttribute(e,t){return this.attribs.hasOwnProperty(e)?this.attribs[e].isId:t}setIdAttributeNS(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}setIdAttributeNode(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByClassName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){var t,n,i;if(!super.isEqualNode(e))return!1;if(e.namespaceURI!==this.namespaceURI)return!1;if(e.prefix!==this.prefix)return!1;if(e.localName!==this.localName)return!1;if(e.attribs.length!==this.attribs.length)return!1;for(t=n=0,i=this.attribs.length-1;0<=i?n<=i:n>=i;t=0<=i?++n:--n)if(!this.attribs[t].isEqualNode(e.attribs[t]))return!1;return!0}}return Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.attributeMap&&this.attributeMap.nodes||(this.attributeMap=new o(this.attribs)),this.attributeMap}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.nodes=e}clone(){return this.nodes=null}getNamedItem(e){return this.nodes[e]}setNamedItem(e){var t;return t=this.nodes[e.nodeName],this.nodes[e.nodeName]=e,t||null}removeNamedItem(e){var t;return t=this.nodes[e],delete this.nodes[e],t||null}item(e){return this.nodes[Object.keys(this.nodes)[e]]||null}getNamedItemNS(e,t){throw new Error("This DOM method is not implemented.")}setNamedItemNS(e){throw new Error("This DOM method is not implemented.")}removeNamedItemNS(e,t){throw new Error("This DOM method is not implemented.")}}return Object.defineProperty(e.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(9),i=n(106),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=t.CData,this.value=this.stringify.cdata(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.cdata(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;t=n(9),i=n(106),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=t.Comment,this.value=this.stringify.comment(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.comment(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,o;({isObject:o}=n(32)),i=n(18),t=n(9),e.exports=class extends i{constructor(e,n,i,r){super(e),o(n)&&({version:n,encoding:i,standalone:r}=n),n||(n="1.0"),this.type=t.Declaration,this.version=this.stringify.xmlVersion(n),null!=i&&(this.encoding=this.stringify.xmlEncoding(i)),null!=r&&(this.standalone=this.stringify.xmlStandalone(r))}toString(e){return this.options.writer.declaration(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,o,r,a,s,u,l;({isObject:l}=n(32)),u=n(18),t=n(9),i=n(140),r=n(141),o=n(142),a=n(143),s=n(135),e.exports=function(){class e extends u{constructor(e,n,i){var o,r,a,s;if(super(e),this.type=t.DocType,e.children)for(r=0,a=(s=e.children).length;r<a;r++)if((o=s[r]).type===t.Element){this.name=o.name;break}this.documentObject=e,l(n)&&({pubID:n,sysID:i}=n),null==i&&([i,n]=[n,i]),null!=n&&(this.pubID=this.stringify.dtdPubID(n)),null!=i&&(this.sysID=this.stringify.dtdSysID(i))}element(e,t){var n;return n=new o(this,e,t),this.children.push(n),this}attList(e,t,n,o,r){var a;return a=new i(this,e,t,n,o,r),this.children.push(a),this}entity(e,t){var n;return n=new r(this,!1,e,t),this.children.push(n),this}pEntity(e,t){var n;return n=new r(this,!0,e,t),this.children.push(n),this}notation(e,t){var n;return n=new a(this,e,t),this.children.push(n),this}toString(e){return this.options.writer.docType(this,this.options.writer.filterOptions(e))}ele(e,t){return this.element(e,t)}att(e,t,n,i,o){return this.attList(e,t,n,i,o)}ent(e,t){return this.entity(e,t)}pent(e,t){return this.pEntity(e,t)}not(e,t){return this.notation(e,t)}up(){return this.root()||this.documentObject}isEqualNode(e){return!!super.isEqualNode(e)&&(e.name===this.name&&(e.publicId===this.publicId&&e.systemId===this.systemId))}}return Object.defineProperty(e.prototype,"entities",{get:function(){var e,n,i,o,r;for(o={},n=0,i=(r=this.children).length;n<i;n++)(e=r[n]).type!==t.EntityDeclaration||e.pe||(o[e.name]=e);return new s(o)}}),Object.defineProperty(e.prototype,"notations",{get:function(){var e,n,i,o,r;for(o={},n=0,i=(r=this.children).length;n<i;n++)(e=r[n]).type===t.NotationDeclaration&&(o[e.name]=e);return new s(o)}}),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(18),t=n(9),e.exports=class extends i{constructor(e,n,i,o,r,a){if(super(e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());if(null==i)throw new Error("Missing DTD attribute name. "+this.debugInfo(n));if(!o)throw new Error("Missing DTD attribute type. "+this.debugInfo(n));if(!r)throw new Error("Missing DTD attribute default. "+this.debugInfo(n));if(0!==r.indexOf("#")&&(r="#"+r),!r.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(n));if(a&&!r.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(n));this.elementName=this.stringify.name(n),this.type=t.AttributeDeclaration,this.attributeName=this.stringify.name(i),this.attributeType=this.stringify.dtdAttType(o),a&&(this.defaultValue=this.stringify.dtdAttDefault(a)),this.defaultValueType=r}toString(e){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,o;({isObject:o}=n(32)),i=n(18),t=n(9),e.exports=function(){class e extends i{constructor(e,n,i,r){if(super(e),null==i)throw new Error("Missing DTD entity name. "+this.debugInfo(i));if(null==r)throw new Error("Missing DTD entity value. "+this.debugInfo(i));if(this.pe=!!n,this.name=this.stringify.name(i),this.type=t.EntityDeclaration,o(r)){if(!r.pubID&&!r.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(i));if(r.pubID&&!r.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(i));if(this.internal=!1,null!=r.pubID&&(this.pubID=this.stringify.dtdPubID(r.pubID)),null!=r.sysID&&(this.sysID=this.stringify.dtdSysID(r.sysID)),null!=r.nData&&(this.nData=this.stringify.dtdNData(r.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(i))}else this.value=this.stringify.dtdEntityValue(r),this.internal=!0}toString(e){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(e))}}return Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return null}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(18),t=n(9),e.exports=class extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());i||(i="(#PCDATA)"),Array.isArray(i)&&(i="("+i.join(",")+")"),this.name=this.stringify.name(n),this.type=t.ElementDeclaration,this.value=this.stringify.dtdElementValue(i)}toString(e){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;i=n(18),t=n(9),e.exports=function(){class e extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing DTD notation name. "+this.debugInfo(n));if(!i.pubID&&!i.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(n));this.name=this.stringify.name(n),this.type=t.NotationDeclaration,null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID))}toString(e){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(e))}}return Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(9),i=n(18),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing raw text. "+this.debugInfo());this.type=t.Raw,this.value=this.stringify.raw(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.raw(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;t=n(9),i=n(106),e.exports=function(){class e extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=t.Text,this.value=this.stringify.text(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.text(this,this.options.writer.filterOptions(e))}splitText(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}replaceWholeText(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}}return Object.defineProperty(e.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"wholeText",{get:function(){var e,t,n;for(n="",t=this.previousSibling;t;)n=t.data+n,t=t.previousSibling;for(n+=this.data,e=this.nextSibling;e;)n+=e.data,e=e.nextSibling;return n}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(9),i=n(106),e.exports=class extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing instruction target. "+this.debugInfo());this.type=t.ProcessingInstruction,this.target=this.stringify.insTarget(n),this.name=this.target,i&&(this.value=this.stringify.insValue(i))}clone(){return Object.create(this)}toString(e){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(e))}isEqualNode(e){return!!super.isEqualNode(e)&&e.target===this.target}}}).call(this)},function(e,t,n){(function(){var t;t=n(220),e.exports=class extends t{constructor(e){super(e)}document(e,t){var n,i,o,r,a;for(t=this.filterOptions(t),r="",i=0,o=(a=e.children).length;i<o;i++)n=a[i],r+=this.writeChildNode(n,t,0);return t.pretty&&r.slice(-t.newline.length)===t.newline&&(r=r.slice(0,-t.newline.length)),r}}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),r=n(10),a=n(4),s=n(1);t.MessageGroup=class{constructor(){this.type=i.TypeName.MessageGroup,this.descriptors=new o.Descriptors,this.messages=[],this.toString=(()=>s.Common.joinNotEmpty([this.descriptors.toString()].concat(this.messages.map(e=>e.toString())),"\n"))}applyJSON(e){if(!e||e.type!==this.type)return!1;if(!this.descriptors.applyJSON(e.descriptors))return!1;if(this.messages=[],Array.isArray(e.messages))for(let t of e.messages){const e=a.Serialization.deserialize(t);if(!(e&&e instanceof r.Message))return!1;this.messages.push(e)}return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),r=n(4),a=n(1),s=n(2),u=n(46),l=n(3),c=n(19);t.Variable=class{constructor(e=null,t=null){this.type=i.TypeName.Variable,this.descriptors=new o.Descriptors,this.valueNumberMeasurementType=null,e?(this.valueArray=Array.isArray(e),this.valueType=this.valueArray&&e.length>0?typeof e[0]:t,this.value=e):(this.value=null,this.valueArray=!1,this.valueType=t||i.VariableValueType.Drone)}applyJSON(e){if(!e||e.type!==this.type)return!1;if(!this.descriptors.applyJSON(e.descriptors))return!1;if(this.valueType=e.valueType,this.valueArray=a.Common.parseBoolean(e.valueArray,!1),e.valueNumberMeasurementType?this.valueNumberMeasurementType=e.valueNumberMeasurementType:this.valueNumberMeasurementType=null,e.value){if(this.valueArray&&!Array.isArray(e.value))return!1;switch(this.valueType){case i.VariableValueType.Boolean:case i.VariableValueType.String:case i.VariableValueType.Number:if(this.value=e.value,this.valueArray&&!Array.isArray(this.value))return!1;break;default:if(this.valueArray){this.value=[];for(let t of e.value){const e=r.Serialization.deserialize(t);if(!e||e.type!==this.valueType)return!1;this.value.push(e)}}else if(this.value=r.Serialization.read(e.value),this.value&&this.value.type!==this.valueType)return!1}}else this.value=null;return!0}get title(){return a.Common.joinNotEmpty([this.descriptors.name,`${s.Format.enum("VariableValueType",this.valueType)}${this.valueArray?"[]":""}`,this.valueNumberMeasurementTypeDisplay])}get subtitle(){return this.valueFormatted}get valueModelToUser(){if(null!==this.value&&this.valueType===i.VariableValueType.Number&&this.valueNumberMeasurementType){const e=c.Convert.converters(this.valueNumberMeasurementType);return Array.isArray(this.value)?this.value.map(t=>parseFloat(e.modelToUser.display(t))):parseFloat(e.modelToUser.display(this.value))}return this.value}set valueUserToModel(e){if(null!==e){if(this.valueType===i.VariableValueType.Number&&this.valueNumberMeasurementType&&(e=c.Convert.converters(this.valueNumberMeasurementType).userToModel.convert(e)),this.valueArray)return null===this.value&&(this.value=[]),void this.value.push(e);this.value=e}else this.value=null}clearValue(e=!1){this.value&&Array.isArray(this.value)?this.clearArrayValue(e):this.value=null}clearArrayValue(e=!1){e?this.value=null:this.value&&Array.isArray(this.value)&&(1===this.value.length?this.value=null:this.value.pop())}get valueFormatted(){let e=this.value;if(null===e)return l.Strings.Variable.nullValue;Array.isArray(e)&&(e=e[0]);let t="";switch(this.valueType){case i.VariableValueType.Boolean:t=e?l.Strings.Common.yes:l.Strings.Common.no;break;case i.VariableValueType.Number:t=this.valueNumberMeasurementType?c.Convert.converters(this.valueNumberMeasurementType).format(e).toString():s.Format.number(e);break;case i.VariableValueType.String:t=e;break;case i.VariableValueType.Drone:e instanceof u.Drone&&(t=a.Common.joinNotEmpty([e.spatial.coordinate.toString(),e.spatial.altitude.toString()]))}return t?(Array.isArray(this.value)&&this.value.length>1&&(t=`${t} + ${s.Format.integer(this.value.length-1)} ${l.Strings.Common.more}`),t):l.Strings.Variable.nullValue}get valueNumberMeasurementTypeDisplay(){return this.valueNumberMeasurementType?c.Convert.converters(this.valueNumberMeasurementType).modelToUser.unit.abbreviation:""}defaultValue(e=null){let t=null;switch(this.valueType){case i.VariableValueType.Boolean:t=!1;break;case i.VariableValueType.Number:t=0;break;case i.VariableValueType.String:t="test";break;case i.VariableValueType.Drone:t=e?r.Serialization.clone(e):new u.Drone}return this.valueArray?[t]:t}}},function(e,t,n){var i,o;
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */void 0===(o="function"==typeof(i=function(){var e,t,n,i,o,r={},a={},s={currentLocale:"en",zeroFormat:null,nullFormat:null,defaultFormat:"0,0",scalePercentBy100:!0},u={currentLocale:s.currentLocale,zeroFormat:s.zeroFormat,nullFormat:s.nullFormat,defaultFormat:s.defaultFormat,scalePercentBy100:s.scalePercentBy100};function l(e,t){this._input=e,this._value=t}return(e=function(n){var i,o,a,s;if(e.isNumeral(n))i=n.value();else if(0===n||void 0===n)i=0;else if(null===n||t.isNaN(n))i=null;else if("string"==typeof n)if(u.zeroFormat&&n===u.zeroFormat)i=0;else if(u.nullFormat&&n===u.nullFormat||!n.replace(/[^0-9]+/g,"").length)i=null;else{for(o in r)if((s="function"==typeof r[o].regexps.unformat?r[o].regexps.unformat():r[o].regexps.unformat)&&n.match(s)){a=r[o].unformat;break}i=(a=a||e._.stringToNumber)(n)}else i=Number(n)||null;return new l(n,i)}).version="2.0.6",e.isNumeral=function(e){return e instanceof l},e._=t={numberToFormat:function(t,n,i){var o,r,s,u,l,c,m,d,h=a[e.options.currentLocale],p=!1,f=!1,g="",y="",C=!1;if(t=t||0,s=Math.abs(t),e._.includes(n,"(")?(p=!0,n=n.replace(/[\(|\)]/g,"")):(e._.includes(n,"+")||e._.includes(n,"-"))&&(c=e._.includes(n,"+")?n.indexOf("+"):t<0?n.indexOf("-"):-1,n=n.replace(/[\+|\-]/g,"")),e._.includes(n,"a")&&(r=!!(r=n.match(/a(k|m|b|t)?/))&&r[1],e._.includes(n," a")&&(g=" "),n=n.replace(new RegExp(g+"a[kmbt]?"),""),s>=1e12&&!r||"t"===r?(g+=h.abbreviations.trillion,t/=1e12):s<1e12&&s>=1e9&&!r||"b"===r?(g+=h.abbreviations.billion,t/=1e9):s<1e9&&s>=1e6&&!r||"m"===r?(g+=h.abbreviations.million,t/=1e6):(s<1e6&&s>=1e3&&!r||"k"===r)&&(g+=h.abbreviations.thousand,t/=1e3)),e._.includes(n,"[.]")&&(f=!0,n=n.replace("[.]",".")),u=t.toString().split(".")[0],l=n.split(".")[1],m=n.indexOf(","),o=(n.split(".")[0].split(",")[0].match(/0/g)||[]).length,l?(e._.includes(l,"[")?(l=(l=l.replace("]","")).split("["),y=e._.toFixed(t,l[0].length+l[1].length,i,l[1].length)):y=e._.toFixed(t,l.length,i),u=y.split(".")[0],y=e._.includes(y,".")?h.delimiters.decimal+y.split(".")[1]:"",f&&0===Number(y.slice(1))&&(y="")):u=e._.toFixed(t,0,i),g&&!r&&Number(u)>=1e3&&g!==h.abbreviations.trillion)switch(u=String(Number(u)/1e3),g){case h.abbreviations.thousand:g=h.abbreviations.million;break;case h.abbreviations.million:g=h.abbreviations.billion;break;case h.abbreviations.billion:g=h.abbreviations.trillion}if(e._.includes(u,"-")&&(u=u.slice(1),C=!0),u.length<o)for(var v=o-u.length;v>0;v--)u="0"+u;return m>-1&&(u=u.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+h.delimiters.thousands)),0===n.indexOf(".")&&(u=""),d=u+y+(g||""),p?d=(p&&C?"(":"")+d+(p&&C?")":""):c>=0?d=0===c?(C?"-":"+")+d:d+(C?"-":"+"):C&&(d="-"+d),d},stringToNumber:function(e){var t,n,i,o=a[u.currentLocale],r=e,s={thousand:3,million:6,billion:9,trillion:12};if(u.zeroFormat&&e===u.zeroFormat)n=0;else if(u.nullFormat&&e===u.nullFormat||!e.replace(/[^0-9]+/g,"").length)n=null;else{for(t in n=1,"."!==o.delimiters.decimal&&(e=e.replace(/\./g,"").replace(o.delimiters.decimal,".")),s)if(i=new RegExp("[^a-zA-Z]"+o.abbreviations[t]+"(?:\\)|(\\"+o.currency.symbol+")?(?:\\))?)?$"),r.match(i)){n*=Math.pow(10,s[t]);break}n*=(e.split("-").length+Math.min(e.split("(").length-1,e.split(")").length-1))%2?1:-1,e=e.replace(/[^0-9\.]+/g,""),n*=Number(e)}return n},isNaN:function(e){return"number"==typeof e&&isNaN(e)},includes:function(e,t){return-1!==e.indexOf(t)},insert:function(e,t,n){return e.slice(0,n)+t+e.slice(n)},reduce:function(e,t){if(null===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof t)throw new TypeError(t+" is not a function");var n,i=Object(e),o=i.length>>>0,r=0;if(3===arguments.length)n=arguments[2];else{for(;r<o&&!(r in i);)r++;if(r>=o)throw new TypeError("Reduce of empty array with no initial value");n=i[r++]}for(;r<o;r++)r in i&&(n=t(n,i[r],r,i));return n},multiplier:function(e){var t=e.toString().split(".");return t.length<2?1:Math.pow(10,t[1].length)},correctionFactor:function(){return Array.prototype.slice.call(arguments).reduce(function(e,n){var i=t.multiplier(n);return e>i?e:i},1)},toFixed:function(e,t,n,i){var o,r,a,s,u=e.toString().split("."),l=t-(i||0);return o=2===u.length?Math.min(Math.max(u[1].length,l),t):l,a=Math.pow(10,o),s=(n(e+"e+"+o)/a).toFixed(o),i>t-o&&(r=new RegExp("\\.?0{1,"+(i-(t-o))+"}$"),s=s.replace(r,"")),s}},e.options=u,e.formats=r,e.locales=a,e.locale=function(e){return e&&(u.currentLocale=e.toLowerCase()),u.currentLocale},e.localeData=function(e){if(!e)return a[u.currentLocale];if(e=e.toLowerCase(),!a[e])throw new Error("Unknown locale : "+e);return a[e]},e.reset=function(){for(var e in s)u[e]=s[e]},e.zeroFormat=function(e){u.zeroFormat="string"==typeof e?e:null},e.nullFormat=function(e){u.nullFormat="string"==typeof e?e:null},e.defaultFormat=function(e){u.defaultFormat="string"==typeof e?e:"0.0"},e.register=function(e,t,n){if(t=t.toLowerCase(),this[e+"s"][t])throw new TypeError(t+" "+e+" already registered.");return this[e+"s"][t]=n,n},e.validate=function(t,n){var i,o,r,a,s,u,l,c;if("string"!=typeof t&&(t+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",t)),(t=t.trim()).match(/^\d+$/))return!0;if(""===t)return!1;try{l=e.localeData(n)}catch(t){l=e.localeData(e.locale())}return r=l.currency.symbol,s=l.abbreviations,i=l.delimiters.decimal,o="."===l.delimiters.thousands?"\\.":l.delimiters.thousands,!(null!==(c=t.match(/^[^\d]+/))&&(t=t.substr(1),c[0]!==r)||null!==(c=t.match(/[^\d]+$/))&&(t=t.slice(0,-1),c[0]!==s.thousand&&c[0]!==s.million&&c[0]!==s.billion&&c[0]!==s.trillion)||(u=new RegExp(o+"{2}"),t.match(/[^\d.,]/g)||(a=t.split(i)).length>2||(a.length<2?!a[0].match(/^\d+.*\d$/)||a[0].match(u):1===a[0].length?!a[0].match(/^\d+$/)||a[0].match(u)||!a[1].match(/^\d+$/):!a[0].match(/^\d+.*\d$/)||a[0].match(u)||!a[1].match(/^\d+$/))))},e.fn=l.prototype={clone:function(){return e(this)},format:function(t,n){var i,o,a,s=this._value,l=t||u.defaultFormat;if(n=n||Math.round,0===s&&null!==u.zeroFormat)o=u.zeroFormat;else if(null===s&&null!==u.nullFormat)o=u.nullFormat;else{for(i in r)if(l.match(r[i].regexps.format)){a=r[i].format;break}o=(a=a||e._.numberToFormat)(s,l,n)}return o},value:function(){return this._value},input:function(){return this._input},set:function(e){return this._value=Number(e),this},add:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([this._value,e],function(e,t,i,o){return e+Math.round(n*t)},0)/n,this},subtract:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([e],function(e,t,i,o){return e-Math.round(n*t)},Math.round(this._value*n))/n,this},multiply:function(e){return this._value=t.reduce([this._value,e],function(e,n,i,o){var r=t.correctionFactor(e,n);return Math.round(e*r)*Math.round(n*r)/Math.round(r*r)},1),this},divide:function(e){return this._value=t.reduce([this._value,e],function(e,n,i,o){var r=t.correctionFactor(e,n);return Math.round(e*r)/Math.round(n*r)}),this},difference:function(t){return Math.abs(e(this._value).subtract(t).value())}},e.register("locale","en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$"}}),e.register("format","bps",{regexps:{format:/(BPS)/,unformat:/(BPS)/},format:function(t,n,i){var o,r=e._.includes(n," BPS")?" ":"";return t*=1e4,n=n.replace(/\s?BPS/,""),o=e._.numberToFormat(t,n,i),e._.includes(o,")")?((o=o.split("")).splice(-1,0,r+"BPS"),o=o.join("")):o=o+r+"BPS",o},unformat:function(t){return+(1e-4*e._.stringToNumber(t)).toFixed(15)}}),i={base:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},o="("+(o=(n={base:1e3,suffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}).suffixes.concat(i.suffixes.filter(function(e){return n.suffixes.indexOf(e)<0})).join("|")).replace("B","B(?!PS)")+")",e.register("format","bytes",{regexps:{format:/([0\s]i?b)/,unformat:new RegExp(o)},format:function(t,o,r){var a,s,u,l=e._.includes(o,"ib")?i:n,c=e._.includes(o," b")||e._.includes(o," ib")?" ":"";for(o=o.replace(/\s?i?b/,""),a=0;a<=l.suffixes.length;a++)if(s=Math.pow(l.base,a),u=Math.pow(l.base,a+1),null===t||0===t||t>=s&&t<u){c+=l.suffixes[a],s>0&&(t/=s);break}return e._.numberToFormat(t,o,r)+c},unformat:function(t){var o,r,a=e._.stringToNumber(t);if(a){for(o=n.suffixes.length-1;o>=0;o--){if(e._.includes(t,n.suffixes[o])){r=Math.pow(n.base,o);break}if(e._.includes(t,i.suffixes[o])){r=Math.pow(i.base,o);break}}a*=r||1}return a}}),e.register("format","currency",{regexps:{format:/(\$)/},format:function(t,n,i){var o,r,a=e.locales[e.options.currentLocale],s={before:n.match(/^([\+|\-|\(|\s|\$]*)/)[0],after:n.match(/([\+|\-|\)|\s|\$]*)$/)[0]};for(n=n.replace(/\s?\$\s?/,""),o=e._.numberToFormat(t,n,i),t>=0?(s.before=s.before.replace(/[\-\(]/,""),s.after=s.after.replace(/[\-\)]/,"")):t<0&&!e._.includes(s.before,"-")&&!e._.includes(s.before,"(")&&(s.before="-"+s.before),r=0;r<s.before.length;r++)switch(s.before[r]){case"$":o=e._.insert(o,a.currency.symbol,r);break;case" ":o=e._.insert(o," ",r+a.currency.symbol.length-1)}for(r=s.after.length-1;r>=0;r--)switch(s.after[r]){case"$":o=r===s.after.length-1?o+a.currency.symbol:e._.insert(o,a.currency.symbol,-(s.after.length-(1+r)));break;case" ":o=r===s.after.length-1?o+" ":e._.insert(o," ",-(s.after.length-(1+r)+a.currency.symbol.length-1))}return o}}),e.register("format","exponential",{regexps:{format:/(e\+|e-)/,unformat:/(e\+|e-)/},format:function(t,n,i){var o=("number"!=typeof t||e._.isNaN(t)?"0e+0":t.toExponential()).split("e");return n=n.replace(/e[\+|\-]{1}0/,""),e._.numberToFormat(Number(o[0]),n,i)+"e"+o[1]},unformat:function(t){var n=e._.includes(t,"e+")?t.split("e+"):t.split("e-"),i=Number(n[0]),o=Number(n[1]);return o=e._.includes(t,"e-")?o*=-1:o,e._.reduce([i,Math.pow(10,o)],function(t,n,i,o){var r=e._.correctionFactor(t,n);return t*r*(n*r)/(r*r)},1)}}),e.register("format","ordinal",{regexps:{format:/(o)/},format:function(t,n,i){var o=e.locales[e.options.currentLocale],r=e._.includes(n," o")?" ":"";return n=n.replace(/\s?o/,""),r+=o.ordinal(t),e._.numberToFormat(t,n,i)+r}}),e.register("format","percentage",{regexps:{format:/(%)/,unformat:/(%)/},format:function(t,n,i){var o,r=e._.includes(n," %")?" ":"";return e.options.scalePercentBy100&&(t*=100),n=n.replace(/\s?\%/,""),o=e._.numberToFormat(t,n,i),e._.includes(o,")")?((o=o.split("")).splice(-1,0,r+"%"),o=o.join("")):o=o+r+"%",o},unformat:function(t){var n=e._.stringToNumber(t);return e.options.scalePercentBy100?.01*n:n}}),e.register("format","time",{regexps:{format:/(:)/,unformat:/(:)/},format:function(e,t,n){var i=Math.floor(e/60/60),o=Math.floor((e-60*i*60)/60),r=Math.round(e-60*i*60-60*o);return i+":"+(o<10?"0"+o:o)+":"+(r<10?"0"+r:r)},unformat:function(e){var t=e.split(":"),n=0;return 3===t.length?(n+=60*Number(t[0])*60,n+=60*Number(t[1]),n+=Number(t[2])):2===t.length&&(n+=60*Number(t[0]),n+=Number(t[1])),Number(n)}}),e})?i.call(t,n,t,e):i)||(e.exports=o)},function(e,t,n){!function(){"use strict";var t=Math.abs,i=Math.min,o=Math.max,r=Math.cos,a=Math.sin,s=Math.acos,u=Math.sqrt,l=Math.PI,c={x:0,y:0,z:0},m=n(152),d=n(226),h=function(e){var n=e&&e.forEach?e:[].slice.call(arguments),i=!1;if("object"==typeof n[0]){i=n.length;var o=[];n.forEach(function(e){["x","y","z"].forEach(function(t){void 0!==e[t]&&o.push(e[t])})}),n=o}var r=!1,a=n.length;if(i){if(i>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");r=!0}}else if(6!==a&&8!==a&&9!==a&&12!==a&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");var s=!r&&(9===a||12===a)||e&&e[0]&&void 0!==e[0].z;this._3d=s;for(var u=[],l=0,c=s?3:2;l<a;l+=c){var d={x:n[l],y:n[l+1]};s&&(d.z=n[l+2]),u.push(d)}this.order=u.length-1,this.points=u;var h=["x","y"];s&&h.push("z"),this.dims=h,this.dimlen=h.length,function(e){for(var n=e.order,i=e.points,o=m.align(i,{p1:i[0],p2:i[n]}),r=0;r<o.length;r++)if(t(o[r].y)>1e-4)return void(e._linear=!1);e._linear=!0}(this),this._t1=0,this._t2=1,this.update()},p=n(227);function f(e,t,n,i,o){void 0===o&&(o=.5);var r=m.projectionratio(o,e),a=1-r,s={x:r*t.x+a*i.x,y:r*t.y+a*i.y},u=m.abcratio(o,e);return{A:{x:n.x+(n.x-s.x)/u,y:n.y+(n.y-s.y)/u},B:n,C:s}}h.SVGtoBeziers=function(e){return p(h,e)},h.quadraticFromPoints=function(e,t,n,i){if(void 0===i&&(i=.5),0===i)return new h(t,t,n);if(1===i)return new h(e,t,t);var o=f(2,e,t,n,i);return new h(e,o.A,n)},h.cubicFromPoints=function(e,t,n,i,o){void 0===i&&(i=.5);var r=f(3,e,t,n,i);void 0===o&&(o=m.dist(t,r.C));var a=o*(1-i)/i,s=m.dist(e,n),u=(n.x-e.x)/s,l=(n.y-e.y)/s,c=o*u,d=o*l,p=a*u,g=a*l,y=t.x-c,C=t.y-d,v=t.x+p,S=t.y+g,b=r.A,w=b.x+(y-b.x)/(1-i),x=b.y+(C-b.y)/(1-i),M=b.x+(v-b.x)/i,O=b.y+(S-b.y)/i,D={x:e.x+(w-e.x)/i,y:e.y+(x-e.y)/i},P={x:n.x+(M-n.x)/(1-i),y:n.y+(O-n.y)/(1-i)};return new h(e,D,P,n)};var g=function(){return m};h.getUtils=g,h.PolyBezier=d,h.prototype={getUtils:g,valueOf:function(){return this.toString()},toString:function(){return m.pointsToString(this.points)},toSVG:function(e){if(this._3d)return!1;for(var t=this.points,n=["M",t[0].x,t[0].y,2===this.order?"Q":"C"],i=1,o=t.length;i<o;i++)n.push(t[i].x),n.push(t[i].y);return n.join(" ")},setRatios:function(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]},update:function(){this._lut=[],this.dpoints=m.derive(this.points,this._3d),this.computedirection()},computedirection:function(){var e=this.points,t=m.angle(e[0],e[this.order],e[1]);this.clockwise=t>0},length:function(){return m.length(this.derivative.bind(this))},_lut:[],getLUT:function(e){if(e=e||100,this._lut.length===e)return this._lut;this._lut=[],e--;for(var t=0;t<=e;t++)this._lut.push(this.compute(t/e));return this._lut},on:function(e,t){t=t||5;for(var n,i=this.getLUT(),o=[],r=0,a=0;a<i.length;a++)n=i[a],m.dist(n,e)<t&&(o.push(n),r+=a/i.length);return!!o.length&&r/o.length},project:function(e){var t=this.getLUT(),n=t.length-1,i=m.closest(t,e),o=i.mdist,r=i.mpos;if(0===r||r===n){var a=r/n,s=this.compute(a);return s.t=a,s.d=o,s}var u,l,c,d=(r+1)/n,h=.1/n;for(o+=1,u=a=(r-1)/n;a<d+h;a+=h)l=this.compute(a),(c=m.dist(e,l))<o&&(o=c,u=a);return(l=this.compute(u)).t=u,l.d=o,l},get:function(e){return this.compute(e)},point:function(e){return this.points[e]},compute:function(e){return this.ratios?m.computeWithRatios(e,this.points,this.ratios,this._3d):m.compute(e,this.points,this._3d,this.ratios)},raise:function(){for(var e,t,n=this.points,i=[n[0]],o=n.length,r=1;r<o;r++)e=n[r],t=n[r-1],i[r]={x:(o-r)/o*e.x+r/o*t.x,y:(o-r)/o*e.y+r/o*t.y};return i[o]=n[o-1],new h(i)},derivative:function(e){var t,n,i=1-e,o=0,r=this.dpoints[0];2===this.order&&(r=[r[0],r[1],c],t=i,n=e),3===this.order&&(t=i*i,n=i*e*2,o=e*e);var a={x:t*r[0].x+n*r[1].x+o*r[2].x,y:t*r[0].y+n*r[1].y+o*r[2].y};return this._3d&&(a.z=t*r[0].z+n*r[1].z+o*r[2].z),a},curvature:function(e){return m.curvature(e,this.points,this._3d)},inflections:function(){return m.inflections(this.points)},normal:function(e){return this._3d?this.__normal3(e):this.__normal2(e)},__normal2:function(e){var t=this.derivative(e),n=u(t.x*t.x+t.y*t.y);return{x:-t.y/n,y:t.x/n}},__normal3:function(e){var t=this.derivative(e),n=this.derivative(e+.01),i=u(t.x*t.x+t.y*t.y+t.z*t.z),o=u(n.x*n.x+n.y*n.y+n.z*n.z);t.x/=i,t.y/=i,t.z/=i,n.x/=o,n.y/=o,n.z/=o;var r={x:n.y*t.z-n.z*t.y,y:n.z*t.x-n.x*t.z,z:n.x*t.y-n.y*t.x},a=u(r.x*r.x+r.y*r.y+r.z*r.z);r.x/=a,r.y/=a,r.z/=a;var s=[r.x*r.x,r.x*r.y-r.z,r.x*r.z+r.y,r.x*r.y+r.z,r.y*r.y,r.y*r.z-r.x,r.x*r.z-r.y,r.y*r.z+r.x,r.z*r.z];return{x:s[0]*t.x+s[1]*t.y+s[2]*t.z,y:s[3]*t.x+s[4]*t.y+s[5]*t.z,z:s[6]*t.x+s[7]*t.y+s[8]*t.z}},hull:function(e){var t,n=this.points,i=[],o=[],r=0,a=0,s=0;for(o[r++]=n[0],o[r++]=n[1],o[r++]=n[2],3===this.order&&(o[r++]=n[3]);n.length>1;){for(i=[],a=0,s=n.length-1;a<s;a++)t=m.lerp(e,n[a],n[a+1]),o[r++]=t,i.push(t);n=i}return o},split:function(e,t){if(0===e&&t)return this.split(t).left;if(1===t)return this.split(e).right;var n=this.hull(e),i={left:2===this.order?new h([n[0],n[3],n[5]]):new h([n[0],n[4],n[7],n[9]]),right:2===this.order?new h([n[5],n[4],n[2]]):new h([n[9],n[8],n[6],n[3]]),span:n};return i.left._t1=m.map(0,0,1,this._t1,this._t2),i.left._t2=m.map(e,0,1,this._t1,this._t2),i.right._t1=m.map(e,0,1,this._t1,this._t2),i.right._t2=m.map(1,0,1,this._t1,this._t2),t?(t=m.map(t,e,1,0,1),i.right.split(t).left):i},extrema:function(){var e,t,n=this.dims,i={},o=[];return n.forEach(function(n){t=function(e){return e[n]},e=this.dpoints[0].map(t),i[n]=m.droots(e),3===this.order&&(e=this.dpoints[1].map(t),i[n]=i[n].concat(m.droots(e))),i[n]=i[n].filter(function(e){return e>=0&&e<=1}),o=o.concat(i[n].sort(m.numberSort))}.bind(this)),o=o.sort(m.numberSort).filter(function(e,t){return o.indexOf(e)===t}),i.values=o,i},bbox:function(){var e=this.extrema(),t={};return this.dims.forEach(function(n){t[n]=m.getminmax(this,n,e[n])}.bind(this)),t},overlaps:function(e){var t=this.bbox(),n=e.bbox();return m.bboxoverlap(t,n)},offset:function(e,t){if(void 0!==t){var n=this.get(e),i=this.normal(e),o={c:n,n:i,x:n.x+i.x*t,y:n.y+i.y*t};return this._3d&&(o.z=n.z+i.z*t),o}if(this._linear){var r=this.normal(0),a=this.points.map(function(t){var n={x:t.x+e*r.x,y:t.y+e*r.y};return t.z&&i.z&&(n.z=t.z+e*r.z),n});return[new h(a)]}return this.reduce().map(function(t){return t.scale(e)})},simple:function(){if(3===this.order){var e=m.angle(this.points[0],this.points[3],this.points[1]),n=m.angle(this.points[0],this.points[3],this.points[2]);if(e>0&&n<0||e<0&&n>0)return!1}var i=this.normal(0),o=this.normal(1),r=i.x*o.x+i.y*o.y;return this._3d&&(r+=i.z*o.z),t(s(r))<l/3},reduce:function(){var e,n,i=0,o=0,r=[],a=[],s=this.extrema().values;for(-1===s.indexOf(0)&&(s=[0].concat(s)),-1===s.indexOf(1)&&s.push(1),i=s[0],e=1;e<s.length;e++)o=s[e],(n=this.split(i,o))._t1=i,n._t2=o,r.push(n),i=o;return r.forEach(function(e){for(i=0,o=0;o<=1;)for(o=i+.01;o<=1.01;o+=.01)if(!(n=e.split(i,o)).simple()){if(t(i-(o-=.01))<.01)return[];(n=e.split(i,o))._t1=m.map(i,0,1,e._t1,e._t2),n._t2=m.map(o,0,1,e._t1,e._t2),a.push(n),i=o;break}i<1&&((n=e.split(i,1))._t1=m.map(i,0,1,e._t1,e._t2),n._t2=e._t2,a.push(n))}),a},scale:function(e){var t=this.order,n=!1;if("function"==typeof e&&(n=e),n&&2===t)return this.raise().scale(n);var i=this.clockwise,o=n?n(0):e,r=n?n(1):e,a=[this.offset(0,10),this.offset(1,10)],s=m.lli4(a[0],a[0].c,a[1],a[1].c);if(!s)throw new Error("cannot scale this curve. Try reducing it first.");var l=this.points,c=[];return[0,1].forEach(function(e){var n=c[e*t]=m.copy(l[e*t]);n.x+=(e?r:o)*a[e].n.x,n.y+=(e?r:o)*a[e].n.y}.bind(this)),n?([0,1].forEach(function(o){if(2!==this.order||!o){var r=l[o+1],a={x:r.x-s.x,y:r.y-s.y},m=n?n((o+1)/t):e;n&&!i&&(m=-m);var d=u(a.x*a.x+a.y*a.y);a.x/=d,a.y/=d,c[o+1]={x:r.x+m*a.x,y:r.y+m*a.y}}}.bind(this)),new h(c)):([0,1].forEach(function(e){if(2!==this.order||!e){var n=c[e*t],i=this.derivative(e),o={x:n.x+i.x,y:n.y+i.y};c[e+1]=m.lli4(n,o,s,l[e+1])}}.bind(this)),new h(c))},outline:function(e,t,n,i){t=void 0===t?e:t;var o,r=this.reduce(),a=r.length,s=[],u=[],l=0,c=this.length(),h=void 0!==n&&void 0!==i;function p(e,t,n,i,o){return function(r){var a=i/n,s=(i+o)/n,u=t-e;return m.map(r,0,1,e+a*u,e+s*u)}}r.forEach(function(o){w=o.length(),h?(s.push(o.scale(p(e,n,c,l,w))),u.push(o.scale(p(-t,-i,c,l,w)))):(s.push(o.scale(e)),u.push(o.scale(-t))),l+=w}),u=u.map(function(e){return(o=e.points)[3]?e.points=[o[3],o[2],o[1],o[0]]:e.points=[o[2],o[1],o[0]],e}).reverse();var f=s[0].points[0],g=s[a-1].points[s[a-1].points.length-1],y=u[a-1].points[u[a-1].points.length-1],C=u[0].points[0],v=m.makeline(y,f),S=m.makeline(g,C),b=[v].concat(s).concat([S]).concat(u),w=b.length;return new d(b)},outlineshapes:function(e,t,n){t=t||e;for(var i=this.outline(e,t).curves,o=[],r=1,a=i.length;r<a/2;r++){var s=m.makeshape(i[r],i[a-r],n);s.startcap.virtual=r>1,s.endcap.virtual=r<a/2-1,o.push(s)}return o},intersects:function(e,t){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof h&&(e=e.reduce()),this.curveintersects(this.reduce(),e,t)):this.selfintersects(t)},lineIntersects:function(e){var t=i(e.p1.x,e.p2.x),n=i(e.p1.y,e.p2.y),r=o(e.p1.x,e.p2.x),a=o(e.p1.y,e.p2.y),s=this;return m.roots(this.points,e).filter(function(e){var i=s.get(e);return m.between(i.x,t,r)&&m.between(i.y,n,a)})},selfintersects:function(e){var t,n,i,o,r=this.reduce(),a=r.length-2,s=[];for(t=0;t<a;t++)i=r.slice(t,t+1),o=r.slice(t+2),n=this.curveintersects(i,o,e),s=s.concat(n);return s},curveintersects:function(e,t,n){var i=[];e.forEach(function(e){t.forEach(function(t){e.overlaps(t)&&i.push({left:e,right:t})})});var o=[];return i.forEach(function(e){var t=m.pairiteration(e.left,e.right,n);t.length>0&&(o=o.concat(t))}),o},arcs:function(e){e=e||.5;return this._iterate(e,[])},_error:function(e,n,i,o){var r=(o-i)/4,a=this.get(i+r),s=this.get(o-r),u=m.dist(e,n),l=m.dist(e,a),c=m.dist(e,s);return t(l-u)+t(c-u)},_iterate:function(e,t){var n,i=0,o=1;do{n=0,o=1;var s,u,l,c,d,h=this.get(i),p=!1,f=!1,g=o,y=1;do{if(f=p,c=l,g=(i+o)/2,0,s=this.get(g),u=this.get(o),(l=m.getccenter(h,s,u)).interval={start:i,end:o},p=this._error(l,h,i,o)<=e,(d=f&&!p)||(y=o),p){if(o>=1){if(l.interval.end=y=1,c=l,o>1){var C={x:l.x+l.r*r(l.e),y:l.y+l.r*a(l.e)};l.e+=m.angle({x:l.x,y:l.y},C,this.get(1))}break}o+=(o-i)/2}else o=g}while(!d&&n++<100);if(n>=100)break;c=c||l,t.push(c),i=y}while(o<1);return t}},e.exports=h}()},function(e,t,n){!function(){"use strict";var t=Math.abs,i=Math.cos,o=Math.sin,r=Math.acos,a=Math.atan2,s=Math.sqrt,u=Math.pow,l=function(e){return e<0?-u(-e,1/3):u(e,1/3)},c=Math.PI,m=2*c,d=c/2,h=Number.MAX_SAFE_INTEGER||9007199254740991,p=Number.MIN_SAFE_INTEGER||-9007199254740991,f={x:0,y:0,z:0},g={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(e,t){var n=t(e),i=n.x*n.x+n.y*n.y;return void 0!==n.z&&(i+=n.z*n.z),s(i)},compute:function(e,t,n){if(0===e)return t[0];var i=t.length-1;if(1===e)return t[i];var o=t,r=1-e;if(0===i)return t[0];if(1===i)return d={x:r*o[0].x+e*o[1].x,y:r*o[0].y+e*o[1].y},n&&(d.z=r*o[0].z+e*o[1].z),d;if(i<4){var a,s,u,l=r*r,c=e*e,m=0;2===i?(o=[o[0],o[1],o[2],f],a=l,s=r*e*2,u=c):3===i&&(a=l*r,s=l*e*3,u=r*c*3,m=e*c);var d={x:a*o[0].x+s*o[1].x+u*o[2].x+m*o[3].x,y:a*o[0].y+s*o[1].y+u*o[2].y+m*o[3].y};return n&&(d.z=a*o[0].z+s*o[1].z+u*o[2].z+m*o[3].z),d}for(var h=JSON.parse(JSON.stringify(t));h.length>1;){for(var p=0;p<h.length-1;p++)h[p]={x:h[p].x+(h[p+1].x-h[p].x)*e,y:h[p].y+(h[p+1].y-h[p].y)*e},void 0!==h[p].z&&(h[p]=h[p].z+(h[p+1].z-h[p].z)*e);h.splice(h.length-1,1)}return h[0]},computeWithRatios:function(e,t,n,i){var o,r=1-e,a=n,s=t,u=a[0],l=a[1],c=a[2],m=a[3];return u*=r,l*=e,2===s.length?(o=u+l,{x:(u*s[0].x+l*s[1].x)/o,y:(u*s[0].y+l*s[1].y)/o,z:!!i&&(u*s[0].z+l*s[1].z)/o}):(u*=r,l*=2*r,c*=e*e,3===s.length?(o=u+l+c,{x:(u*s[0].x+l*s[1].x+c*s[2].x)/o,y:(u*s[0].y+l*s[1].y+c*s[2].y)/o,z:!!i&&(u*s[0].z+l*s[1].z+c*s[2].z)/o}):(u*=r,l*=1.5*r,c*=3*r,m*=e*e*e,4===s.length?(o=u+l+c+m,{x:(u*s[0].x+l*s[1].x+c*s[2].x+m*s[3].x)/o,y:(u*s[0].y+l*s[1].y+c*s[2].y+m*s[3].y)/o,z:!!i&&(u*s[0].z+l*s[1].z+c*s[2].z+m*s[3].z)/o}):void 0))},derive:function(e,t){for(var n=[],i=e,o=i.length,r=o-1;o>1;o--,r--){for(var a,s=[],u=0;u<r;u++)a={x:r*(i[u+1].x-i[u].x),y:r*(i[u+1].y-i[u].y)},t&&(a.z=r*(i[u+1].z-i[u].z)),s.push(a);n.push(s),i=s}return n},between:function(e,t,n){return t<=e&&e<=n||g.approximately(e,t)||g.approximately(e,n)},approximately:function(e,n,i){return t(e-n)<=(i||1e-6)},length:function(e){var t,n,i=0,o=g.Tvalues.length;for(t=0;t<o;t++)n=.5*g.Tvalues[t]+.5,i+=g.Cvalues[t]*g.arcfn(n,e);return.5*i},map:function(e,t,n,i,o){return i+(o-i)*((e-t)/(n-t))},lerp:function(e,t,n){var i={x:t.x+e*(n.x-t.x),y:t.y+e*(n.y-t.y)};return t.z&&n.z&&(i.z=t.z+e*(n.z-t.z)),i},pointToString:function(e){var t=e.x+"/"+e.y;return void 0!==e.z&&(t+="/"+e.z),t},pointsToString:function(e){return"["+e.map(g.pointToString).join(", ")+"]"},copy:function(e){return JSON.parse(JSON.stringify(e))},angle:function(e,t,n){var i=t.x-e.x,o=t.y-e.y,r=n.x-e.x,s=n.y-e.y;return a(i*s-o*r,i*r+o*s)},round:function(e,t){var n=""+e,i=n.indexOf(".");return parseFloat(n.substring(0,i+1+t))},dist:function(e,t){var n=e.x-t.x,i=e.y-t.y;return s(n*n+i*i)},closest:function(e,t){var n,i,o=u(2,63);return e.forEach(function(e,r){(i=g.dist(t,e))<o&&(o=i,n=r)}),{mdist:o,mpos:n}},abcratio:function(e,n){if(2!==n&&3!==n)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;var i=u(e,n)+u(1-e,n);return t((i-1)/i)},projectionratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;var n=u(1-e,t);return n/(u(e,t)+n)},lli8:function(e,t,n,i,o,r,a,s){var u=(e-n)*(r-s)-(t-i)*(o-a);return 0!=u&&{x:((e*i-t*n)*(o-a)-(e-n)*(o*s-r*a))/u,y:((e*i-t*n)*(r-s)-(t-i)*(o*s-r*a))/u}},lli4:function(e,t,n,i){var o=e.x,r=e.y,a=t.x,s=t.y,u=n.x,l=n.y,c=i.x,m=i.y;return g.lli8(o,r,a,s,u,l,c,m)},lli:function(e,t){return g.lli4(e,e.c,t,t.c)},makeline:function(e,t){var i=n(151),o=e.x,r=e.y,a=t.x,s=t.y,u=(a-o)/3,l=(s-r)/3;return new i(o,r,o+u,r+l,o+2*u,r+2*l,a,s)},findbbox:function(e){var t=h,n=h,i=p,o=p;return e.forEach(function(e){var r=e.bbox();t>r.x.min&&(t=r.x.min),n>r.y.min&&(n=r.y.min),i<r.x.max&&(i=r.x.max),o<r.y.max&&(o=r.y.max)}),{x:{min:t,mid:(t+i)/2,max:i,size:i-t},y:{min:n,mid:(n+o)/2,max:o,size:o-n}}},shapeintersections:function(e,t,n,i,o){if(!g.bboxoverlap(t,i))return[];var r=[],a=[e.startcap,e.forward,e.back,e.endcap],s=[n.startcap,n.forward,n.back,n.endcap];return a.forEach(function(t){t.virtual||s.forEach(function(i){if(!i.virtual){var a=t.intersects(i,o);a.length>0&&(a.c1=t,a.c2=i,a.s1=e,a.s2=n,r.push(a))}})}),r},makeshape:function(e,t,n){var i=t.points.length,o=e.points.length,r=g.makeline(t.points[i-1],e.points[0]),a=g.makeline(e.points[o-1],t.points[0]),s={startcap:r,forward:e,back:t,endcap:a,bbox:g.findbbox([r,e,t,a])},u=g;return s.intersections=function(e){return u.shapeintersections(s,s.bbox,e,e.bbox,n)},s},getminmax:function(e,t,n){if(!n)return{min:0,max:0};var i,o,r=h,a=p;-1===n.indexOf(0)&&(n=[0].concat(n)),-1===n.indexOf(1)&&n.push(1);for(var s=0,u=n.length;s<u;s++)i=n[s],(o=e.get(i))[t]<r&&(r=o[t]),o[t]>a&&(a=o[t]);return{min:r,mid:(r+a)/2,max:a,size:a-r}},align:function(e,t){var n=t.p1.x,r=t.p1.y,s=-a(t.p2.y-r,t.p2.x-n);return e.map(function(e){return{x:(e.x-n)*i(s)-(e.y-r)*o(s),y:(e.x-n)*o(s)+(e.y-r)*i(s)}})},roots:function(e,t){t=t||{p1:{x:0,y:0},p2:{x:1,y:0}};var n=e.length-1,o=g.align(e,t),a=function(e){return 0<=e&&e<=1};if(2===n){if(0!==(f=(y=o[0].y)-2*(C=o[1].y)+(v=o[2].y))){var u=-s(C*C-y*v),c=-y+C;return[-(u+c)/f,-(-u+c)/f].filter(a)}return C!==v&&0===f?[(2*C-v)/(2*C-2*v)].filter(a):[]}var d=o[0].y,h=o[1].y,p=o[2].y,f=3*h-d-3*p+o[3].y,y=3*d-6*h+3*p,C=-3*d+3*h,v=d;if(g.approximately(f,0)){if(g.approximately(y,0))return g.approximately(C,0)?[]:[-v/C].filter(a);var S=2*y;return[((b=s(C*C-4*y*v))-C)/S,(-C-b)/S].filter(a)}var b,w,x=(o=(3*(C/=f)-(y/=f)*y)/3)/3,M=(b=(2*y*y*y-9*y*C+27*(v/=f))/27)/2,O=M*M+x*x*x;if(O<0){var D=-o/3,P=s(D*D*D),T=-b/(2*P),F=r(T<-1?-1:T>1?1:T),E=2*l(P);return[E*i(F/3)-y/3,E*i((F+m)/3)-y/3,E*i((F+2*m)/3)-y/3].filter(a)}if(0===O)return[2*(w=M<0?l(-M):-l(M))-y/3,-w-y/3].filter(a);var _=s(O);return[(w=l(-M+_))-l(M+_)-y/3].filter(a)},droots:function(e){if(3===e.length){var t=e[0],n=e[1],i=e[2],o=t-2*n+i;if(0!==o){var r=-s(n*n-t*i),a=-t+n;return[-(r+a)/o,-(-r+a)/o]}return n!==i&&0===o?[(2*n-i)/(2*(n-i))]:[]}if(2===e.length)return(t=e[0])!==(n=e[1])?[t/(t-n)]:[]},curvature:function(e,n,i,o){var r,a,l,c,m,d,h=g.derive(n),p=h[0],f=h[1],y=g.compute(e,p),C=g.compute(e,f),v=y.x*y.x+y.y*y.y;if(i?(r=s(u(y.y*C.z-C.y*y.z,2)+u(y.z*C.x-C.z*y.x,2)+u(y.x*C.y-C.x*y.y,2)),a=u(v+y.z*y.z,2/3)):(r=y.x*C.y-y.y*C.x,a=u(v,2/3)),0===r||0===a)return{k:0,r:0};if(m=r/a,d=a/r,!o){var S=g.curvature(e-.001,n,i,!0).k,b=g.curvature(e+.001,n,i,!0).k;c=(b-m+(m-S))/2,l=(t(b-m)+t(m-S))/2}return{k:m,r:d,dk:c,adk:l}},inflections:function(e){if(e.length<4)return[];var t=g.align(e,{p1:e[0],p2:e.slice(-1)[0]}),n=t[2].x*t[1].y,i=t[3].x*t[1].y,o=t[1].x*t[2].y,r=18*(-3*n+2*i+3*o-(m=t[3].x*t[2].y)),a=18*(3*n-i-3*o),s=18*(o-n);if(g.approximately(r,0)){if(!g.approximately(a,0)){var u=-s/a;if(0<=u&&u<=1)return[u]}return[]}var l=a*a-4*r*s,c=Math.sqrt(l),m=2*r;return g.approximately(m,0)?[]:[(c-a)/m,-(a+c)/m].filter(function(e){return 0<=e&&e<=1})},bboxoverlap:function(e,n){var i,o,r,a,s,u=["x","y"],l=u.length;for(i=0;i<l;i++)if(r=e[o=u[i]].mid,a=n[o].mid,s=(e[o].size+n[o].size)/2,t(r-a)>=s)return!1;return!0},expandbox:function(e,t){t.x.min<e.x.min&&(e.x.min=t.x.min),t.y.min<e.y.min&&(e.y.min=t.y.min),t.z&&t.z.min<e.z.min&&(e.z.min=t.z.min),t.x.max>e.x.max&&(e.x.max=t.x.max),t.y.max>e.y.max&&(e.y.max=t.y.max),t.z&&t.z.max>e.z.max&&(e.z.max=t.z.max),e.x.mid=(e.x.min+e.x.max)/2,e.y.mid=(e.y.min+e.y.max)/2,e.z&&(e.z.mid=(e.z.min+e.z.max)/2),e.x.size=e.x.max-e.x.min,e.y.size=e.y.max-e.y.min,e.z&&(e.z.size=e.z.max-e.z.min)},pairiteration:function(e,t,n){var i=e.bbox(),o=t.bbox(),r=1e5,a=n||.5;if(i.x.size+i.y.size<a&&o.x.size+o.y.size<a)return[(r*(e._t1+e._t2)/2|0)/r+"/"+(r*(t._t1+t._t2)/2|0)/r];var s=e.split(.5),u=t.split(.5),l=[{left:s.left,right:u.left},{left:s.left,right:u.right},{left:s.right,right:u.right},{left:s.right,right:u.left}];l=l.filter(function(e){return g.bboxoverlap(e.left.bbox(),e.right.bbox())});var c=[];return 0===l.length?c:(l.forEach(function(e){c=c.concat(g.pairiteration(e.left,e.right,a))}),c=c.filter(function(e,t){return c.indexOf(e)===t}))},getccenter:function(e,t,n){var r,s=t.x-e.x,u=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=s*i(d)-u*o(d),p=s*o(d)+u*i(d),f=l*i(d)-c*o(d),y=l*o(d)+c*i(d),C=(e.x+t.x)/2,v=(e.y+t.y)/2,S=(t.x+n.x)/2,b=(t.y+n.y)/2,w=C+h,x=v+p,M=S+f,O=b+y,D=g.lli8(C,v,w,x,S,b,M,O),P=g.dist(D,e),T=a(e.y-D.y,e.x-D.x),F=a(t.y-D.y,t.x-D.x),E=a(n.y-D.y,n.x-D.x);return T<E?((T>F||F>E)&&(T+=m),T>E&&(r=E,E=T,T=r)):E<F&&F<T?(r=E,E=T,T=r):E+=m,D.s=T,D.e=E,D.r=P,D},numberSort:function(e,t){return e-t}};e.exports=g}()},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function r(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new r(o.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new r(o.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(233),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(38))},function(e,t,n){e.exports=o;var i=n(111).EventEmitter;function o(){i.call(this)}n(47)(o,i),o.Readable=n(112),o.Writable=n(239),o.Duplex=n(240),o.Transform=n(241),o.PassThrough=n(242),o.Stream=o,o.prototype.pipe=function(e,t){var n=this;function o(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function r(){n.readable&&n.resume&&n.resume()}n.on("data",o),e.on("drain",r),e._isStdio||t&&!1===t.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,e.end())}function u(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(c(),0===i.listenerCount(this,"error"))throw e}function c(){n.removeListener("data",o),e.removeListener("drain",r),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",l),e.removeListener("error",l),n.removeListener("end",c),n.removeListener("close",c),e.removeListener("close",c)}return n.on("error",l),e.on("error",l),n.on("end",c),n.on("close",c),e.on("close",c),e.emit("pipe",n),e}},function(e,t,n){"use strict";(function(t,i){var o=n(79);e.exports=v;var r,a=n(153);v.ReadableState=C;n(111).EventEmitter;var s=function(e,t){return e.listeners(t).length},u=n(157),l=n(80).Buffer,c=t.Uint8Array||function(){};var m=n(57);m.inherits=n(47);var d=n(234),h=void 0;h=d&&d.debuglog?d.debuglog("stream"):function(){};var p,f=n(235),g=n(158);m.inherits(v,u);var y=["error","close","destroy","pause","resume"];function C(e,t){e=e||{};var i=t instanceof(r=r||n(39));this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var o=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:i&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new f,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=n(159).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(r=r||n(39),!(this instanceof v))return new v(e);this._readableState=new C(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function S(e,t,n,i,o){var r,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,M(e)}(e,a)):(o||(r=function(e,t){var n;i=t,l.isBuffer(i)||i instanceof c||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var i;return n}(a,t)),r?e.emit("error",r):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),i?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):b(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?b(e,a,t,!1):D(e,a)):b(e,a,t,!1))):i||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function b(e,t,n,i){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&M(e)),D(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var n,i=this._readableState;return i.objectMode?n=!0:"string"==typeof e&&((t=t||i.defaultEncoding)!==i.encoding&&(e=l.from(e,t),t=""),n=!0),S(this,e,t,!1,n)},v.prototype.unshift=function(e){return S(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=n(159).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var w=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=w?e=w:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function M(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(h("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?o.nextTick(O,e):O(e))}function O(e){h("emit readable"),e.emit("readable"),E(e)}function D(e,t){t.readingMore||(t.readingMore=!0,o.nextTick(P,e,t))}function P(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(h("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function T(e){h("readable nexttick read 0"),e.read(0)}function F(e,t){t.reading||(h("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),E(e),t.flowing&&!t.reading&&e.read(0)}function E(e){var t=e._readableState;for(h("flow",t.flowing);t.flowing&&null!==e.read(););}function _(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var i;e<t.head.data.length?(i=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):i=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,i=1,o=n.data;e-=o.length;for(;n=n.next;){var r=n.data,a=e>r.length?r.length:e;if(a===r.length?o+=r:o+=r.slice(0,e),0===(e-=a)){a===r.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=r.slice(a));break}++i}return t.length-=i,o}(e,t):function(e,t){var n=l.allocUnsafe(e),i=t.head,o=1;i.data.copy(n),e-=i.data.length;for(;i=i.next;){var r=i.data,a=e>r.length?r.length:e;if(r.copy(n,n.length-e,0,a),0===(e-=a)){a===r.length?(++o,i.next?t.head=i.next:t.head=t.tail=null):(t.head=i,i.data=r.slice(a));break}++o}return t.length-=o,n}(e,t);return i}(e,t.buffer,t.decoder),n);var n}function N(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,o.nextTick(A,t,e))}function A(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function I(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}v.prototype.read=function(e){h("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return h("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?N(this):M(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&N(this),null;var i,o=t.needReadable;return h("need readable",o),(0===t.length||t.length-e<t.highWaterMark)&&h("length less than watermark",o=!0),t.ended||t.reading?h("reading or ended",o=!1):o&&(h("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(n,t))),null===(i=e>0?_(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&N(this)),null!==i&&this.emit("data",i),i},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var n=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=e;break;case 1:r.pipes=[r.pipes,e];break;default:r.pipes.push(e)}r.pipesCount+=1,h("pipe count=%d opts=%j",r.pipesCount,t);var u=(!t||!1!==t.end)&&e!==i.stdout&&e!==i.stderr?c:v;function l(t,i){h("onunpipe"),t===n&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,h("cleanup"),e.removeListener("close",y),e.removeListener("finish",C),e.removeListener("drain",m),e.removeListener("error",g),e.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",v),n.removeListener("data",f),d=!0,!r.awaitDrain||e._writableState&&!e._writableState.needDrain||m())}function c(){h("onend"),e.end()}r.endEmitted?o.nextTick(u):n.once("end",u),e.on("unpipe",l);var m=function(e){return function(){var t=e._readableState;h("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,E(e))}}(n);e.on("drain",m);var d=!1;var p=!1;function f(t){h("ondata"),p=!1,!1!==e.write(t)||p||((1===r.pipesCount&&r.pipes===e||r.pipesCount>1&&-1!==I(r.pipes,e))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function g(t){h("onerror",t),v(),e.removeListener("error",g),0===s(e,"error")&&e.emit("error",t)}function y(){e.removeListener("finish",C),v()}function C(){h("onfinish"),e.removeListener("close",y),v()}function v(){h("unpipe"),n.unpipe(e)}return n.on("data",f),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",g),e.once("close",y),e.once("finish",C),e.emit("pipe",n),r.flowing||(h("pipe resume"),n.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var i=t.pipes,o=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var r=0;r<o;r++)i[r].emit("unpipe",this,n);return this}var a=I(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},v.prototype.on=function(e,t){var n=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var i=this._readableState;i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.emittedReadable=!1,i.reading?i.length&&M(this):o.nextTick(T,this))}return n},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(h("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,o.nextTick(F,e,t))}(this,e)),this},v.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,n=this._readableState,i=!1;for(var o in e.on("end",function(){if(h("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(o){(h("wrapped data"),n.decoder&&(o=n.decoder.write(o)),n.objectMode&&null==o)||(n.objectMode||o&&o.length)&&(t.push(o)||(i=!0,e.pause()))}),e)void 0===this[o]&&"function"==typeof e[o]&&(this[o]=function(t){return function(){return e[t].apply(e,arguments)}}(o));for(var r=0;r<y.length;r++)e.on(y[r],this.emit.bind(this,y[r]));return this._read=function(t){h("wrapped _read",t),i&&(i=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=_}).call(this,n(38),n(56))},function(e,t,n){e.exports=n(111).EventEmitter},function(e,t,n){"use strict";var i=n(79);function o(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,r=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return r||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||i.nextTick(o,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(i.nextTick(o,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){"use strict";var i=n(80).Buffer,o=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function r(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(i.isEncoding===o||!o(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=l,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=c,this.end=m,t=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var i=n.charCodeAt(n.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function c(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function m(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function h(e){return e&&e.length?this.write(e):""}t.StringDecoder=r,r.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},r.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},r.prototype.text=function(e,t){var n=function(e,t,n){var i=t.length-1;if(i<n)return 0;var o=a(t[i]);if(o>=0)return o>0&&(e.lastNeed=o-1),o;if(--i<n||-2===o)return 0;if((o=a(t[i]))>=0)return o>0&&(e.lastNeed=o-2),o;if(--i<n||-2===o)return 0;if((o=a(t[i]))>=0)return o>0&&(2===o?o=0:e.lastNeed=o-3),o;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var i=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",t,i)},r.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";e.exports=a;var i=n(39),o=n(57);function r(e,t){var n=this._transformState;n.transforming=!1;var i=n.writecb;if(!i)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),i(e);var o=this._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);i.call(this,e),this._transformState={afterTransform:r.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){u(e,t,n)}):u(this,null,null)}function u(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}o.inherits=n(47),o.inherits(a,i),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,n){var i=this._transformState;if(i.writecb=n,i.writechunk=e,i.writeencoding=t,!i.transforming){var o=this._readableState;(i.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var n=this;i.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2);t.ConnectionFailSafeBehaviorDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.ConnectionFailSafeBehaviorDroneCommand,this.connectionFailSafeBehavior=o.DroneConnectionFailSafeBehavior.Hover}applyJSON(e){return!(!super.applyJSON(e)||!e.connectionFailSafeBehavior||(this.connectionFailSafeBehavior=e.connectionFailSafeBehavior,0))}get subtitle(){return r.Format.enum("DroneConnectionFailSafeBehavior",this.connectionFailSafeBehavior)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(1),a=n(3);t.LandingGearAutomaticMovementDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingGearAutomaticMovementDroneCommand,this.enabled=!0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.enabled||(this.enabled=r.Common.parseBoolean(e.enabled,!0),0))}get subtitle(){return this.enabled?a.Strings.Common.enabled:a.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0);t.LandingGearDeployDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingGearDeployDroneCommand}applyJSON(e){return!!super.applyJSON(e)}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0);t.LandingGearRetractDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingGearRetractDroneCommand}applyJSON(e){return!!super.applyJSON(e)}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(1),a=n(3);t.LightbridgeChannelDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LightbridgeChannelDroneCommand,this.lightbridgeChannel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.lightbridgeChannel=r.Common.parseInt(e.lightbridgeChannel,0),!0)}get subtitle(){return`${a.Strings.LightbridgeChannelDroneCommand.values.lightbridgeChannel} ${this.lightbridgeChannel}`}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2);t.LightbridgeChannelSelectionModeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LightbridgeChannelSelectionModeDroneCommand,this.lightbridgeChannelSelectionMode=o.DroneLightbridgeChannelSelectionMode.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.lightbridgeChannelSelectionMode||(this.lightbridgeChannelSelectionMode=e.lightbridgeChannelSelectionMode,0))}get subtitle(){return r.Format.enum("DroneLightbridgeChannelSelectionMode",this.lightbridgeChannelSelectionMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2);t.LightbridgeFrequencyBandDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LightbridgeFrequencyBandDroneCommand,this.lightbridgeFrequencyBand=o.DroneLightbridgeFrequencyBand._2dot4ghz}applyJSON(e){return!(!super.applyJSON(e)||!e.lightbridgeFrequencyBand||(this.lightbridgeFrequencyBand=e.lightbridgeFrequencyBand,0))}get subtitle(){return r.Format.enum("DroneLightbridgeFrequencyBand",this.lightbridgeFrequencyBand)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2),a=n(1),s=n(7);t.LowBatteryWarningThresholdDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LowBatteryWarningThresholdDroneCommand,this.lowBatteryWarningThreshold=s.Constants.LowBatteryWarningThresholdDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.lowBatteryWarningThreshold=a.Common.parseFloat(e.lowBatteryWarningThreshold,s.Constants.LowBatteryWarningThresholdDroneCommandValue),!0)}get subtitle(){return r.Format.percent(this.lowBatteryWarningThreshold).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2),a=n(1),s=n(7);t.MaxAltitudeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.MaxAltitudeDroneCommand,this.maxAltitude=s.Constants.MaxAltitudeDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.maxAltitude=a.Common.parseFloat(e.maxAltitude,s.Constants.MaxAltitudeDroneCommandValue),!0)}get subtitle(){return r.Format.altitude(this.maxAltitude).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2),a=n(1),s=n(7);t.MaxDistanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.MaxDistanceDroneCommand,this.maxDistance=s.Constants.MaxDistanceDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.maxDistance=a.Common.parseFloat(e.maxDistance,s.Constants.MaxDistanceDroneCommandValue),!0)}get subtitle(){return r.Format.altitude(this.maxDistance).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(1),a=n(3);t.OcuSyncChannelDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.OcuSyncChannelDroneCommand,this.ocuSyncChannel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.ocuSyncChannel=r.Common.parseInt(e.ocuSyncChannel,0),!0)}get subtitle(){return`${a.Strings.OcuSyncChannelDroneCommand.values.ocuSyncChannel} ${this.ocuSyncChannel}`}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2);t.OcuSyncChannelSelectionModeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.OcuSyncChannelSelectionModeDroneCommand,this.ocuSyncChannelSelectionMode=o.DroneOcuSyncChannelSelectionMode.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.ocuSyncChannelSelectionMode||(this.ocuSyncChannelSelectionMode=e.ocuSyncChannelSelectionMode,0))}get subtitle(){return r.Format.enum("DroneOcuSyncChannelSelectionMode",this.ocuSyncChannelSelectionMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2);t.OcuSyncFrequencyBandDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.OcuSyncFrequencyBandDroneCommand,this.ocuSyncFrequencyBand=o.DroneOcuSyncFrequencyBand.Dual}applyJSON(e){return!(!super.applyJSON(e)||!e.ocuSyncFrequencyBand||(this.ocuSyncFrequencyBand=e.ocuSyncFrequencyBand,0))}get subtitle(){return r.Format.enum("DroneOcuSyncFrequencyBand",this.ocuSyncFrequencyBand)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),o=n(0),r=n(2),a=n(1),s=n(7);t.ReturnHomeAltitudeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.ReturnHomeAltitudeDroneCommand,this.returnHomeAltitude=s.Constants.ReturnHomeAltitudeDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.returnHomeAltitude=a.Common.parseFloat(e.returnHomeAltitude,s.Constants.ReturnHomeAltitudeDroneCommandValue),!0)}get subtitle(){return r.Format.altitude(this.returnHomeAltitude).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.AEBCountCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.AEBCountCameraCommand,this.aebCount=o.CameraAEBCount._3}applyJSON(e){return!(!super.applyJSON(e)||!e.aebCount||(this.aebCount=e.aebCount,0))}get subtitle(){return r.Format.enum("CameraAEBCount",this.aebCount)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ApertureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ApertureCameraCommand,this.aperture=o.CameraAperture.F5dot6}applyJSON(e){return!(!super.applyJSON(e)||!e.aperture||(this.aperture=e.aperture,0))}get subtitle(){return r.Format.enum("CameraAperture",this.aperture)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(3);t.AutoExposureLockCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.AutoExposureLockCameraCommand,this.enabled=!0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.enabled||(this.enabled=!!e.enabled,0))}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ColorCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ColorCameraCommand,this.color=o.CameraColor.None}applyJSON(e){return!(!super.applyJSON(e)||!e.color||(this.color=e.color,0))}get subtitle(){return r.Format.enum("CameraColor",this.color)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ContrastCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ContrastCameraCommand,this.contrast=0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.contrast||(this.contrast=e.contrast,0))}get subtitle(){return r.Format.integer(this.contrast)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ExposureCompensationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ExposureCompensationCameraCommand,this.exposureCompensation=o.CameraExposureCompensation.N00}applyJSON(e){return!(!super.applyJSON(e)||!e.exposureCompensation||(this.exposureCompensation=e.exposureCompensation,0))}get subtitle(){return r.Format.enum("CameraExposureCompensation",this.exposureCompensation)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2),a=n(1),s=n(3);t.ExposureCompensationStepCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ExposureCompensationStepCameraCommand,this.exposureCompensationSteps=1}applyJSON(e){return!!super.applyJSON(e)&&(this.exposureCompensationSteps=a.Common.parseInt(e.exposureCompensationSteps,1),!0)}get subtitle(){return r.Format.integer(this.exposureCompensationSteps,{singular:s.Strings.ExposureCompensationStepCameraCommand.values.exposureCompensationStep,plural:s.Strings.ExposureCompensationStepCameraCommand.values.exposureCompensationSteps})}get reengagementTiming(){return o.CommandReengagementTiming.Never}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.FileIndexModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.FileIndexModeCameraCommand,this.fileIndexMode=o.CameraFileIndexMode.Sequence}applyJSON(e){return!(!super.applyJSON(e)||!e.fileIndexMode||(this.fileIndexMode=e.fileIndexMode,0))}get subtitle(){return r.Format.enum("CameraFileIndexMode",this.fileIndexMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.FocusModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.FocusModeCameraCommand,this.focusMode=o.CameraFocusMode.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.focusMode||(this.focusMode=e.focusMode,0))}get subtitle(){return r.Format.enum("CameraFocusMode",this.focusMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ISOCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ISOCameraCommand,this.iso=o.CameraISO.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.iso||(this.iso=e.iso,0))}get subtitle(){return r.Format.enum("CameraISO",this.iso)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.PhotoAspectRatioCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoAspectRatioCameraCommand,this.photoAspectRatio=o.CameraPhotoAspectRatio._4_3}applyJSON(e){return!(!super.applyJSON(e)||!e.photoAspectRatio||(this.photoAspectRatio=e.photoAspectRatio,0))}get subtitle(){return r.Format.enum("CameraPhotoAspectRatio",this.photoAspectRatio)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.SaturationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.SaturationCameraCommand,this.saturation=0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.saturation||(this.saturation=e.saturation,0))}get subtitle(){return r.Format.integer(this.saturation)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.SharpnessCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.SharpnessCameraCommand,this.sharpness=0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.sharpness||(this.sharpness=e.sharpness,0))}get subtitle(){return r.Format.integer(this.sharpness)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.ShutterSpeedCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ShutterSpeedCameraCommand,this.shutterSpeed=o.CameraShutterSpeed._1_800}applyJSON(e){return!(!super.applyJSON(e)||!e.shutterSpeed||(this.shutterSpeed=e.shutterSpeed,0))}get subtitle(){return r.Format.enum("CameraShutterSpeed",this.shutterSpeed)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.StorageLocationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.StorageLocationCameraCommand,this.storageLocation=o.CameraStorageLocation.SDCard}applyJSON(e){return!(!super.applyJSON(e)||!e.storageLocation||(this.storageLocation=e.storageLocation,0))}get subtitle(){return r.Format.enum("CameraStorageLocation",this.storageLocation)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.VideoFileCompressionStandardCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoFileCompressionStandardCameraCommand,this.videoFileCompressionStandard=o.CameraVideoFileCompressionStandard.H264}applyJSON(e){return!(!super.applyJSON(e)||!e.videoFileCompressionStandard||(this.videoFileCompressionStandard=e.videoFileCompressionStandard,0))}get subtitle(){return r.Format.enum("CameraVideoFileCompressionStandard",this.videoFileCompressionStandard)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2),a=n(1);t.VideoResolutionFrameRateCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoResolutionFrameRateCameraCommand,this.videoResolution=o.CameraVideoResolution._3840x2160,this.videoFrameRate=o.CameraVideoFrameRate._29dot970,this.videoFieldOfView=o.CameraVideoFieldOfView.Default}applyJSON(e){return!!(super.applyJSON(e)&&e.videoResolution&&e.videoFrameRate)&&(this.videoResolution=e.videoResolution,this.videoFrameRate=e.videoFrameRate,this.videoFieldOfView=e.videoFieldOfView||o.CameraVideoFieldOfView.Default,!0)}get subtitle(){const e=`${r.Format.enum("CameraVideoResolution",this.videoResolution)}@${r.Format.enum("CameraVideoFrameRate",this.videoFrameRate)}`;return this.videoFieldOfView!==o.CameraVideoFieldOfView.Default?a.Common.joinNotEmpty([e,r.Format.enum("CameraVideoFieldOfView",this.videoFieldOfView)]):e}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.VideoStandardCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoStandardCameraCommand,this.videoStandard=o.CameraVideoStandard.NTSC}applyJSON(e){return!(!super.applyJSON(e)||!e.videoStandard||(this.videoStandard=e.videoStandard,0))}get subtitle(){return r.Format.enum("CameraVideoStandard",this.videoStandard)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.WhiteBalanceCustomCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.WhiteBalanceCustomCameraCommand,this.whiteBalanceCustom=5600}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.whiteBalanceCustom||(this.whiteBalanceCustom=e.whiteBalanceCustom,0))}get subtitle(){return r.Format.absoluteTemperature(this.whiteBalanceCustom)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),r=n(2);t.WhiteBalancePresetCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.WhiteBalancePresetCameraCommand,this.whiteBalancePreset=o.CameraWhiteBalancePreset.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.whiteBalancePreset||(this.whiteBalancePreset=e.whiteBalancePreset,0))}get subtitle(){return r.Format.enum("CameraWhiteBalancePreset",this.whiteBalancePreset)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=a(n(124)),o=a(n(196)),r=a(n(197));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=(0,i.default)(e),n=t.latitude,a=t.longitude;if(Array.isArray(e)&&e.length>=2)return(0,r.default)(e[0])&&(0,o.default)(e[1]);if(void 0===n||void 0===a)return!1;var s=e[a],u=e[n];return void 0!==u&&void 0!==s&&!1!==(0,o.default)(u)&&!1!==(0,r.default)(s)};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(92)),o=s(n(93)),r=s(n(94)),a=n(13);function s(e){return e&&e.__esModule?e:{default:e}}var u=function e(t){return(0,i.default)(t)?!(parseFloat(t)>a.MAXLAT||t<a.MINLAT):!!(0,o.default)(t)&&e((0,r.default)(t))};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(92)),o=s(n(93)),r=s(n(94)),a=n(13);function s(e){return e&&e.__esModule?e:{default:e}}var u=function e(t){return(0,i.default)(t)?!(parseFloat(t)>a.MAXLON||t<a.MINLON):!!(0,o.default)(t)&&e((0,r.default)(t))};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(45))&&i.__esModule?i:{default:i};var r=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default;return n="function"==typeof n?n:o.default,t.slice().sort(function(t,i){return n(e,t)-n(e,i)})};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(24)),o=r(n(25));function r(e){return e&&e.__esModule?e:{default:e}}var a=function(e){if(!1===Array.isArray(e)||0===e.length)throw new Error("No points were given.");return e.reduce(function(e,t){var n=(0,i.default)(t),r=(0,o.default)(t);return{maxLat:Math.max(n,e.maxLat),minLat:Math.min(n,e.minLat),maxLng:Math.max(r,e.maxLng),minLng:Math.min(r,e.minLng)}},{maxLat:-1/0,minLat:1/0,maxLng:-1/0,minLng:1/0})};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(24)),o=s(n(25)),r=s(n(30)),a=s(n(49));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=(0,r.default)((0,o.default)(t))-(0,r.default)((0,o.default)(e)),s=Math.log(Math.tan((0,r.default)((0,i.default)(t))/2+Math.PI/4)/Math.tan((0,r.default)((0,i.default)(e))/2+Math.PI/4));return Math.abs(n)>Math.PI&&(n=n>0?-1*(2*Math.PI-n):2*Math.PI+n),((0,a.default)(Math.atan2(n,s))+360)%360};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(45))&&i.__esModule?i:{default:i};var r=function(e,t,n){var i=(0,o.default)(t,e),r=(0,o.default)(e,n),a=(0,o.default)(t,n),s=Math.acos((i*i+a*a-r*r)/(2*i*a)),u=Math.acos((r*r+a*a-i*i)/(2*r*a));return s>Math.PI/2?i:u>Math.PI/2?r:Math.sin(s)*i};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(1);t.Payload=class extends i.Identifiable{constructor(e=0){super(),this.channel=e}applyJSON(e){return!!super.applyJSON(e)&&(this.channel=o.Common.parseInt(e.channel),!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.GeoSpatialSources=class{constructor(e,t,n){this.plan=e,this.drone=t,this.device=n}value(e,t=null){switch(e){case i.GeoSpatialSource.Input:return t||this.drone;case i.GeoSpatialSource.Plan:return this.plan;case i.GeoSpatialSource.Device:return this.device||this.drone;case i.GeoSpatialSource.Drone:return this.drone}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(72),o=n(0),r=n(4),a=n(7),s=n(73),u=n(16),l=n(1),c=n(2),m=n(8),d=n(54),h=n(104),p=n(3),f=n(14),g=n(23),y=n(96),C=n(70),v=n(44),S=n(27),b=n(21),w=n(15),x=n(64),M=n(63),O=n(62),D=n(36),P=n(41),T=n(43),F=n(42),E=n(35),_=n(55),N=n(37),A=n(19),I=n(10),L=n(120);t.FacadeComponent=class extends i.ApproachableComponent{constructor(){super(...arguments),this.type=o.TypeName.FacadeComponent,this.initialAltitude=new u.Altitude(a.Constants.FacadeComponentInitialAltitude),this.finalAltitude=new u.Altitude(a.Constants.FacadeComponentFinalAltitude),this.cameraSpecification=r.Serialization.clone(a.Constants.MapCameraSpecification),this.gimbalOrientations={0:new b.Orientation3Optional(a.Constants.FacadeComponentGimbalPitch)},this.droneOrientation=null,this.cameraMode=o.CameraMode.Photo,this.capturePriority=o.FacadeCapturePriority.Distance,this.minCaptureInterval=a.Constants.FacadeComponentMinCaptureInterval,this.targetDistance=a.Constants.FacadeComponentDistance,this.sampleDistanceGimbalAngleEnabled=!0,this.pattern=o.FacadePattern.Vertical,this.cornering=o.PathCornering.Rounded,this.cornerRadius=a.Constants.FacadeComponentCornerRadius,this.verticalOverlap=a.Constants.FacadeComponentFrontOverlap,this.horizontalOverlap=a.Constants.FacadeComponentSideOverlap,this.boundaryFace=o.FacadeBoundaryFace.LineLeft,this.boundaryPoints=[]}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.cameraMode=e.cameraMode||o.CameraMode.Photo,this.capturePriority=e.capturePriority||o.FacadeCapturePriority.Distance,this.minCaptureInterval=l.Common.parseFloat(e.minCaptureInterval,a.Constants.FacadeComponentMinCaptureInterval),this.targetDistance=l.Common.parseFloat(e.targetDistance,a.Constants.FacadeComponentDistance),this.sampleDistanceGimbalAngleEnabled=l.Common.parseBoolean(e.sampleDistanceGimbalAngleEnabled,!0),this.pattern=e.pattern||o.FacadePattern.Vertical,this.cornering=e.cornering||o.PathCornering.Rounded,this.cornerRadius=l.Common.parseFloat(e.cornerRadius,a.Constants.FacadeComponentCornerRadius),this.verticalOverlap=l.Common.parseFloat(e.verticalOverlap,a.Constants.FacadeComponentFrontOverlap),this.horizontalOverlap=l.Common.parseFloat(e.horizontalOverlap,a.Constants.FacadeComponentSideOverlap),this.boundaryFace=e.boundaryFace||o.FacadeBoundaryFace.LineLeft,this.boundaryPoints=[],Array.isArray(e.boundaryPoints))for(let t of e.boundaryPoints){const e=r.Serialization.deserialize(t);if(!(e&&e instanceof s.FacadeComponentBoundaryPoint))return!1;this.boundaryPoints.push(e)}if(e.droneOrientation){if(this.droneOrientation=new b.Orientation3Optional,!this.droneOrientation.applyJSON(e.droneOrientation))return!1}else this.droneOrientation=null;if(e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new b.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}}else this.gimbalOrientations={0:new b.Orientation3Optional(a.Constants.FacadeComponentGimbalPitch)};return this.initialAltitude.applyJSON(e.initialAltitude)&&this.finalAltitude.applyJSON(e.finalAltitude)&&this.cameraSpecification.applyJSON(e.cameraSpecification)}get subtitle(){return l.Common.joinNotEmpty([this.initialAltitude.toString(),this.finalAltitude.toString(),c.Format.percent(this.verticalOverlap).toString(),c.Format.percent(this.horizontalOverlap).toString()])}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.cameraMode=o.CameraMode.Unknown,t.droneOrientation=new b.Orientation3Optional,t.droneOrientation.z=0,t.droneOrientation.zReference=o.OrientationZReference.Path,t}alignment(e){let t=null;const n=this.boundarySegments;if(n.length>0)switch((t=new b.Orientation3Optional).yawReference=o.OrientationZReference.North,this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.LineRight:t.yaw=n[0].direction-this.boundaryFaceOrientation;break;case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:const i=this.path(e);i&&(t.yaw=i.sampleForDistance(0).direction-this.boundaryFaceOrientation);break;case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:t.yaw=n[0].direction+Math.PI}return{droneOrientation:t,gimbalOrientations:this.gimbalOrientations}}get referenceOffsets(){return super.referenceOffsets.concat(this.boundaryPointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.initialAltitude.system!==o.AltitudeSystem.AGL&&this.finalAltitude.system!==o.AltitudeSystem.AGL||t.push(this.approachCoordinate(e)),t}node(e=null){const t=super.node(e),n=new s.FacadeComponentBoundaryPointsNode(t);return this.boundaryPoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${p.Strings.Common.new} ${p.Strings.FacadeComponentBoundaryPoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addBoundaryPoint(e,t)}}),t.children.push(n),t}centerCoordinate(e){let t=m.Vector2.center(this.boundaryPointOffsets);return 2===this.boundaryPoints.length&&(t=t.add(new m.Vector2(this.boundaryPointOffsets[1].subtract(this.boundaryPointOffsets[0]).direction+this.boundaryFaceOrientation,this.targetDistance/2))),this.referenceCoordinate(e,t)}initialReferencedAltitude(e){return this.referencedAltitude(e,this.initialAltitude,this.approachCoordinate(e))}finalReferencedAltitude(e){return this.referencedAltitude(e,this.finalAltitude,this.approachCoordinate(e))}get surfaceSampleDistance(){let e=this.targetDistance;if(this.sampleDistanceGimbalAngleEnabled)for(const t in Object.keys(this.gimbalOrientations)){const n=this.gimbalOrientations[t];if(n&&n.pitch&&Math.abs(n.pitch)>A.Convert.degreesToRadians(1)){const t=Math.cos(n.pitch);e=0===t?e:e/t;break}}return this.cameraSpecification.groundSampleDistance(e)}resetApproachDestinationOffset(e){const t=this.path(e);t&&t.coordinates.length>0&&(this.approachComponent.destinationOffset=this.referenceCoordinate(e).offset(t.coordinates[0]))}addBoundaryPoint(e,t=null,n=null){return null===n?this.boundaryPoints.push(e):this.boundaryPoints.splice(n,0,e),t&&this.resetApproachDestinationOffset(t),e}get boundaryClosed(){switch(this.boundaryFace){case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:return!0;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:default:return!1}}updateBoundaryPointCoordinate(e,t,n){const i=this.boundaryPoints[e].offset,r=this.referenceCoordinate(n).offset(t);this.boundaryPoints[e].offset=r;let a=this.boundarySegments;switch(this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.LineRight:for(var s=0;s<a.length;s++)for(var u=s+2;u<a.length;u++)if(null!==d.Line2.intersection(a[s],a[u]))return void(this.boundaryPoints[e].offset=i);break;case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:let t=e,n=0;for(const o of a){if(n!==t&&n!==l.Common.modSafe(t+1,a.length)&&n!==l.Common.modSafe(t-1,a.length)&&null!==d.Line2.intersection(a[t],o))return void(this.boundaryPoints[e].offset=i);n++}t=l.Common.modSafe(e-1,a.length),n=0;for(const o of a){if(n!==t&&n!==l.Common.modSafe(t+1,a.length)&&n!==l.Common.modSafe(t-1,a.length)&&null!==d.Line2.intersection(a[t],o))return void(this.boundaryPoints[e].offset=i);n++}break;case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:break;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:a.length>1&&(this.boundaryPoints[2].offset=a[0].b.toVector2().add(new m.Vector2(a[0].direction,a[1].length-a[0].length)))}this.resetApproachDestinationOffset(n)}removeBoundaryPoint(e,t){return this.boundaryPoints=this.boundaryPoints.filter(t=>t!==e),this.resetApproachDestinationOffset(t),e}get boundaryPointOffsets(){return this.boundaryPoints.filter((e,t)=>0===this.maxBoundaryPoints||t<this.maxBoundaryPoints).map(e=>e.offset)}get maxBoundaryPoints(){switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:return 2;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:return 3;default:return 0}}get boundarySegments(){const e=this.boundaryPointOffsets;if(e.length<2)return[];switch(this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:const n=[];for(var t=1;t<e.length;t++)n.push(new d.Line2(e[0].toPoint2(),e[t].toPoint2()));return n}const n=e.map((t,n)=>new d.Line2(t.toPoint2(),e[(n+1)%e.length].toPoint2()));return this.boundaryClosed||n.splice(n.length-1,1),n}boundaryPointCoordinates(e){return this.boundaryPointOffsets.map(t=>this.referenceCoordinate(e,t))}boundaryPointCoordinate(e,t){return this.referenceCoordinate(e,this.boundaryPoints[t].offset)}get boundaryFaceOrientation(){let e=Math.PI/2;switch(this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.SpiralClockwise:e+=Math.PI}return e}estimate(e,t){const n=super.estimate(e,t);if(!e.altitudeRequired&&!e.timeRequired){const t=this.path(e);if(t)switch(n.droneSpatials.push(...t.coordinates.map(e=>e.toGeoSpatial())),this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:break;default:if(this.patternResolved===o.FacadePattern.Horizontal&&!this.boundaryClosed){const i=this.modelParameters(e,t);i&&i.rows%2==0&&n.droneSpatials.push(...t.coordinates.reverse().map(e=>e.toGeoSpatial()))}}return n}const i=this.model(e,e.timeRequired);return i&&(i.addToEstimate(n),n.cameraCaptures=i.cameraCaptures),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(o.TypeName.FacadeComponent,()=>{const n=this.model(e);if(n){const e=new R(n.firstSample,n.captureInterval);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==o.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;0===t.progress&&this.cameraMode!==o.CameraMode.Unknown&&(0===n.setupComponents.length&&Object.keys(this.gimbalOrientations).forEach(e=>{const t=parseInt(e),i=new D.StopCaptureCameraCommand;i.channel=t,n.setupComponents.push(new v.CommandComponent(i));const r=new P.ModeCameraCommand;if(r.channel=t,r.mode=this.cameraMode,n.setupComponents.push(new v.CommandComponent(r)),this.cameraMode===o.CameraMode.Photo){const e=new T.PhotoModeCameraCommand;if(e.channel=t,e.photoMode=n.captureInterval?o.CameraPhotoMode.Interval:o.CameraPhotoMode.Single,n.setupComponents.push(new v.CommandComponent(e)),n.captureInterval){const e=new F.PhotoIntervalCameraCommand;e.channel=t,e.photoInterval=n.captureInterval,n.setupComponents.push(new v.CommandComponent(e))}}}),this.aligned(e)&&!n.addedInitialFocus&&(Object.keys(this.gimbalOrientations).forEach(e=>{const t=parseInt(e),i=new L.FocusCameraCommand;i.channel=t;const o=new v.CommandComponent(i);o.required=!1,n.setupComponents.push(o)}),n.addedInitialFocus=!0));const{engagement:i}=e;let r=!1;for(const t of n.setupComponents){const n=t.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(r=!0,t.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&t.required)return n.failed(n.error,i.currentDatetime)}if(r)return t.messages.push(new I.Message(p.Strings.FacadeComponent.messages.setup.title)),t;if(!this.aligned(e))return t;const a=n.sampleLinked;let s=[];0===t.progress&&a&&a.current.component&&s.push(a.current.component),n.incrementTime(i.timeSinceLastExecution);let u=n.sampleLinked;for(;u&&u!==a;)u.current.component&&s.push(u.current.component),u=u.previous;n.addSampleComponents(s.reverse());const l=[];for(const t of n.sampleComponents){const n=t.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(l.push(t),t.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&t.required)return n.failed(n.error,i.currentDatetime)}return n.sampleComponents=n.sampleComponents.filter(t=>{const n=e.execution.getComponentState(t);return n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing}),n.sampleLinked.next||0!==l.length?(this.addVelocityCommandsFromModel(e,n,this.cameraMode===o.CameraMode.Photo),t.progress=n.progress,t):t.succeeded(i.currentDatetime)}modelParameters(e,t=null){let n=this.approachComponent.destinationReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL),i=this.initialReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL),r=this.finalReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);if(null===n||null===i||null===r)return null;const a=Math.abs(r.value-i.value),s=this.surfaceSampleDistance,u=Math.max(Math.ceil(a/(s.height*this.cameraSpecification.image.height*(1-this.verticalOverlap))),1);let l=t?Math.max(Math.ceil(t.distance/(s.width*this.cameraSpecification.image.width*(1-this.horizontalOverlap))),1):0;return this.boundaryClosed&&(l=Math.max(1,l-1)),{approachAltitude:n,initialAltitude:i,finalAltitude:r,rows:u,columns:l}}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!0){var n;const i=this.path(e);if(!i)return null;const s=this.modelParameters(e,i);if(!s)return null;s.initialAltitude.value===s.finalAltitude.value&&(s.finalAltitude.value=s.initialAltitude.value+.1);const u=this.surfaceSampleDistance,l=r.Serialization.clone(this.resolveDroneMotionLimits(e,this.droneMotionLimits));let c=null,d=null;if(this.cameraMode===o.CameraMode.Photo){let e=this.minCaptureInterval,t=0,n=.1;switch(this.capturePriority===o.FacadeCapturePriority.Time&&(e=Math.ceil(e),n=1),this.patternResolved){case o.FacadePattern.Horizontal:for(t=u.width*this.cameraSpecification.image.width*(1-this.horizontalOverlap);;){const i=w.Kinematic.v4(t,e);if(i<l.horizontal.velocity.max){l.horizontal.velocity.max=i;break}e+=n}break;case o.FacadePattern.Vertical:for(t=u.height*this.cameraSpecification.image.height*(1-this.verticalOverlap);;){const i=w.Kinematic.v4(t,e);if(i<Math.min(l.vertical.velocity.max,Math.abs(l.vertical.velocity.min))){l.vertical.velocity.max=i,l.vertical.velocity.min=-i;break}e+=n}break;default:return null}switch(this.capturePriority){case o.FacadeCapturePriority.Time:c=e;break;case o.FacadeCapturePriority.Distance:d=t;break;default:return null}}const h=d?Math.max(Math.min(.5*d,a.Constants.FacadeComponentSampleDistanceMax),a.Constants.FacadeComponentSampleDistanceMin):a.Constants.FacadeComponentSampleDistanceMax,p={},f=(e,t)=>{switch(p[e]||(p[e]=new y.ComponentEstimateCameraCapture(e)),this.cameraMode){case o.CameraMode.Photo:p[e].photos+=t;break;case o.CameraMode.Video:p[e].videos+=t}},b=(e,t,n,i=null)=>{if(!e)return;n.channel=parseInt(t);const o=new v.CommandComponent(n);if(null!==i&&(o.required=i),e.current.component)if(e.current.component instanceof _.ListComponent)e.current.component.childComponents.push(o);else{const t=new _.ListComponent;t.childComponents=[e.current.component,o],e.current.component=t}else e.current.component=o};let P=null;const T=[];switch(this.patternResolved){case o.FacadePattern.Horizontal:const e=Math.abs(s.finalAltitude.value-s.initialAltitude.value);let t=s.rows;switch(this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:t=1}const a=[i.samplesForMaxDistance(h)];this.boundaryClosed||a.push(i.samplesForMaxDistance(h).reverse());let u=s.initialAltitude.value;for(let n=0;n<t;n++){const p=2!==a.length||n%2==0,y=a[p?0:1];let v=0,S=T.length-1;if(y.forEach((e,t)=>{const a=e.direction+(p?0:Math.PI),h=new x.OrientationReferenceSources(new M.OrientationXReferenceSources,new O.OrientationZReferenceSources(a,a,a)),F=new g.GeoSpatial;F.coordinate=e.coordinate,F.altitude.value=u,F.velocity.horizontal=new m.Vector2(a,l.horizontal.velocity.max),this.droneOrientation?(F.orientation.apply(this.droneOrientation),F.orientation.convertReferences(h)):(F.orientation.yaw=e.direction+this.boundaryFaceOrientation+Math.PI,F.orientation.yawReference=o.OrientationZReference.North);let _={};Object.keys(this.gimbalOrientations).forEach(e=>{_[e]=r.Serialization.clone(this.gimbalOrientations[e]),_[e].convertReferences(h)}),P=new C.LinkedValue(new z(F,l,_),P);let A=!1;switch(Object.keys(this.gimbalOrientations).forEach(n=>{null!==c||this.cameraMode===o.CameraMode.Video?0===t?b(P,n,new E.StartCaptureCameraCommand):t===y.length-1&&(b(P,n,new D.StopCaptureCameraCommand),f(parseInt(n),c?w.Kinematic.t1(l.horizontal.velocity.max,i.distance)/c:1)):null!==d&&(p?e.distance>=v&&(b(P,n,new E.StartCaptureCameraCommand,!1),A=!0):e.distance<=T[S]&&(b(P,n,new E.StartCaptureCameraCommand,!1),A=!0),A&&f(parseInt(n),1))}),null!==d&&A&&(p?(0===n&&T.push(e.distance),v+=d):S--),this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:u=N.Interpolation.linear(s.initialAltitude.value,s.finalAltitude.value,e.distance/i.distance)}}),!P)return null;if(n<t-1){const n=e/t,i=Math.floor(n/h),o=n/i,a=r.Serialization.clone(P.current.droneSpatial);a.velocity.horizontal=new m.Vector2;for(let e=0;e<i;e++){u+=o*(s.finalAltitude.value>s.initialAltitude.value?1:-1);const e=r.Serialization.clone(a);e.altitude.value=u;let t={};Object.keys(this.gimbalOrientations).forEach(e=>{var n;t[e]=r.Serialization.clone(null===(n=P)||void 0===n?void 0:n.current.gimbalOrientations[e])}),P=new C.LinkedValue(new z(e,l,t),P)}}}break;case o.FacadePattern.Vertical:const p=i.distance/s.columns,y=i.samplesForMaxDistance(h);let v=0,S=0;for(const e of y){const t=new x.OrientationReferenceSources(new M.OrientationXReferenceSources,new O.OrientationZReferenceSources(e.direction,e.direction,e.direction));let a={};if(Object.keys(this.gimbalOrientations).forEach(e=>{a[e]=r.Serialization.clone(this.gimbalOrientations[e]),a[e].convertReferences(t)}),S<s.columns&&(e.distance>=v||e.distance===i.distance)){const n=S%2==0?s.initialAltitude:s.finalAltitude,i=S%2==0?s.finalAltitude:s.initialAltitude,r=Math.abs(i.value-n.value),u=Math.ceil(r/h);null!==d&&(d=Math.min(d,r/Math.ceil(r/d)));let m=n.value,y=0,x=T.length-1;for(let h=0;h<u;h++){const p=new g.GeoSpatial;p.coordinate=e.coordinate,p.altitude.value=m,this.droneOrientation?(p.orientation.apply(this.droneOrientation),p.orientation.convertReferences(t)):(p.orientation.yaw=e.direction+this.boundaryFaceOrientation+Math.PI,p.orientation.yawReference=o.OrientationZReference.North),P=new C.LinkedValue(new z(p,l,a),P),m+=r/u*(i.value>n.value?1:-1);let v=!1;const M=Math.abs(p.altitude.value-s.initialAltitude.value);Object.keys(this.gimbalOrientations).forEach(e=>{null!==c||this.cameraMode===o.CameraMode.Video?0===h?b(P,e,new E.StartCaptureCameraCommand):h===u-1&&(b(P,e,new D.StopCaptureCameraCommand),f(parseInt(e),c?w.Kinematic.t1(l.vertical.velocity.max,r)/c:1)):null!==d&&(S%2==0?M>=y&&(b(P,e,new E.StartCaptureCameraCommand,!1),v=!0):M<=T[x]&&(b(P,e,new E.StartCaptureCameraCommand,!1),v=!0),v&&f(parseInt(e),1))}),null!==d&&v&&(S%2==0?(0===S&&T.push(M),y+=d):x--)}v=e.distance+p,S++}else{const i=new g.GeoSpatial;i.coordinate=e.coordinate,i.altitude.value=(null===(n=P)||void 0===n?void 0:n.current.droneSpatial.altitude.value)||s.initialAltitude.value,i.velocity.horizontal=new m.Vector2(e.direction,l.horizontal.velocity.max),this.droneOrientation&&t?(i.orientation.apply(this.droneOrientation),i.orientation.convertReferences(t)):(i.orientation.yaw=e.direction+this.boundaryFaceOrientation+Math.PI,i.orientation.yawReference=o.OrientationZReference.North),P=new C.LinkedValue(new z(i,l,a),P)}}break;default:return null}if(!(P=P?P.first:null))return null;if(!t)return new k(P,c,p);const F=(P.current.droneSpatial.altitude.value<s.approachAltitude.value?1:-1)*a.Constants.FacadeComponentSampleDistanceMax;for(;Math.abs(P.current.droneSpatial.altitude.value-s.approachAltitude.value)>a.Constants.FacadeComponentSampleDistanceMax;){const e=r.Serialization.clone(P.current.droneSpatial);e.altitude.value+=F,e.velocity.horizontal=new m.Vector2;let t={};Object.keys(this.gimbalOrientations).forEach(e=>{var n;t[e]=r.Serialization.clone(null===(n=P)||void 0===n?void 0:n.current.gimbalOrientations[e])}),P=P.insertBefore(new z(e,l,t))}return S.DroneMotionComponentModel.updateSamplesContrainVelocities(P,a.Constants.FacadeComponentSampleDistanceMax),new k(P,c,p)}path(e){const t=this.pathOffsets(e).map(e=>e.toPoint2());let n=null;switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:n=[t];break;default:switch(this.cornering){case o.PathCornering.Intersect:n=f.Geometry.cardinalSplinePoint2(t,this.boundaryClosed);break;case o.PathCornering.Rounded:n=f.Geometry.roundedCorners(t,this.cornerRadius,this.boundaryClosed)}}return null!==n&&n.length>0?new h.Path(n.map(t=>t.map(t=>this.referenceCoordinate(e,t.toVector2()))).filter(e=>{for(const t of e)if(null===t)return!1;return!0})):null}get pathCorneringEnabled(){switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:return!1;default:return!0}}get patternEnabled(){switch(this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.LineRight:case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:return!0;default:return!1}}get patternResolved(){switch(this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:return o.FacadePattern.Horizontal;default:return this.pattern}}pathOffsets(e){const t=this.boundarySegments,n=[];if(0===t.length)return n;const i=t[0].a.toVector2();switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:let r=t[0].direction;const s=t[0].length+this.targetDistance,u=a.Constants.FacadeComponentOrbitSteps;for(let e=0;e<=u;e++)n.push(i.add(new m.Vector2(r+2*Math.PI*(e/u)*(this.boundaryFace===o.FacadeBoundaryFace.CircleClockwise?1:-1),s)));return n;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:const l=this.modelParameters(e);let c=t[0].direction;const d=t[0].length+this.targetDistance,h=t.length>1?t[1].length+this.targetDistance:d,p=l?l.rows:1,f=2*Math.PI*p,g=a.Constants.FacadeComponentOrbitSteps*p;for(let e=0;e<=g;e++)n.push(i.add(new m.Vector2(c+f*(e/g)*(this.boundaryFace===o.FacadeBoundaryFace.SpiralClockwise?1:-1),N.Interpolation.linear(d,h,e/g))));return n}const s=t.map(e=>e.add(new m.Vector2(e.direction+this.boundaryFaceOrientation,this.targetDistance)));return s.forEach((e,t)=>{const n=this.boundaryClosed?s[(t+1)%s.length]:t+1<s.length?s[t+1]:null;if(n){let t=d.Line2.intersection(e,n);null===t&&(t=d.Line2.intersection(e.lengthen(e.length),n.lengthen(n.length))),null===t?(e.b=e.lengthen(0,this.targetDistance).b,n.a=n.lengthen(this.targetDistance,0).a):(e.b=r.Serialization.clone(t),n.a=r.Serialization.clone(t))}}),s.forEach((e,t)=>{(0===t||s[t-1].b.distance(e.a)>1)&&n.push(e.a.toVector2()),this.boundaryClosed?(t<s.length-1||e.b.distance(s[0].a)>1)&&n.push(e.b.toVector2()):n.push(e.b.toVector2())}),n}};class R extends S.DroneMotionComponentModelData{constructor(e,t){super(e),this.setupComponents=[],this.addedInitialFocus=!1,this.sampleComponents=[],this.captureInterval=t}addSampleComponents(e){this.sampleComponents.push(...e)}}t.FacadeComponentModelData=R;class k extends S.DroneMotionComponentModel{constructor(e,t,n){super(e),this.captureInterval=t,this.cameraCaptures=n}cameraCapture(e=0){return this.cameraCaptures[e]||(this.cameraCaptures[e]=new y.ComponentEstimateCameraCapture(e)),this.cameraCaptures[e]}}t.FacadeComponentModel=k;class z extends S.DroneMotionComponentModelSample{constructor(e,t,n){super(e,t,n,{}),this.component=null}}t.FacadeComponentModelSample=z},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),r=n(72),a=n(7),s=n(48),u=n(74),l=n(3),c=n(8),m=n(4),d=n(1),h=n(2),p=n(19),f=n(54),g=n(23),y=n(96),C=n(27),v=n(20),S=n(70),b=n(14),w=n(15),x=n(104),M=n(35),O=n(36),D=n(44),P=n(41),T=n(43),F=n(42),E=n(37),_=i(n(276)),N=n(16);t.MapComponent=class extends r.ApproachableComponent{constructor(){super(...arguments),this.type=o.TypeName.MapComponent,this.cameraSpecification=m.Serialization.clone(a.Constants.MapCameraSpecification),this.direction=0,this.cameraMode=o.CameraMode.Photo,this.minCaptureInterval=a.Constants.MapComponentMinCaptureInterval,this.targetDistance=null,this.pattern=o.MapPattern.Normal,this.frontOverlap=a.Constants.MapComponentFrontOverlap,this.sideOverlap=a.Constants.MapComponentSideOverlap,this.gimbalOrientation=new s.Orientation3(a.Constants.MapComponentGimbalPitch),this.boundaryPoints=[]}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.pattern)return!1;if(this.direction=d.Common.parseFloat(e.direction),this.cameraMode=e.cameraMode||o.CameraMode.Photo,this.minCaptureInterval=d.Common.parseFloat(e.minCaptureInterval,a.Constants.MapComponentMinCaptureInterval),this.targetDistance=d.Common.parseFloat(e.targetDistance,null),this.pattern=e.pattern,this.frontOverlap=d.Common.parseFloat(e.frontOverlap,a.Constants.MapComponentFrontOverlap),this.sideOverlap=d.Common.parseFloat(e.sideOverlap,a.Constants.MapComponentSideOverlap),this.boundaryPoints=[],Array.isArray(e.boundaryPoints))for(let t of e.boundaryPoints){const e=m.Serialization.deserialize(t);if(!(e&&e instanceof u.MapComponentBoundaryPoint))return!1;this.boundaryPoints.push(e)}return this.cameraSpecification.applyJSON(e.cameraSpecification)&&this.gimbalOrientation.applyJSON(e.gimbalOrientation)}get subtitle(){return d.Common.joinNotEmpty([this.approachComponent.altitudeRange.altitude.toString(),h.Format.area(b.Geometry.polygonArea(this.boundaryPointOffsets.map(e=>e.toPoint2()).reverse())).toString(),this.pattern===o.MapPattern.Normal?"":h.Format.enum("MapPattern",this.pattern),Math.abs(this.gimbalOrientation.pitch-p.Convert.degreesToRadians(-90))<p.Convert.degreesToRadians(1)?"":h.Format.angle(this.gimbalOrientation.pitch,!1).toString(),h.Format.percent(this.frontOverlap).toString(),h.Format.percent(this.sideOverlap).toString()])}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.cameraMode=o.CameraMode.Unknown,t}get referenceOffsets(){return super.referenceOffsets.concat(this.boundaryPointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e);if(this.approachComponent.altitudeRange.altitude.system===o.AltitudeSystem.AGL){const n=this.model(e,!1,!1,!0);if(n){let e=null,i=n.firstSample;for(;i;){if(e){const n=i.current.distance-e.current.distance;(!i.next||n>=a.Constants.MapComponentTerrainFollowGranularity)&&(t.push(i.current.droneSpatial.coordinate),e=i)}else e=i,t.push(i.current.droneSpatial.coordinate);i=i.next}}}return t}node(e=null){const t=super.node(e),n=new u.MapComponentBoundaryPointsNode(t);return this.boundaryPoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${l.Strings.Common.new} ${l.Strings.MapComponentBoundaryPoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addBoundaryPoint(e,t)}}),t.children.push(n),t}centerCoordinate(e){return this.referenceCoordinate(e,c.Vector2.center(this.boundaryPointOffsets))}groundSampleDistance(e){let t=this.targetDistance;if(null===t){let n=this.approachComponent.altitudeRange.altitude;if(n.system===o.AltitudeSystem.MSL){const t=this.approachComponent.destinationReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);t&&(n=t)}if(t=n.value,this.gimbalOrientation.pitch>p.Convert.degreesToRadians(-89)){const e=Math.cos(Math.abs(p.Convert.degreesToRadians(-90)-this.gimbalOrientation.pitch));t=0===e?t:t/e}}return t=Math.max(t,a.Constants.MapComponentMinimumTargetDistance),this.cameraSpecification.groundSampleDistance(t)}resetApproachDestinationOffset(e){const t=this.resolveDroneMotionLimits(e,this.droneMotionLimits),n=this.segments(e);if(n){const e=n.ordered[0],i=e.a.toVector2().subtract(e.b.toVector2());this.approachComponent.destinationOffset=e.a.toVector2().add(new c.Vector2(i.direction,w.Kinematic.d4(0,t.horizontal.velocity.max,t.horizontal.acceleration.max)*a.Constants.MapComponentBaseDistanceMultiplier*1.5))}}addBoundaryPoint(e,t=null,n=null){return null===n?this.boundaryPoints.push(e):this.boundaryPoints.splice(n,0,e),t&&this.resetApproachDestinationOffset(t),e}updateBoundaryPointCoordinate(e,t,n){const i=this.boundaryPoints[e].offset,o=this.referenceCoordinate(n).offset(t);this.boundaryPoints[e].offset=o;let r=this.boundarySegments,a=e,s=0;for(const t of r){if(s!==a&&s!==d.Common.modSafe(a+1,r.length)&&s!==d.Common.modSafe(a-1,r.length)&&null!==f.Line2.intersection(r[a],t))return void(this.boundaryPoints[e].offset=i);s++}a=d.Common.modSafe(e-1,r.length),s=0;for(const t of r){if(s!==a&&s!==d.Common.modSafe(a+1,r.length)&&s!==d.Common.modSafe(a-1,r.length)&&null!==f.Line2.intersection(r[a],t))return void(this.boundaryPoints[e].offset=i);s++}this.resetApproachDestinationOffset(n)}removeBoundaryPoint(e,t){return this.boundaryPoints=this.boundaryPoints.filter(t=>t!==e),t&&this.resetApproachDestinationOffset(t),e}get boundaryPointOffsets(){return this.boundaryPoints.map(e=>e.offset)}get boundarySegments(){return this.boundaryPoints.map((e,t)=>new f.Line2(e.offset.toPoint2(),this.boundaryPoints[(t+1)%this.boundaryPoints.length].offset.toPoint2()))}boundaryBoundingBox(e=0){return v.Point2.boundingBox(this.boundaryPointOffsets.map(e=>e.toPoint2()),this.direction+e,1.5)}boundaryPointCoordinates(e){return this.boundaryPointOffsets.map(t=>this.referenceCoordinate(e,t))}boundaryPointCoordinate(e,t){return this.referenceCoordinate(e,this.boundaryPoints[t].offset)}estimate(e,t){const n=super.estimate(e,t),i=this.model(e,e.altitudeRequired,e.timeRequired,!1);return i&&(i.addToEstimate(n),n.cameraCaptures[0]=i.estimatedCapture),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(o.TypeName.MapComponent,()=>{const n=this.model(e);if(n){const e=new A(n.firstSample,n.captureInterval);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==o.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(0===t.progress&&this.cameraMode!==o.CameraMode.Unknown){n.commandComponents.push(new D.CommandComponent(new O.StopCaptureCameraCommand));const e=new P.ModeCameraCommand;if(e.mode=this.cameraMode,n.commandComponents.push(new D.CommandComponent(e)),this.cameraMode===o.CameraMode.Photo){const e=new T.PhotoModeCameraCommand;e.photoMode=o.CameraPhotoMode.Interval,n.commandComponents.push(new D.CommandComponent(e));const t=new F.PhotoIntervalCameraCommand;t.photoInterval=n.captureInterval,n.commandComponents.push(new D.CommandComponent(t))}}const{engagement:i}=e,r=n.sampleLinked;n.incrementTime(i.timeSinceLastExecution);let a=[],s=n.sampleLinked;for(;s&&s!==r;)s.current.commandComponent&&a.push(s.current.commandComponent),s=s.previous;a.reverse().forEach(e=>{n.commandComponents.push(e)});const u=[];for(const t of n.commandComponents){const n=t.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(u.push(t),t.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&t.required)return n.failed(n.error,i.currentDatetime)}return n.sampleLinked.next||0!==u.length?(this.addVelocityCommandsFromModel(e,n,!0),t.progress=n.progress,t):t.succeeded(i.currentDatetime)}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!0,n=!0,i=!0){let r=this.segments(e);if(!r)return null;if(this.pattern===o.MapPattern.Grid){let t=this.segments(e,Math.PI/2,d.Common.last(r.ordered).b);if(!t)return null;r.ordered=r.ordered.concat(t.ordered)}const s=m.Serialization.clone(this.resolveDroneMotionLimits(e,this.droneMotionLimits));let u=this.minCaptureInterval;if(this.cameraMode===o.CameraMode.Photo){const t=this.groundSampleDistance(e).height*this.cameraSpecification.image.height*(1-this.frontOverlap);for(;;){const e=w.Kinematic.v4(t,u);if(e<s.horizontal.velocity.max){s.horizontal.velocity.max=e;break}u+=1}}const l=new y.ComponentEstimateCameraCapture;let h=[],p=[];const f=[],v=w.Kinematic.d4(0,s.horizontal.velocity.max,s.horizontal.acceleration.max)*a.Constants.MapComponentBaseDistanceMultiplier;r.ordered.forEach(t=>{const n=t.a.toVector2(),i=t.b.toVector2(),r=i.subtract(n).direction,a=n.add(new c.Vector2(r+Math.PI,v)),m=i.add(new c.Vector2(r,v));if(f.push(a.toPoint2()),f.push(n.toPoint2()),f.push(i.toPoint2()),f.push(m.toPoint2()),this.cameraMode!==o.CameraMode.Unknown)switch(h.push(this.referenceCoordinate(e,n)),p.push(this.referenceCoordinate(e,i)),this.cameraMode){case o.CameraMode.Photo:l.photos+=Math.floor(w.Kinematic.t1(s.horizontal.velocity.max,i.subtract(n).magnitude)/u);break;case o.CameraMode.Video:l.videos++}});const P=b.Geometry.roundedCorners(f,v);if(!t&&!n&&!i){const t=[];P.forEach(e=>{e.forEach(e=>{t.push(e.toVector2())})});let n=0,i=null;return t.forEach((t,o)=>{if(0===o){const t=this.approachComponent.destinationCoordinate(e).toGeoSpatial();i=new S.LinkedValue(new L(t,s,{},n),i)}const r=this.referenceCoordinate(e,t).toGeoSpatial();i&&(n+=r.coordinate.distance(i.current.droneSpatial.coordinate)),i=new S.LinkedValue(new L(r,s,{},n),i)}),new I(i,u,l)}const T=[];P.forEach((t,n)=>{const i=[];0===n&&i.push(this.approachComponent.destinationCoordinate(e)),t.forEach(t=>{i.push(this.referenceCoordinate(e,t.toVector2()))}),T.push(i)});const F=new x.Path(T).samplesForMaxDistance(a.Constants.MapComponentSampleDistance);if(!F||0===F.length)return null;const A=this.approachComponent.destinationReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);if(t&&null===A)return null;const R=A||new N.Altitude;let k=null;for(const e of F){const t=new g.GeoSpatial;t.coordinate=e.coordinate,t.altitude.value=R.value,t.velocity.horizontal=new c.Vector2(e.direction,s.horizontal.velocity.max),t.orientation.yaw=t.velocity.horizontal.direction,t.orientation.yawReference=o.OrientationZReference.North,k=new S.LinkedValue(new L(t,s,{0:this.gimbalOrientation.asOptional()},e.distance),k)}if(!t&&!n)return new I(k,u,l);if(this.elevations&&k&&this.approachComponent.altitudeRange.altitude.system===o.AltitudeSystem.AGL){const t=k.current.droneSpatial.coordinate,n=new _.default(this.elevations.map(e=>e.coordinate.offset(t).toPoint2()),e=>e.x,e=>e.y);let i=null,r=k.first;for(;r;){let s=!1;if(!i||r.current.distance-i.current.distance>.98*a.Constants.MapComponentTerrainFollowGranularity){const u=r.current.droneSpatial.coordinate.offset(t).toPoint2(),l=n.within(u.x,u.y,a.Constants.ComponentElevationTolerance);if(l&&l.length>0&&this.elevations){const t=e.referencedAltitude(this.approachComponent.altitudeRange.altitude,this.elevations[l[0]]).toSystem(o.AltitudeSystem.ATL);t&&(r.current.droneSpatial.altitude=t,i=r,s=!0)}}s||(r.current.droneSpatial.altitude.system=o.AltitudeSystem.AGL),r=r.next}for(i=null,r=k.first;r;){const e=r.current.droneSpatial.altitude;if(e.system===o.AltitudeSystem.ATL){let t=r.previous;const n=i?i.current.droneSpatial.altitude:R,a=i?i.current.distance:0,s=r.current.distance;for(;t&&t.current.droneSpatial.altitude.system===o.AltitudeSystem.AGL;)t.current.droneSpatial.altitude=n.interpolate(e,(e,n)=>E.Interpolation.sigmoid(e,n,((t?t.current.distance:0)-a)/(s-a),1.5)),t=t.previous;i=r}r=r.next}for(r=k.last;r&&r.current.droneSpatial.altitude.system===o.AltitudeSystem.AGL;)r.current.droneSpatial.altitude=i?i.current.droneSpatial.altitude:R,r=r.previous}if(!n)return new I(k,u,l);if(C.DroneMotionComponentModel.updateSamplesContrainVelocities(k,a.Constants.MapComponentSampleDistance),k){let e=!0;h=h.reverse(),p=p.reverse();for(const t of k.list){if(0===h.length&&0===p.length)break;if(t.previous){const n=d.Common.last(e?h:p),i=t.current.droneSpatial.coordinate.distance(n);i<10*a.Constants.MapComponentSampleDistance&&i>t.previous.current.droneSpatial.coordinate.distance(n)&&(t.previous.current.commandComponent=new D.CommandComponent(e?new M.StartCaptureCameraCommand:new O.StopCaptureCameraCommand),e?h.pop():p.pop(),e=!e)}}}return new I(k,u,l)}segments(e,t=0,n=null){if(this.boundaryPoints.length<3)return null;const i=this.boundarySegments,o=this.boundaryBoundingBox(t),r=this.groundSampleDistance(e),a=o.bottomRight.toVector2().subtract(o.bottomLeft.toVector2()),s=Math.ceil(a.magnitude/(r.width*this.cameraSpecification.image.width*(1-this.sideOverlap))),u=a.magnitude/s,l=[];for(let e=0;e<s;e++){const t=new c.Vector2(a.direction,u*e+u/2),n=new f.Line2(o.bottomLeft.toVector2().add(t).toPoint2(),o.topLeft.toVector2().add(t).toPoint2()),r=[];i.forEach(e=>{const t=f.Line2.intersection(e,n);t&&r.push(t)});for(let e=0;e+1<r.length;e+=2)l.push(new f.Line2(r[e],r[e+1]))}const m=[];if(l.length>0){let e=n||l[0].b;for(;l.length>0;){l.sort((t,n)=>Math.min(e.distance(n.a),e.distance(n.b))-Math.min(e.distance(t.a),e.distance(t.b)));const t=l.pop();t&&(e.distance(t.a)<e.distance(t.b)?(m.push(new f.Line2(t.a,t.b)),e=t.b):(m.push(new f.Line2(t.b,t.a)),e=t.a))}}return 0===m.length?null:{ordered:m,baseDistance:u}}};class A extends C.DroneMotionComponentModelData{constructor(e,t){super(e),this.commandComponents=[],this.captureInterval=t}}t.MapComponentModelData=A;class I extends C.DroneMotionComponentModel{constructor(e,t,n){super(e),this.captureInterval=t,this.estimatedCapture=n}}t.MapComponentModel=I;class L extends C.DroneMotionComponentModelSample{constructor(e,t,n,i){super(e,t,n,{}),this.commandComponent=null,this.distance=i}}t.MapComponentModelSample=L},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(8),r=n(72),a=n(1),s=n(3),u=n(2),l=n(27),c=n(70),m=n(7),d=n(21),h=n(61),p=n(62),f=n(16),g=n(37),y=n(4),C=n(64),v=n(63);t.OrbitComponent=class extends r.ApproachableComponent{constructor(){super(...arguments),this.type=i.TypeName.OrbitComponent,this.centerOffset=new o.Vector2,this.direction=i.OrbitDirection.Clockwise,this.circumference=2*Math.PI,this.finalAltitude=null,this.finalRadius=null,this.droneOrientation=null,this.gimbalOrientations=null}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.direction)return!1;if(!this.centerOffset.applyJSON(e.centerOffset))return!1;if(this.direction=e.direction||this.direction,this.circumference=a.Common.parseFloat(e.circumference,2*Math.PI),this.finalAltitude=null,e.finalAltitude&&(this.finalAltitude=new f.Altitude,!this.finalAltitude.applyJSON(e.finalAltitude)))return!1;if(this.finalRadius=a.Common.parseFloat(e.finalRadius,null),e.droneOrientation){if(this.droneOrientation=new d.Orientation3Optional,!this.droneOrientation.applyJSON(e.droneOrientation))return!1}else this.droneOrientation=null;if(e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new d.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null;return!0}get subtitle(){return a.Common.joinNotEmpty([this.approachComponent.altitudeRange.altitude.toString(),s.Strings.formatString(s.Strings.OrbitComponent.subtitle,u.Format.angle(this.circumference,!1).toString(),u.Format.enum("OrbitDirection",this.direction),u.Format.distance(this.radius).toString())])}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.droneOrientation=new d.Orientation3Optional,t.droneOrientation.z=0,t.droneOrientation.zReference=i.OrientationZReference.Path,e}get referenceOffsets(){return[this.centerOffset].concat(super.referenceOffsets)}get radius(){return Math.abs(this.approachComponent.destinationOffset.subtract(this.centerOffset).magnitude)}set radius(e){const t=this.approachComponent.destinationOffset.subtract(this.centerOffset);t.magnitude=e,this.approachComponent.destinationOffset=this.centerOffset.add(t)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.finalAltitude&&this.finalAltitude.system===i.AltitudeSystem.AGL&&t.push(this.finalCoordinate(e)),t}centerCoordinate(e){return this.referenceCoordinate(e,this.centerOffset)}finalCoordinate(e){const t=this.approachComponent.destinationCoordinate(e),n=this.centerCoordinate(e),o=n.offset(t);return o.direction+=(this.direction===i.OrbitDirection.Clockwise?1:-1)*this.circumference,this.finalRadius&&(o.magnitude=this.finalRadius),n.geoCoordinate(o)}finalReferencedAltitude(e){return this.finalAltitude?this.referencedAltitude(e,this.finalAltitude,this.finalCoordinate(e)):null}alignment(e){const t=this.model(e,!1,!0);return t?{droneOrientation:t.firstSample.current.droneSpatial.orientation.asOptional(),gimbalOrientations:t.firstSample.current.gimbalOrientations}:null}estimate(e,t){const n=super.estimate(e,t),i=this.model(e,!e.timeRequired);return i&&i.addToEstimate(n),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(i.TypeName.OrbitComponent,()=>{const n=this.model(e);if(n){const e=new l.DroneMotionComponentModelData(n.firstSample);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==i.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(!this.aligned(e))return t;const{engagement:o}=e;return n.incrementTime(o.timeSinceLastExecution),n.sampleLinked.next?(this.addVelocityCommandsFromModel(e,n,!1),t.progress=n.progress,t):t.succeeded(o.currentDatetime)}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!1,n=!1){const r=this.approachComponent.destinationCoordinate(e),a=this.approachComponent.destinationReferencedAltitude(e).toSystem(i.AltitudeSystem.ATL);if(null===a)return null;const s=this.finalReferencedAltitude(e),u=this.resolveDroneMotionLimits(e,this.droneMotionLimits);let f=null;const S=this.centerCoordinate(e),b=S.offset(r),w=b.magnitude,x=Math.max(1,Math.ceil(this.circumference*b.magnitude/m.Constants.OrbitComponentSampleDistance)),M=this.direction===i.OrbitDirection.Clockwise?1:-1;for(let e=0;e<=x;e++){let r={};b.direction+=M*this.circumference*(1/x),this.finalRadius&&(b.magnitude=g.Interpolation.linear(w,this.finalRadius,e/x));const m=S.geoCoordinate(b).toGeoSpatial();let O=a.value;if(this.finalAltitude){const t=s?s.toSystem(i.AltitudeSystem.ATL):null;if(null===t)return null;O=g.Interpolation.linear(O,t.value,e/x)}if(m.altitude.value=O,!t){let e=b.direction+M*(Math.PI/2);f&&(e=f.current.droneSpatial.coordinate.bearing(m.coordinate)),m.velocity.horizontal=new o.Vector2(e,u.horizontal.velocity.max);const t=new C.OrientationReferenceSources(new v.OrientationXReferenceSources,new p.OrientationZReferenceSources(e,e,e));if(f&&(t.x.path=h.Gimbal.pitch(m.coordinate.distance(f.current.droneSpatial.coordinate),f.current.droneSpatial.altitude.value-m.altitude.value)),this.droneOrientation?(m.orientation.apply(this.droneOrientation),m.orientation.convertReferences(t)):(m.orientation.yaw=m.coordinate.bearing(S),m.orientation.yawReference=i.OrientationZReference.North),this.gimbalOrientations)r=this.gimbalOrientations;else{const e=new d.Orientation3Optional;e.pitch=h.Gimbal.pitch(b.magnitude,m.altitude.value),e.roll=0,e.yaw=m.orientation.yaw,e.yawReference=m.orientation.yawReference,r[0]=e}Object.keys(r).forEach(e=>{r[e]=y.Serialization.clone(r[e]),r[e].convertReferences(t)})}const D=new l.DroneMotionComponentModelSample(m,u,r,{});if(f=null===f?new c.LinkedValue(D):f.insertAfter(D),n)break}return t||n||l.DroneMotionComponentModel.updateSamplesContrainVelocities(f,m.Constants.OrbitComponentSampleDistance),new l.DroneMotionComponentModel(f)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(8),o=n(4),r=n(0),a=n(14),s=n(72),u=n(3),l=n(2),c=n(1),m=n(75),d=n(7),h=n(76),p=n(104),f=n(208),g=n(21),y=n(27),C=n(65);t.PathComponent=class extends s.ApproachableComponent{constructor(){super(...arguments),this.type=r.TypeName.PathComponent,this.cornering=r.PathCornering.Intersect,this.cornerRadius=d.Constants.PathComponentCornerRadius,this.waypoints=[],this.markers=[]}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.cornering)return!1;if(this.cornering=e.cornering,this.cornerRadius=c.Common.parseFloat(e.cornerRadius,d.Constants.PathComponentCornerRadius),this.waypoints=[],Array.isArray(e.waypoints))for(let t of e.waypoints){const e=o.Serialization.deserialize(t);if(!(e&&e instanceof m.PathComponentWaypoint))return!1;this.waypoints.push(e)}if(this.markers=[],Array.isArray(e.markers))for(let t of e.markers){const e=o.Serialization.deserialize(t);if(!(e&&e instanceof h.PathComponentMarker))return!1;this.markers.push(e)}return!0}get subtitle(){return c.Common.joinNotEmpty([`${l.Format.integer(this.waypoints.length)} ${1===this.waypoints.length?u.Strings.PathComponentWaypoint.name:u.Strings.PathComponentWaypoint.multiple}`,0===this.markers.length?"":`${l.Format.integer(this.markers.length)} ${1===this.markers.length?u.Strings.PathComponentMarker.name:u.Strings.PathComponentMarker.multiple}`,0===this.pointsOfInterest.length?"":`${l.Format.integer(this.pointsOfInterest.length)} ${1===this.pointsOfInterest.length?u.Strings.PointOfInterest.name:u.Strings.PointOfInterest.multiple}`])||super.subtitle}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.markers.forEach(e=>{if(e.pointOfInterestID=null,e.droneOrientation=null,e.gimbalOrientations=null,e.component){const t=e.component.verification;e.component=t||null}}),t}get pointsOfInterestEnabled(){return!0}get pointsOfInterestReferences(){return super.pointsOfInterestReferences.concat(this.markers.filter(e=>e.pointOfInterestID))}get waypointOffsets(){return this.waypoints.map(e=>e.offset)}get referenceOffsets(){return super.referenceOffsets.concat(this.waypointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e),n=this.markerCoordinates(e);return n&&this.markers.forEach((e,i)=>{e.altitude&&e.altitude.system===r.AltitudeSystem.AGL&&t.push(n[i])}),t}node(e=null){const t=super.node(e),n=new m.PathComponentWaypointsNode(t);this.waypoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${u.Strings.Common.new} ${u.Strings.PathComponentWaypoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addWaypoint(e,t)}}),t.children.push(n);const i=new h.PathComponentMarkersNode(t);return this.markers.forEach((e,t)=>{i.children.push(e.node(i,t))}),i.appends.push({title:`${u.Strings.Common.new} ${u.Strings.PathComponentMarker.name}`,tooltip:null,execute:e=>{this.addMarker(e)}}),t.children.push(i),t}centerCoordinate(e){return this.referenceCoordinate(e,i.Vector2.center(this.waypointOffsets.concat([this.approachComponent.destinationOffset])))}waypointCoordinate(e,t){return this.referenceCoordinate(e,this.waypoints[t].offset)}waypointCoordinates(e){return this.waypointOffsets.map(t=>this.referenceCoordinate(e,t))}addWaypoint(e,t=null){if(t&&this.markers.length>0){const n=this.markerCoordinates(t);if(n){this.waypoints.push(e);const i=this.path(t);return i&&(n.forEach((e,t)=>{this.markers[t].distance=i.nearestDistance(e)}),this.orderMarkers()),e}}return this.waypoints.push(e),e}markerCoordinates(e){const t=this.path(e);return t?t.samplesForDistances(this.markers.map(e=>e.distance)).map(e=>e.coordinate):null}addMarker(e){return this.markers.push(e),this.orderMarkers(),e}orderMarkers(){this.markers.sort((e,t)=>e.distance-t.distance)}path(e){const t=[this.approachComponent.destinationOffset].concat(this.waypointOffsets).map(e=>e.toPoint2());let n=null;switch(this.cornering){case r.PathCornering.Intersect:n=a.Geometry.cardinalSplinePoint2(t);break;case r.PathCornering.Rounded:n=a.Geometry.roundedCorners(t,[0].concat(this.waypoints.map(e=>e.cornerRadius||this.cornerRadius)).concat([0]))}return null!==n&&n.length>0?new p.Path(n.map(t=>t.map(t=>this.referenceCoordinate(e,t.toVector2()))).filter(e=>{for(const t of e)if(null===t)return!1;return!0})):null}alignment(e){const t=this.model(e,!1,!0);return t?{droneOrientation:t.firstSample.current.droneSpatial.orientation.asOptional(),gimbalOrientations:t.firstSample.current.gimbalOrientations}:null}estimate(e,t){const n=super.estimate(e,t);if(e.altitudeRequired||e.timeRequired){const t=this.model(e,!e.timeRequired);if(t){t.addToEstimate(n);let i=0;const o=t.firstSample.last.current.time;this.markers.forEach(r=>{if(r.component){let a=t.firstSample;for(;a.next&&r.distance>a.next.current.pathDistance;)a=a.next;const s=r.component.estimate(e,a.current.droneSpatial),u=o-a.current.time;s.time>u&&(i=Math.max(i,s.time-u)),s.timeConcurrent=!0,n.children.push(s)}}),i>0&&(n.time+=i)}}else{const t=this.path(e);t&&t.segments.length>0&&n.droneSpatials.push(...t.coordinates.map(e=>e.toGeoSpatial()))}return n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(r.TypeName.PathComponent,()=>{const n=this.model(e);if(n){const e=new y.DroneMotionComponentModelData(n.firstSample);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==r.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==r.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(!this.aligned(e))return t;const{engagement:i}=e;n.incrementTime(i.timeSinceLastExecution);const o=[];for(const a of this.markers)if((null===n.sampleLinked.next||a.distance<=n.sampleLinked.current.pathDistance)&&a.component){const n=a.component.execute(e);if(n.status===r.ComponentExecutionStatus.Pending||n.status===r.ComponentExecutionStatus.Executing){if(o.push(a),a.component.exclusiveExecution)break}else if(n.status===r.ComponentExecutionStatus.Failed&&a.component.required)return t.failed(n.error,i.currentDatetime)}return n.sampleLinked.next||0!==o.length?(this.addVelocityCommandsFromModel(e,n,!1),t.progress=n.progress,t):t.succeeded(i.currentDatetime)}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!1,n=!1){const i=this.path(e);if(!i)return null;const o=this.approachComponent.destinationReferencedAltitude(e).toSystem(r.AltitudeSystem.ATL);if(null===o)return null;let a=new f.PathComponentModelParameterAltitude(o.value),s=new f.PathComponentModelParameterMotionLimits6(this.resolveDroneMotionLimits(e)),u=null,l=new g.Orientation3Optional;l.yaw=0,l.yawReference=r.OrientationZReference.Path,u=new f.PathComponentModelParameterOrientation3Optional(l);let c={},m=null;const h=this.markerCoordinates(e);return h?(this.markers.forEach((t,n)=>{if(t.altitude){const i=this.referencedAltitude(e,t.altitude,h[n]).toSystem(r.AltitudeSystem.ATL);i&&(a=new f.PathComponentModelParameterAltitude(i.value,t,a))}if(t.droneMotionLimits&&(s=new f.PathComponentModelParameterMotionLimits6(this.resolveDroneMotionLimits(e,t.droneMotionLimits),t,s)),t.droneOrientation&&(u=new f.PathComponentModelParameterOrientation3Optional(t.droneOrientation,t,0===t.distance?null:u)),t.pointOfInterestID){const n=this.pointOfInterestCoordinateByID(e,t.pointOfInterestID),i=this.pointOfInterestReferencedAltitudeByID(e,t.pointOfInterestID),o=i?i.toSystem(r.AltitudeSystem.ATL):null;n&&null!==o&&(m=new f.PathComponentModelParameterPointOfInterest(new C.GeoLocation(n,o),t,m))}if(t.gimbalOrientations)for(const e of Object.keys(t.gimbalOrientations))c[e]=new f.PathComponentModelParameterOrientation3Optional(t.gimbalOrientations[e],t,c[e])}),f.PathComponentModel.generate(e,new f.PathComponentModelParameters(this.reference,t?d.Constants.PathComponentModelSampleDistancePosition:d.Constants.PathComponentModelSampleDistance,i,o.value,a,s,u,c,m),t,n)):null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(70),o=n(21),r=n(82),a=n(62),s=n(23),u=n(4),l=n(27),c=n(0),m=n(37),d=n(1),h=n(8),p=n(61),f=n(64),g=n(85),y=n(63);class C extends l.DroneMotionComponentModel{static generate(e,t,n,i){const o=C.createSamples(t,n,i);return o?(n||i||(C.insertSamplesAltitudeChanges(e,o,t),l.DroneMotionComponentModel.updateSamplesContrainVelocities(o,t.maxSampleDistance)),new C(o)):null}static createSamples(e,t,n){let r=null;const l=e.path.samplesForMaxDistance(e.maxSampleDistance);if(!l||0===l.length)return null;if(t)return l.forEach(t=>{e.advanceToDistance(t.distance);const n=new s.GeoSpatial;n.coordinate=t.coordinate,n.altitude.value=e.altitude.valueInterpolated(t.distance),r=new i.LinkedValue(new v(t.distance,n,e.droneMotionLimits.current.value),r)}),r;for(const t of l){e.advanceToDistance(t.distance);const l=new s.GeoSpatial;l.coordinate=t.coordinate,l.altitude.value=e.altitude.valueInterpolated(t.distance),l.velocity.horizontal=new h.Vector2(t.direction,e.droneMotionLimits.valueInterpolated(t.distance).horizontal.velocity.max);const m={},d=new f.OrientationReferenceSources(new y.OrientationXReferenceSources,new a.OrientationZReferenceSources(l.velocity.horizontal.direction,t.direction,t.direction));if(r&&(d.x.path=p.Gimbal.pitch(t.distance-r.current.pathDistance,r.current.droneSpatial.altitude.value-l.altitude.value)),e.pointOfInterest){const n=e.pointOfInterestInterpolates?e.pointOfInterest.valueInterpolated(t.distance):e.pointOfInterest.current.value;l.orientation.yaw=l.coordinate.bearing(n.coordinate),l.orientation.yawReference=c.OrientationZReference.North,d.z.heading=l.orientation.yaw;const i=new o.Orientation3Optional,r=l.coordinate.distance(n.coordinate),a=l.altitude.value-n.altitude.value;i.pitch=p.Gimbal.pitch(r,a),i.roll=0,i.yaw=l.orientation.yaw,i.yawReference=l.orientation.yawReference,m[0]=i}e.droneOrientation&&(e.droneOrientationInterpolates?l.orientation.apply(e.droneOrientation.valueInterpolated(t.distance,d)):(l.orientation.apply(e.droneOrientation.current.value),l.orientation.convertReferences(d)));for(const n of e.gimbalOrientations)e.gimbalOrientationInterpolates(n.channel)?m[n.channel]=n.orientation.valueInterpolated(t.distance,d):(m[n.channel]=u.Serialization.clone(n.orientation.current.value),m[n.channel].convertReferences(d));if(r=new i.LinkedValue(new v(t.distance,l,e.droneMotionLimits.current.value,m),r),n)break}return r}static insertSamplesAltitudeChanges(e,t,n){let i=t.first;for(;i.next;){const e=i.next.current.droneSpatial.altitude.value-i.current.droneSpatial.altitude.value;if(Math.abs(e)>n.maxSampleDistance){const t=Math.ceil(Math.abs(e)/n.maxSampleDistance),o=i,r=i.next;for(let e=1;e<t;e++)i=i.insertAfter(o.current.interpolate(r.current,e/t));i=r}else i=i.next}i=t.first;const o=n.approachAltitudeATL,r=(i.current.droneSpatial.altitude.value<o?1:-1)*n.maxSampleDistance;for(;Math.abs(i.current.droneSpatial.altitude.value-o)>n.maxSampleDistance;)(i=i.insertBefore(u.Serialization.clone(i.current))).current.droneSpatial.altitude.value+=r,i.current.droneSpatial.velocity.horizontal=new h.Vector2}}t.PathComponentModel=C;class v extends l.DroneMotionComponentModelSample{constructor(e=0,t=new s.GeoSpatial,n=new r.MotionLimits6,i={},o={}){super(t,n,i,o),this.type=c.TypeName.PathComponentModelSample,this.pathDistance=e,this.droneMotionLimits=n}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(!!this.droneMotionLimits.applyJSON(e.droneMotionLimits)&&(this.pathDistance=d.Common.parseFloat(e.pathDistance),!0))}interpolate(e,t,n){const i=super.interpolate(e,t,n);return new v(m.Interpolation.linear(this.pathDistance,e.pathDistance,t),i.droneSpatial,i.droneMotionLimits,i.gimbalOrientations,i.gimbalVelocities)}}t.PathComponentModelSample=v;class S{constructor(e,t=null){this.value=e,this.marker=t}get distance(){return this.marker?this.marker.distance:0}}t.PathComponentModelParameter=S;class b extends i.LinkedValue{constructor(e,t=null,n=null){super(new S(e,t),null!==t&&t.distance>0?n:null)}get nextMarker(){return this.next?this.next.current.marker:null}interpolationPercentForDistance(e){return this.next&&this.next.current.distance>this.current.distance?(e-this.current.distance)/(this.next.current.distance-this.current.distance):0}}t.PathComponentModelParameterLinked=b;t.PathComponentModelParameterAltitude=class extends b{valueInterpolated(e){return this.next&&this.nextMarker?this.nextMarker.interpolation.interpolate(this.current.value,this.next.current.value,this.interpolationPercentForDistance(e)):this.current.value}};t.PathComponentModelParameterOrientation3Optional=class extends b{valueInterpolated(e,t){if(this.next&&this.nextMarker){const n=this.nextMarker.interpolation,i=this.interpolationPercentForDistance(e);return this.current.value.interpolate(this.next.current.value,t,new g.OrientationReferenceTargets,(e,t)=>n.interpolate(e,t,i))}return this.current.value}};t.PathComponentModelParameterMotionLimits6=class extends b{valueInterpolated(e){if(this.next&&this.nextMarker){const t=this.nextMarker.interpolation,n=this.interpolationPercentForDistance(e);return this.current.value.interpolate(this.next.current.value,(e,i)=>t.interpolate(e,i,n))}return this.current.value}};t.PathComponentModelParameterPointOfInterest=class extends b{valueInterpolated(e){const t=this.current.value;if(this.next&&this.nextMarker){const n=this.next.current.value,i=u.Serialization.clone(t),o=this.nextMarker.interpolation,r=this.interpolationPercentForDistance(e);return i.coordinate=t.coordinate.interpolate(n.coordinate,e=>o.interpolate(0,e,r)),i.altitude=i.altitude.interpolate(n.altitude,(e,t)=>o.interpolate(e,t,r)),i}return t}};t.PathComponentModelParameters=class{constructor(e,t,n,i,o,r,a,s,u){this._distance=0,this.reference=e,this.maxSampleDistance=t,this.path=n,this.approachAltitudeATL=i,this._altitude=o,this._droneMotionLimits=r,this._droneOrientation=a,this._gimbalOrientations=s,this._pointOfInterest=u,this.resetToFirst()}resetToFirst(){this._distance=0,this._altitude=this._altitude.first,this._droneMotionLimits=this._droneMotionLimits.first,this._droneOrientation=this._droneOrientation.first;for(const e of Object.keys(this._gimbalOrientations))this._gimbalOrientations[e]=this._gimbalOrientations[e].first;return this._pointOfInterest&&(this._pointOfInterest=this._pointOfInterest.first),this}advanceToDistance(e){this._distance=e,this._altitude.next&&this._altitude.next.current.distance<=e&&(this._altitude=this._altitude.next),this._droneMotionLimits.next&&this._droneMotionLimits.next.current.distance<=e&&(this._droneMotionLimits=this._droneMotionLimits.next),this._droneOrientation.next&&this._droneOrientation.next.current.distance<=e&&(this._droneOrientation=this._droneOrientation.next);for(const t of Object.keys(this._gimbalOrientations)){const n=this._gimbalOrientations[t];n.next&&n.next.current.distance<=e&&(this._gimbalOrientations[t]=n.next)}return this._pointOfInterest&&this._pointOfInterest.next&&this._pointOfInterest.next.current.distance<=e&&(this._pointOfInterest=this._pointOfInterest.next),this}get distance(){return this._distance}get altitude(){return this._altitude}get droneMotionLimits(){return this._droneMotionLimits}get droneOrientation(){const e=this.pointOfInterest;return e&&this._droneOrientation.current.distance<=e.current.distance?null:this._droneOrientation}get droneOrientationInterpolates(){const e=this.pointOfInterestNext;return null!==this._droneOrientation.next&&(null===e||this._droneOrientation.next.current.distance<e.current.distance)}get gimbalOrientations(){const e=[];for(const t of Object.keys(this._gimbalOrientations)){const n=this.gimbalOrientation(parseInt(t));n&&e.push({channel:parseInt(t),orientation:n})}return e}gimbalOrientation(e){const t=this._gimbalOrientations[e];if(this.distance<t.current.distance)return null;if(0===e){const e=this.pointOfInterest;if(e&&t&&t.current.distance<=e.current.distance)return null}return t}gimbalOrientationInterpolates(e){const t=this._gimbalOrientations[e];if(t&&t.next){if(0===e){const e=this.pointOfInterestNext;return null===e||t.next.current.distance<e.current.distance}return!0}return!1}get orientationDistanceCurrent(){const e=this._droneOrientation.current.distance,t=this._gimbalOrientations[0];return t&&t.current.distance<e?t.current.distance:e}get orientationDistanceNext(){let e=null;this._droneOrientation.next&&(e=this._droneOrientation.next.current.distance);const t=this._gimbalOrientations[0];return t&&t.next&&(e=null===e?t.next.current.distance:Math.min(e,t.next.current.distance)),e}get pointOfInterest(){return this._pointOfInterest&&this._distance>=this._pointOfInterest.current.distance&&this._pointOfInterest.current.distance>=this.orientationDistanceCurrent?this._pointOfInterest:null}get pointOfInterestInterpolates(){return null!==this.pointOfInterestNext}get pointOfInterestNext(){if(this._pointOfInterest&&this._pointOfInterest.next){const e=this.orientationDistanceNext;if(null===e||this._pointOfInterest.next.current.distance<e)return this._pointOfInterest}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(7),r=n(2),a=n(1),s=n(69),u=n(4),l=n(15),c=n(26),m=n(40);t.RotationComponent=class extends s.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.RotationComponent,this.direction=i.RotationDirection.Clockwise,this.time=0,this.distance=o.Constants.RotationComponentDistance}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||(this.direction=e.direction||this.direction,this.time=a.Common.parseFloat(e.time,0),this.distance=a.Common.parseFloat(e.distance,o.Constants.RotationComponentDistance),0))}get subtitle(){return`${this.time>0?r.Format.timeElapsed(this.time):r.Format.angle(this.distance,!1).toString()} ${r.Format.enum("RotationDirection",this.direction)}`}achieved(e){return 1===e.execution.getComponentState(this).progress}model(e){const t=this.resolveDroneMotionLimits(e),n=this.direction===i.RotationDirection.Clockwise?1:-1;if(this.time>0)return{time:this.time,distance:n*l.Kinematic.d1(t.rotational.velocity.max,this.time)};const o=n*this.distance;return{time:t.timeLineRotational(this.distance),distance:o}}estimate(e,t){const n=super.estimate(e,t),i=u.Serialization.clone(t),o=this.model(e);i.orientation.yaw+=o.distance,n.droneSpatials.push(i);let r=0;if(e.timeRequired){const e=n.time;n.time+=o.time,r=n.time-e;const t=n.children.find(e=>e.component===this.immediateComponent);t&&t.totalTime>n.time&&(n.time+=t.totalTime-n.time,r=t.totalTime),i.updated.increment(n.time-e)}if(this.achievedComponent){const o=u.Serialization.clone(i);o.updated.value=new Date(t.updated.value.getTime()+1e3*r);const a=this.achievedComponent.estimate(e,o);n.children.push(a)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n,engagement:o}=e,r=n.projectSpatial(e.engagement.currentDatetime),a=this.resolveDroneMotionLimits(e),s=t.cachedData(i.TypeName.RotationComponent,()=>{const t=this.model(e);return new d(u.Serialization.clone(n.spatial),t.time,t.distance)});this.time>0?t.progress+=o.timeSinceLastExecution/s.time:(t.progress+=o.timeSinceLastExecution*s.velocityPrevious/s.distance,t.progress>.999&&(t.progress=1)),t.progress=Math.min(1,t.progress);const l=new c.Velocity6;if(s.time*(1-t.progress)>0){const n=s.distance*(1-t.progress);m.VelocityDroneCommand.updateBoundedVelocityRotational(l,n,a,this.referenceSpatial(e).velocity.rotational)}const h=r.coordinate.offset(s.startSpatial.coordinate),p=new c.Velocity6;return m.VelocityDroneCommand.updateBoundedVelocityHorizontal(p,h.direction,h.magnitude,a),l.horizontal=l.horizontal.add(p.horizontal),s.velocityPrevious=this.addDroneVelocityCommand(e,l).velocity.rotational,t}};class d{constructor(e,t,n){this.velocityPrevious=0,this.startSpatial=e,this.time=t,this.distance=n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(0),r=n(7),a=n(1),s=n(2),u=n(10),l=n(3);t.WaitComponent=class extends i.SubComponent{constructor(){super(...arguments),this.type=o.TypeName.WaitComponent,this.time=r.Constants.WaitComponentTime}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||(this.time=a.Common.parseFloat(e.time,r.Constants.WaitComponentTime),0))}get subtitle(){return s.Format.timeElapsed(this.time)}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!0}estimate(e,t){const n=super.estimate(e,t);return n.time+=this.time,n}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;const{engagement:n}=e;return this.time>0&&(t.progress=Math.min(1,t.progress+n.timeSinceLastExecution/this.time),t.progress<1)?(t.messages.push(new u.Message(l.Strings.WaitComponent.messages.waiting.title,s.Format.number(this.time*t.progress))),t):(t.succeeded(n.currentDatetime),t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0),r=n(12),a=n(10);t.Disengagement=class extends i.Identifiable{constructor(e=new a.Message){super(),this.type=o.TypeName.Disengagement,this.disengaged=new r.Datetime,this.reason=e}applyJSON(e){return!(!super.applyJSON(e)&&e.type!==this.type||!this.disengaged.applyJSON(e.disengaged)||!this.reason.applyJSON(e.reason))}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))(function(o,r){function a(e){try{u(i.next(e))}catch(e){r(e)}}function s(e){try{u(i.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((i=i.apply(e,t||[])).next())})},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(46),a=n(29),s=n(1),u=n(40),l=n(51),c=n(0),m=n(7),d=n(5),h=n(26),p=n(59),f=n(11),g=n(41),y=n(43),C=n(119),v=n(58),S=n(87),b=n(60),w=n(35),x=n(36),M=n(12),O=n(88),D=n(10),P=n(3),T=n(52),F=n(14),E=n(42),_=n(86),N=n(121),A=n(4),I=o(n(150));t.Simulation=class{constructor(e=new a.GeoCoordinate,t){this.updateInterval=m.Constants.SimulationUpdateInterval,this.missionExecuteIntervalTarget=m.Constants.MissionExecuteIntervalTarget,this.preventThreadStarvation=!0,this.droneMotionLimits=m.Constants.DroneMotionLimits.Max(),this.rate=1,this.started=null,this.millisSinceStart=0,this.mission=null,this.timeline=null,this.cameraFilesByChannel={},this.executionListeners=[],this.user=new l.User,this.device=new T.Device,this.device.spatial.coordinate=e,this.drone=new r.Drone,this.drone.takeoffCoordinate=e,this.drone.spatial.coordinate=e,t&&this.executionListeners.push(t)}get currentDatetime(){return new M.Datetime(this.started?new Date(this.started.value.getTime()+this.millisSinceStart):new Date)}get engaged(){return null!==this.mission&&this.mission.engaged&&null===this.mission.disengagement}start(){this.started||(this.millisSinceStart=0,this.started=this.currentDatetime,this.execute())}loadMission(e,t=null){this.engaged||(this.mission=e,this.timeline=t)}addExecutionListener(e){this.executionListeners.push(e)}engage(e,t=null){this.start(),this.engaged||(e&&this.loadMission(e,t),this.mission&&this.mission.engage(this.user,this.device,this.drone,this.currentDatetime))}disengage(e){this.engaged&&this.mission&&this.mission.disengage(this.drone,e)}stop(){this.disengage(new D.Message(P.Strings.Simulation.messages.disengageStop)),this.started=null}generateCameraFile(e,t,n=1){const i=this.cameraFilesByChannel[e.channel]||[],o=e.settings.mode===c.CameraMode.Video?e.settings.videoFileFormat:e.settings.photoFileFormat;let r=Math.floor(Math.random()*(5e6+1)+5e6);e.settings.mode===c.CameraMode.Video&&(r*=n);const a=this.drone.createCameraFile(e.channel,`SIM_${I.default(i.length+1).format("0000")}.${o.toUpperCase()}`,r,t);return i.push(a),this.cameraFilesByChannel[e.channel]=i,this.mission&&this.engaged&&this.mission.execution.addCameraFile(e.channel,a),this.timeline&&this.timeline.addCapture(e,a,n),a}execute(){return i(this,void 0,void 0,function*(){let e=new u.VelocityDroneCommand,t={},n=[],i={},o={},r={},a=0;for(;this.started;){const l=this.currentDatetime,g=(new Date).getTime(),y=l.elapsedTime(this.drone.spatial.updated);if(y>=this.updateInterval){if(this.drone.spatial.velocity=u.VelocityDroneCommand.boundedVelocity(this.drone.spatial.velocity,e.velocity,y,this.droneMotionLimits),this.drone.spatial.applyVelocity(y),null!=e.heading){const t=F.Geometry.angleDifferenceSigned(e.heading,this.drone.spatial.orientation.z),n=this.droneMotionLimits.rotational.velocity.max*y;Math.abs(t)>n?this.drone.spatial.orientation.z+=s.Common.matchSign(n,t):this.drone.spatial.orientation.z=e.heading}this.drone.spatial.updated.value=l.value,n=this.processCommands(l,n);for(let e of Object.keys(i))i[e]=this.processCommands(l,i[e]);for(let e of Object.keys(t)){const n=this.drone.gimbal(parseInt(e)),i=t[e];n.velocity=O.VelocityGimbalCommand.boundedVelocity(n.velocity,i.velocity,y,m.Constants.GimbalMotionLimits),n.orientation.applyVelocity(n.velocity,y),n.settings.mode===c.GimbalMode.YawFollow&&(n.velocity.yaw=0,n.orientation.yaw=this.drone.spatial.orientation.yaw),n.updated.value=l.value}for(let e of Object.keys(o))o[e]=this.processCommands(l,o[e]);for(let e of Object.values(this.drone.cameras))if(e.capturing)switch(r[e.channel]||(r[e.channel]=A.Serialization.clone(l)),e.settings.mode){case c.CameraMode.Photo:e.settings.photoMode===c.CameraPhotoMode.Interval&&l.elapsedTime(r[e.channel])>=e.settings.photoInterval&&(this.generateCameraFile(e,r[e.channel]),r[e.channel]=A.Serialization.clone(l))}else if(r[e.channel]){switch(e.settings.mode){case c.CameraMode.Photo:e.settings.photoMode!==c.CameraPhotoMode.Interval&&this.generateCameraFile(e,r[e.channel],Math.min(1,e.settings.photoInterval));break;case c.CameraMode.Video:this.generateCameraFile(e,r[e.channel],l.elapsedTime(r[e.channel]))}delete r[e.channel]}}if(e=new u.VelocityDroneCommand,t={},this.mission&&this.engaged)switch(this.mission.execute(this.user,this.device,this.drone,this.timeline,l).status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:this.drone.statelessCommands.forEach(n=>{n instanceof u.VelocityDroneCommand?e=n:n instanceof O.VelocityGimbalCommand&&(t[n.channel]=n)}),this.drone.statefulCommands.forEach(e=>{const t=this.drone.commandExecutionState(e.id);t&&t.status===c.CommandExecutionStatus.Pending&&(e instanceof f.DroneCommand?(t.update(c.CommandExecutionStatus.Queued,null,l),n.push(e)):e instanceof d.CameraCommand?(i[e.channel]||(i[e.channel]=[]),t.update(c.CommandExecutionStatus.Queued,null,l),i[e.channel].push(e)):e instanceof p.GimbalCommand&&(o[e.channel]||(o[e.channel]=[]),t.update(c.CommandExecutionStatus.Queued,null,l),o[e.channel].push(e))),this.timeline&&this.timeline.updateCommandExecutionState(e,t)});break;case c.ComponentExecutionStatus.Succeeded:switch(this.mission.plan.completeAction){case c.PlanCompleteAction.AutoLand:this.drone.spatial.altitude.value=0,this.drone.spatial.velocity=new h.Velocity6;break;case c.PlanCompleteAction.ReturnHome:this.drone.spatial.coordinate=this.drone.takeoffCoordinate,this.drone.spatial.velocity=new h.Velocity6,this.drone.spatial.altitude.value=0}break;case c.ComponentExecutionStatus.Failed:}if(this.drone.statelessCommands=[],this.executionListeners.forEach(e=>{e(this)}),this.rate&&this.rate>0){let e=1e3*this.missionExecuteIntervalTarget-((new Date).getTime()-g);e>0&&(e/=this.rate,yield s.Common.sleep(e))}else this.preventThreadStarvation&&a%200==0&&(yield s.Common.sleep(5));this.millisSinceStart+=1e3*this.missionExecuteIntervalTarget,a++}})}processCommands(e,t){let n=!1;return t.filter(t=>{const i=this.drone.commandExecutionState(t.id);if(!i)return!1;switch(i.status){case c.CommandExecutionStatus.Pending:case c.CommandExecutionStatus.Queued:return n||(this.applyCommandStart(e,t),i.update(c.CommandExecutionStatus.Executing,null,e),n=!0),!0;case c.CommandExecutionStatus.Executing:return i.started&&e.elapsedTime(i.started)>=t.estimatedTime?(this.applyCommandFinish(e,t),i.update(c.CommandExecutionStatus.Succeeded,null,e),!1):(n=!0,!0);case c.CommandExecutionStatus.Failed:case c.CommandExecutionStatus.Succeeded:return!1}})}applyCommandStart(e,t){t instanceof f.DroneCommand?this.applyDroneCommandStart(e,t):t instanceof v.PayloadCommand&&this.applyPayloadCommandStart(e,t)}applyCommandFinish(e,t){t instanceof f.DroneCommand?this.applyDroneCommandFinish(e,t):t instanceof v.PayloadCommand&&this.applyPayloadCommandFinish(e,t)}applyDroneCommandStart(e,t){}applyDroneCommandFinish(e,t){}applyPayloadCommandStart(e,t){t instanceof d.CameraCommand?this.applyCameraCommandStart(e,t):t instanceof p.GimbalCommand&&this.applyGimbalCommandStart(e,t)}applyPayloadCommandFinish(e,t){t instanceof d.CameraCommand?this.applyCameraCommandFinish(e,t):t instanceof p.GimbalCommand&&this.applyGimbalCommandFinish(e,t)}applyCameraCommandStart(e,t){const n=this.drone.camera(t.channel);n.updated.value=e.value,t instanceof w.StartCaptureCameraCommand&&w.StartCaptureCameraCommand.possible(n.settings.mode)&&(n.capturing=!0)}applyCameraCommandFinish(e,t){const n=this.drone.camera(t.channel);n.updated.value=e.value,t instanceof w.StartCaptureCameraCommand?w.StartCaptureCameraCommand.continuous(n.settings.mode,n.settings.photoMode)||(n.capturing=!1):t instanceof x.StopCaptureCameraCommand?n.capturing=!1:t instanceof g.ModeCameraCommand?n.settings.mode=t.mode:t instanceof C.ExposureModeCameraCommand||(t instanceof y.PhotoModeCameraCommand?n.settings.photoMode=t.photoMode:t instanceof _.PhotoFileFormatCameraCommand?n.settings.photoFileFormat=t.photoFileFormat:t instanceof E.PhotoIntervalCameraCommand?n.settings.photoInterval=t.photoInterval:t instanceof N.VideoFileFormatCameraCommand&&(n.settings.videoFileFormat=t.videoFileFormat))}applyGimbalCommandStart(e,t){this.drone.gimbal(t.channel).updated.value=e.value}applyGimbalCommandFinish(e,t){const n=this.drone.gimbal(t.channel);n.updated.value=e.value,t instanceof S.ModeGimbalCommand?n.settings.mode=t.mode:t instanceof b.OrientationGimbalCommand&&n.orientation.apply(t.orientation)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(50);t.ComponentExecuteContext=class extends i.Context{constructor(e,t,n){super(e),this.execution=t,this.engagement=n}elapsedTime(e){return this.engagement.currentDatetime.elapsedTime(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(50),o=n(99);t.ComponentEstimateContext=class extends i.Context{constructor(){super(...arguments),this.altitudeRequired=!1,this.timeRequired=!1,this.cameras={}}camera(e=0){return this.cameras[e]||(this.cameras[e]=new o.Camera(e)),this.cameras[e]}}},function(e,t){(function(){e.exports=class{hasFeature(e,t){return!0}createDocumentType(e,t,n){throw new Error("This DOM method is not implemented.")}createDocument(e,t,n){throw new Error("This DOM method is not implemented.")}createHTMLDocument(e){throw new Error("This DOM method is not implemented.")}getFeature(e,t){throw new Error("This DOM method is not implemented.")}}}).call(this)},function(e,t,n){(function(){var t,i,o,r,a,s,u;({isPlainObject:u}=n(32)),o=n(215),i=n(269),r=n(18),t=n(9),s=n(219),a=n(147),e.exports=function(){class e extends r{constructor(e){super(null),this.name="#document",this.type=t.Document,this.documentURI=null,this.domConfig=new i,e||(e={}),e.writer||(e.writer=new a),this.options=e,this.stringify=new s(e)}end(e){var t;return t={},e?u(e)&&(t=e,e=this.options.writer):e=this.options.writer,e.document(this,e.filterOptions(t))}toString(e){return this.options.writer.document(this,this.options.writer.filterOptions(e))}createElement(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createDocumentFragment(){throw new Error("This DOM method is not implemented."+this.debugInfo())}createTextNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createComment(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createCDATASection(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createProcessingInstruction(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createAttribute(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createEntityReference(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}importNode(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createElementNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementById(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}adoptNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}normalizeDocument(){throw new Error("This DOM method is not implemented."+this.debugInfo())}renameNode(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByClassName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createEvent(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createRange(){throw new Error("This DOM method is not implemented."+this.debugInfo())}createNodeIterator(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}createTreeWalker(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}}return Object.defineProperty(e.prototype,"implementation",{value:new o}),Object.defineProperty(e.prototype,"doctype",{get:function(){var e,n,i,o;for(n=0,i=(o=this.children).length;n<i;n++)if((e=o[n]).type===t.DocType)return e;return null}}),Object.defineProperty(e.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration?this.children[0].encoding:null}}),Object.defineProperty(e.prototype,"xmlStandalone",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration&&"yes"===this.children[0].standalone}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(e.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(e.prototype,"origin",{get:function(){return null}}),Object.defineProperty(e.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(e.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(e.prototype,"contentType",{get:function(){return null}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t;t=n(9),n(18),e.exports=function(){class e{constructor(e,n,i){if(this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),null==n)throw new Error("Missing attribute name. "+this.debugInfo(n));this.name=this.stringify.name(n),this.value=this.stringify.attValue(i),this.type=t.Attribute,this.isId=!1,this.schemaTypeInfo=null}clone(){return Object.create(this)}toString(e){return this.options.writer.attribute(this,this.options.writer.filterOptions(e))}debugInfo(e){return null==(e=e||this.name)?"parent: <"+this.parent.name+">":"attribute: {"+e+"}, parent: <"+this.parent.name+">"}isEqualNode(e){return e.namespaceURI===this.namespaceURI&&(e.prefix===this.prefix&&(e.localName===this.localName&&e.value===this.value))}}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(e){return this.value=e||""}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"specified",{get:function(){return!0}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(18),t=n(9),e.exports=class extends i{constructor(e){super(e),this.type=t.Dummy}clone(){return Object.create(this)}toString(e){return""}}}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){class e{constructor(e){var n,i,o;for(n in this.assertLegalChar=this.assertLegalChar.bind(this),this.assertLegalName=this.assertLegalName.bind(this),e||(e={}),this.options=e,this.options.version||(this.options.version="1.0"),i=e.stringify||{})t.call(i,n)&&(o=i[n],this[n]=o)}name(e){return this.options.noValidation?e:this.assertLegalName(""+e||"")}text(e){return this.options.noValidation?e:this.assertLegalChar(this.textEscape(""+e||""))}cdata(e){return this.options.noValidation?e:(e=(e=""+e||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(e))}comment(e){if(this.options.noValidation)return e;if((e=""+e||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+e);return this.assertLegalChar(e)}raw(e){return this.options.noValidation?e:""+e||""}attValue(e){return this.options.noValidation?e:this.assertLegalChar(this.attEscape(e=""+e||""))}insTarget(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}insValue(e){if(this.options.noValidation)return e;if((e=""+e||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+e);return this.assertLegalChar(e)}xmlVersion(e){if(this.options.noValidation)return e;if(!(e=""+e||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+e);return e}xmlEncoding(e){if(this.options.noValidation)return e;if(!(e=""+e||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+e);return this.assertLegalChar(e)}xmlStandalone(e){return this.options.noValidation?e:e?"yes":"no"}dtdPubID(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdSysID(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdElementValue(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdAttType(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdAttDefault(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdEntityValue(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdNData(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}assertLegalChar(e){var t,n;if(this.options.noValidation)return e;if(t="","1.0"===this.options.version){if(t=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,n=e.match(t))throw new Error(`Invalid character in string: ${e} at index ${n.index}`)}else if("1.1"===this.options.version&&(t=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,n=e.match(t)))throw new Error(`Invalid character in string: ${e} at index ${n.index}`);return e}assertLegalName(e){var t;if(this.options.noValidation)return e;if(this.assertLegalChar(e),t=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!e.match(t))throw new Error("Invalid character in name");return e}textEscape(e){var t;return this.options.noValidation?e:(t=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))}attEscape(e){var t;return this.options.noValidation?e:(t=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))}}return e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i,o,r={}.hasOwnProperty;({assign:o}=n(32)),t=n(9),n(138),n(139),n(136),n(137),n(134),n(144),n(145),n(146),n(218),n(140),n(142),n(141),n(143),i=n(107),e.exports=class{constructor(e){var t,n,i;for(t in e||(e={}),this.options=e,n=e.writer||{})r.call(n,t)&&(i=n[t],this["_"+t]=this[t],this[t]=i)}filterOptions(e){var t,n,r,a,s,u,l,c,m;return e||(e={}),e=o({},this.options,e),(t={writer:this}).pretty=e.pretty||!1,t.allowEmpty=e.allowEmpty||!1,t.indent=null!=(n=e.indent)?n:"  ",t.newline=null!=(r=e.newline)?r:"\n",t.offset=null!=(a=e.offset)?a:0,t.width=null!=(s=e.width)?s:0,t.dontPrettyTextNodes=null!=(u=null!=(l=e.dontPrettyTextNodes)?l:e.dontprettytextnodes)?u:0,t.spaceBeforeSlash=null!=(c=null!=(m=e.spaceBeforeSlash)?m:e.spacebeforeslash)?c:"",!0===t.spaceBeforeSlash&&(t.spaceBeforeSlash=" "),t.suppressPrettyCount=0,t.user={},t.state=i.None,t}indent(e,t,n){var i;return!t.pretty||t.suppressPrettyCount?"":t.pretty&&(i=(n||0)+t.offset+1)>0?new Array(i).join(t.indent):""}endline(e,t,n){return!t.pretty||t.suppressPrettyCount?"":t.newline}attribute(e,t,n){var i;return this.openAttribute(e,t,n),i=t.pretty&&t.width>0?e.name+'="'+e.value+'"':" "+e.name+'="'+e.value+'"',this.closeAttribute(e,t,n),i}cdata(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<![CDATA[",t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+="]]>"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}comment(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"\x3c!-- ",t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+=" --\x3e"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}declaration(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<?xml",t.state=i.InsideTag,o+=' version="'+e.version+'"',null!=e.encoding&&(o+=' encoding="'+e.encoding+'"'),null!=e.standalone&&(o+=' standalone="'+e.standalone+'"'),t.state=i.CloseTag,o+=t.spaceBeforeSlash+"?>",o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}docType(e,t,n){var o,r,a,s,u;if(n||(n=0),this.openNode(e,t,n),t.state=i.OpenTag,s=this.indent(e,t,n),s+="<!DOCTYPE "+e.root().name,e.pubID&&e.sysID?s+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(s+=' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(s+=" [",s+=this.endline(e,t,n),t.state=i.InsideTag,r=0,a=(u=e.children).length;r<a;r++)o=u[r],s+=this.writeChildNode(o,t,n+1);t.state=i.CloseTag,s+="]"}return t.state=i.CloseTag,s+=t.spaceBeforeSlash+">",s+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),s}element(e,n,o){var a,s,u,l,c,m,d,h,p,f,g,y,C,v,S,b,w,x;if(o||(o=0),g=!1,this.openNode(e,n,o),n.state=i.OpenTag,y=this.indent(e,n,o)+"<"+e.name,n.pretty&&n.width>0)for(f in d=y.length,v=e.attribs)r.call(v,f)&&(a=v[f],d+(C=this.attribute(a,n,o)).length>n.width?(x=this.indent(e,n,o+1)+C,y+=this.endline(e,n,o)+x,d=x.length):(y+=x=" "+C,d+=x.length));else for(f in S=e.attribs)r.call(S,f)&&(a=S[f],y+=this.attribute(a,n,o));if(l=0===(u=e.children.length)?null:e.children[0],0===u||e.children.every(function(e){return(e.type===t.Text||e.type===t.Raw)&&""===e.value}))n.allowEmpty?(y+=">",n.state=i.CloseTag,y+="</"+e.name+">"+this.endline(e,n,o)):(n.state=i.CloseTag,y+=n.spaceBeforeSlash+"/>"+this.endline(e,n,o));else if(!n.pretty||1!==u||l.type!==t.Text&&l.type!==t.Raw||null==l.value){if(n.dontPrettyTextNodes)for(c=0,h=(b=e.children).length;c<h;c++)if(((s=b[c]).type===t.Text||s.type===t.Raw)&&null!=s.value){n.suppressPrettyCount++,g=!0;break}for(y+=">"+this.endline(e,n,o),n.state=i.InsideTag,m=0,p=(w=e.children).length;m<p;m++)s=w[m],y+=this.writeChildNode(s,n,o+1);n.state=i.CloseTag,y+=this.indent(e,n,o)+"</"+e.name+">",g&&n.suppressPrettyCount--,y+=this.endline(e,n,o),n.state=i.None}else y+=">",n.state=i.InsideTag,n.suppressPrettyCount++,g=!0,y+=this.writeChildNode(l,n,o+1),n.suppressPrettyCount--,g=!1,n.state=i.CloseTag,y+="</"+e.name+">"+this.endline(e,n,o);return this.closeNode(e,n,o),y}writeChildNode(e,n,i){switch(e.type){case t.CData:return this.cdata(e,n,i);case t.Comment:return this.comment(e,n,i);case t.Element:return this.element(e,n,i);case t.Raw:return this.raw(e,n,i);case t.Text:return this.text(e,n,i);case t.ProcessingInstruction:return this.processingInstruction(e,n,i);case t.Dummy:return"";case t.Declaration:return this.declaration(e,n,i);case t.DocType:return this.docType(e,n,i);case t.AttributeDeclaration:return this.dtdAttList(e,n,i);case t.ElementDeclaration:return this.dtdElement(e,n,i);case t.EntityDeclaration:return this.dtdEntity(e,n,i);case t.NotationDeclaration:return this.dtdNotation(e,n,i);default:throw new Error("Unknown XML node type: "+e.constructor.name)}}processingInstruction(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<?",t.state=i.InsideTag,o+=e.target,e.value&&(o+=" "+e.value),t.state=i.CloseTag,o+=t.spaceBeforeSlash+"?>",o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}raw(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n),t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}text(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n),t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdAttList(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!ATTLIST",t.state=i.InsideTag,o+=" "+e.elementName+" "+e.attributeName+" "+e.attributeType,"#DEFAULT"!==e.defaultValueType&&(o+=" "+e.defaultValueType),e.defaultValue&&(o+=' "'+e.defaultValue+'"'),t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdElement(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!ELEMENT",t.state=i.InsideTag,o+=" "+e.name+" "+e.value,t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdEntity(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!ENTITY",t.state=i.InsideTag,e.pe&&(o+=" %"),o+=" "+e.name,e.value?o+=' "'+e.value+'"':(e.pubID&&e.sysID?o+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(o+=' SYSTEM "'+e.sysID+'"'),e.nData&&(o+=" NDATA "+e.nData)),t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdNotation(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!NOTATION",t.state=i.InsideTag,o+=" "+e.name,e.pubID&&e.sysID?o+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.pubID?o+=' PUBLIC "'+e.pubID+'"':e.sysID&&(o+=' SYSTEM "'+e.sysID+'"'),t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}openNode(e,t,n){}closeNode(e,t,n){}openAttribute(e,t,n){}closeAttribute(e,t,n){}}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ComponentNodeExecutionState=class{constructor(e,t){this.node=e,this.state=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(1);t.Common=i.Common;var o=n(19);t.Convert=o.Convert;var r=n(19);t.Converter=r.Converter;var a=n(19);t.Converters=a.Converters;var s=n(2);t.Format=s.Format;var u=n(2);t.FormattedValue=u.FormattedValue;var l=n(14);t.Geometry=l.Geometry;var c=n(15);t.Kinematic=c.Kinematic;var m=n(0);t.AltitudeSystem=m.AltitudeSystem;var d=n(0);t.CameraAEBCount=d.CameraAEBCount;var h=n(0);t.CameraAperture=h.CameraAperture;var p=n(0);t.CameraColor=p.CameraColor;var f=n(0);t.CameraExposureCompensation=f.CameraExposureCompensation;var g=n(0);t.CameraExposureMode=g.CameraExposureMode;var y=n(0);t.CameraFileIndexMode=y.CameraFileIndexMode;var C=n(0);t.CameraFocusMode=C.CameraFocusMode;var v=n(0);t.CameraISO=v.CameraISO;var S=n(0);t.CameraMode=S.CameraMode;var b=n(0);t.CameraPhotoAspectRatio=b.CameraPhotoAspectRatio;var w=n(0);t.CameraPhotoFileFormat=w.CameraPhotoFileFormat;var x=n(0);t.CameraPhotoMode=x.CameraPhotoMode;var M=n(0);t.CameraShutterSpeed=M.CameraShutterSpeed;var O=n(0);t.CameraStorageLocation=O.CameraStorageLocation;var D=n(0);t.CameraVideoFileCompressionStandard=D.CameraVideoFileCompressionStandard;var P=n(0);t.CameraVideoFieldOfView=P.CameraVideoFieldOfView;var T=n(0);t.CameraVideoFileFormat=T.CameraVideoFileFormat;var F=n(0);t.CameraVideoFrameRate=F.CameraVideoFrameRate;var E=n(0);t.CameraVideoResolution=E.CameraVideoResolution;var _=n(0);t.CameraVideoStandard=_.CameraVideoStandard;var N=n(0);t.CameraWhiteBalancePreset=N.CameraWhiteBalancePreset;var A=n(0);t.CommandExecutionStatus=A.CommandExecutionStatus;var I=n(0);t.CommandReengagementTiming=I.CommandReengagementTiming;var L=n(0);t.ComponentExecutionStatus=L.ComponentExecutionStatus;var R=n(0);t.DroneConnectionFailSafeBehavior=R.DroneConnectionFailSafeBehavior;var k=n(0);t.DroneLightbridgeChannelSelectionMode=k.DroneLightbridgeChannelSelectionMode;var z=n(0);t.DroneLightbridgeFrequencyBand=z.DroneLightbridgeFrequencyBand;var B=n(0);t.DroneOcuSyncChannelSelectionMode=B.DroneOcuSyncChannelSelectionMode;var V=n(0);t.DroneOcuSyncFrequencyBand=V.DroneOcuSyncFrequencyBand;var j=n(0);t.FacadePattern=j.FacadePattern;var U=n(0);t.FacadeBoundaryFace=U.FacadeBoundaryFace;var J=n(0);t.FacadeCapturePriority=J.FacadeCapturePriority;var G=n(0);t.GeoSpatialSource=G.GeoSpatialSource;var W=n(0);t.GimbalMode=W.GimbalMode;var q=n(0);t.InterpolationFunction=q.InterpolationFunction;var H=n(0);t.MapPattern=H.MapPattern;var $=n(0);t.MeasurementType=$.MeasurementType;var K=n(0);t.MessageLevel=K.MessageLevel;var Z=n(0);t.OrbitDirection=Z.OrbitDirection;var X=n(0);t.OrientationXReference=X.OrientationXReference;var Y=n(0);t.OrientationZReference=Y.OrientationZReference;var Q=n(0);t.PathCornering=Q.PathCornering;var ee=n(0);t.PathMarkerPositioning=ee.PathMarkerPositioning;var te=n(0);t.PlanCompleteAction=te.PlanCompleteAction;var ne=n(0);t.RotationDirection=ne.RotationDirection;var ie=n(0);t.TypeName=ie.TypeName;var oe=n(0);t.UnitSystem=oe.UnitSystem;var re=n(0);t.VariableValueType=re.VariableValueType;var ae=n(16);t.Altitude=ae.Altitude;var se=n(108);t.AltitudeRange=se.AltitudeRange;var ue=n(78);t.Asset=ue.Asset;var le=n(109);t.AssetManifest=le.AssetManifest;var ce=n(125);t.AssetSource=ce.AssetSource;var me=n(99);t.Camera=me.Camera;var de=n(66);t.CameraFile=de.CameraFile;var he=n(115);t.CameraImageSpecification=he.CameraImageSpecification;var pe=n(116);t.CameraLensSpecification=pe.CameraLensSpecification;var fe=n(117);t.CameraSensorSpecification=fe.CameraSensorSpecification;var ge=n(114);t.CameraSpecification=ge.CameraSpecification;var ye=n(7);t.Constants=ye.Constants;var Ce=n(12);t.Datetime=Ce.Datetime;var ve=n(17);t.Descriptors=ve.Descriptors;var Se=n(71);t.DistanceTolerance=Se.DistanceTolerance;var be=n(52);t.Device=be.Device;var we=n(46);t.Drone=we.Drone;var xe=n(131);t.Engagement=xe.Engagement;var Me=n(133);t.Execution=Me.Execution;var Oe=n(118);t.FieldOfView=Oe.FieldOfView;var De=n(77);t.Func=De.Func;var Pe=n(77);t.FuncInput=Pe.FuncInput;var Te=n(29);t.GeoCoordinate=Te.GeoCoordinate;var Fe=n(65);t.GeoLocation=Fe.GeoLocation;var Ee=n(126);t.GeoReferencedOffset=Ee.GeoReferencedOffset;var _e=n(23);t.GeoSpatial=_e.GeoSpatial;var Ne=n(203);t.GeoSpatialSources=Ne.GeoSpatialSources;var Ae=n(61);t.Gimbal=Ae.Gimbal;var Ie=n(6);t.Identifiable=Ie.Identifiable;var Le=n(37);t.Interpolation=Le.Interpolation;var Re=n(28);t.Limits=Re.Limits;var ke=n(54);t.Line2=ke.Line2;var ze=n(68);t.ListElementNode=ze.ListElementNode;var Be=n(53);t.ListNode=Be.ListNode;var Ve=n(10);t.Message=Ve.Message;var je=n(148);t.MessageGroup=je.MessageGroup;var Ue=n(132);t.Mission=Ue.Mission;var Je=n(84);t.MotionLimits=Je.MotionLimits;var Ge=n(101);t.MotionLimitsOptional=Ge.MotionLimitsOptional;var We=n(83);t.MotionLimits3=We.MotionLimits3;var qe=n(129);t.MotionLimits3Optional=qe.MotionLimits3Optional;var He=n(82);t.MotionLimits6=He.MotionLimits6;var $e=n(100);t.MotionLimits6Optional=$e.MotionLimits6Optional;var Ke=n(98);t.Node=Ke.Node;var Ze=n(48);t.Orientation3=Ze.Orientation3;var Xe=n(21);t.Orientation3Optional=Xe.Orientation3Optional;var Ye=n(104);t.Path=Ye.Path;var Qe=n(20);t.Point2=Qe.Point2;var et=n(67);t.PointOfInterest=et.PointOfInterest;var tt=n(67);t.PointOfInterestNode=tt.PointOfInterestNode;var nt=n(67);t.PointsOfInterestNode=nt.PointsOfInterestNode;var it=n(4);t.Serialization=it.Serialization;var ot=n(212);t.Simulation=ot.Simulation;var rt=n(90);t.SourcedGeoSpatial=rt.SourcedGeoSpatial;var at=n(3);t.Strings=at.Strings;var st=n(31);t.Timeline=st.Timeline;var ut=n(31);t.TimelineCameraCapture=ut.TimelineCameraCapture;var lt=n(31);t.TimelineCommand=lt.TimelineCommand;var ct=n(31);t.TimelineFrame=ct.TimelineFrame;var mt=n(51);t.User=mt.User;var dt=n(149);t.Variable=dt.Variable;var ht=n(8);t.Vector2=ht.Vector2;var pt=n(34);t.Velocity3=pt.Velocity3;var ft=n(26);t.Velocity6=ft.Velocity6;var gt=n(33);t.Command=gt.Command;var yt=n(81);t.CommandExecutionState=yt.CommandExecutionState;var Ct=n(127);t.DefaultCommand=Ct.DefaultCommand;var vt=n(58);t.PayloadCommand=vt.PayloadCommand;var St=n(11);t.DroneCommand=St.DroneCommand;var bt=n(5);t.CameraCommand=bt.CameraCommand;var wt=n(59);t.GimbalCommand=wt.GimbalCommand;var xt=n(161);t.ConnectionFailSafeBehaviorDroneCommand=xt.ConnectionFailSafeBehaviorDroneCommand;var Mt=n(162);t.LandingGearAutomaticMovementDroneCommand=Mt.LandingGearAutomaticMovementDroneCommand;var Ot=n(163);t.LandingGearDeployDroneCommand=Ot.LandingGearDeployDroneCommand;var Dt=n(164);t.LandingGearRetractDroneCommand=Dt.LandingGearRetractDroneCommand;var Pt=n(165);t.LightbridgeChannelDroneCommand=Pt.LightbridgeChannelDroneCommand;var Tt=n(166);t.LightbridgeChannelSelectionModeDroneCommand=Tt.LightbridgeChannelSelectionModeDroneCommand;var Ft=n(167);t.LightbridgeFrequencyBandDroneCommand=Ft.LightbridgeFrequencyBandDroneCommand;var Et=n(168);t.LowBatteryWarningThresholdDroneCommand=Et.LowBatteryWarningThresholdDroneCommand;var _t=n(169);t.MaxAltitudeDroneCommand=_t.MaxAltitudeDroneCommand;var Nt=n(170);t.MaxDistanceDroneCommand=Nt.MaxDistanceDroneCommand;var At=n(171);t.OcuSyncChannelDroneCommand=At.OcuSyncChannelDroneCommand;var It=n(172);t.OcuSyncChannelSelectionModeDroneCommand=It.OcuSyncChannelSelectionModeDroneCommand;var Lt=n(173);t.OcuSyncFrequencyBandDroneCommand=Lt.OcuSyncFrequencyBandDroneCommand;var Rt=n(174);t.ReturnHomeAltitudeDroneCommand=Rt.ReturnHomeAltitudeDroneCommand;var kt=n(40);t.VelocityDroneCommand=kt.VelocityDroneCommand;var zt=n(175);t.AEBCountCameraCommand=zt.AEBCountCameraCommand;var Bt=n(176);t.ApertureCameraCommand=Bt.ApertureCameraCommand;var Vt=n(177);t.AutoExposureLockCameraCommand=Vt.AutoExposureLockCameraCommand;var jt=n(178);t.ColorCameraCommand=jt.ColorCameraCommand;var Ut=n(179);t.ContrastCameraCommand=Ut.ContrastCameraCommand;var Jt=n(180);t.ExposureCompensationCameraCommand=Jt.ExposureCompensationCameraCommand;var Gt=n(181);t.ExposureCompensationStepCameraCommand=Gt.ExposureCompensationStepCameraCommand;var Wt=n(119);t.ExposureModeCameraCommand=Wt.ExposureModeCameraCommand;var qt=n(182);t.FileIndexModeCameraCommand=qt.FileIndexModeCameraCommand;var Ht=n(120);t.FocusCameraCommand=Ht.FocusCameraCommand;var $t=n(183);t.FocusModeCameraCommand=$t.FocusModeCameraCommand;var Kt=n(184);t.ISOCameraCommand=Kt.ISOCameraCommand;var Zt=n(185);t.PhotoAspectRatioCameraCommand=Zt.PhotoAspectRatioCameraCommand;var Xt=n(86);t.PhotoFileFormatCameraCommand=Xt.PhotoFileFormatCameraCommand;var Yt=n(42);t.PhotoIntervalCameraCommand=Yt.PhotoIntervalCameraCommand;var Qt=n(43);t.PhotoModeCameraCommand=Qt.PhotoModeCameraCommand;var en=n(41);t.ModeCameraCommand=en.ModeCameraCommand;var tn=n(186);t.SaturationCameraCommand=tn.SaturationCameraCommand;var nn=n(187);t.SharpnessCameraCommand=nn.SharpnessCameraCommand;var on=n(188);t.ShutterSpeedCameraCommand=on.ShutterSpeedCameraCommand;var rn=n(35);t.StartCaptureCameraCommand=rn.StartCaptureCameraCommand;var an=n(36);t.StopCaptureCameraCommand=an.StopCaptureCameraCommand;var sn=n(189);t.StorageLocationCameraCommand=sn.StorageLocationCameraCommand;var un=n(190);t.VideoFileCompressionStandardCameraCommand=un.VideoFileCompressionStandardCameraCommand;var ln=n(121);t.VideoFileFormatCameraCommand=ln.VideoFileFormatCameraCommand;var cn=n(191);t.VideoResolutionFrameRateCameraCommand=cn.VideoResolutionFrameRateCameraCommand;var mn=n(192);t.VideoStandardCameraCommand=mn.VideoStandardCameraCommand;var dn=n(193);t.WhiteBalanceCustomCameraCommand=dn.WhiteBalanceCustomCameraCommand;var hn=n(194);t.WhiteBalancePresetCameraCommand=hn.WhiteBalancePresetCameraCommand;var pn=n(87);t.ModeGimbalCommand=pn.ModeGimbalCommand;var fn=n(60);t.OrientationGimbalCommand=fn.OrientationGimbalCommand;var gn=n(88);t.VelocityGimbalCommand=gn.VelocityGimbalCommand;var yn=n(95);t.Component=yn.Component;var Cn=n(96);t.ComponentEstimate=Cn.ComponentEstimate;var vn=n(214);t.ComponentEstimateContext=vn.ComponentEstimateContext;var Sn=n(213);t.ComponentExecuteContext=Sn.ComponentExecuteContext;var bn=n(89);t.ComponentExecutionState=bn.ComponentExecutionState;var wn=n(44);t.CommandComponent=wn.CommandComponent;var xn=n(97);t.ComponentNode=xn.ComponentNode;var Mn=n(221);t.ComponentNodeExecutionState=Mn.ComponentNodeExecutionState;var On=n(122);t.ComponentSource=On.ComponentSource;var Dn=n(69);t.AchievableDroneMotionComponent=Dn.AchievableDroneMotionComponent;var Pn=n(102);t.DestinationComponent=Pn.DestinationComponent;var Tn=n(27);t.DroneMotionComponent=Tn.DroneMotionComponent;var Fn=n(128);t.CourseComponent=Fn.CourseComponent;var En=n(204);t.FacadeComponent=En.FacadeComponent;var _n=n(73);t.FacadeComponentBoundaryPoint=_n.FacadeComponentBoundaryPoint;var Nn=n(73);t.FacadeComponentBoundaryPointNode=Nn.FacadeComponentBoundaryPointNode;var An=n(73);t.FacadeComponentBoundaryPointsNode=An.FacadeComponentBoundaryPointsNode;var In=n(103);t.HeadingComponent=In.HeadingComponent;var Ln=n(55);t.ListComponent=Ln.ListComponent;var Rn=n(205);t.MapComponent=Rn.MapComponent;var kn=n(74);t.MapComponentBoundaryPoint=kn.MapComponentBoundaryPoint;var zn=n(74);t.MapComponentBoundaryPointNode=zn.MapComponentBoundaryPointNode;var Bn=n(74);t.MapComponentBoundaryPointsNode=Bn.MapComponentBoundaryPointsNode;var Vn=n(206);t.OrbitComponent=Vn.OrbitComponent;var jn=n(207);t.PathComponent=jn.PathComponent;var Un=n(130);t.PathComponentElementNode=Un.PathComponentElementNode;var Jn=n(76);t.PathComponentMarker=Jn.PathComponentMarker;var Gn=n(76);t.PathComponentMarkerNode=Gn.PathComponentMarkerNode;var Wn=n(76);t.PathComponentMarkersNode=Wn.PathComponentMarkersNode;var qn=n(75);t.PathComponentWaypoint=qn.PathComponentWaypoint;var Hn=n(75);t.PathComponentWaypointNode=Hn.PathComponentWaypointNode;var $n=n(75);t.PathComponentWaypointsNode=$n.PathComponentWaypointsNode;var Kn=n(105);t.PlanComponent=Kn.PlanComponent;var Zn=n(209);t.RotationComponent=Zn.RotationComponent;var Xn=n(22);t.SubComponent=Xn.SubComponent;var Yn=n(72);t.ApproachableComponent=Yn.ApproachableComponent;var Qn=n(210);t.WaitComponent=Qn.WaitComponent;var ei=n(50);t.Context=ei.Context},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(224));var u=/(\{[\d|\w]+\})/,l=/(\$ref\{[\w|.]+\})/,c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"==typeof n&&(n={customLanguageInterface:n}),this._opts=r({},{customLanguageInterface:s.getInterfaceLanguage,pseudo:!1,pseudoMultipleLanguages:!1,logsEnabled:!0},n),this._interfaceLanguage=this._opts.customLanguageInterface(),this._language=this._interfaceLanguage,this.setContent(t)}return a(e,[{key:"setContent",value:function(e){var t=this,n=Object.keys(e),i=o(n,1)[0];this._defaultLanguage=i,this._defaultLanguageFirstLevelKeys=[],this._props=e,s.validateTranslationKeys(Object.keys(e[this._defaultLanguage])),Object.keys(this._props[this._defaultLanguage]).forEach(function(e){"string"==typeof t._props[t._defaultLanguage][e]&&t._defaultLanguageFirstLevelKeys.push(e)}),this.setLanguage(this._interfaceLanguage),this._opts.pseudo&&this._pseudoAllValues(this._props)}},{key:"_pseudoAllValues",value:function(e){var t=this;Object.keys(e).forEach(function(n){if("object"===i(e[n]))t._pseudoAllValues(e[n]);else if("string"==typeof e[n]){if(0===e[n].indexOf("[")&&e[n].lastIndexOf("]")===e[n].length-1)return;for(var o=e[n].split(" "),r=0;r<o.length;r+=1)if(o[r].match(u));else if(o[r].match(l));else{var a=o[r].length;t._opts.pseudoMultipleLanguages&&(a=parseInt(1.4*a,10)),o[r]=s.randomPseudo(a)}e[n]="["+o.join(" ")+"]"}})}},{key:"setLanguage",value:function(e){var t=this,n=s.getBestMatchingLanguage(e,this._props),i=Object.keys(this._props)[0];if(this._language=n,this._props[n]){for(var o=0;o<this._defaultLanguageFirstLevelKeys.length;o+=1)delete this[this._defaultLanguageFirstLevelKeys[o]];var a=r({},this._props[this._language]);Object.keys(a).forEach(function(e){t[e]=a[e]}),i!==this._language&&(a=this._props[i],this._fallbackValues(a,this))}}},{key:"_fallbackValues",value:function(e,t){var n=this;Object.keys(e).forEach(function(i){Object.prototype.hasOwnProperty.call(e,i)&&!t[i]&&""!==t[i]?(t[i]=e[i],n._opts.logsEnabled&&console.log("🚧 👷 key '"+i+"' not found in localizedStrings for language "+n._language+" 🚧")):"string"!=typeof t[i]&&n._fallbackValues(e[i],t[i])})}},{key:"getLanguage",value:function(){return this._language}},{key:"getInterfaceLanguage",value:function(){return this._interfaceLanguage}},{key:"getAvailableLanguages",value:function(){var e=this;return this._availableLanguages||(this._availableLanguages=[],Object.keys(this._props).forEach(function(t){e._availableLanguages.push(t)})),this._availableLanguages}},{key:"formatString",value:function(e){for(var t=this,n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];var r=e||"";return"string"==typeof r&&(r=this.getString(e,null,!0)||r),r.split(l).filter(function(e){return!!e}).map(function(n){if(n.match(l)){var i=n.slice(5,-1),o=t.getString(i);return o||(t._opts.logsEnabled&&console.log("No Localization ref found for '"+n+"' in string '"+e+"'"),"$ref(id:"+i+")")}return n}).join("").split(u).filter(function(e){return!!e}).map(function(e){if(e.match(u)){var t=e.slice(1,-1),n=i[t];if(void 0===n){var o=i[0][t];if(void 0===o)return n;n=o}return n}return e}).join("")}},{key:"getString",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];try{for(var i=this._props[t||this._language],o=e.split("."),r=0;r<o.length;r+=1){if(void 0===i[o[r]])throw Error(o[r]);i=i[o[r]]}return i}catch(i){!n&&this._opts.logsEnabled&&console.log("No localization found for key '"+e+"' and language '"+t+"', failed on "+i.message)}return null}},{key:"getContent",value:function(){return this._props}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInterfaceLanguage=function(){if("undefined"==typeof navigator)return"en-US";var e=navigator;if(e){if(e.language)return e.language;if(e.languages&&e.languages[0])return e.languages[0];if(e.userLanguage)return e.userLanguage;if(e.browserLanguage)return e.browserLanguage}return"en-US"},t.getBestMatchingLanguage=function(e,t){if(t[e])return e;var n=e.indexOf("-"),i=n>=0?e.substring(0,n):e;return t[i]?i:Object.keys(t)[0]},t.validateTranslationKeys=function(e){var t=["_interfaceLanguage","_language","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props"];e.forEach(function(e){if(-1!==t.indexOf(e))throw new Error(e+" cannot be used as a key. It is a reserved word.")})},t.randomPseudo=function(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=0;i<e;i+=1)t+=n.charAt(Math.floor(Math.random()*n.length));return t}},function(e,t,n){e.exports=n(151)},function(e,t,n){!function(){"use strict";var t=n(152),i=function(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)};i.prototype={valueOf:function(){return this.toString()},toString:function(){return"["+this.curves.map(function(e){return t.pointsToString(e.points)}).join(", ")+"]"},addCurve:function(e){this.curves.push(e),this._3d=this._3d||e._3d},length:function(){return this.curves.map(function(e){return e.length()}).reduce(function(e,t){return e+t})},curve:function(e){return this.curves[e]},bbox:function(){for(var e=this.curves,n=e[0].bbox(),i=1;i<e.length;i++)t.expandbox(n,e[i].bbox());return n},offset:function(e){var t=[];return this.curves.forEach(function(n){t=t.concat(n.offset(e))}),new i(t)}},e.exports=i}()},function(e,t,n){var i=n(228),o={x:!1,y:!1};function r(e,t,n){if("Z"!==t){if("M"!==t){var i=[!1,o.x,o.y].concat(n),r=new(e.bind.apply(e,i)),a=n.slice(-2);return o={x:a[0],y:a[1]},r}o={x:n[0],y:n[1]}}}e.exports=function(e,t){for(var n,o,a=i(t).split(" "),s=new RegExp("[MLCQZ]",""),u=[],l={C:6,Q:4,L:2,M:2};a.length;)n=a.splice(0,1)[0],s.test(n)&&(o=r(e,n,a.splice(0,l[n]).map(parseFloat)))&&u.push(o);return new e.PolyBezier(u)}},function(e,t){e.exports=function(e){var t,n,i,o,r,a,s=(e=e.replace(/,/g," ").replace(/-/g," - ").replace(/-\s+/g,"-").replace(/([a-zA-Z])/g," $1 ")).replace(/([a-zA-Z])\s?/g,"|$1").split("|"),u=s.length,l=[],c=0,m=0,d=0,h=0,p=0,f=0,g=0,y=0,C="";for(t=1;t<u;t++)if(o=(i=(n=s[t]).substring(0,1)).toLowerCase(),r=(l=(l=n.replace(i,"").trim().split(" ")).filter(function(e){return""!==e}).map(parseFloat)).length,"m"===o){if(C+="M ","m"===i?(d+=l[0],h+=l[1]):(d=l[0],h=l[1]),c=d,m=h,C+=d+" "+h+" ",r>2)for(a=0;a<r;a+=2)"m"===i?(d+=l[a],h+=l[a+1]):(d=l[a],h=l[a+1]),C+=["L",d,h,""].join(" ")}else if("l"===o)for(a=0;a<r;a+=2)"l"===i?(d+=l[a],h+=l[a+1]):(d=l[a],h=l[a+1]),C+=["L",d,h,""].join(" ");else if("h"===o)for(a=0;a<r;a++)"h"===i?d+=l[a]:d=l[a],C+=["L",d,h,""].join(" ");else if("v"===o)for(a=0;a<r;a++)"v"===i?h+=l[a]:h=l[a],C+=["L",d,h,""].join(" ");else if("q"===o)for(a=0;a<r;a+=4)"q"===i?(p=d+l[a],f=h+l[a+1],d+=l[a+2],h+=l[a+3]):(p=l[a],f=l[a+1],d=l[a+2],h=l[a+3]),C+=["Q",p,f,d,h,""].join(" ");else if("t"===o)for(a=0;a<r;a+=2)p=d+(d-p),f=h+(h-f),"t"===i?(d+=l[a],h+=l[a+1]):(d=l[a],h=l[a+1]),C+=["Q",p,f,d,h,""].join(" ");else if("c"===o)for(a=0;a<r;a+=6)"c"===i?(p=d+l[a],f=h+l[a+1],g=d+l[a+2],y=h+l[a+3],d+=l[a+4],h+=l[a+5]):(p=l[a],f=l[a+1],g=l[a+2],y=l[a+3],d=l[a+4],h=l[a+5]),C+=["C",p,f,g,y,d,h,""].join(" ");else if("s"===o)for(a=0;a<r;a+=4)p=d+(d-g),f=h+(h-y),"s"===i?(g=d+l[a],y=h+l[a+1],d+=l[a+2],h+=l[a+3]):(g=l[a],y=l[a+1],d=l[a+2],h=l[a+3]),C+=["C",p,f,g,y,d,h,""].join(" ");else"z"===o&&(C+="Z ",d=c,h=m);return C.trim()}},function(e,t,n){(function(e,t,i,o,r){
/*!
 LZ-UTF8 v0.5.5

 Copyright (c) 2018, Rotem Dan
 Released under the MIT license.

 Build date: 2018-07-30 

 Please report any issue at https://github.com/rotemdan/lzutf8.js/issues
*/
var a;if(function(o){o.runningInNodeJS=function(){return"object"==typeof e&&"object"==typeof e.versions&&"string"==typeof e.versions.node},o.runningInMainNodeJSModule=function(){return o.runningInNodeJS()&&n.c[n.s]===t},o.commonJSAvailable=function(){return"object"==typeof t.exports},o.runningInWebWorker=function(){return"undefined"==typeof window&&"object"==typeof self&&"function"==typeof self.addEventListener&&"function"==typeof self.close},o.runningInNodeChildProcess=function(){return o.runningInNodeJS()&&"function"==typeof e.send},o.runningInNullOrigin=function(){return"object"==typeof window&&"object"==typeof window.location&&("http:"!==document.location.protocol&&"https:"!==document.location.protocol)},o.webWorkersAvailable=function(){return"function"==typeof Worker&&!o.runningInNullOrigin()&&(!o.runningInNodeJS()&&!(navigator&&navigator.userAgent&&navigator.userAgent.indexOf("Android 4.3")>=0))},o.log=function(e,t){void 0===t&&(t=!1),"object"==typeof console&&(console.log(e),t&&"object"==typeof document&&(document.body.innerHTML+=e+"<br/>"))},o.createErrorMessage=function(e,t){if(void 0===t&&(t="Unhandled exception"),null==e)return t;if(t+=": ","object"==typeof e.content){if(o.runningInNodeJS())return t+e.content.stack;var n=JSON.stringify(e.content);return"{}"!==n?t+n:t+e.content}return"string"==typeof e.content?t+e.content:t+e},o.printExceptionAndStackTraceToConsole=function(e,t){void 0===t&&(t="Unhandled exception"),o.log(o.createErrorMessage(e,t))},o.getGlobalObject=function(){return"object"==typeof i?i:"object"==typeof window?window:"object"==typeof self?self:{}},o.toString=Object.prototype.toString,o.commonJSAvailable()&&(t.exports=o)}(a||(a={})),"function"==typeof Uint8Array&&0!==new Uint8Array(1).subarray(1).byteLength){var s=function(e,t){var n=function(e,t,n){return e<t?t:e>n?n:e};e|=0,t|=0,arguments.length<1&&(e=0),arguments.length<2&&(t=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e=n(e,0,this.length);var i=(t=n(t,0,this.length))-e;return i<0&&(i=0),new this.constructor(this.buffer,this.byteOffset+e*this.BYTES_PER_ELEMENT,i)},u=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],l=void 0;if("object"==typeof window?l=window:"object"==typeof self&&(l=self),void 0!==l)for(var c=0;c<u.length;c++)l[u[c]]&&(l[u[c]].prototype.subarray=s)}!function(e){var t=function(){function t(){}return t.compressAsync=function(t,n,i){var o=new e.Timer,r=new e.Compressor;if(!i)throw new TypeError("compressAsync: No callback argument given");if("string"==typeof t)t=e.encodeUTF8(t);else if(null==t||!(t instanceof Uint8Array))return void i(void 0,new TypeError("compressAsync: Invalid input argument, only 'string' and 'Uint8Array' are supported"));var a=e.ArrayTools.splitByteArray(t,n.blockSize),s=[],u=function(t){if(t<a.length){var l=void 0;try{l=r.compressBlock(a[t])}catch(e){return void i(void 0,e)}s.push(l),o.getElapsedTime()<=20?u(t+1):(e.enqueueImmediate(function(){return u(t+1)}),o.restart())}else{var c=e.ArrayTools.concatUint8Arrays(s);e.enqueueImmediate(function(){var t;try{t=e.CompressionCommon.encodeCompressedBytes(c,n.outputEncoding)}catch(e){return void i(void 0,e)}e.enqueueImmediate(function(){return i(t)})})}};e.enqueueImmediate(function(){return u(0)})},t.createCompressionStream=function(){var t=new e.Compressor,i=new(n(155).Transform)({decodeStrings:!0,highWaterMark:65536});return i._transform=function(n,o,r){var a;try{a=e.BufferTools.uint8ArrayToBuffer(t.compressBlock(e.BufferTools.bufferToUint8Array(n)))}catch(e){return void i.emit("error",e)}i.push(a),r()},i},t}();e.AsyncCompressor=t}(a||(a={})),function(e){var t=function(){function t(){}return t.decompressAsync=function(t,n,i){if(!i)throw new TypeError("decompressAsync: No callback argument given");var o=new e.Timer;try{t=e.CompressionCommon.decodeCompressedBytes(t,n.inputEncoding)}catch(e){return void i(void 0,e)}var r=new e.Decompressor,a=e.ArrayTools.splitByteArray(t,n.blockSize),s=[],u=function(t){if(t<a.length){var l=void 0;try{l=r.decompressBlock(a[t])}catch(e){return void i(void 0,e)}s.push(l),o.getElapsedTime()<=20?u(t+1):(e.enqueueImmediate(function(){return u(t+1)}),o.restart())}else{var c=e.ArrayTools.concatUint8Arrays(s);e.enqueueImmediate(function(){var t;try{t=e.CompressionCommon.encodeDecompressedBytes(c,n.outputEncoding)}catch(e){return void i(void 0,e)}e.enqueueImmediate(function(){return i(t)})})}};e.enqueueImmediate(function(){return u(0)})},t.createDecompressionStream=function(){var t=new e.Decompressor,i=new(n(155).Transform)({decodeStrings:!0,highWaterMark:65536});return i._transform=function(n,o,r){var a;try{a=e.BufferTools.uint8ArrayToBuffer(t.decompressBlock(e.BufferTools.bufferToUint8Array(n)))}catch(e){return void i.emit("error",e)}i.push(a),r()},i},t}();e.AsyncDecompressor=t}(a||(a={})),function(e){var t;!function(t){t.compressAsync=function(e,n,i){if("ByteArray"!=n.inputEncoding||e instanceof Uint8Array){var o={token:Math.random().toString(),type:"compress",data:e,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},r=function(e){var n=e.data;n&&n.token==o.token&&(t.globalWorker.removeEventListener("message",r),"error"==n.type?i(void 0,new Error(n.error)):i(n.data))};t.globalWorker.addEventListener("message",r),t.globalWorker.postMessage(o,[])}else i(void 0,new TypeError("compressAsync: input is not a Uint8Array"))},t.decompressAsync=function(e,n,i){var o={token:Math.random().toString(),type:"decompress",data:e,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},r=function(e){var n=e.data;n&&n.token==o.token&&(t.globalWorker.removeEventListener("message",r),"error"==n.type?i(void 0,new Error(n.error)):i(n.data))};t.globalWorker.addEventListener("message",r),t.globalWorker.postMessage(o,[])},t.installWebWorkerIfNeeded=function(){"object"==typeof self&&void 0===self.document&&null!=self.addEventListener&&(self.addEventListener("message",function(t){var n=t.data;if("compress"==n.type){var i=void 0;try{i=e.compress(n.data,{outputEncoding:n.outputEncoding})}catch(t){return void self.postMessage({token:n.token,type:"error",error:e.createErrorMessage(t)},[])}(o={token:n.token,type:"compressionResult",data:i,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(o,[o.data.buffer]):self.postMessage(o,[])}else if("decompress"==n.type){var o,r=void 0;try{r=e.decompress(n.data,{inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding})}catch(t){return void self.postMessage({token:n.token,type:"error",error:e.createErrorMessage(t)},[])}(o={token:n.token,type:"decompressionResult",data:r,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(o,[o.data.buffer]):self.postMessage(o,[])}}),self.addEventListener("error",function(t){e.log(e.createErrorMessage(t.error,"Unexpected LZUTF8 WebWorker exception"))}))},t.createGlobalWorkerIfNeeded=function(){if(t.globalWorker)return!0;if(!e.webWorkersAvailable())return!1;if(!t.scriptURI&&"object"==typeof document){var n=document.getElementById("lzutf8");null!=n&&(t.scriptURI=n.getAttribute("src")||void 0)}return!!t.scriptURI&&(t.globalWorker=new Worker(t.scriptURI),!0)},t.terminate=function(){t.globalWorker&&(t.globalWorker.terminate(),t.globalWorker=void 0)}}(t=e.WebWorker||(e.WebWorker={})),t.installWebWorkerIfNeeded()}(a||(a={})),function(e){var t=function(){function e(e,t,n){this.container=e,this.startPosition=t,this.length=n}return e.prototype.get=function(e){return this.container[this.startPosition+e]},e.prototype.getInReversedOrder=function(e){return this.container[this.startPosition+this.length-1-e]},e.prototype.set=function(e,t){this.container[this.startPosition+e]=t},e}();e.ArraySegment=t}(a||(a={})),function(e){!function(e){e.copyElements=function(e,t,n,i,o){for(;o--;)n[i++]=e[t++]},e.zeroElements=function(e,t,n){for(;n--;)e[t++]=0},e.countNonzeroValuesInArray=function(e){for(var t=0,n=0;n<e.length;n++)e[n]&&t++;return t},e.truncateStartingElements=function(e,t){if(e.length<=t)throw new RangeError("truncateStartingElements: Requested length should be smaller than array length");for(var n=e.length-t,i=0;i<t;i++)e[i]=e[n+i];e.length=t},e.doubleByteArrayCapacity=function(e){var t=new Uint8Array(2*e.length);return t.set(e),t},e.concatUint8Arrays=function(e){for(var t=0,n=0,i=e;n<i.length;n++){t+=(u=i[n]).length}for(var o=new Uint8Array(t),r=0,a=0,s=e;a<s.length;a++){var u=s[a];o.set(u,r),r+=u.length}return o},e.splitByteArray=function(e,t){for(var n=[],i=0;i<e.length;){var o=Math.min(t,e.length-i);n.push(e.subarray(i,i+o)),i+=o}return n}}(e.ArrayTools||(e.ArrayTools={}))}(a||(a={})),function(e){!function(e){e.convertToUint8ArrayIfNeeded=function(t){return"function"==typeof o&&o.isBuffer(t)?e.bufferToUint8Array(t):t},e.uint8ArrayToBuffer=function(e){if(o.prototype instanceof Uint8Array){var t=new Uint8Array(e.buffer,e.byteOffset,e.byteLength);return Object.setPrototypeOf(t,o.prototype),t}for(var n=e.length,i=new o(n),r=0;r<n;r++)i[r]=e[r];return i},e.bufferToUint8Array=function(e){if(o.prototype instanceof Uint8Array)return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);for(var t=e.length,n=new Uint8Array(t),i=0;i<t;i++)n[i]=e[i];return n}}(e.BufferTools||(e.BufferTools={}))}(a||(a={})),function(e){!function(t){t.getCroppedBuffer=function(e,t,n,i){void 0===i&&(i=0);var o=new Uint8Array(n+i);return o.set(e.subarray(t,t+n)),o},t.getCroppedAndAppendedByteArray=function(t,n,i,o){return e.ArrayTools.concatUint8Arrays([t.subarray(n,n+i),o])},t.detectCompressionSourceEncoding=function(e){if(null==e)throw new TypeError("detectCompressionSourceEncoding: input is null or undefined");if("string"==typeof e)return"String";if(e instanceof Uint8Array||"function"==typeof o&&o.isBuffer(e))return"ByteArray";throw new TypeError("detectCompressionSourceEncoding: input must be of type 'string', 'Uint8Array' or 'Buffer'")},t.encodeCompressedBytes=function(t,n){switch(n){case"ByteArray":return t;case"Buffer":return e.BufferTools.uint8ArrayToBuffer(t);case"Base64":return e.encodeBase64(t);case"BinaryString":return e.encodeBinaryString(t);case"StorageBinaryString":return e.encodeStorageBinaryString(t);default:throw new TypeError("encodeCompressedBytes: invalid output encoding requested")}},t.decodeCompressedBytes=function(t,n){if(null==n)throw new TypeError("decodeCompressedData: Input is null or undefined");switch(n){case"ByteArray":case"Buffer":var i=e.BufferTools.convertToUint8ArrayIfNeeded(t);if(!(i instanceof Uint8Array))throw new TypeError("decodeCompressedData: 'ByteArray' or 'Buffer' input type was specified but input is not a Uint8Array or Buffer");return i;case"Base64":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'Base64' input type was specified but input is not a string");return e.decodeBase64(t);case"BinaryString":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'BinaryString' input type was specified but input is not a string");return e.decodeBinaryString(t);case"StorageBinaryString":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'StorageBinaryString' input type was specified but input is not a string");return e.decodeStorageBinaryString(t);default:throw new TypeError("decodeCompressedData: invalid input encoding requested: '"+n+"'")}},t.encodeDecompressedBytes=function(t,n){switch(n){case"String":return e.decodeUTF8(t);case"ByteArray":return t;case"Buffer":if("function"!=typeof o)throw new TypeError("encodeDecompressedBytes: a 'Buffer' type was specified but is not supported at the current envirnment");return e.BufferTools.uint8ArrayToBuffer(t);default:throw new TypeError("encodeDecompressedBytes: invalid output encoding requested")}}}(e.CompressionCommon||(e.CompressionCommon={}))}(a||(a={})),function(e){var t;!function(t){var n,i=[];t.enqueueImmediate=function(e){i.push(e),1===i.length&&n()},t.initializeScheduler=function(){var t=function(){for(var t=0,n=i;t<n.length;t++){var o=n[t];try{o.call(void 0)}catch(t){e.printExceptionAndStackTraceToConsole(t,"enqueueImmediate exception")}}i.length=0};if(e.runningInNodeJS()&&(n=function(){return r(function(){return t()})}),"object"==typeof window&&"function"==typeof window.addEventListener&&"function"==typeof window.postMessage){var o,a="enqueueImmediate-"+Math.random().toString();window.addEventListener("message",function(e){e.data===a&&t()}),o=e.runningInNullOrigin()?"*":window.location.href,n=function(){return window.postMessage(a,o)}}else if("function"==typeof MessageChannel&&"function"==typeof MessagePort){var s=new MessageChannel;s.port1.onmessage=function(){return t()},n=function(){return s.port2.postMessage(0)}}else n=function(){return setTimeout(function(){return t()},0)}},t.initializeScheduler()}(t=e.EventLoop||(e.EventLoop={})),e.enqueueImmediate=function(e){return t.enqueueImmediate(e)}}(a||(a={})),function(e){!function(e){e.override=function(t,n){return e.extend(t,n)},e.extend=function(e,t){if(null==e)throw new TypeError("obj is null or undefined");if("object"!=typeof e)throw new TypeError("obj is not an object");if(null==t&&(t={}),"object"!=typeof t)throw new TypeError("newProperties is not an object");if(null!=t)for(var n in t)e[n]=t[n];return e}}(e.ObjectTools||(e.ObjectTools={}))}(a||(a={})),function(e){e.getRandomIntegerInRange=function(e,t){return e+Math.floor(Math.random()*(t-e))},e.getRandomUTF16StringOfLength=function(t){for(var n="",i=0;i<t;i++){var o=void 0;do{o=e.getRandomIntegerInRange(0,1114112)}while(o>=55296&&o<=57343);n+=e.Encoding.CodePoint.decodeToString(o)}return n}}(a||(a={})),function(e){var t=function(){function e(e){void 0===e&&(e=1024),this.outputBufferCapacity=e,this.outputPosition=0,this.outputString="",this.outputBuffer=new Uint16Array(this.outputBufferCapacity)}return e.prototype.appendCharCode=function(e){this.outputBuffer[this.outputPosition++]=e,this.outputPosition===this.outputBufferCapacity&&this.flushBufferToOutputString()},e.prototype.appendCharCodes=function(e){for(var t=0,n=e.length;t<n;t++)this.appendCharCode(e[t])},e.prototype.appendString=function(e){for(var t=0,n=e.length;t<n;t++)this.appendCharCode(e.charCodeAt(t))},e.prototype.appendCodePoint=function(e){if(e<=65535)this.appendCharCode(e);else{if(!(e<=1114111))throw new Error("appendCodePoint: A code point of "+e+" cannot be encoded in UTF-16");this.appendCharCode(55296+(e-65536>>>10)),this.appendCharCode(56320+(e-65536&1023))}},e.prototype.getOutputString=function(){return this.flushBufferToOutputString(),this.outputString},e.prototype.flushBufferToOutputString=function(){this.outputPosition===this.outputBufferCapacity?this.outputString+=String.fromCharCode.apply(null,this.outputBuffer):this.outputString+=String.fromCharCode.apply(null,this.outputBuffer.subarray(0,this.outputPosition)),this.outputPosition=0},e}();e.StringBuilder=t}(a||(a={})),function(t){var n=function(){function n(){this.restart()}return n.prototype.restart=function(){this.startTime=n.getTimestamp()},n.prototype.getElapsedTime=function(){return n.getTimestamp()-this.startTime},n.prototype.getElapsedTimeAndRestart=function(){var e=this.getElapsedTime();return this.restart(),e},n.prototype.logAndRestart=function(e,n){void 0===n&&(n=!0);var i=this.getElapsedTime(),o=e+": "+i.toFixed(3)+"ms";return t.log(o,n),this.restart(),i},n.getTimestamp=function(){return this.timestampFunc||this.createGlobalTimestampFunction(),this.timestampFunc()},n.getMicrosecondTimestamp=function(){return Math.floor(1e3*n.getTimestamp())},n.createGlobalTimestampFunction=function(){if("object"==typeof e&&"function"==typeof e.hrtime){var t=0;this.timestampFunc=function(){var n=e.hrtime(),i=1e3*n[0]+n[1]/1e6;return t+i},t=Date.now()-this.timestampFunc()}else if("object"==typeof chrome&&chrome.Interval){var n=Date.now(),i=new chrome.Interval;i.start(),this.timestampFunc=function(){return n+i.microseconds()/1e3}}else if("object"==typeof performance&&performance.now){var o=Date.now()-performance.now();this.timestampFunc=function(){return o+performance.now()}}else Date.now?this.timestampFunc=function(){return Date.now()}:this.timestampFunc=function(){return(new Date).getTime()}},n}();t.Timer=n}(a||(a={})),function(e){var t=function(){function t(t){void 0===t&&(t=!0),this.MinimumSequenceLength=4,this.MaximumSequenceLength=31,this.MaximumMatchDistance=32767,this.PrefixHashTableSize=65537,this.inputBufferStreamOffset=1,t&&"function"==typeof Uint32Array?this.prefixHashTable=new e.CompressorCustomHashTable(this.PrefixHashTableSize):this.prefixHashTable=new e.CompressorSimpleHashTable(this.PrefixHashTableSize)}return t.prototype.compressBlock=function(t){if(null==t)throw new TypeError("compressBlock: undefined or null input received");return"string"==typeof t&&(t=e.encodeUTF8(t)),t=e.BufferTools.convertToUint8ArrayIfNeeded(t),this.compressUtf8Block(t)},t.prototype.compressUtf8Block=function(e){if(!e||0==e.length)return new Uint8Array(0);var t=this.cropAndAddNewBytesToInputBuffer(e),n=this.inputBuffer,i=this.inputBuffer.length;this.outputBuffer=new Uint8Array(e.length),this.outputBufferPosition=0;for(var o=0,r=t;r<i;r++){var a=n[r],s=r<o;if(r>i-this.MinimumSequenceLength)s||this.outputRawByte(a);else{var u=this.getBucketIndexForPrefix(r);if(!s){var l=this.findLongestMatch(r,u);null!=l&&(this.outputPointerBytes(l.length,l.distance),o=r+l.length,s=!0)}s||this.outputRawByte(a);var c=this.inputBufferStreamOffset+r;this.prefixHashTable.addValueToBucket(u,c)}}return this.outputBuffer.subarray(0,this.outputBufferPosition)},t.prototype.findLongestMatch=function(e,t){var n=this.prefixHashTable.getArraySegmentForBucketIndex(t,this.reusableArraySegmentObject);if(null==n)return null;for(var i,o=this.inputBuffer,r=0,a=0;a<n.length;a++){var s=n.getInReversedOrder(a)-this.inputBufferStreamOffset,u=e-s,l=void 0;if(l=void 0===i?this.MinimumSequenceLength-1:i<128&&u>=128?r+(r>>>1):r,u>this.MaximumMatchDistance||l>=this.MaximumSequenceLength||e+l>=o.length)break;if(o[s+l]===o[e+l])for(var c=0;;c++){if(e+c===o.length||o[s+c]!==o[e+c]){c>l&&(i=u,r=c);break}if(c===this.MaximumSequenceLength)return{distance:u,length:this.MaximumSequenceLength}}}return void 0!==i?{distance:i,length:r}:null},t.prototype.getBucketIndexForPrefix=function(e){return(7880599*this.inputBuffer[e]+39601*this.inputBuffer[e+1]+199*this.inputBuffer[e+2]+this.inputBuffer[e+3])%this.PrefixHashTableSize},t.prototype.outputPointerBytes=function(e,t){t<128?(this.outputRawByte(192|e),this.outputRawByte(t)):(this.outputRawByte(224|e),this.outputRawByte(t>>>8),this.outputRawByte(255&t))},t.prototype.outputRawByte=function(e){this.outputBuffer[this.outputBufferPosition++]=e},t.prototype.cropAndAddNewBytesToInputBuffer=function(t){if(void 0===this.inputBuffer)return this.inputBuffer=t,0;var n=Math.min(this.inputBuffer.length,this.MaximumMatchDistance),i=this.inputBuffer.length-n;return this.inputBuffer=e.CompressionCommon.getCroppedAndAppendedByteArray(this.inputBuffer,i,n,t),this.inputBufferStreamOffset+=i,n},t}();e.Compressor=t}(a||(a={})),function(e){var t=function(){function t(e){this.minimumBucketCapacity=4,this.maximumBucketCapacity=64,this.bucketLocators=new Uint32Array(2*e),this.storage=new Uint32Array(2*e),this.storageIndex=1}return t.prototype.addValueToBucket=function(t,n){t<<=1,this.storageIndex>=this.storage.length>>>1&&this.compact();var i,o=this.bucketLocators[t];if(0===o)o=this.storageIndex,i=1,this.storage[this.storageIndex]=n,this.storageIndex+=this.minimumBucketCapacity;else{(i=this.bucketLocators[t+1])===this.maximumBucketCapacity-1&&(i=this.truncateBucketToNewerElements(o,i,this.maximumBucketCapacity/2));var r=o+i;0===this.storage[r]?(this.storage[r]=n,r===this.storageIndex&&(this.storageIndex+=i)):(e.ArrayTools.copyElements(this.storage,o,this.storage,this.storageIndex,i),o=this.storageIndex,this.storageIndex+=i,this.storage[this.storageIndex++]=n,this.storageIndex+=i),i++}this.bucketLocators[t]=o,this.bucketLocators[t+1]=i},t.prototype.truncateBucketToNewerElements=function(t,n,i){var o=t+n-i;return e.ArrayTools.copyElements(this.storage,o,this.storage,t,i),e.ArrayTools.zeroElements(this.storage,t+i,n-i),i},t.prototype.compact=function(){var t=this.bucketLocators,n=this.storage;this.bucketLocators=new Uint32Array(this.bucketLocators.length),this.storageIndex=1;for(var i=0;i<t.length;i+=2){var o=t[i+1];0!==o&&(this.bucketLocators[i]=this.storageIndex,this.bucketLocators[i+1]=o,this.storageIndex+=Math.max(Math.min(2*o,this.maximumBucketCapacity),this.minimumBucketCapacity))}this.storage=new Uint32Array(8*this.storageIndex);for(i=0;i<t.length;i+=2){var r=t[i];if(0!==r){var a=this.bucketLocators[i],s=this.bucketLocators[i+1];e.ArrayTools.copyElements(n,r,this.storage,a,s)}}},t.prototype.getArraySegmentForBucketIndex=function(t,n){t<<=1;var i=this.bucketLocators[t];return 0===i?null:(void 0===n&&(n=new e.ArraySegment(this.storage,i,this.bucketLocators[t+1])),n)},t.prototype.getUsedBucketCount=function(){return Math.floor(e.ArrayTools.countNonzeroValuesInArray(this.bucketLocators)/2)},t.prototype.getTotalElementCount=function(){for(var e=0,t=0;t<this.bucketLocators.length;t+=2)e+=this.bucketLocators[t+1];return e},t}();e.CompressorCustomHashTable=t}(a||(a={})),function(e){var t=function(){function t(e){this.maximumBucketCapacity=64,this.buckets=new Array(e)}return t.prototype.addValueToBucket=function(t,n){var i=this.buckets[t];void 0===i?this.buckets[t]=[n]:(i.length===this.maximumBucketCapacity-1&&e.ArrayTools.truncateStartingElements(i,this.maximumBucketCapacity/2),i.push(n))},t.prototype.getArraySegmentForBucketIndex=function(t,n){var i=this.buckets[t];return void 0===i?null:(void 0===n&&(n=new e.ArraySegment(i,0,i.length)),n)},t.prototype.getUsedBucketCount=function(){return e.ArrayTools.countNonzeroValuesInArray(this.buckets)},t.prototype.getTotalElementCount=function(){for(var e=0,t=0;t<this.buckets.length;t++)void 0!==this.buckets[t]&&(e+=this.buckets[t].length);return e},t}();e.CompressorSimpleHashTable=t}(a||(a={})),function(e){var t=function(){function t(){this.MaximumMatchDistance=32767,this.outputPosition=0}return t.prototype.decompressBlockToString=function(t){return t=e.BufferTools.convertToUint8ArrayIfNeeded(t),e.decodeUTF8(this.decompressBlock(t))},t.prototype.decompressBlock=function(t){this.inputBufferRemainder&&(t=e.ArrayTools.concatUint8Arrays([this.inputBufferRemainder,t]),this.inputBufferRemainder=void 0);for(var n=this.cropOutputBufferToWindowAndInitialize(Math.max(4*t.length,1024)),i=0,o=t.length;i<o;i++){var r=t[i];if(r>>>6==3){var a=r>>>5;if(i==o-1||i==o-2&&7==a){this.inputBufferRemainder=t.subarray(i);break}if(t[i+1]>>>7==1)this.outputByte(r);else{var s=31&r,u=void 0;6==a?(u=t[i+1],i+=1):(u=t[i+1]<<8|t[i+2],i+=2);for(var l=this.outputPosition-u,c=0;c<s;c++)this.outputByte(this.outputBuffer[l+c])}}else this.outputByte(r)}return this.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence(),e.CompressionCommon.getCroppedBuffer(this.outputBuffer,n,this.outputPosition-n)},t.prototype.outputByte=function(t){this.outputPosition===this.outputBuffer.length&&(this.outputBuffer=e.ArrayTools.doubleByteArrayCapacity(this.outputBuffer)),this.outputBuffer[this.outputPosition++]=t},t.prototype.cropOutputBufferToWindowAndInitialize=function(t){if(!this.outputBuffer)return this.outputBuffer=new Uint8Array(t),0;var n=Math.min(this.outputPosition,this.MaximumMatchDistance);if(this.outputBuffer=e.CompressionCommon.getCroppedBuffer(this.outputBuffer,this.outputPosition-n,n,t),this.outputPosition=n,this.outputBufferRemainder){for(var i=0;i<this.outputBufferRemainder.length;i++)this.outputByte(this.outputBufferRemainder[i]);this.outputBufferRemainder=void 0}return n},t.prototype.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence=function(){for(var e=1;e<=4&&this.outputPosition-e>=0;e++){var t=this.outputBuffer[this.outputPosition-e];if(e<4&&t>>>3==30||e<3&&t>>>4==14||e<2&&t>>>5==6)return this.outputBufferRemainder=this.outputBuffer.subarray(this.outputPosition-e,this.outputPosition),void(this.outputPosition-=e)}},t}();e.Decompressor=t}(a||(a={})),function(e){!function(t){!function(t){var n=new Uint8Array([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47]),i=new Uint8Array([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,255,255,255,255]);t.encode=function(n){return n&&0!=n.length?e.runningInNodeJS()?e.BufferTools.uint8ArrayToBuffer(n).toString("base64"):t.encodeWithJS(n):""},t.decode=function(n){return n?e.runningInNodeJS()?e.BufferTools.bufferToUint8Array(new o(n,"base64")):t.decodeWithJS(n):new Uint8Array(0)},t.encodeWithJS=function(t,i){if(void 0===i&&(i=!0),!t||0==t.length)return"";for(var o,r=n,a=new e.StringBuilder,s=0,u=t.length;s<u;s+=3)s<=u-3?(o=t[s]<<16|t[s+1]<<8|t[s+2],a.appendCharCode(r[o>>>18&63]),a.appendCharCode(r[o>>>12&63]),a.appendCharCode(r[o>>>6&63]),a.appendCharCode(r[63&o]),o=0):s===u-2?(o=t[s]<<16|t[s+1]<<8,a.appendCharCode(r[o>>>18&63]),a.appendCharCode(r[o>>>12&63]),a.appendCharCode(r[o>>>6&63]),i&&a.appendCharCode(61)):s===u-1&&(o=t[s]<<16,a.appendCharCode(r[o>>>18&63]),a.appendCharCode(r[o>>>12&63]),i&&(a.appendCharCode(61),a.appendCharCode(61)));return a.getOutputString()},t.decodeWithJS=function(e,t){if(!e||0==e.length)return new Uint8Array(0);var n=e.length%4;if(1===n)throw new Error("Invalid Base64 string: length % 4 == 1");2===n?e+="==":3===n&&(e+="="),t||(t=new Uint8Array(e.length));for(var o=0,r=e.length,a=0;a<r;a+=4){var s=i[e.charCodeAt(a)]<<18|i[e.charCodeAt(a+1)]<<12|i[e.charCodeAt(a+2)]<<6|i[e.charCodeAt(a+3)];t[o++]=s>>>16&255,t[o++]=s>>>8&255,t[o++]=255&s}return 61==e.charCodeAt(r-1)&&o--,61==e.charCodeAt(r-2)&&o--,t.subarray(0,o)}}(t.Base64||(t.Base64={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(t){!function(t){t.encode=function(t){if(null==t)throw new TypeError("BinaryString.encode: undefined or null input received");if(0===t.length)return"";for(var n=t.length,i=new e.StringBuilder,o=0,r=1,a=0;a<n;a+=2){var s=void 0;s=a==n-1?t[a]<<8:t[a]<<8|t[a+1],i.appendCharCode(o<<16-r|s>>>r),o=s&(1<<r)-1,15===r?(i.appendCharCode(o),o=0,r=1):r+=1,a>=n-2&&i.appendCharCode(o<<16-r)}return i.appendCharCode(32768|n%2),i.getOutputString()},t.decode=function(e){if("string"!=typeof e)throw new TypeError("BinaryString.decode: invalid input type");if(""==e)return new Uint8Array(0);for(var t=new Uint8Array(3*e.length),n=0,i=function(e){t[n++]=e>>>8,t[n++]=255&e},o=0,r=0,a=0;a<e.length;a++){var s=e.charCodeAt(a);s>=32768?(32769==s&&n--,r=0):(0==r?o=s:(i(o<<r|s>>>15-r),o=s&(1<<15-r)-1),15==r?r=0:r+=1)}return t.subarray(0,n)}}(t.BinaryString||(t.BinaryString={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(e){!function(e){e.encodeFromString=function(e,t){var n=e.charCodeAt(t);if(n<55296||n>56319)return n;var i=e.charCodeAt(t+1);if(i>=56320&&i<=57343)return i-56320+(n-55296<<10)+65536;throw new Error("getUnicodeCodePoint: Received a lead surrogate character, char code "+n+", followed by "+i+", which is not a trailing surrogate character code.")},e.decodeToString=function(e){if(e<=65535)return String.fromCharCode(e);if(e<=1114111)return String.fromCharCode(55296+(e-65536>>>10),56320+(e-65536&1023));throw new Error("getStringFromUnicodeCodePoint: A code point of "+e+" cannot be encoded in UTF-16")}}(e.CodePoint||(e.CodePoint={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(e){!function(e){var t=["000","001","002","003","004","005","006","007","008","009","010","011","012","013","014","015","016","017","018","019","020","021","022","023","024","025","026","027","028","029","030","031","032","033","034","035","036","037","038","039","040","041","042","043","044","045","046","047","048","049","050","051","052","053","054","055","056","057","058","059","060","061","062","063","064","065","066","067","068","069","070","071","072","073","074","075","076","077","078","079","080","081","082","083","084","085","086","087","088","089","090","091","092","093","094","095","096","097","098","099","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255"];e.encode=function(e){for(var n=[],i=0;i<e.length;i++)n.push(t[e[i]]);return n.join(" ")}}(e.DecimalString||(e.DecimalString={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(e){!function(t){t.encode=function(t){return e.BinaryString.encode(t).replace(/\0/g,"耂")},t.decode=function(t){return e.BinaryString.decode(t.replace(/\u8002/g,"\0"))}}(e.StorageBinaryString||(e.StorageBinaryString={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(t){!function(n){var i,r;n.encode=function(t){return t&&0!=t.length?e.runningInNodeJS()?e.BufferTools.bufferToUint8Array(new o(t,"utf8")):n.createNativeTextEncoderAndDecoderIfAvailable()?i.encode(t):n.encodeWithJS(t):new Uint8Array(0)},n.decode=function(t){return t&&0!=t.length?e.runningInNodeJS()?e.BufferTools.uint8ArrayToBuffer(t).toString("utf8"):n.createNativeTextEncoderAndDecoderIfAvailable()?r.decode(t):n.decodeWithJS(t):""},n.encodeWithJS=function(e,n){if(!e||0==e.length)return new Uint8Array(0);n||(n=new Uint8Array(4*e.length));for(var i=0,o=0;o<e.length;o++){var r=t.CodePoint.encodeFromString(e,o);if(r<=127)n[i++]=r;else if(r<=2047)n[i++]=192|r>>>6,n[i++]=128|63&r;else if(r<=65535)n[i++]=224|r>>>12,n[i++]=128|r>>>6&63,n[i++]=128|63&r;else{if(!(r<=1114111))throw new Error("Invalid UTF-16 string: Encountered a character unsupported by UTF-8/16 (RFC 3629)");n[i++]=240|r>>>18,n[i++]=128|r>>>12&63,n[i++]=128|r>>>6&63,n[i++]=128|63&r,o++}}return n.subarray(0,i)},n.decodeWithJS=function(t,n,i){if(void 0===n&&(n=0),!t||0==t.length)return"";void 0===i&&(i=t.length);for(var o,r,a=new e.StringBuilder,s=n,u=i;s<u;){if((r=t[s])>>>7==0)o=r,s+=1;else if(r>>>5==6){if(s+1>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(31&r)<<6|63&t[s+1],s+=2}else if(r>>>4==14){if(s+2>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(15&r)<<12|(63&t[s+1])<<6|63&t[s+2],s+=3}else{if(r>>>3!=30)throw new Error("Invalid UTF-8 stream: An invalid lead byte value encountered at position "+s);if(s+3>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(7&r)<<18|(63&t[s+1])<<12|(63&t[s+2])<<6|63&t[s+3],s+=4}a.appendCodePoint(o)}return a.getOutputString()},n.createNativeTextEncoderAndDecoderIfAvailable=function(){return!!i||"function"==typeof TextEncoder&&(i=new TextEncoder("utf-8"),r=new TextDecoder("utf-8"),!0)}}(t.UTF8||(t.UTF8={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){e.compress=function(t,n){if(void 0===n&&(n={}),null==t)throw new TypeError("compress: undefined or null input received");var i=e.CompressionCommon.detectCompressionSourceEncoding(t);n=e.ObjectTools.override({inputEncoding:i,outputEncoding:"ByteArray"},n);var o=(new e.Compressor).compressBlock(t);return e.CompressionCommon.encodeCompressedBytes(o,n.outputEncoding)},e.decompress=function(t,n){if(void 0===n&&(n={}),null==t)throw new TypeError("decompress: undefined or null input received");n=e.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String"},n);var i=e.CompressionCommon.decodeCompressedBytes(t,n.inputEncoding),o=(new e.Decompressor).decompressBlock(i);return e.CompressionCommon.encodeDecompressedBytes(o,n.outputEncoding)},e.compressAsync=function(t,n,i){var o;null==i&&(i=function(){});try{o=e.CompressionCommon.detectCompressionSourceEncoding(t)}catch(e){return void i(void 0,e)}n=e.ObjectTools.override({inputEncoding:o,outputEncoding:"ByteArray",useWebWorker:!0,blockSize:65536},n),e.enqueueImmediate(function(){n.useWebWorker&&e.WebWorker.createGlobalWorkerIfNeeded()?e.WebWorker.compressAsync(t,n,i):e.AsyncCompressor.compressAsync(t,n,i)})},e.decompressAsync=function(t,n,i){if(null==i&&(i=function(){}),null!=t){n=e.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String",useWebWorker:!0,blockSize:65536},n);var o=e.BufferTools.convertToUint8ArrayIfNeeded(t);e.EventLoop.enqueueImmediate(function(){n.useWebWorker&&e.WebWorker.createGlobalWorkerIfNeeded()?e.WebWorker.decompressAsync(o,n,i):e.AsyncDecompressor.decompressAsync(t,n,i)})}else i(void 0,new TypeError("decompressAsync: undefined or null input received"))},e.createCompressionStream=function(){return e.AsyncCompressor.createCompressionStream()},e.createDecompressionStream=function(){return e.AsyncDecompressor.createDecompressionStream()},e.encodeUTF8=function(t){return e.Encoding.UTF8.encode(t)},e.decodeUTF8=function(t){return e.Encoding.UTF8.decode(t)},e.encodeBase64=function(t){return e.Encoding.Base64.encode(t)},e.decodeBase64=function(t){return e.Encoding.Base64.decode(t)},e.encodeBinaryString=function(t){return e.Encoding.BinaryString.encode(t)},e.decodeBinaryString=function(t){return e.Encoding.BinaryString.decode(t)},e.encodeStorageBinaryString=function(t){return e.Encoding.StorageBinaryString.encode(t)},e.decodeStorageBinaryString=function(t){return e.Encoding.StorageBinaryString.decode(t)}}(a||(a={}))}).call(this,n(56),n(230)(e),n(38),n(110).Buffer,n(154).setImmediate)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],i=t[1];return 3*(n+i)/4-i},t.toByteArray=function(e){for(var t,n=l(e),i=n[0],a=n[1],s=new r(function(e,t,n){return 3*(t+n)/4-n}(0,i,a)),u=0,c=a>0?i-4:i,m=0;m<c;m+=4)t=o[e.charCodeAt(m)]<<18|o[e.charCodeAt(m+1)]<<12|o[e.charCodeAt(m+2)]<<6|o[e.charCodeAt(m+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=o[e.charCodeAt(m)]<<2|o[e.charCodeAt(m+1)]>>4,s[u++]=255&t);1===a&&(t=o[e.charCodeAt(m)]<<10|o[e.charCodeAt(m+1)]<<4|o[e.charCodeAt(m+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,r=[],a=0,s=n-o;a<s;a+=16383)r.push(c(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],r.push(i[t>>2]+i[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],r.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"="));return r.join("")};for(var i=[],o=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)i[s]=a[s],o[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var o,r,a=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(i[(r=o)>>18&63]+i[r>>12&63]+i[r>>6&63]+i[63&r]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,i,o){var r,a,s=8*o-i-1,u=(1<<s)-1,l=u>>1,c=-7,m=n?o-1:0,d=n?-1:1,h=e[t+m];for(m+=d,r=h&(1<<-c)-1,h>>=-c,c+=s;c>0;r=256*r+e[t+m],m+=d,c-=8);for(a=r&(1<<-c)-1,r>>=-c,c+=i;c>0;a=256*a+e[t+m],m+=d,c-=8);if(0===r)r=1-l;else{if(r===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,i),r-=l}return(h?-1:1)*a*Math.pow(2,r-i)},t.write=function(e,t,n,i,o,r){var a,s,u,l=8*r-o-1,c=(1<<l)-1,m=c>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=i?0:r-1,p=i?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+m>=1?d/u:d*Math.pow(2,1-m))*u>=2&&(a++,u/=2),a+m>=c?(s=0,a=c):a+m>=1?(s=(t*u-1)*Math.pow(2,o),a+=m):(s=t*Math.pow(2,m-1)*Math.pow(2,o),a=0));o>=8;e[n+h]=255&s,h+=p,s/=256,o-=8);for(a=a<<o|s,l+=o;l>0;e[n+h]=255&a,h+=p,a/=256,l-=8);e[n+h-p]|=128*f}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,o,r,a,s,u=1,l={},c=!1,m=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((r=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){r.port2.postMessage(e)}):m&&"onreadystatechange"in m.createElement("script")?(o=m.documentElement,i=function(e){var t=m.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return l[u]=o,i(u),u++},d.clearImmediate=h}function h(e){delete l[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=l[e];if(t){c=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{h(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(38),n(56))},function(e,t){},function(e,t,n){"use strict";var i=n(80).Buffer,o=n(236);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var t,n,o,r=i.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,n=r,o=s,t.copy(n,o),s+=a.data.length,a=a.next;return r},e}(),o&&o.inspect&&o.inspect.custom&&(e.exports.prototype[o.inspect.custom]=function(){var e=o.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var i=!1;return function(){if(!i){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),i=!0}return e.apply(this,arguments)}}}).call(this,n(38))},function(e,t,n){"use strict";e.exports=r;var i=n(160),o=n(57);function r(e){if(!(this instanceof r))return new r(e);i.call(this,e)}o.inherits=n(47),o.inherits(r,i),r.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(113)},function(e,t,n){e.exports=n(39)},function(e,t,n){e.exports=n(112).Transform},function(e,t,n){e.exports=n(112).PassThrough},function(e){e.exports={name:"dronelink-kernel",version:"1.2.1",description:"The Dronelink Kernel",main:"dist/index.js",types:"dist/index.d.ts",scripts:{test:'echo "Error: no test specified" && exit 1',build:"tsc","build:webpack":"webpack","build:webpack-npm":"webpack --config webpack-npm.config.js"},author:"Dronelink",license:"DRONELINK",dependencies:{"@types/bezier-js":"^0.0.8","@types/kdbush":"^3.0.0","@types/node":"^12.12.7","@types/numeral":"0.0.26","bezier-js":"^2.4.4",geolib:"^3.1.0",kdbush:"^3.0.0","localized-strings":"^0.2.4",lzutf8:"^0.5.5",numeral:"^2.0.6",xmlbuilder:"^13.0.2"},devDependencies:{"expose-loader":"^0.7.5","ts-loader":"^6.2.1",tsify:"^4.0.1",typescript:"^3.7.2"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"computeDestinationPoint",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"convertArea",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"convertDistance",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"convertSpeed",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"decimalToSexagesimal",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"findNearest",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"getAreaOfPolygon",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"getBounds",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"getBoundsOfDistance",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"getCenter",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"getCenterOfBounds",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"getCompassDirection",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"getCoordinateKey",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"getCoordinateKeys",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"getDistance",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"getDistanceFromLine",{enumerable:!0,get:function(){return C.default}}),Object.defineProperty(t,"getGreatCircleBearing",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"getLatitude",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(t,"getLongitude",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"getPathLength",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(t,"getPreciseDistance",{enumerable:!0,get:function(){return x.default}}),Object.defineProperty(t,"getRhumbLineBearing",{enumerable:!0,get:function(){return M.default}}),Object.defineProperty(t,"getRoughCompassDirection",{enumerable:!0,get:function(){return O.default}}),Object.defineProperty(t,"getSpeed",{enumerable:!0,get:function(){return D.default}}),Object.defineProperty(t,"isDecimal",{enumerable:!0,get:function(){return P.default}}),Object.defineProperty(t,"isPointInLine",{enumerable:!0,get:function(){return T.default}}),Object.defineProperty(t,"isPointInPolygon",{enumerable:!0,get:function(){return F.default}}),Object.defineProperty(t,"isPointNearLine",{enumerable:!0,get:function(){return E.default}}),Object.defineProperty(t,"isPointWithinRadius",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"isSexagesimal",{enumerable:!0,get:function(){return N.default}}),Object.defineProperty(t,"isValidCoordinate",{enumerable:!0,get:function(){return A.default}}),Object.defineProperty(t,"isValidLatitude",{enumerable:!0,get:function(){return I.default}}),Object.defineProperty(t,"isValidLongitude",{enumerable:!0,get:function(){return L.default}}),Object.defineProperty(t,"orderByDistance",{enumerable:!0,get:function(){return R.default}}),Object.defineProperty(t,"sexagesimalToDecimal",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(t,"toDecimal",{enumerable:!0,get:function(){return z.default}}),Object.defineProperty(t,"toRad",{enumerable:!0,get:function(){return B.default}}),Object.defineProperty(t,"toDeg",{enumerable:!0,get:function(){return V.default}});var i=j(n(245)),o=j(n(246)),r=j(n(247)),a=j(n(248)),s=j(n(249)),u=j(n(250)),l=j(n(251)),c=j(n(199)),m=j(n(252)),d=j(n(253)),h=j(n(254)),p=j(n(255)),f=j(n(91)),g=j(n(124)),y=j(n(45)),C=j(n(201)),v=j(n(256)),S=j(n(24)),b=j(n(25)),w=j(n(257)),x=j(n(258)),M=j(n(200)),O=j(n(259)),D=j(n(260)),P=j(n(92)),T=j(n(261)),F=j(n(262)),E=j(n(263)),_=j(n(264)),N=j(n(93)),A=j(n(195)),I=j(n(196)),L=j(n(197)),R=j(n(198)),k=j(n(94)),z=j(n(123)),B=j(n(30)),V=j(n(49));function j(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=u(n(24)),o=u(n(25)),r=u(n(30)),a=u(n(49)),s=n(13);function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t,n){var u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:6371e3,l=(0,i.default)(e),c=(0,o.default)(e),m=t/u,d=(0,r.default)(n),h=(0,r.default)(l),p=(0,r.default)(c),f=Math.asin(Math.sin(h)*Math.cos(m)+Math.cos(h)*Math.sin(m)*Math.cos(d)),g=p+Math.atan2(Math.sin(d)*Math.sin(m)*Math.cos(h),Math.cos(m)-Math.sin(h)*Math.sin(f)),y=(0,a.default)(g);return(y<s.MINLON||y>s.MAXLON)&&(g=(g+3*Math.PI)%(2*Math.PI)-Math.PI,y=(0,a.default)(g)),{latitude:(0,a.default)(f),longitude:y}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"m",n=i.areaConversion[t];if(n)return e*n;throw new Error("Invalid unit used for area conversion.")};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"m",n=i.distanceConversion[t];if(n)return e*n;throw new Error("Invalid unit used for distance conversion.")};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(13),o=function(e){switch(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"kmh"){case"kmh":return e*i.timeConversion.h*i.distanceConversion.km;case"mph":return e*i.timeConversion.h*i.distanceConversion.mi;default:return e}};t.default=o},function(e,t,n){"use strict";function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],i=!0,o=!1,r=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==s.return||s.return()}finally{if(o)throw r}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){var t=Math.pow(10,12);return Math.round(e*t)/t},r=function(e){var t=i(e.toString().split("."),2),n=t[0],r=t[1],a=Math.abs(Number(n)),s=o(60*Number("0."+(r||0))),u=Math.floor(s),l=o(60*(s%u||0));return a+"° "+Number(u.toFixed(6)).toString().split(".").map(function(e,t){return 0===t?e.padStart(2,"0"):e}).join(".")+"' "+Number(l.toFixed(4)).toString().split(".").map(function(e,t){return 0===t?e.padStart(2,"0"):e}).join(".")+'"'};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(198))&&i.__esModule?i:{default:i};var r=function(e,t){return(0,o.default)(e,t)[0]};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(30)),o=s(n(24)),r=s(n(25)),a=n(13);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t=0;if(e.length>2){for(var n,s,u,l=0;l<e.length;l++){l===e.length-2?(n=e.length-2,s=e.length-1,u=0):l===e.length-1?(n=e.length-1,s=0,u=1):(n=l,s=l+1,u=l+2);var c=(0,r.default)(e[n]),m=(0,o.default)(e[s]),d=(0,r.default)(e[u]);t+=((0,i.default)(d)-(0,i.default)(c))*Math.sin((0,i.default)(m))}t=t*a.earthRadius*a.earthRadius/2}return Math.abs(t)};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=u(n(24)),o=u(n(25)),r=u(n(30)),a=u(n(49)),s=n(13);function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t){var n,u,l=(0,i.default)(e),c=(0,o.default)(e),m=(0,r.default)(l),d=(0,r.default)(c),h=t/s.earthRadius,p=m-h,f=m+h,g=(0,r.default)(s.MAXLAT),y=(0,r.default)(s.MINLAT),C=(0,r.default)(s.MAXLON),v=(0,r.default)(s.MINLON);if(p>y&&f<g){var S=Math.asin(Math.sin(h)/Math.cos(m));(n=d-S)<v&&(n+=2*Math.PI),(u=d+S)>C&&(u-=2*Math.PI)}else p=Math.max(p,y),f=Math.min(f,g),n=v,u=C;return[{latitude:(0,a.default)(p),longitude:(0,a.default)(n)},{latitude:(0,a.default)(f),longitude:(0,a.default)(u)}]};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(24)),o=s(n(25)),r=s(n(30)),a=s(n(49));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){if(!1===Array.isArray(e)||0===e.length)return!1;var t=e.length,n=e.reduce(function(e,t){var n=(0,r.default)((0,i.default)(t)),a=(0,r.default)((0,o.default)(t));return{X:e.X+Math.cos(n)*Math.cos(a),Y:e.Y+Math.cos(n)*Math.sin(a),Z:e.Z+Math.sin(n)}},{X:0,Y:0,Z:0}),s=n.X/t,u=n.Y/t,l=n.Z/t;return{longitude:(0,a.default)(Math.atan2(u,s)),latitude:(0,a.default)(Math.atan2(l,Math.sqrt(s*s+u*u)))}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(199))&&i.__esModule?i:{default:i};var r=function(e){var t=(0,o.default)(e),n=t.minLat+(t.maxLat-t.minLat)/2,i=t.minLng+(t.maxLng-t.minLng)/2;return{latitude:parseFloat(n.toFixed(6)),longitude:parseFloat(i.toFixed(6))}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(200))&&i.__esModule?i:{default:i};var r=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default,i="function"==typeof n?n(e,t):(0,o.default)(e,t);if(isNaN(i))throw new Error("Could not calculate bearing for given points. Check your bearing function");switch(Math.round(i/22.5)){case 1:return"NNE";case 2:return"NE";case 3:return"ENE";case 4:return"E";case 5:return"ESE";case 6:return"SE";case 7:return"SSE";case 8:return"S";case 9:return"SSW";case 10:return"SW";case 11:return"WSW";case 12:return"W";case 13:return"WNW";case 14:return"NW";case 15:return"NNW";default:return"N"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(24)),o=s(n(25)),r=s(n(30)),a=s(n(49));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=(0,i.default)(t),s=(0,o.default)(t),u=(0,i.default)(e),l=(0,o.default)(e);return((0,a.default)(Math.atan2(Math.sin((0,r.default)(s)-(0,r.default)(l))*Math.cos((0,r.default)(n)),Math.cos((0,r.default)(u))*Math.sin((0,r.default)(n))-Math.sin((0,r.default)(u))*Math.cos((0,r.default)(n))*Math.cos((0,r.default)(s)-(0,r.default)(l))))+360)%360};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(45))&&i.__esModule?i:{default:i};function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.default;return e.reduce(function(e,n){return"object"===r(e)&&null!==e.last&&(e.distance+=t(n,e.last)),e.last=n,e},{last:null,distance:0}).distance};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(24)),o=s(n(25)),r=s(n(30)),a=n(13);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;n=void 0===n||isNaN(n)?1:n;var s,u,l,c,m,d,h,p=(0,i.default)(e),f=(0,o.default)(e),g=(0,i.default)(t),y=(0,o.default)(t),C=6356752.314245,v=(0,r.default)(y-f),S=Math.atan(.9966471893352525*Math.tan((0,r.default)(parseFloat(p)))),b=Math.atan(.9966471893352525*Math.tan((0,r.default)(parseFloat(g)))),w=Math.sin(S),x=Math.cos(S),M=Math.sin(b),O=Math.cos(b),D=v,P=100;do{var T=Math.sin(D),F=Math.cos(D);if(0===(d=Math.sqrt(O*T*(O*T)+(x*M-w*O*F)*(x*M-w*O*F))))return 0;s=w*M+x*O*F,u=Math.atan2(d,s),m=s-2*w*M/(c=1-(l=x*O*T/d)*l),isNaN(m)&&(m=0);var E=1/298.257223563/16*c*(4+1/298.257223563*(4-3*c));h=D,D=v+1/298.257223563*(1-E)*l*(u+E*d*(m+E*s*(2*m*m-1)))}while(Math.abs(D-h)>1e-12&&--P>0);if(0===P)return NaN;var _=c*(a.earthRadius*a.earthRadius-C*C)/(C*C),N=_/1024*(256+_*(_*(74-47*_)-128)),A=C*(1+_/16384*(4096+_*(_*(320-175*_)-768)))*(u-N*d*(m+N/4*(s*(2*m*m-1)-N/6*m*(4*d*d-3)*(4*m*m-3))));return Math.round(A/n)*n};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return/^NNE|NE|NNW|N$/.test(e)?"N":/^ENE|E|ESE|SE$/.test(e)?"E":/^SSE|S|SSW|SW$/.test(e)?"S":/^WSW|W|WNW|NW$/.test(e)?"W":void 0};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(45))&&i.__esModule?i:{default:i};var r=function(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default)(e,t)/(Number(t.time)-Number(e.time))*1e3};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(45))&&i.__esModule?i:{default:i};var r=function(e,t,n){return(0,o.default)(t,e)+(0,o.default)(e,n)===(0,o.default)(t,n)};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(24)),o=r(n(25));function r(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t){for(var n=!1,r=t.length,a=-1,s=r-1;++a<r;s=a)((0,o.default)(t[a])<=(0,o.default)(e)&&(0,o.default)(e)<(0,o.default)(t[s])||(0,o.default)(t[s])<=(0,o.default)(e)&&(0,o.default)(e)<(0,o.default)(t[a]))&&(0,i.default)(e)<((0,i.default)(t[s])-(0,i.default)(t[a]))*((0,o.default)(e)-(0,o.default)(t[a]))/((0,o.default)(t[s])-(0,o.default)(t[a]))+(0,i.default)(t[a])&&(n=!n);return n};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(201))&&i.__esModule?i:{default:i};var r=function(e,t,n,i){return(0,o.default)(e,t,n)<i};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(45))&&i.__esModule?i:{default:i};var r=function(e,t,n){return(0,o.default)(e,t)<n};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(16),o=n(0);t.ReferencedAltitude=class{constructor(e,t,n){this.altitude=e,this.takeoffLocation=t,this.groundLocation=n}toSystem(e){if(e===this.altitude.system)return this.altitude;let t=this.altitude.value;switch(this.altitude.system){case o.AltitudeSystem.ATL:if(!this.takeoffLocation)return null;t+=this.takeoffLocation.altitude.value;break;case o.AltitudeSystem.MSL:break;case o.AltitudeSystem.AGL:if(!this.groundLocation)return null;t+=this.groundLocation.altitude.value}switch(e){case o.AltitudeSystem.ATL:if(!this.takeoffLocation)return null;t-=this.takeoffLocation.altitude.value;break;case o.AltitudeSystem.MSL:break;case o.AltitudeSystem.AGL:if(!this.groundLocation)return null;t-=this.groundLocation.altitude.value}return new i.Altitude(t,e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(68);t.FacadeComponentElementNode=class extends i.ListElementNode{get facadeComponentNode(){return this.parent.parent}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(68);t.MapComponentElementNode=class extends i.ListElementNode{get mapComponentNode(){return this.parent.parent}}},function(e,t,n){(function(){var t,i,o,r,a,s,u,l,c;({assign:l,isFunction:c}=n(32)),o=n(215),r=n(216),a=n(274),u=n(147),s=n(275),t=n(9),i=n(107),e.exports.create=function(e,t,n,i){var o,a;if(null==e)throw new Error("Root element needs a name.");return i=l({},t,n,i),a=(o=new r(i)).element(e),i.headless||(o.declaration(i),null==i.pubID&&null==i.sysID||o.dtd(i)),a},e.exports.begin=function(e,t,n){return c(e)&&([t,n]=[e,t],e={}),t?new a(e,t,n):new r(e)},e.exports.stringWriter=function(e){return new u(e)},e.exports.streamWriter=function(e,t){return new s(e,t)},e.exports.implementation=new o,e.exports.nodeType=t,e.exports.writerState=i}).call(this)},function(e,t,n){(function(){var t,i;t=n(270),i=n(271),e.exports=function(){class e{constructor(){this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new t,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=Object.create(this.defaultParams)}getParameter(e){return this.params.hasOwnProperty(e)?this.params[e]:null}canSetParameter(e,t){return!0}setParameter(e,t){return null!=t?this.params[e]=t:delete this.params[e]}}return Object.defineProperty(e.prototype,"parameterNames",{get:function(){return new i(Object.keys(this.defaultParams))}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=class{constructor(){}handleError(e){throw new Error(e)}}}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.arr=e||[]}item(e){return this.arr[e]||null}contains(e){return-1!==this.arr.indexOf(e)}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.arr.length}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.nodes=e}clone(){return this.nodes=null}item(e){return this.nodes[e]||null}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.nodes.length||0}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(this)},function(e,t,n){(function(){var t,i,o,r,a,s,u,l,c,m,d,h,p,f,g,y,C,v,S,b,w,x,M={}.hasOwnProperty;({isObject:w,isFunction:b,isPlainObject:x,getValue:S}=n(32)),t=n(9),h=n(216),p=n(134),r=n(136),a=n(137),g=n(144),v=n(145),f=n(146),m=n(138),d=n(139),s=n(140),l=n(141),u=n(142),c=n(143),o=n(217),C=n(219),y=n(147),i=n(107),e.exports=class{constructor(e,n,i){var o;this.name="?xml",this.type=t.Document,e||(e={}),o={},e.writer?x(e.writer)&&(o=e.writer,e.writer=new y):e.writer=new y,this.options=e,this.writer=e.writer,this.writerOptions=this.writer.filterOptions(o),this.stringify=new C(e),this.onDataCallback=n||function(){},this.onEndCallback=i||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}createChildNode(e){var n,i,o,r,a,s,u,l;switch(e.type){case t.CData:this.cdata(e.value);break;case t.Comment:this.comment(e.value);break;case t.Element:for(i in o={},u=e.attribs)M.call(u,i)&&(n=u[i],o[i]=n.value);this.node(e.name,o);break;case t.Dummy:this.dummy();break;case t.Raw:this.raw(e.value);break;case t.Text:this.text(e.value);break;case t.ProcessingInstruction:this.instruction(e.target,e.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+e.constructor.name)}for(a=0,s=(l=e.children).length;a<s;a++)r=l[a],this.createChildNode(r),r.type===t.Element&&this.up();return this}dummy(){return this}node(e,t,n){if(null==e)throw new Error("Missing node name.");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node. "+this.debugInfo(e));return this.openCurrent(),e=S(e),null==t&&(t={}),t=S(t),w(t)||([n,t]=[t,n]),this.currentNode=new p(this,e,t),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=n&&this.text(n),this}element(e,n,i){var o,r,a,s,u,l;if(this.currentNode&&this.currentNode.type===t.DocType)this.dtdElement(...arguments);else if(Array.isArray(e)||w(e)||b(e))for(s=this.options.noValidation,this.options.noValidation=!0,(l=new h(this.options).element("TEMP_ROOT")).element(e),this.options.noValidation=s,r=0,a=(u=l.children).length;r<a;r++)o=u[r],this.createChildNode(o),o.type===t.Element&&this.up();else this.node(e,n,i);return this}attribute(e,t){var n,i;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(e));if(null!=e&&(e=S(e)),w(e))for(n in e)M.call(e,n)&&(i=e[n],this.attribute(n,i));else b(t)&&(t=t.apply()),this.options.keepNullAttributes&&null==t?this.currentNode.attribs[e]=new o(this,e,""):null!=t&&(this.currentNode.attribs[e]=new o(this,e,t));return this}text(e){var t;return this.openCurrent(),t=new v(this,e),this.onData(this.writer.text(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}cdata(e){var t;return this.openCurrent(),t=new r(this,e),this.onData(this.writer.cdata(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}comment(e){var t;return this.openCurrent(),t=new a(this,e),this.onData(this.writer.comment(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}raw(e){var t;return this.openCurrent(),t=new g(this,e),this.onData(this.writer.raw(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}instruction(e,t){var n,i,o,r,a;if(this.openCurrent(),null!=e&&(e=S(e)),null!=t&&(t=S(t)),Array.isArray(e))for(n=0,r=e.length;n<r;n++)i=e[n],this.instruction(i);else if(w(e))for(i in e)M.call(e,i)&&(o=e[i],this.instruction(i,o));else b(t)&&(t=t.apply()),a=new f(this,e,t),this.onData(this.writer.processingInstruction(a,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this}declaration(e,t,n){var i;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return i=new m(this,e,t,n),this.onData(this.writer.declaration(i,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}doctype(e,t,n){if(this.openCurrent(),null==e)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new d(this,t,n),this.currentNode.rootNodeName=e,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this}dtdElement(e,t){var n;return this.openCurrent(),n=new u(this,e,t),this.onData(this.writer.dtdElement(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}attList(e,t,n,i,o){var r;return this.openCurrent(),r=new s(this,e,t,n,i,o),this.onData(this.writer.dtdAttList(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}entity(e,t){var n;return this.openCurrent(),n=new l(this,!1,e,t),this.onData(this.writer.dtdEntity(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}pEntity(e,t){var n;return this.openCurrent(),n=new l(this,!0,e,t),this.onData(this.writer.dtdEntity(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}notation(e,t){var n;return this.openCurrent(),n=new c(this,e,t),this.onData(this.writer.dtdNotation(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}up(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this}end(){for(;this.currentLevel>=0;)this.up();return this.onEnd()}openCurrent(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)}openNode(e){var n,o,r,a;if(!e.isOpen){if(this.root||0!==this.currentLevel||e.type!==t.Element||(this.root=e),o="",e.type===t.Element){for(r in this.writerOptions.state=i.OpenTag,o=this.writer.indent(e,this.writerOptions,this.currentLevel)+"<"+e.name,a=e.attribs)M.call(a,r)&&(n=a[r],o+=this.writer.attribute(n,this.writerOptions,this.currentLevel));o+=(e.children?">":"/>")+this.writer.endline(e,this.writerOptions,this.currentLevel),this.writerOptions.state=i.InsideTag}else this.writerOptions.state=i.OpenTag,o=this.writer.indent(e,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+e.rootNodeName,e.pubID&&e.sysID?o+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(o+=' SYSTEM "'+e.sysID+'"'),e.children?(o+=" [",this.writerOptions.state=i.InsideTag):(this.writerOptions.state=i.CloseTag,o+=">"),o+=this.writer.endline(e,this.writerOptions,this.currentLevel);return this.onData(o,this.currentLevel),e.isOpen=!0}}closeNode(e){var n;if(!e.isClosed)return n="",this.writerOptions.state=i.CloseTag,n=e.type===t.Element?this.writer.indent(e,this.writerOptions,this.currentLevel)+"</"+e.name+">"+this.writer.endline(e,this.writerOptions,this.currentLevel):this.writer.indent(e,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(e,this.writerOptions,this.currentLevel),this.writerOptions.state=i.None,this.onData(n,this.currentLevel),e.isClosed=!0}onData(e,t){return this.documentStarted=!0,this.onDataCallback(e,t+1)}onEnd(){return this.documentCompleted=!0,this.onEndCallback()}debugInfo(e){return null==e?"":"node: <"+e+">"}ele(){return this.element(...arguments)}nod(e,t,n){return this.node(e,t,n)}txt(e){return this.text(e)}dat(e){return this.cdata(e)}com(e){return this.comment(e)}ins(e,t){return this.instruction(e,t)}dec(e,t,n){return this.declaration(e,t,n)}dtd(e,t,n){return this.doctype(e,t,n)}e(e,t,n){return this.element(e,t,n)}n(e,t,n){return this.node(e,t,n)}t(e){return this.text(e)}d(e){return this.cdata(e)}c(e){return this.comment(e)}r(e){return this.raw(e)}i(e,t){return this.instruction(e,t)}att(){return this.currentNode&&this.currentNode.type===t.DocType?this.attList(...arguments):this.attribute(...arguments)}a(){return this.currentNode&&this.currentNode.type===t.DocType?this.attList(...arguments):this.attribute(...arguments)}ent(e,t){return this.entity(e,t)}pent(e,t){return this.pEntity(e,t)}not(e,t){return this.notation(e,t)}}}).call(this)},function(e,t,n){(function(){var t,i,o,r={}.hasOwnProperty;t=n(9),o=n(220),i=n(107),e.exports=class extends o{constructor(e,t){super(t),this.stream=e}endline(e,t,n){return e.isLastRootNode&&t.state===i.CloseTag?"":super.endline(e,t,n)}document(e,t){var n,i,o,r,a,s,u,l,c;for(i=o=0,a=(u=e.children).length;o<a;i=++o)(n=u[i]).isLastRootNode=i===e.children.length-1;for(t=this.filterOptions(t),c=[],r=0,s=(l=e.children).length;r<s;r++)n=l[r],c.push(this.writeChildNode(n,t,0));return c}cdata(e,t,n){return this.stream.write(super.cdata(e,t,n))}comment(e,t,n){return this.stream.write(super.comment(e,t,n))}declaration(e,t,n){return this.stream.write(super.declaration(e,t,n))}docType(e,t,n){var o,r,a,s;if(n||(n=0),this.openNode(e,t,n),t.state=i.OpenTag,this.stream.write(this.indent(e,t,n)),this.stream.write("<!DOCTYPE "+e.root().name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(e,t,n)),t.state=i.InsideTag,r=0,a=(s=e.children).length;r<a;r++)o=s[r],this.writeChildNode(o,t,n+1);t.state=i.CloseTag,this.stream.write("]")}return t.state=i.CloseTag,this.stream.write(t.spaceBeforeSlash+">"),this.stream.write(this.endline(e,t,n)),t.state=i.None,this.closeNode(e,t,n)}element(e,n,o){var a,s,u,l,c,m,d,h,p,f,g,y,C,v;if(o||(o=0),this.openNode(e,n,o),n.state=i.OpenTag,p=this.indent(e,n,o)+"<"+e.name,n.pretty&&n.width>0)for(h in m=p.length,g=e.attribs)r.call(g,h)&&(a=g[h],m+(f=this.attribute(a,n,o)).length>n.width?(v=this.indent(e,n,o+1)+f,p+=this.endline(e,n,o)+v,m=v.length):(p+=v=" "+f,m+=v.length));else for(h in y=e.attribs)r.call(y,h)&&(a=y[h],p+=this.attribute(a,n,o));if(this.stream.write(p),l=0===(u=e.children.length)?null:e.children[0],0===u||e.children.every(function(e){return(e.type===t.Text||e.type===t.Raw)&&""===e.value}))n.allowEmpty?(this.stream.write(">"),n.state=i.CloseTag,this.stream.write("</"+e.name+">")):(n.state=i.CloseTag,this.stream.write(n.spaceBeforeSlash+"/>"));else if(!n.pretty||1!==u||l.type!==t.Text&&l.type!==t.Raw||null==l.value){for(this.stream.write(">"+this.endline(e,n,o)),n.state=i.InsideTag,c=0,d=(C=e.children).length;c<d;c++)s=C[c],this.writeChildNode(s,n,o+1);n.state=i.CloseTag,this.stream.write(this.indent(e,n,o)+"</"+e.name+">")}else this.stream.write(">"),n.state=i.InsideTag,n.suppressPrettyCount++,!0,this.writeChildNode(l,n,o+1),n.suppressPrettyCount--,!1,n.state=i.CloseTag,this.stream.write("</"+e.name+">");return this.stream.write(this.endline(e,n,o)),n.state=i.None,this.closeNode(e,n,o)}processingInstruction(e,t,n){return this.stream.write(super.processingInstruction(e,t,n))}raw(e,t,n){return this.stream.write(super.raw(e,t,n))}text(e,t,n){return this.stream.write(super.text(e,t,n))}dtdAttList(e,t,n){return this.stream.write(super.dtdAttList(e,t,n))}dtdElement(e,t,n){return this.stream.write(super.dtdElement(e,t,n))}dtdEntity(e,t,n){return this.stream.write(super.dtdEntity(e,t,n))}dtdNotation(e,t,n){return this.stream.write(super.dtdNotation(e,t,n))}}}).call(this)},function(e,t,n){"use strict";function i(e,t,n,r,a,s){if(a-r<=n)return;const u=r+a>>1;!function e(t,n,i,r,a,s){for(;a>r;){if(a-r>600){const o=a-r+1,u=i-r+1,l=Math.log(o),c=.5*Math.exp(2*l/3),m=.5*Math.sqrt(l*c*(o-c)/o)*(u-o/2<0?-1:1),d=Math.max(r,Math.floor(i-u*c/o+m)),h=Math.min(a,Math.floor(i+(o-u)*c/o+m));e(t,n,i,d,h,s)}const u=n[2*i+s];let l=r,c=a;for(o(t,n,r,i),n[2*a+s]>u&&o(t,n,r,a);l<c;){for(o(t,n,l,c),l++,c--;n[2*l+s]<u;)l++;for(;n[2*c+s]>u;)c--}n[2*r+s]===u?o(t,n,r,c):o(t,n,++c,a),c<=i&&(r=c+1),i<=c&&(a=c-1)}}(e,t,u,r,a,s%2),i(e,t,n,r,u-1,s+1),i(e,t,n,u+1,a,s+1)}function o(e,t,n,i){r(e,n,i),r(t,2*n,2*i),r(t,2*n+1,2*i+1)}function r(e,t,n){const i=e[t];e[t]=e[n],e[n]=i}function a(e,t,n,i){const o=e-n,r=t-i;return o*o+r*r}n.r(t),n.d(t,"default",function(){return l});const s=e=>e[0],u=e=>e[1];class l{constructor(e,t=s,n=u,o=64,r=Float64Array){this.nodeSize=o,this.points=e;const a=e.length<65536?Uint16Array:Uint32Array,l=this.ids=new a(e.length),c=this.coords=new r(2*e.length);for(let i=0;i<e.length;i++)l[i]=i,c[2*i]=t(e[i]),c[2*i+1]=n(e[i]);i(l,c,o,0,l.length-1,0)}range(e,t,n,i){return function(e,t,n,i,o,r,a){const s=[0,e.length-1,0],u=[];let l,c;for(;s.length;){const m=s.pop(),d=s.pop(),h=s.pop();if(d-h<=a){for(let a=h;a<=d;a++)l=t[2*a],c=t[2*a+1],l>=n&&l<=o&&c>=i&&c<=r&&u.push(e[a]);continue}const p=Math.floor((h+d)/2);l=t[2*p],c=t[2*p+1],l>=n&&l<=o&&c>=i&&c<=r&&u.push(e[p]);const f=(m+1)%2;(0===m?n<=l:i<=c)&&(s.push(h),s.push(p-1),s.push(f)),(0===m?o>=l:r>=c)&&(s.push(p+1),s.push(d),s.push(f))}return u}(this.ids,this.coords,e,t,n,i,this.nodeSize)}within(e,t,n){return function(e,t,n,i,o,r){const s=[0,e.length-1,0],u=[],l=o*o;for(;s.length;){const c=s.pop(),m=s.pop(),d=s.pop();if(m-d<=r){for(let o=d;o<=m;o++)a(t[2*o],t[2*o+1],n,i)<=l&&u.push(e[o]);continue}const h=Math.floor((d+m)/2),p=t[2*h],f=t[2*h+1];a(p,f,n,i)<=l&&u.push(e[h]);const g=(c+1)%2;(0===c?n-o<=p:i-o<=f)&&(s.push(d),s.push(h-1),s.push(g)),(0===c?n+o>=p:i+o>=f)&&(s.push(h+1),s.push(m),s.push(g))}return u}(this.ids,this.coords,e,t,n,this.nodeSize)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,