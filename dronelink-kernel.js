var Dronelink=function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=205)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.ATL="atl",e.MSL="msl",e.AGL="agl"}(t.AltitudeSystem||(t.AltitudeSystem={})),function(e){e._3="3",e._5="5",e._7="7",e.Unknown="unknown"}(t.CameraAEBCount||(t.CameraAEBCount={})),function(e){e.F1dot6="f/1dot6",e.F1dot7="f/1dot7",e.F1dot8="f/1dot8",e.F2="f/2",e.F2dot2="f/2dot2",e.F2dot4="f/2dot4",e.F2dot5="f/2dot5",e.F2dot6="f/2dot6",e.F2dot8="f/2dot8",e.F3dot2="f/3dot2",e.F3dot4="f/3dot4",e.F3dot5="f/3dot5",e.F4="f/4",e.F4dot5="f/4dot5",e.F4dot8="f/4dot8",e.F5="f/5",e.F5dot6="f/5dot6",e.F6dot3="f/6dot3",e.F6dot8="f/6dot8",e.F7dot1="f/7dot1",e.F8="f/8",e.F9="f/9",e.F9dot5="f/9dot5",e.F9dot6="f/9dot6",e.F10="f/10",e.F11="f/11",e.F13="f/13",e.F14="f/14",e.F16="f/16",e.F18="f/18",e.F19="f/19",e.F20="f/20",e.F22="f/22",e.Unknown="unknown"}(t.CameraAperture||(t.CameraAperture={})),function(e){e.None="none",e.Art="art",e.BlackAndWhite="blackAndWhite",e.Bright="bright",e.DCinelike="dCinelike",e.Portrait="portrait",e.M31="m31",e.KDX="kDX",e.Prismo="prismo",e.Jugo="jugo",e.DLog="dLog",e.TrueColor="trueColor",e.Inverse="inverse",e.Reminiscence="reminiscence",e.Solarize="solarize",e.Posterize="posterize",e.Whiteboard="whiteboard",e.Blackboard="blackboard",e.Aqua="aqua",e.Delta="delta",e.DK79="dk79",e.Vision4="vision4",e.Vision6="vision6",e.TrueColorExt="trueColorExt",e.FilmA="filmA",e.FilmB="filmB",e.FilmC="filmC",e.FilmD="filmD",e.FilmE="filmE",e.FilmF="filmF",e.FilmG="filmG",e.FilmH="filmH",e.FilmI="filmI",e.HLG="hlg",e.Unknown="unknown"}(t.CameraColor||(t.CameraColor={})),function(e){e.N50="n50",e.N47="n47",e.N43="n43",e.N40="n40",e.N37="n37",e.N33="n33",e.N30="n30",e.N27="n27",e.N23="n23",e.N20="n20",e.N17="n17",e.N13="n13",e.N10="n10",e.N07="n07",e.N03="n03",e.N00="n00",e.P03="p03",e.P07="p07",e.P10="p10",e.P13="p13",e.P17="p17",e.P20="p20",e.P23="p23",e.P27="p27",e.P30="p30",e.P33="p33",e.P37="p37",e.P40="p40",e.P43="p43",e.P47="p47",e.P50="p50",e.Fixed="fixed",e.Unknown="unknown"}(t.CameraExposureCompensation||(t.CameraExposureCompensation={})),function(e){e.Program="program",e.ShutterPriority="shutterPriority",e.AperturePriority="aperturePriority",e.Manual="manual",e.Unknown="unknown"}(t.CameraExposureMode||(t.CameraExposureMode={})),function(e){e.Reset="reset",e.Sequence="sequence",e.Unknown="unknown"}(t.CameraFileIndexMode||(t.CameraFileIndexMode={})),function(e){e.Manual="manual",e.Auto="auto",e.AutoContinuous="autoContinuous",e.Unknown="unknown"}(t.CameraFocusMode||(t.CameraFocusMode={})),function(e){e.Auto="auto",e._100="100",e._200="200",e._400="400",e._800="800",e._1600="1600",e._3200="3200",e._6400="6400",e._12800="12800",e._25600="25600",e.Fixed="fixed",e.Unknown="unknown"}(t.CameraISO||(t.CameraISO={})),function(e){e.Photo="photo",e.Video="video",e.Playback="playback",e.Download="download",e.Broadcast="broadcast",e.Unknown="unknown"}(t.CameraMode||(t.CameraMode={})),function(e){e._4_3="4:3",e._16_9="16:9",e._3_2="3:2",e.Unknown="unknown"}(t.CameraPhotoAspectRatio||(t.CameraPhotoAspectRatio={})),function(e){e.RAW="raw",e.JPEG="jpeg",e.RAWAndJPEG="raw+jpeg",e.TIFF14Bit="tiff14bit",e.RadiometricJPEG="radiometricJpeg",e.TIFF14BitLinearLowTempResolution="tiff14bitLinearLowTempResolution",e.TIFF14BitLinearHighTempResolution="tiff14bitLinearHighTempResolution",e.Unknown="unknown"}(t.CameraPhotoFileFormat||(t.CameraPhotoFileFormat={})),function(e){e.Single="single",e.Interval="interval",e.AEB="aeb",e.HDR="hdr",e.EHDR="ehdr",e.Burst="burst",e.RAWBurst="rawBurst",e.ShallowFocus="shallowFocus",e.Panorama="panorama",e.HyperLight="hyperLight",e.TimeLapse="timeLapse",e.Unknown="unknown"}(t.CameraPhotoMode||(t.CameraPhotoMode={})),function(e){e._1_8000="1/8000",e._1_6400="1/6400",e._1_6000="1/6000",e._1_5000="1/5000",e._1_4000="1/4000",e._1_3200="1/3200",e._1_3000="1/3000",e._1_2500="1/2500",e._1_2000="1/2000",e._1_1600="1/1600",e._1_1500="1/1500",e._1_1250="1/1250",e._1_1000="1/1000",e._1_800="1/800",e._1_750="1/750",e._1_725="1/725",e._1_640="1/640",e._1_500="1/500",e._1_400="1/400",e._1_350="1/350",e._1_320="1/320",e._1_250="1/250",e._1_240="1/240",e._1_200="1/200",e._1_180="1/180",e._1_160="1/160",e._1_125="1/125",e._1_120="1/120",e._1_100="1/100",e._1_90="1/90",e._1_80="1/80",e._1_60="1/60",e._1_50="1/50",e._1_45="1/45",e._1_40="1/40",e._1_30="1/30",e._1_25="1/25",e._1_20="1/20",e._1_15="1/15",e._1_12dot5="1/12dot5",e._1_10="1/10",e._1_8="1/8",e._1_6dot25="1/6dot25",e._1_6="1/6",e._1_5="1/5",e._1_4="1/4",e._1_3="1/3",e._1_2dot5="1/2dot5",e._0dot3="0dot3",e._1_2="1/2",e._1_1dot67="1/1dot67",e._1_1dot25="1/1dot25",e._0dot7="0dot7",e._1="1",e._1dot3="1dot3",e._1dot4="1dot4",e._1dot6="1dot6",e._2="2",e._2dot5="2dot5",e._3="3",e._3dot2="3dot2",e._4="4",e._5="5",e._6="6",e._7="7",e._8="8",e._9="9",e._10="10",e._11="11",e._13="13",e._15="15",e._16="16",e._20="20",e._23="23",e._25="25",e._30="30",e.Unknown="unknown"}(t.CameraShutterSpeed||(t.CameraShutterSpeed={})),function(e){e.SDCard="sdCard",e.Internal="internal",e.Unknown="unknown"}(t.CameraStorageLocation||(t.CameraStorageLocation={})),function(e){e.H264="h264",e.H265="h265",e.Unknown="unknown"}(t.CameraVideoFileCompressionStandard||(t.CameraVideoFileCompressionStandard={})),function(e){e.MOV="mov",e.MP4="mp4",e.TIFFSequence="tiffSequence",e.SEQ="seq",e.Unknown="unknown"}(t.CameraVideoFileFormat||(t.CameraVideoFileFormat={})),function(e){e.Default="default",e.Narrow="narrow",e.Wide="wide",e.Unknown="unknown"}(t.CameraVideoFieldOfView||(t.CameraVideoFieldOfView={})),function(e){e._23dot976="23dot976",e._24="24",e._25="25",e._29dot970="29dot970",e._30="30",e._47dot950="47dot950",e._48="48",e._50="50",e._59dot940="59dot940",e._60="60",e._90="90",e._96="96",e._100="100",e._120="120",e._8dot7="8dot7",e.Unknown="unknown"}(t.CameraVideoFrameRate||(t.CameraVideoFrameRate={})),function(e){e._336x256="336x256",e._640x360="640x360",e._640x480="640x480",e._640x512="640x512",e._1280x720="1280x720",e._1920x1080="1920x1080",e._2048x1080="2048x1080",e._2688x1512="2688x1512",e._2704x1520="2704x1520",e._2720x1530="2720x1530",e._3712x2088="3712x2088",e._3840x1572="3840x1572",e._3840x2160="3840x2160",e._3944x2088="3944x2088",e._4096x2160="4096x2160",e._4608x2160="4608x2160",e._4608x2592="4608x2592",e._5280x2160="5280x2160",e._5280x2972="5280x2972",e._5760x3240="5760x3240",e._6016x3200="6016x3200",e.Max="max",e.NoSSDVideo="noSSDVideo",e.Unknown="unknown"}(t.CameraVideoResolution||(t.CameraVideoResolution={})),function(e){e.PAL="pal",e.NTSC="ntsc",e.Unknown="unknown"}(t.CameraVideoStandard||(t.CameraVideoStandard={})),function(e){e.Auto="auto",e.Sunny="sunny",e.Cloudy="cloudy",e.WaterSurface="waterSurface",e.IndoorIncandescent="indoorIncandescent",e.IndoorFluorescent="indoorFluorescent",e.Custom="custom",e.Neutral="neutral",e.Unknown="unknown"}(t.CameraWhiteBalancePreset||(t.CameraWhiteBalancePreset={})),function(e){e.Pending="pending",e.Queued="queued",e.Executing="executing",e.Succeeded="succeeded",e.Failed="failed"}(t.CommandExecutionStatus||(t.CommandExecutionStatus={})),function(e){e.Never="never",e.Approach="approach",e.Destination="destination"}(t.CommandReengagementTiming||(t.CommandReengagementTiming={})),function(e){e.Pending="pending",e.Executing="executing",e.Succeeded="succeeded",e.Failed="failed"}(t.ComponentExecutionStatus||(t.ComponentExecutionStatus={})),function(e){e.Safely="safely",e.PointToPoint="pointToPoint"}(t.DJIWaypointMissionGotoWaypointMode||(t.DJIWaypointMissionGotoWaypointMode={})),function(e){e.Auto="auto",e.UsingInitialDirection="usingInitialDirection",e.ControlledByRemoteController="controlledByRemoteController",e.UsingWaypointHeading="usingWaypointHeading",e.TowardPointOfInterest="towardPointOfInterest"}(t.DJIWaypointMissionHeadingMode||(t.DJIWaypointMissionHeadingMode={})),function(e){e.Normal="normal",e.Curved="curved"}(t.DJIWaypointMissionFlightPathMode||(t.DJIWaypointMissionFlightPathMode={})),function(e){e.Clockwise="clockwise",e.DJIWaypointTurnCounterClockwise="counterClockwise"}(t.DJIWaypointTurnMode||(t.DJIWaypointTurnMode={})),function(e){e.Stay="stay",e.ShootPhoto="shootPhoto",e.StartRecord="startRecord",e.StopRecord="stopRecord",e.RotateAircraft="rotateAircraft",e.RotateGimbalPitch="rotateGimbalPitch"}(t.DJIWaypointMissionComponentWaypointActionType||(t.DJIWaypointMissionComponentWaypointActionType={})),function(e){e.Hover="hover",e.ReturnHome="returnHome",e.AutoLand="autoLand",e.Unknown="unknown"}(t.DroneConnectionFailSafeBehavior||(t.DroneConnectionFailSafeBehavior={})),function(e){e.Auto="auto",e.Manual="manual",e.Unknown="unknown"}(t.DroneLightbridgeChannelSelectionMode||(t.DroneLightbridgeChannelSelectionMode={})),function(e){e._2dot4ghz="2dot4ghz",e._5dot7ghz="5dot7ghz",e._5dot8ghz="5dot8ghz",e.Unknown="unknown"}(t.DroneLightbridgeFrequencyBand||(t.DroneLightbridgeFrequencyBand={})),function(e){e.Auto="auto",e.Manual="manual",e.Unknown="unknown"}(t.DroneOcuSyncChannelSelectionMode||(t.DroneOcuSyncChannelSelectionMode={})),function(e){e._2dot4ghz="2dot4ghz",e._5dot8ghz="5dot8ghz",e.Dual="dual",e.Unknown="unknown"}(t.DroneOcuSyncFrequencyBand||(t.DroneOcuSyncFrequencyBand={})),function(e){e.Input="input",e.Plan="plan",e.Device="device",e.Drone="drone"}(t.GeoSpatialSource||(t.GeoSpatialSource={})),function(e){e.Free="free",e.FPV="fpv",e.YawFollow="yawFollow",e.Unknown="unknown"}(t.GimbalMode||(t.GimbalMode={})),function(e){e.None="none",e.Linear="linear",e.Sigmoid="sigmoid"}(t.InterpolationFunction||(t.InterpolationFunction={})),function(e){e.Info="info",e.Warning="warning",e.Danger="danger",e.Error="error"}(t.MessageLevel||(t.MessageLevel={})),function(e){e.Normal="normal",e.Grid="grid"}(t.MapPattern||(t.MapPattern={})),function(e){e.Horizon="horizon",e.Path="path"}(t.OrientationXReference||(t.OrientationXReference={})),function(e){e.North="north",e.Course="course",e.Heading="heading",e.Path="path"}(t.OrientationZReference||(t.OrientationZReference={})),function(e){e.Clockwise="clockwise",e.Counterclockwise="counterclockwise"}(t.OrbitDirection||(t.OrbitDirection={})),function(e){e.Intersect="intersect",e.Rounded="rounded"}(t.PathCornering||(t.PathCornering={})),function(e){e.Absolute="absolute",e.Coordinate="coordinate"}(t.PathMarkerPositioning||(t.PathMarkerPositioning={})),function(e){e.None="none",e.ReturnHome="returnHome",e.AutoLand="autoLand"}(t.PlanCompleteAction||(t.PlanCompleteAction={})),function(e){e.AEBCountCameraCommand="AEBCountCameraCommand",e.Altitude="Altitude",e.AltitudeRange="AltitudeRange",e.ApertureCameraCommand="ApertureCameraCommand",e.ApproachableComponent="ApproachableComponent",e.AutoExposureLockCameraCommand="AutoExposureLockCameraCommand",e.Camera="Camera",e.CameraImageSpecification="CameraImageSpecification",e.CameraLensSpecification="CameraLensSpecification",e.CameraSensorSpecification="CameraSensorSpecification",e.CameraCommand="CameraCommand",e.CameraSpecification="CameraSpecification",e.ColorCameraCommand="ColorCameraCommand",e.CommandComponent="CommandComponent",e.CommandExecutionState="CommandExecutionState",e.Component="Component",e.ComponentExecutionState="ComponentExecutionState",e.ComponentSource="ComponentSource",e.ConnectionFailSafeBehaviorDroneCommand="ConnectionFailSafeBehaviorDroneCommand",e.ContrastCameraCommand="ContrastCameraCommand",e.CourseComponent="CourseComponent",e.Datetime="Datetime",e.Descriptors="Descriptors",e.Disengagement="Disengagement",e.DestinationComponent="DestinationComponent",e.DistanceTolerance="DistanceTolerance",e.Device="Device",e.DJIWaypointMissionComponent="DJIWaypointMissionComponent",e.DJIWaypointMissionComponentWaypoint="DJIWaypointMissionComponentWaypoint",e.DJIWaypointMissionComponentWaypointAction="DJIWaypointMissionComponentWaypointAction",e.DJIWaypointMissionComponentWaypointActionType="DJIWaypointMissionComponentWaypointActionType",e.Drone="Drone",e.DroneCommand="DroneCommand",e.DroneMotionComponent="DroneMotionComponent",e.Engagement="Engagement",e.Execution="Execution",e.ExposureCompensationCameraCommand="ExposureCompensationCameraCommand",e.ExposureModeCameraCommand="ExposureModeCameraCommand",e.FocusModeCameraCommand="FocusModeCameraCommand",e.FieldOfView="FieldOfView",e.FileIndexModeCameraCommand="FileIndexModeCameraCommand",e.GeoCoordinate="GeoCoordinate",e.GeoReferencedOffset="GeoReferencedOffset",e.GeoSpatial="GeoSpatial",e.Gimbal="Gimbal",e.GimbalCommand="GimbalCommand",e.HeadingDroneCommand="HeadingDroneCommand",e.HeadingComponent="HeadingComponent",e.Interpolation="Interpolation",e.ISOCameraCommand="ISOCameraCommand",e.LightbridgeChannelDroneCommand="LightbridgeChannelDroneCommand",e.LightbridgeChannelSelectionModeDroneCommand="LightbridgeChannelSelectionModeDroneCommand",e.LightbridgeFrequencyBandDroneCommand="LightbridgeFrequencyBandDroneCommand",e.Limits="Limits",e.Line2="Line2",e.ListComponent="ListComponent",e.LowBatteryWarningThresholdDroneCommand="LowBatteryWarningThresholdDroneCommand",e.MapComponent="MapComponent",e.MapComponentBoundaryPoint="MapComponentBoundaryPoint",e.MaxAltitudeDroneCommand="MaxAltitudeDroneCommand",e.MaxDistanceDroneCommand="MaxDistanceDroneCommand",e.Message="Message",e.MessageGroup="MessageGroup",e.Mission="Mission",e.ModeCameraCommand="ModeCameraCommand",e.ModeGimbalCommand="ModeGimbalCommand",e.MotionLimits="MotionLimits",e.MotionLimitsOptional="MotionLimitsOptional",e.MotionLimits3="MotionLimits3",e.MotionLimits3Optional="MotionLimits3Optional",e.MotionLimits6="MotionLimits6",e.MotionLimits6Optional="MotionLimits6Optional",e.OcuSyncChannelDroneCommand="OcuSyncChannelDroneCommand",e.OcuSyncChannelSelectionModeDroneCommand="OcuSyncChannelSelectionModeDroneCommand",e.OcuSyncFrequencyBandDroneCommand="OcuSyncFrequencyBandDroneCommand",e.OrbitComponent="OrbitComponent",e.Orientation3="Orientation3",e.Orientation3Optional="Orientation3Optional",e.OrientationGimbalCommand="OrientationGimbalCommand",e.PhotoAspectRatioCameraCommand="PhotoAspectRatioCameraCommand",e.PhotoIntervalCameraCommand="PhotoIntervalCameraCommand",e.PhotoModeCameraCommand="PhotoModeCameraCommand",e.PointOfInterest="PointOfInterest",e.Position3="Position3",e.PathComponent="PathComponent",e.PathComponentWaypoint="PathComponentWaypoint",e.PathComponentMarker="PathComponentMarker",e.PathComponentModelSample="PathComponentModelSample",e.PlanComponent="PlanComponent",e.PhotoFileFormatCameraCommand="PhotoFileFormatCameraCommand",e.Point2="Point2",e.ReturnHomeAltitudeDroneCommand="ReturnHomeAltitudeDroneCommand",e.SaturationCameraCommand="SaturationCameraCommand",e.SharpnessCameraCommand="SharpnessCameraCommand",e.ShutterSpeedCameraCommand="ShutterSpeedCameraCommand",e.SourcedGeoSpatial="SourcedGeoSpatial",e.StorageLocationCameraCommand="StorageLocationCameraCommand",e.StartCaptureCameraCommand="StartCaptureCameraCommand",e.StopCaptureCameraCommand="StopCaptureCameraCommand",e.SubComponent="SubComponent",e.Timeline="Timeline",e.TimelineCameraCapture="TimelineCameraCapture",e.TimelineCommand="TimelineCommand",e.TimelineFrame="TimelineFrame",e.User="User",e.Vector2="Vector2",e.Velocity3="Velocity3",e.Velocity6="Velocity6",e.VelocityDroneCommand="VelocityDroneCommand",e.VelocityGimbalCommand="VelocityGimbalCommand",e.VideoFileCompressionStandardCameraCommand="VideoFileCompressionStandardCameraCommand",e.VideoFileFormatCameraCommand="VideoFileFormatCameraCommand",e.VideoResolutionFrameRateCameraCommand="VideoResolutionFrameRateCameraCommand",e.VideoStandardCameraCommand="VideoStandardCameraCommand",e.WhiteBalancePresetCameraCommand="WhiteBalancePresetCameraCommand",e.WhiteBalanceCustomCameraCommand="WhiteBalanceCustomCameraCommand"}(t.TypeName||(t.TypeName={})),function(e){e.Metric="metric",e.Imperial="imperial"}(t.UnitSystem||(t.UnitSystem={}))},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),o=n(3),a=i(n(208)),s=n(22);class u{static string(e){return o.Strings.getString(e,o.Strings.getLanguage(),!0)}static velocityHorizontal(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case r.UnitSystem.Metric:return new l(u.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:o.Strings.Unit.values.kilometersPerHour.name,abbreviation:o.Strings.Unit.values.kilometersPerHour.abbreviation});case r.UnitSystem.Imperial:return new l(u.number(s.Convert.metersPerSecondToMilesPerHour(e)),{name:o.Strings.Unit.values.milesPerHour.name,abbreviation:o.Strings.Unit.values.milesPerHour.abbreviation})}}static velocityVertical(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case r.UnitSystem.Metric:return new l(u.number(e),{name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation});case r.UnitSystem.Imperial:return new l(u.number(s.Convert.metersToFeet(e)),{name:o.Strings.Unit.values.feetPerSecond.name,abbreviation:o.Strings.Unit.values.feetPerSecond.abbreviation})}}static velocityRotational(e=0){return new l(u.angle(e,!1).value,{name:o.Strings.Unit.values.degreesPerSecond.name,abbreviation:o.Strings.Unit.values.degreesPerSecond.abbreviation})}static accelerationHorizontal(e=0){return new l(u.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:o.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:o.Strings.Unit.values.metersPerSecondSquared.abbreviation})}static accelerationVertical(e=0){return u.accelerationHorizontal(e)}static accelerationRotational(e=0){return new l(u.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:o.Strings.Unit.values.degreesPerSecondSquared.name,abbreviation:o.Strings.Unit.values.degreesPerSecondSquared.abbreviation})}static timeElapsed(e=0){if(e>0&&e<1)return a.default(e).format("0.00");const t=u.time(e),n=[];return"0"!==t.hours.value&&n.push(t.hours.value),n.push(t.minutes.value.length<2?"0"+t.minutes.value:t.minutes.value),n.push(t.seconds.value.length<2?"0"+t.seconds.value:t.seconds.value),n.join(":")}static time(e=0){const t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return{hours:new l(String(t),{name:o.Strings.Unit.values.hours.name,abbreviation:o.Strings.Unit.values.hours.abbreviation}),minutes:new l(String(n),{name:o.Strings.Unit.values.minutes.name,abbreviation:o.Strings.Unit.values.minutes.abbreviation}),seconds:new l(String(i),{name:o.Strings.Unit.values.seconds.name,abbreviation:o.Strings.Unit.values.seconds.abbreviation})}}static distance(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case r.UnitSystem.Metric:return e>1e3?new l(u.number(e/1e3),{name:o.Strings.Unit.values.kilometers.name,abbreviation:o.Strings.Unit.values.kilometers.abbreviation}):new l(u.number(e),{name:o.Strings.Unit.values.meters.name,abbreviation:o.Strings.Unit.values.meters.abbreviation});case r.UnitSystem.Imperial:return e>1609.34?new l(u.number(e/1609.34),{name:o.Strings.Unit.values.miles.name,abbreviation:o.Strings.Unit.values.miles.abbreviation}):new l(u.number(s.Convert.metersToFeet(e)),{name:o.Strings.Unit.values.feet.name,abbreviation:o.Strings.Unit.values.feet.abbreviation})}}static altitude(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case r.UnitSystem.Metric:return new l(u.number(e),{name:o.Strings.Unit.values.meters.name,abbreviation:o.Strings.Unit.values.meters.abbreviation});case r.UnitSystem.Imperial:return new l(u.number(s.Convert.metersToFeet(e)),{name:o.Strings.Unit.values.feet.name,abbreviation:o.Strings.Unit.values.feet.abbreviation})}}static angle(e=0,t=!0){if(Math.abs(e)<.01&&(e=0),t){if(e>2*Math.PI)return u.angle(e-2*Math.PI,t);if(e<0)return u.angle(e+2*Math.PI,t)}return new l(a.default(Math.round(s.Convert.radiansToDegrees(e))).format("0,0"),{name:o.Strings.Unit.values.degrees.name,abbreviation:o.Strings.Unit.values.degrees.abbreviation},"")}static cameraSpecificationLength(e=0){return new l(a.default(e).format(Math.round(e)===e?"0,0":"0,0.0"),{name:o.Strings.Unit.values.millimeters.name,abbreviation:o.Strings.Unit.values.millimeters.abbreviation})}static cameraSpecificationPixels(e=0){return new l(a.default(Math.round(e)).format("0,0"),{name:o.Strings.Unit.values.pixels.name,abbreviation:o.Strings.Unit.values.pixels.abbreviation})}static groundSampleDistance(e){const t=Math.max(e.width,e.height);switch(u.UnitSystem){case r.UnitSystem.Metric:return new l(a.default(100*t).format("0,0.00"),{name:o.Strings.Unit.values.centimetersPerPixel.name,abbreviation:o.Strings.Unit.values.centimetersPerPixel.abbreviation});case r.UnitSystem.Imperial:return new l(a.default(s.Convert.metersToInches(t)).format("0,0.00"),{name:o.Strings.Unit.values.inchesPerPixel.name,abbreviation:o.Strings.Unit.values.inchesPerPixel.abbreviation})}}static absoluteTemperature(e=0){return`${u.integer(e)} ${o.Strings.Unit.values.kelvin.abbreviation}`}static percent(e=0){return new l(a.default(100*e).format(e<.01?"0,0.0":"0,0"),{name:o.Strings.Unit.values.percent.name,abbreviation:o.Strings.Unit.values.percent.abbreviation},"")}static number(e){return Math.abs(e)<10?Math.abs(e)<.01?"0":a.default(e).format("0,0.0"):u.integer(e)}static integer(e,t=null){const n=a.default(Math.round(e)).format("0,0");return t?1===e?`${n} ${t.singular}`:`${n} ${t.plural}`:n}static degreesMinutesAndSeconds(e){const t=Math.abs(e),n=Math.floor(t),i=60*(t-n),r=Math.floor(i),a=Math.floor(60*(i-r));return n+o.Strings.Unit.values.degrees.abbreviation+r+o.Strings.Unit.values.geoMinutes.abbreviation+a+o.Strings.Unit.values.geoSeconds.abbreviation}static geoCoordinate(e){const t=Math.sign(e.latitude)>=0?{name:o.Strings.Unit.values.geoNorth.name,abbreviation:o.Strings.Unit.values.geoNorth.abbreviation}:{name:o.Strings.Unit.values.geoSouth.name,abbreviation:o.Strings.Unit.values.geoSouth.abbreviation},n=Math.sign(e.longitude)>=0?{name:o.Strings.Unit.values.geoEast.name,abbreviation:o.Strings.Unit.values.geoEast.abbreviation}:{name:o.Strings.Unit.values.geoWest.name,abbreviation:o.Strings.Unit.values.geoWest.abbreviation};return{latitude:new l(u.degreesMinutesAndSeconds(e.latitude),t),longitude:new l(u.degreesMinutesAndSeconds(e.longitude),n)}}static icaoWords(e){const t=[];if(e<0)return t;let n,i=e+1;for(;0!==i;){let e=i-1;i=Math.floor(e/u.icaoAlphabet.length),n=e%u.icaoAlphabet.length,t.push(u.icaoAlphabet[n])}return t.reverse()}static icaoLetters(e){return u.icaoWords(e).map(e=>e.charAt(0)).join("")}}t.Format=u,u.UnitSystem=r.UnitSystem.Imperial,u.icaoAlphabet=["Alfa","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett","Kilo","Lima","Mike","November","Oscar","Papa","Quebec","Romeo","Sierra","Tango","Uniform","Victor","Whiskey","Xray","Yankee","Zulu"];class l{constructor(e,t,n=" "){this.toString=(()=>`${this.value}${this.spacer}${this.unit.abbreviation}`),this.value=e,this.unit=t,this.spacer=n}}t.FormattedValue=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3);class r{static sleep(e){return new Promise(t=>setTimeout(t,e))}static uuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}static parseBoolean(e,t=!1){return null==e?t:!0===e}static parseFloat(e,t=0){const n=parseFloat(e);return Number.isNaN(n)?t:n}static parseInt(e,t=0){const n=parseInt(e);return Number.isNaN(n)?t:n}static sigmoidBase(e,t){return 1/(1+Math.exp(-t*e))-.5}static sigmoid(e,t=Math.E){return.5/r.sigmoidBase(1,t)*r.sigmoidBase(2*Math.max(Math.min(e,1),0)-1,t)+.5}static modSafe(e,t){return(e%t+t)%t}static matchSign(e,t){return t<0?-1*e:e}static movingAverage(e,t=1){const n=t/(e.length+1);return e.reduce((e,t)=>t*n+e*(1-n),0)}static debugLog(e){const t=new Date;console.debug(`[${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()} ${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}:${t.getMilliseconds()}] ${e}`)}static last(e){return e[e.length-1]}static lastSafe(e){return e.length>0?r.last(e):null}static remove(e,t){return e.filter(e=>e!==t&&(!t.id||!e.id||t.id!==e.id))}static joinNotEmpty(e,t=i.Strings.Common.delimeter){return e.filter(e=>e).join(t)}static descendantsMatching(e,t){if(!e)return[];const n=[];return t(e)&&n.push(e),Array.isArray(e)?n.push(...r.descendantsMatchingIterable(e,t)):e instanceof Object&&n.push(...r.descendantsMatchingIterable(Object.keys(e).map(t=>e[t]),t)),n}static descendantsMatchingIterable(e,t){if(!e||0===e.length)return[];const n=[];return e.forEach(e=>{n.push(...r.descendantsMatching(e,t))}),n.length>0?n:[]}}t.Common=r},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(206));t.Strings=new r.default({en:{Common:{delimeter:" | ",set:"Set",new:"New",enabled:"Enabled",disabled:"Disabled"},AchievableDroneMotionComponent:{values:{immediateComponent:"Immediate",immediateComponentTooltip:"The immediate component will be executed before this component is achieved.",achievedComponent:"Achieved",achievedComponentTooltip:"The achieved component will be executed after this component is achieved and after the immediate component is finished (if it exists)."},messages:{waiting:{title:"Waiting for Achievement"}}},AEBCountCameraCommand:{name:"Camera AEB Count",values:{aebCount:"AEB Count"}},Altitude:{name:"Altitude",values:{value:"Altitude",system:"System"}},AltitudeSystem:{name:"Altitude System",values:{atl:{name:"Above Takeoff Location",abbreviation:"ATL"},msl:{name:"Mean Sea Level",abbreviation:"MSL"},agl:{name:"Above Ground Level",abbreviation:"AGL"}}},AltitudeRange:{name:"Altitude Range",values:{altitude:"Target",range:"Range",rangeMin:"Below",rangeMax:"Above"}},ApertureCameraCommand:{name:"Camera Aperture",values:{aperture:"Aperture"}},ApproachableComponent:{name:"Approachable",values:{approachComponent:"Approach"}},AutoExposureLockCameraCommand:{name:"Camera Auto Exposure Lock",values:{enabled:"Auto Exposure Lock"}},Battery:{name:"Battery",multiple:"Batteries"},Camera:{name:"Camera"},CameraAEBCount:{name:"Camera AEB Count",values:{3:{name:"3"},5:{name:"5"},7:{name:"7"},unknown:{name:"Unknown"}}},CameraAperture:{name:"Camera Aperture",values:{auto:{name:"Auto"},"f/1dot6":{name:"f/1.6"},"f/1dot7":{name:"f/1.7"},"f/1dot8":{name:"f/1.8"},"f/2":{name:"f/2"},"f/2dot2":{name:"f/2.2"},"f/2dot4":{name:"f/2.4"},"f/2dot5":{name:"f/2.5"},"f/2dot6":{name:"f/2.6"},"f/2dot8":{name:"f/2.8"},"f/3dot2":{name:"f/3.2"},"f/3dot4":{name:"f/3.4"},"f/3dot5":{name:"f/3.5"},"f/4":{name:"f/4"},"f/4dot5":{name:"f/4.5"},"f/4dot8":{name:"f/4.8"},"f/5":{name:"f/5"},"f/5dot6":{name:"f/5.6"},"f/6dot3":{name:"f/6.3"},"f/6dot8":{name:"f/6.8"},"f/7dot1":{name:"f/7.1"},"f/8":{name:"f/8"},"f/9":{name:"f/9"},"f/9dot5":{name:"f/9.5"},"f/9dot6":{name:"f/9.6"},"f/10":{name:"f/10"},"f/11":{name:"f/11"},"f/13":{name:"f/13"},"f/14":{name:"f/14"},"f/16":{name:"f/16"},"f/18":{name:"f/18"},"f/19":{name:"f/19"},"f/20":{name:"f/20"},"f/22":{name:"f/22"},unknown:{name:"Unknown"}}},CameraColor:{name:"Camera Color",values:{none:{name:"Normal"},art:{name:"Art"},blackAndWhite:{name:"Black and White"},bright:{name:"Bright"},dCinelike:{name:"D-Cinelike"},portrait:{name:"Portrait"},m31:{name:"M31"},kDX:{name:"kDX"},prismo:{name:"Prismo"},jugo:{name:"Jugo"},dLog:{name:"DLog-M"},trueColor:{name:"True Color"},inverse:{name:"Inverse"},reminiscence:{name:"Reminiscence"},solarize:{name:"Solarize"},posterize:{name:"Posterize"},whiteboard:{name:"Whiteboard"},blackboard:{name:"Blackboard"},aqua:{name:"Aqua"},delta:{name:"Delta"},dk79:{name:"DK79"},vision4:{name:"Vision 4"},vision6:{name:"Vision6"},trueColorExt:{name:"True Color Extend"},filmA:{name:"Film A"},filmB:{name:"Film B"},filmC:{name:"Film C"},filmD:{name:"Film D"},filmE:{name:"Film E"},filmF:{name:"Film F"},filmG:{name:"Film G"},filmH:{name:"Film H"},filmI:{name:"Film I"},hlg:{name:"HLG"},unknown:{name:"Unknown"}}},CameraLensSpecification:{name:"Lens",values:{focalLength:"Focal Length"}},CameraCommand:{name:"Camera Command",description:""},CameraExposureCompensation:{name:"Camera Exposure Compensation",values:{n50:{name:"-5.0ev"},n47:{name:"-4.7ev"},n43:{name:"-4.3ev"},n40:{name:"-4.0ev"},n37:{name:"-3.7ev"},n33:{name:"-3.3ev"},n30:{name:"-3.0ev"},n27:{name:"-2.7ev"},n23:{name:"-2.3ev"},n20:{name:"-2.0ev"},n17:{name:"-1.7ev"},n13:{name:"-1.3ev"},n10:{name:"-1.0ev"},n07:{name:"-0.7ev"},n03:{name:"-0.3ev"},n00:{name:"0.0ev"},p03:{name:"+0.3ev"},p07:{name:"+0.7ev"},p10:{name:"+1.0ev"},p13:{name:"+1.3ev"},p17:{name:"+1.7ev"},p20:{name:"+2.0ev"},p23:{name:"+2.3ev"},p27:{name:"+2.7ev"},p30:{name:"+3.0ev"},p33:{name:"+3.3ev"},p37:{name:"+3.7ev"},p40:{name:"+4.0ev"},p43:{name:"+4.3ev"},p47:{name:"+4.7ev"},p50:{name:"+5.0ev"},fixed:{name:"Fixed"},unknown:{name:"Unknown"}}},CameraExposureMode:{name:"Camera Exposure Mode",values:{program:{name:"Auto"},shutterPriority:{name:"Shutter Priority"},aperturePriority:{name:"Aperture Priority"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},CameraFileIndexMode:{name:"Camera File Index Mode",values:{reset:{name:"Reset"},sequence:{name:"Sequence"},unknown:{name:"Unknown"}}},CameraFocusMode:{name:"Camera Focus Mode",values:{manual:{name:"Manual"},auto:{name:"Auto"},autoContinuous:{name:"Continuous AF"},unknown:{name:"Unknown"}}},CameraISO:{name:"Camera ISO",values:{auto:{name:"Auto"},100:{name:"100"},200:{name:"200"},400:{name:"400"},800:{name:"800"},1600:{name:"1600"},3200:{name:"3200"},6400:{name:"6400"},12800:{name:"12800"},25600:{name:"25600"},fixed:{name:"Fixed"},unknown:{name:"Unknown"}}},CameraMode:{name:"Camera Mode",values:{photo:{name:"Photo"},video:{name:"Video"},playback:{name:"Playback"},download:{name:"Download"},broadcast:{name:"Broadcast"},unknown:{name:"None"}}},CameraPhotoAspectRatio:{name:"Camera Photo Aspect Ratio",values:{"4:3":{name:"4:3"},"16:9":{name:"16:9"},"3:2":{name:"3:2"},unknown:{name:"Unknown"}}},CameraPhotoFileFormat:{name:"Camera Photo File Format",values:{raw:{name:"RAW"},jpeg:{name:"JPEG"},"raw+jpeg":{name:"RAW+JPEG"},tiff14bit:{name:"TIFF (14bit)"},radiometricJpeg:{name:"Radiometric JPEG"},tiff14bitLinearLowTempResolution:{name:"TIFF Linear Low"},tiff14bitLinearHighTempResolution:{name:"TIFF Linear High"},unknown:{name:"Unknown"}}},CameraPhotoMode:{name:"Camera Photo Type",values:{single:{name:"Single"},interval:{name:"Interval"},aeb:{name:"AEB"},hdr:{name:"HDR"},ehdr:{name:"eHDR"},burst:{name:"Burst"},rawBurst:{name:"RAW Burst"},shallowFocus:{name:"Shallow Focus"},panorama:{name:"Panorama"},hyperLight:{name:"Hyper Light"},timeLapse:{name:"Time Lapse"},unknown:{name:"Unknown"}}},CameraImageSpecification:{name:"Image",values:{width:"Width",height:"Height"}},CameraSensorSpecification:{name:"Sensor",values:{width:"Width",height:"Height"}},CameraSpecification:{models:{zenmuseX5S:"Inspire 2 - Zenmuse X5S",zenmuseX4S:"Inspire 2 - Zenmuse X4S",zenmuseX5R:"Inspire 1 - Zenmuse X5R",zenmuseX5:"Inspire 1 - Zenmuse X5",zenmuseX3:"Inspire 1 - Zenmuse X3",mavic2Pro:"Mavic 2 - Pro (Full FOV)",mavic2ProHQ:"Mavic 2 - Pro (HQ)",mavic2ZoomMin:"Mavic 2 - Zoom (min)",mavic2ZoomMax:"Mavic 2 - Zoom (max)",mavicAir:"Mavic - Air",mavicPro:"Mavic - Pro",mavicProPlatinum:"Mavic - Pro Platinum",phantom4Pro2_0:"Phantom 4 - Pro v2.0",phantom4Pro:"Phantom 4 - Pro",phantom4Advanced:"Phantom 4 - Advanced",phantom3Pro:"Phantom 3 - Pro",phantom3Advanced:"Phantom 3 - Advanced",phantom3Standard:"Phantom 3 - Standard",spark:"Spark"}},CameraShutterSpeed:{name:"Camera Shutter Speed",values:{"1/8000":{name:"1/8000 s"},"1/6400":{name:"1/6400 s"},"1/6000":{name:"1/6000 s"},"1/5000":{name:"1/5000 s"},"1/4000":{name:"1/4000 s"},"1/3200":{name:"1/3200 s"},"1/3000":{name:"1/3000 s"},"1/2500":{name:"1/2500 s"},"1/2000":{name:"1/2000 s"},"1/1600":{name:"1/1600 s"},"1/1500":{name:"1/1500 s"},"1/1250":{name:"1/1250 s"},"1/1000":{name:"1/1000"},"1/800":{name:"1/800 s"},"1/750":{name:"1/750 s"},"1/725":{name:"1/725 s"},"1/640":{name:"1/640 s"},"1/500":{name:"1/500 s"},"1/400":{name:"1/400 s"},"1/350":{name:"1/350 s"},"1/320":{name:"1/320 s"},"1/250":{name:"1/250 s"},"1/240":{name:"1/240 s"},"1/200":{name:"1/200 s"},"1/180":{name:"1/180 s"},"1/160":{name:"1/160 s"},"1/125":{name:"1/125 s"},"1/120":{name:"1/120 s"},"1/100":{name:"1/100 s"},"1/90":{name:"1/90 s"},"1/80":{name:"1/80 s"},"1/60":{name:"1/60 s"},"1/50":{name:"1/50 s"},"1/45":{name:"1/45 s"},"1/40":{name:"1/40 s"},"1/30":{name:"1/30 s"},"1/25":{name:"1/25 s"},"1/20":{name:"1/20 s"},"1/15":{name:"1/15 s"},"1/12dot5":{name:"1/12.5 s"},"1/10":{name:"1/10 s"},"1/8":{name:"1/8 s"},"1/6dot25":{name:"1/6.25 s"},"1/6":{name:"1/6 s"},"1/5":{name:"1/5 s"},"1/4":{name:"1/4 s"},"1/3":{name:"1/3 s"},"1/2dot5":{name:"1/2.5 s"},"0dot3":{name:"0.3 s"},"1/2":{name:"1/2 s"},"1/1dot67":{name:"1/1.67 s"},"1/1dot25":{name:"1/1.25 s"},"0dot7":{name:"0.7 s"},1:{name:"1.0 s"},"1dot3":{name:"1.3 s"},"1dot4":{name:"1.4 s"},"1dot6":{name:"1.6 s"},2:{name:"2.0 s"},"2dot5":{name:"2.5 s"},3:{name:"3.0 s"},"3dot2":{name:"3.2 s"},4:{name:"4.0 s"},5:{name:"5.0 s"},6:{name:"6.0 s"},7:{name:"7.0 s"},8:{name:"8.0 s"},9:{name:"9.0 s"},10:{name:"10.0 s"},11:{name:"11.0 s"},13:{name:"13.0 s"},15:{name:"15.0 s"},16:{name:"16.0 s"},20:{name:"20.0 s"},23:{name:"23.0 s"},25:{name:"25.0 s"},30:{name:"30.0 s"},unknown:{name:"Unknown"}}},CameraStorageLocation:{name:"Camera Storage Location",values:{sdCard:{name:"SD Card"},internal:{name:"Internal"},unknown:{name:"Unknown"}}},CameraVideoFileCompressionStandard:{name:"Camera Video File Compression Standard",values:{h264:{name:"H.264"},h265:{name:"H.265"},unknown:{name:"Unknown"}}},CameraVideoFileFormat:{name:"Camera Video File Format",values:{mov:{name:"MOV"},mp4:{name:"MP4"},tiffSequence:{name:"TIFF Sequence"},seq:{name:"SEQ"},unknown:{name:"Unknown"}}},CameraVideoFieldOfView:{name:"Camera Video Field of View",values:{default:{name:"Default"},narrow:{name:"HQ (Narrow)"},wide:{name:"Full FOV (Wide)"},unknown:{name:"Unknown"}}},CameraVideoFrameRate:{name:"Camera Video Frame Rate",values:{"23dot976":{name:"23.976fps"},24:{name:"24fps"},25:{name:"25fps"},"29dot970":{name:"29.970fps"},30:{name:"30fps"},"47dot950":{name:"47.950fps"},48:{name:"48fps"},50:{name:"50fps"},"59dot940":{name:"59.940fps"},60:{name:"60fps"},90:{name:"90fps"},96:{name:"96fps"},100:{name:"100fps"},120:{name:"120fps"},"8dot7":{name:"8.7fps"},unknown:{name:"Unknown"}}},CameraVideoResolution:{name:"Camera Video Resolution",values:{"336x256":{name:"336x256"},"640x360":{name:"640x360"},"640x480":{name:"640x480"},"640x512":{name:"640x512"},"1280x720":{name:"1280x720"},"1920x1080":{name:"1920x1080"},"2048x1080":{name:"2048x1080"},"2688x1512":{name:"2688x1512"},"2704x1520":{name:"2704x1520"},"2720x1530":{name:"2720x1530"},"3712x2088":{name:"3712x2088"},"3840x1572":{name:"3840x1572"},"3840x2160":{name:"3840x2160"},"3944x2088":{name:"3944x2088"},"4096x2160":{name:"4096x2160"},"4608x2160":{name:"4608x2160"},"4608x2592":{name:"4608x2592"},"5280x2160":{name:"5280x2160"},"5280x2972":{name:"5280x2972"},"5760x3240":{name:"5760x3240"},"6016x3200":{name:"6016x3200"},max:{name:"Max"},noSSDVideo:{name:"No SSD Video"},unknown:{name:"Unknown"}}},CameraVideoStandard:{name:"Camera Video Standard",values:{pal:{name:"PAL"},ntsc:{name:"NTSC"},unknown:{name:"Unknown"}}},CameraWhiteBalancePreset:{name:"Camera White Balance Preset",values:{auto:{name:"Auto"},sunny:{name:"Sunny"},cloudy:{name:"Cloudy"},waterSurface:{name:"Water Surface"},indoorIncandescent:{name:"Indoor Incandescent"},indoorFluorescent:{name:"Indoor Fluorescent"},custom:{name:"Custom"},neutral:{name:"Neutral"},unknown:{name:"Unknown"}}},ColorCameraCommand:{name:"Camera Color",values:{color:"Color"}},Component:{name:"Component",multiple:"Components",verification:"Verification",values:{coordinate:"Reference",referenceOffsetsHandleCoordinate:"Center",descriptors:"Descriptors"}},Command:{name:"Command"},CommandComponent:{name:"Command",description:"Perform a drone, camera, or gimbal command."},CommandExecutionStatus:{name:"Command Execution Status",values:{pending:{name:"Pending"},queued:{name:"Queued"},executing:{name:"Executing"},succeeded:{name:"Succeeded"},failed:{name:"Failed"}}},ComponentExecutionState:{name:"Component Execution State"},ComponentExecutionStatus:{name:"Component Execution Status",values:{pending:{name:"Pending"},executing:{name:"Executing"},succeeded:{name:"Succeeded"},failed:{name:"Failed"}}},ConnectionFailSafeBehaviorDroneCommand:{name:"Drone Connection Fail-Safe",values:{connectionFailSafeBehavior:"Behavior"}},ContrastCameraCommand:{name:"Camera Contrast",values:{contrast:"Contrast"}},CourseComponent:{name:"Course",description:"Fly the drone along a specific course.",subtitle:"{0} ±{1}"},Datetime:{name:"Datetime"},Descriptors:{name:"Descriptors",values:{name:"Name",description:"Description",tags:"Tags"}},DestinationComponent:{name:"Destination",description:"Fly the drone to a specific location.",values:{automaticOrientation:"Automatic Orientation",destinationOffset:"Destination",achievement:"Achievement",achievementTime:"Time",achievementDistance:"Distance",altitudeRange:"Altitude Range"},messages:{moving:{title:"Destination",details:{distance:"D {0}",altitude:"A {0}",heading:"H {0}"}}}},Device:{name:"Device",multiple:"Devices"},Disengagement:{name:"Disengagement"},DistanceTolerance:{name:"Distance Tolerance",values:{horizontal:"Distance",vertical:"Altitude"}},Drone:{name:"Drone",multiple:"Drones"},DroneCommand:{name:"Drone Command",description:""},DroneConnectionFailSafeBehavior:{name:"Drone Connection Fail-Safe Behavior",values:{hover:{name:"Hover"},returnHome:{name:"Return Home"},autoLand:{name:"Auto Land"},unknown:{name:"Unknown"}}},DroneLightbridgeChannelSelectionMode:{name:"Drone Lightbridge Channel Selection Mode",values:{auto:{name:"Auto"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},DroneLightbridgeFrequencyBand:{name:"Drone Lightbridge Frequency Band",values:{"2dot4ghz":{name:"2.4GHz"},"5dot7ghz":{name:"5.7GHz"},"5dot8ghz":{name:"5.8GHz"},unknown:{name:"Unknown"}}},DroneMotionComponent:{name:"Motion",values:{droneMotionLimits:"Drone Motion Limits",droneMotionLimitsHorizontalVelocityMax:"Speed (max)",droneMotionLimitsHorizontalAccelerationMin:"H. Deceleration",droneMotionLimitsHorizontalAccelerationMax:"H. Acceleration",droneMotionLimitsVerticalVelocityMin:"Descent Rate",droneMotionLimitsVerticalVelocityMax:"Ascent Rate",droneMotionLimitsVerticalAccelerationMin:"V. Deceleration",droneMotionLimitsVerticalAccelerationMax:"V. Acceleration",droneMotionLimitsRotationalVelocityMax:"Rotation Rate",droneMotionLimitsRotationalAccelerationMin:"R. Deceleration",droneMotionLimitsRotationalAccelerationMax:"R. Acceleration"}},DroneOcuSyncChannelSelectionMode:{name:"Drone OcuSync Channel Selection Mode",values:{auto:{name:"Auto"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},DroneOcuSyncFrequencyBand:{name:"Drone OcuSync Frequency Band",values:{"2dot4ghz":{name:"2.4GHz"},"5dot8ghz":{name:"5.8GHz"},dual:{name:"Dual"},unknown:{name:"Unknown"}}},Engagement:{name:"Engagement",multiple:"Engagements"},Execution:{name:"Execution"},ExposureCompensationCameraCommand:{name:"Camera Exposure Compensation",values:{exposureCompensation:"Exposure Compensation"}},ExposureModeCameraCommand:{name:"Camera Exposure Mode",values:{exposureMode:"Exposure Mode"}},FileIndexModeCameraCommand:{name:"Camera File Index Mode",values:{fileIndexMode:"File Index Mode"}},FocusModeCameraCommand:{name:"Camera Focus Mode",values:{focusMode:"Focus Mode"}},Gimbal:{name:"Gimbal"},GimbalMode:{name:"Gimbal Mode",values:{free:{name:"Free"},fpv:{name:"FPV"},yawFollow:{name:"Yaw Follow"},unknown:{name:"Unknown"}}},GeoCoordinate:{name:"Geo Coordinate",values:{latitude:"Latitude",longitude:"Longitude"}},GeoReferencedOffset:{name:"Geo Referenced Offset",values:{altitudeOffset:"Altitude Offset"}},GeoSpatial:{name:"Geo Spatial"},GeoSpatialSource:{name:"Geo Spatial Source",values:{input:{name:"Input"},plan:{name:"Plan"},user:{name:"User"},drone:{name:"Drone"}}},GimbalCommand:{name:"Gimbal Command",description:""},GroundSampleDistance:{name:"Ground Sample Distance"},HeadingDroneCommand:{name:"Heading"},HeadingComponent:{name:"Heading",description:"Point the drone in a specific direction.",subtitle:"{0} ±{1}",values:{heading:"Heading",achievement:"Achievement",achievementTime:"Time",achievementDistance:"Distance"},messages:{rotating:{title:"Rotating"},waiting:{title:"Waiting"}}},InterpolationFunction:{name:"Interpolation",values:{none:{name:"None"},linear:{name:"Linear"},sigmoid:{name:"Curved"}}},ISOCameraCommand:{name:"Camera ISO",values:{iso:"ISO"}},LightbridgeChannelDroneCommand:{name:"Drone Lightbridge Channel",values:{lightbridgeChannel:"Channel"}},LightbridgeChannelSelectionModeDroneCommand:{name:"Drone Lightbridge Channel Selection Mode",values:{lightbridgeChannelSelectionMode:"Channel Selection Mode"}},LightbridgeFrequencyBandDroneCommand:{name:"Drone Lightbridge Frequency Band",values:{lightbridgeFrequencyBand:"Frequency Band"}},Limits:{name:"Limits",toString:{same:"±{0}",different:"{0}, +{1}"},values:{min:"Min",max:"Max"}},Line2:{name:"Line"},ListComponent:{name:"List",description:"Group components and create component hierarchies.",messages:{running:{title:{single:"Component {0} of {1}",multiple:"{0} of {1} Components Complete"}}}},LowBatteryWarningThresholdDroneCommand:{name:"Drone Low Battery Warning",values:{lowBatteryWarningThreshold:"Threshold"}},MapComponent:{name:"Map",description:"Fly the drone inside a boundary to create an orthomosaic or point cloud.",values:{pattern:"Pattern",direction:"Direction",cameraMode:"Capture Mode",boundaryPoints:"Boundary Points",frontOverlap:"Front Overlap",sideOverlap:"Side Overlap",minCaptureInterval:"Min Capture Interval",targetDistance:"Target Distance",gimbalOrientation:"Capture Angle"}},MapComponentBoundaryPoint:{name:"Boundary Point",multiple:"Boundary Points"},MapPattern:{name:"Map Pattern",values:{normal:{name:"Normal"},grid:{name:"Grid"}}},MaxAltitudeDroneCommand:{name:"Drone Max Altitude",values:{maxAltitude:"Altitude"}},MaxDistanceDroneCommand:{name:"Drone Max Distance",values:{maxDistance:"Distance"}},Mission:{name:"Mission",multiple:"Missions",messages:{reengaging:"Resuming",reengagementFailed:"Unable to Resume",reengagementDelay:"Device Running Too Slow",reengagementUserID:"User Changed",reengagementDeviceID:"Device Changed",reengagementDroneID:"Drone Changed",succeeded:"Mission Accomplished",failed:"Mission Failed",complete:"Mission Complete",engageDisallowed:{complete:"Mission Already Complete",engaged:"Mission Already Started",requiredTakeoffInvalid:{title:"Invalid Drone Takeoff Location",details:"Drone takeoff location is {0} outside the required takeoff area."}}},values:{reengagement:"Resuming Mission"}},MissionIssue:{name:"Issue",multiple:"Issues",messages:{cameraCommand:{requiredNotCapturingUnknown:{title:"{0} attempted before camera stop capture.",details:"Recommendation: Add a camera stop capture command before this command."},requiredNotCapturingInvalid:{title:"{0} attempted while camera capturing. This command will always fail.",details:"Recommendation: Add a camera stop capture command before this command."},requiredModeUnknown:{title:"{0} attempted while camera in unknown mode.",details:"Recommendation: Add a camera mode command before this command."},requiredModeInvalid:{title:"{0} attempted while camera in {1} mode. This command will always fail.",details:"Recommendation: Add a camera mode command before this command."}},stopCaptureCameraCommand:{stoppedAlready:{title:"Camera stop capture attempted while camera already stopped.",details:"Recommendation: Remove this command."}},startCaptureCameraCommand:{beforeStopped:{title:"Camera start capture attempted before camera stop capture.",details:"Recommendation: Add a camera stop capture command before this command in case the camera is already capturing before the Mission starts."},startedAlready:{title:"Camera start capture attempted while camera already capturing.",details:"Recommendation: Remove this command."},beforeMode:{title:"Camera start capture attempted before setting camera mode.",details:"Recommendation: Add a camera mode command before this command."},invalidMode:{title:"Camera start capture attempted while camera in {0} mode. This command will always fail.",details:"Recommendation: Add a camera mode command before this command."},beforePhotoMode:{title:"Camera start capture in {0} mode attempted before setting camera photo type.",details:"Recommendation: Add a camera photo type command before this command."}}}},Message:{name:"Message"},MessageLevel:{name:"Message Level",values:{info:"Info",warning:"Warning",danger:"Danger",error:"Error"}},ModeCameraCommand:{name:"Camera Mode",values:{mode:"Mode"}},ModeGimbalCommand:{name:"Gimbal Mode",values:{mode:"Mode"}},MotionLimits:{name:"Motion Limits",values:{velocity:"Speed",acceleration:"Acceleration"}},MotionLimits6:{name:"Motion Limits (6D)",values:{horizontal:"Horizontal",vertical:"Vertical",rotational:"Rotational"}},OcuSyncChannelDroneCommand:{name:"Drone OcuSync Channel",values:{ocuSyncChannel:"Channel"}},OcuSyncChannelSelectionModeDroneCommand:{name:"Drone OcuSync Channel Selection Mode",values:{ocuSyncChannelSelectionMode:"Channel Selection Mode"}},OcuSyncFrequencyBandDroneCommand:{name:"Drone OcuSync Frequency Band",values:{ocuSyncFrequencyBand:"Frequency Band"}},OrbitComponent:{name:"Orbit",description:"Fly the drone in a circle around a point of interest.",subtitle:"{0} {1} → {2}",values:{centerOffset:"Orbit Center",radius:"Radius",finalRadius:"Final Radius",direction:"Direction",circumference:"Circumference",rotations:"Rotations",finalAltitude:"Final Altitude",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"}},OrbitDirection:{name:"Orbit Direction",values:{clockwise:{name:"Clockwise"},counterclockwise:{name:"Counterclockwise"}}},Orientation3:{name:"Orientation",values:{x:"Pitch",xReference:"Reference",y:"Roll",z:"Heading",zReference:"Reference"}},OrientationGimbalCommand:{name:"Gimbal Attitude"},OrientationXReference:{name:"Pitch Reference",values:{horizon:{name:"Horizon"},path:{name:"Path"}}},OrientationZReference:{name:"Heading Reference",values:{north:{name:"North"},course:{name:"Course"},heading:{name:"Heading"},path:{name:"Path"}}},PathMarkerPositioning:{name:"Marker Positioning",values:{absolute:{name:"Distance from Start"},coordinate:{name:"Nearest Coordinate"}}},PayloadCommand:{name:"Payload Command",values:{channel:"Channel"}},PlanCompleteAction:{name:"Plan Complete Action",values:{none:{name:"None"},returnHome:{name:"Return Home"},autoLand:{name:"Auto Land"}}},PhotoAspectRatioCameraCommand:{name:"Camera Photo Aspect Ratio",values:{photoAspectRatio:"Photo Aspect Ratio"}},PhotoFileFormatCameraCommand:{name:"Camera Photo File Format",values:{photoFileFormat:"Photo File Format"}},PhotoIntervalCameraCommand:{name:"Camera Photo Interval",values:{photoInterval:"Photo Interval"}},PhotoModeCameraCommand:{name:"Camera Photo Type",values:{photoMode:"Photo Type"}},PathComponent:{name:"Path",description:"Fly the drone along a path defined by a series of waypoints.",values:{cornering:"Pathing",cornerRadius:"Corner Radius",waypoints:"Waypoints",markers:"Markers"}},PathComponentMarker:{name:"Marker",multiple:"Markers",values:{positioning:"Positioning",interpolation:"Interpolation",component:"Component",altitude:"Altitude",pointOfInterestID:"Point of Interest",droneMotionLimits:"Drone Motion Limits",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"}},PathComponentWaypoint:{name:"Waypoint",multiple:"Waypoints"},PathCornering:{name:"Path Cornering",values:{intersect:{name:"Curved"},rounded:{name:"Straight"}}},PlanComponent:{name:"Plan",multiple:"Plans",values:{completeAction:"Action on Finish",rootComponent:"Root",takeoffOffset:"Restricted Takeoff"}},Point2:{name:"Point"},PointOfInterest:{name:"Point of Interest",multiple:"Points of Interest"},ReturnHomeAltitudeDroneCommand:{name:"Drone Return Home Altitude",values:{returnHomeAltitude:"Altitude"}},SaturationCameraCommand:{name:"Camera Saturation",values:{saturation:"Saturation"}},SharpnessCameraCommand:{name:"Camera Sharpness",values:{sharpness:"Sharpness"}},Simulation:{name:"Simulation",messages:{disengageStop:"Simulation Stopped"}},ShutterSpeedCameraCommand:{name:"Camera Shutter Speed",values:{shutterSpeed:"Shutter Speed"}},SourcedGeoSpatial:{name:"Sourced Geo Spatial"},StartCaptureCameraCommand:{name:"Camera Start Capture"},StopCaptureCameraCommand:{name:"Camera Stop Capture"},StorageLocationCameraCommand:{name:"Camera Storage Location",values:{storageLocation:"Storage Location"}},SubComponent:{name:"Component",multiple:"Components",values:{required:"Required",exclusive:"Exclusive",pointsOfInterest:"Points of Interest"}},Unit:{name:"Unit",values:{kilometersPerHour:{name:"Kilometers per Hour",abbreviation:"km/h"},milesPerHour:{name:"Miles per Hour",abbreviation:"mph"},metersPerSecond:{name:"Meters per Second",abbreviation:"m/s"},metersPerSecondSquared:{name:"Meters per Second Squared",abbreviation:"m/s²"},feetPerSecond:{name:"Feet per Second",abbreviation:"fps"},feetPerSecondSquared:{name:"Feet per Second Squared",abbreviation:"ft/s²"},kilometers:{name:"Kilometers",abbreviation:"km"},miles:{name:"Miles",abbreviation:"mi"},meters:{name:"Meters",abbreviation:"m"},millimeters:{name:"Millimeters",abbreviation:"mm"},feet:{name:"Feet",abbreviation:"ft"},degrees:{name:"Degrees",abbreviation:"°"},degreesPerSecond:{name:"Degrees per Second",abbreviation:"°/s"},degreesPerSecondSquared:{name:"Degrees per Second Squared",abbreviation:"°/s²"},radians:{name:"Radians",abbreviation:"c"},radiansPerSecond:{name:"Radians per Second",abbreviation:"c/s"},radiansPerSecondSquared:{name:"Radians per Second Squared",abbreviation:"c/s²"},geoMinutes:{name:"Minutes",abbreviation:"'"},geoSeconds:{name:"Seconds",abbreviation:'"'},geoNorth:{name:"North",abbreviation:"N"},geoSouth:{name:"South",abbreviation:"S"},geoEast:{name:"East",abbreviation:"E"},geoWest:{name:"West",abbreviation:"W"},hours:{name:"Hours",abbreviation:"h"},minutes:{name:"Minutes",abbreviation:"m"},seconds:{name:"Seconds",abbreviation:"s"},percent:{name:"Percent",abbreviation:"%"},kelvin:{name:"Kelvin",abbreviation:"K"},pixels:{name:"Pixels",abbreviation:"px"},centimetersPerPixel:{name:"Centimeters per Pixel",abbreviation:"cm/px"},inchesPerPixel:{name:"Inches per Pixel",abbreviation:"in/px"}}},UnitSystem:{name:"Unit System",values:{metric:{name:"Metric"},imperial:{name:"Imperial"}}},User:{name:"User",multiple:"Users"},Vector2:{name:"Vector"},Velocity3:{name:"Velocity"},Velocity6:{name:"Velocity",toString:{horizontal:"H/S {0} → {1}",vertical:"V/S {0}",rotational:"R/S {0}"}},VelocityDroneCommand:{name:"Drone Motion",messages:{controls:{title:"Drone",details:{horizontal:"H {0} → {1}",vertical:"V {0}",rotational:"R {0}",heading:"Y {0}"}}}},VelocityGimbalCommand:{name:"Gimbal Motion",messages:{controls:{title:"Gimbal",details:{pitch:"P {0}",roll:"R {0}",yaw:"Y {0}"}}}},VideoFileCompressionStandardCameraCommand:{name:"Camera Video File Compression Standard",values:{videoFileCompressionStandard:"Video File Compression Standard"}},VideoFileFormatCameraCommand:{name:"Camera Video File Format",values:{videoFileFormat:"Video File Format"}},VideoResolutionFrameRateCameraCommand:{name:"Camera Video Resolution & Frame Rate",values:{videoResolution:"Video Resolution",videoFrameRate:"Video Frame Rate",videoFieldOfView:"Video Field of View"}},VideoStandardCameraCommand:{name:"Camera Video Standard",values:{videoStandard:"Video Standard"}},WhiteBalanceCustomCameraCommand:{name:"Camera White Balance Custom",values:{whiteBalanceCustom:"Temperature"}},WhiteBalancePresetCameraCommand:{name:"Camera White Balance Preset",values:{whiteBalancePreset:"White Balance Preset"}}}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(49);t.CameraCommand=class extends i.PayloadCommand{get requiredMode(){return null}get requiredCapturing(){return null}}},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(234)),o=n(2),a=n(1),s=n(73),u=n(157),l=n(158),c=n(159),m=n(160),d=n(161),h=n(162),p=n(163),f=n(164),g=n(165),y=n(166),v=n(167),C=n(42),S=n(168),b=n(169),w=n(170),x=n(171),M=n(172),O=n(173),D=n(110),P=n(174),T=n(175),_=n(176),E=n(50),N=n(177),F=n(178),I=n(74),A=n(51),L=n(179),R=n(180),k=n(181),z=n(43),B=n(44),V=n(182),j=n(183),U=n(184),J=n(185),G=n(186),W=n(187),q=n(188),H=n(75),$=n(76),K=n(77),Y=n(78),X=n(111),Z=n(53),Q=n(114),ee=n(91),te=n(116),ne=n(190),ie=n(57),re=n(191),oe=n(192),ae=n(59),se=n(60),ue=n(193),le=n(119),ce=n(33),me=n(97),de=n(98),he=n(99),pe=n(100),fe=n(101),ge=n(102),ye=n(12),ve=n(30),Ce=n(120),Se=n(66),be=n(37),we=n(40),xe=n(121),Me=n(123),Oe=n(103),De=n(38),Pe=n(112),Te=n(23),_e=n(58),Ee=n(45),Ne=n(29),Fe=n(56),Ie=n(93),Ae=n(11),Le=n(138),Re=n(122),ke=n(64),ze=n(86),Be=n(63),Ve=n(115),je=n(62),Ue=n(85),Je=n(54),Ge=n(46),We=n(20),qe=n(19),He=n(79),$e=n(0),Ke=n(21),Ye=n(21),Xe=n(21),Ze=n(21),Qe=n(61),et=n(7),tt=n(31),nt=n(25),it=n(6);class rt{static typeDisplay(e,t="name"){return e?"string"==typeof e?a.Format.string(`${e}.${t}`):rt.typeDisplay(e.type,t):""}static clone(e,t=!1){const n=rt.deserialize(rt.serialize(e));if(t){const e={};o.Common.descendantsMatching(n,e=>e instanceof it.Identifiable&&e.resettable).forEach(t=>{const n=o.Common.uuid();e[t.id]=n,t.id=n}),o.Common.descendantsMatching(n,e=>"object"==typeof e).forEach(t=>{Object.keys(t).map(n=>{const i=t[n];"string"==typeof i&&e[i]&&(t[n]=e[i])})})}return n}static plainJSON(e){return JSON.parse(rt.serialize(e))}static write(e){return rt.WriteCompressByDefault?rt.compress(e):rt.serialize(e)}static read(e){try{const t=rt.decompress(e);if(t)return t}catch(e){}try{return rt.deserialize(e)}catch(e){}return null}static serialize(e){return JSON.stringify(e,(e,t)=>null===t||""===t||Array.isArray(t)&&0===t.length?void 0:t)}static compress(e){return e?r.default.compress(rt.serialize(e),{outputEncoding:"StorageBinaryString"}):null}static decompress(e){return e?rt.deserialize(r.default.decompress(e,{inputEncoding:"StorageBinaryString"})):null}static applyJSON(e,t){return t.applyJSON(e)?t:null}static deserialize(e){if(!e)return null;if("string"==typeof e)return rt.deserialize(JSON.parse(e));const t=rt.deserializeInstance(e);return null===t&&o.Common.debugLog(`Failed to deserialize: ${e.type}`),t}static createInstance(e){switch(e){case $e.TypeName.AEBCountCameraCommand:return new S.AEBCountCameraCommand;case $e.TypeName.Altitude:return new ce.Altitude;case $e.TypeName.AltitudeRange:return new me.AltitudeRange;case $e.TypeName.ApertureCameraCommand:return new b.ApertureCameraCommand;case $e.TypeName.AutoExposureLockCameraCommand:return new w.AutoExposureLockCameraCommand;case $e.TypeName.Camera:return new de.Camera;case $e.TypeName.CameraImageSpecification:return new he.CameraImageSpecification;case $e.TypeName.CameraLensSpecification:return new pe.CameraLensSpecification;case $e.TypeName.CameraSensorSpecification:return new fe.CameraSensorSpecification;case $e.TypeName.CameraSpecification:return new ge.CameraSpecification;case $e.TypeName.ColorCameraCommand:return new x.ColorCameraCommand;case $e.TypeName.CommandComponent:return new Z.CommandComponent;case $e.TypeName.CommandExecutionState:return new s.CommandExecutionState;case $e.TypeName.ComponentExecutionState:return new Y.ComponentExecutionState;case $e.TypeName.ComponentSource:return new X.ComponentSource;case $e.TypeName.ConnectionFailSafeBehaviorDroneCommand:return new u.ConnectionFailSafeBehaviorDroneCommand;case $e.TypeName.ContrastCameraCommand:return new M.ContrastCameraCommand;case $e.TypeName.CourseComponent:return new Q.CourseComponent;case $e.TypeName.Datetime:return new ye.Datetime;case $e.TypeName.Descriptors:return new ve.Descriptors;case $e.TypeName.Disengagement:return new Ce.Disengagement;case $e.TypeName.DestinationComponent:return new ee.DestinationComponent;case $e.TypeName.DistanceTolerance:return new Se.DistanceTolerance;case $e.TypeName.Device:return new be.Device;case $e.TypeName.Drone:return new we.Drone;case $e.TypeName.Engagement:return new xe.Engagement;case $e.TypeName.Execution:return new Me.Execution;case $e.TypeName.FieldOfView:return new Oe.FieldOfView;case $e.TypeName.ExposureCompensationCameraCommand:return new O.ExposureCompensationCameraCommand;case $e.TypeName.ExposureModeCameraCommand:return new D.ExposureModeCameraCommand;case $e.TypeName.FocusModeCameraCommand:return new T.FocusModeCameraCommand;case $e.TypeName.ISOCameraCommand:return new _.ISOCameraCommand;case $e.TypeName.FileIndexModeCameraCommand:return new P.FileIndexModeCameraCommand;case $e.TypeName.GeoCoordinate:return new De.GeoCoordinate;case $e.TypeName.GeoReferencedOffset:return new Pe.GeoReferencedOffset;case $e.TypeName.GeoSpatial:return new Te.GeoSpatial;case $e.TypeName.Gimbal:return new _e.Gimbal;case $e.TypeName.HeadingComponent:return new te.HeadingComponent;case $e.TypeName.Interpolation:return new Ee.Interpolation;case $e.TypeName.LightbridgeChannelDroneCommand:return new l.LightbridgeChannelDroneCommand;case $e.TypeName.LightbridgeChannelSelectionModeDroneCommand:return new c.LightbridgeChannelSelectionModeDroneCommand;case $e.TypeName.LightbridgeFrequencyBandDroneCommand:return new m.LightbridgeFrequencyBandDroneCommand;case $e.TypeName.Limits:return new Ne.Limits;case $e.TypeName.Line2:return new Fe.Line2;case $e.TypeName.ListComponent:return new Ie.ListComponent;case $e.TypeName.LowBatteryWarningThresholdDroneCommand:return new d.LowBatteryWarningThresholdDroneCommand;case $e.TypeName.MapComponent:return new ne.MapComponent;case $e.TypeName.MapComponentBoundaryPoint:return new ie.MapComponentBoundaryPoint;case $e.TypeName.MaxAltitudeDroneCommand:return new h.MaxAltitudeDroneCommand;case $e.TypeName.MaxDistanceDroneCommand:return new p.MaxDistanceDroneCommand;case $e.TypeName.Mission:return new Re.Mission;case $e.TypeName.Message:return new Ae.Message;case $e.TypeName.MessageGroup:return new Le.MessageGroup;case $e.TypeName.ModeCameraCommand:return new E.ModeCameraCommand;case $e.TypeName.ModeGimbalCommand:return new H.ModeGimbalCommand;case $e.TypeName.MotionLimits:return new ke.MotionLimits;case $e.TypeName.MotionLimitsOptional:return new ze.MotionLimitsOptional;case $e.TypeName.MotionLimits3:return new Be.MotionLimits3;case $e.TypeName.MotionLimits3Optional:return new Ve.MotionLimits3Optional;case $e.TypeName.MotionLimits6:return new je.MotionLimits6;case $e.TypeName.MotionLimits6Optional:return new Ue.MotionLimits6Optional;case $e.TypeName.PointOfInterest:return new Je.PointOfInterest;case $e.TypeName.OcuSyncChannelDroneCommand:return new f.OcuSyncChannelDroneCommand;case $e.TypeName.OcuSyncChannelSelectionModeDroneCommand:return new g.OcuSyncChannelSelectionModeDroneCommand;case $e.TypeName.OcuSyncFrequencyBandDroneCommand:return new y.OcuSyncFrequencyBandDroneCommand;case $e.TypeName.OrbitComponent:return new re.OrbitComponent;case $e.TypeName.Orientation3:return new Ge.Orientation3;case $e.TypeName.Orientation3Optional:return new We.Orientation3Optional;case $e.TypeName.OrientationGimbalCommand:return new $.OrientationGimbalCommand;case $e.TypeName.PhotoAspectRatioCameraCommand:return new N.PhotoAspectRatioCameraCommand;case $e.TypeName.PhotoFileFormatCameraCommand:return new F.PhotoFileFormatCameraCommand;case $e.TypeName.PhotoModeCameraCommand:return new A.PhotoModeCameraCommand;case $e.TypeName.PhotoIntervalCameraCommand:return new I.PhotoIntervalCameraCommand;case $e.TypeName.PathComponent:return new oe.PathComponent;case $e.TypeName.PathComponentWaypoint:return new ae.PathComponentWaypoint;case $e.TypeName.PathComponentMarker:return new se.PathComponentMarker;case $e.TypeName.PathComponentModelSample:return new ue.PathComponentModelSample;case $e.TypeName.PlanComponent:return new le.PlanComponent;case $e.TypeName.Point2:return new qe.Point2;case $e.TypeName.ReturnHomeAltitudeDroneCommand:return new v.ReturnHomeAltitudeDroneCommand;case $e.TypeName.SaturationCameraCommand:return new L.SaturationCameraCommand;case $e.TypeName.SharpnessCameraCommand:return new R.SharpnessCameraCommand;case $e.TypeName.ShutterSpeedCameraCommand:return new k.ShutterSpeedCameraCommand;case $e.TypeName.SourcedGeoSpatial:return new He.SourcedGeoSpatial;case $e.TypeName.StartCaptureCameraCommand:return new z.StartCaptureCameraCommand;case $e.TypeName.StopCaptureCameraCommand:return new B.StopCaptureCameraCommand;case $e.TypeName.StorageLocationCameraCommand:return new V.StorageLocationCameraCommand;case $e.TypeName.Timeline:return new Ke.Timeline;case $e.TypeName.TimelineCameraCapture:return new Ye.TimelineCameraCapture;case $e.TypeName.TimelineCommand:return new Xe.TimelineCommand;case $e.TypeName.TimelineFrame:return new Ze.TimelineFrame;case $e.TypeName.User:return new Qe.User;case $e.TypeName.Vector2:return new et.Vector2;case $e.TypeName.Velocity3:return new tt.Velocity3;case $e.TypeName.Velocity6:return new nt.Velocity6;case $e.TypeName.VelocityDroneCommand:return new C.VelocityDroneCommand;case $e.TypeName.VelocityGimbalCommand:return new K.VelocityGimbalCommand;case $e.TypeName.VideoFileCompressionStandardCameraCommand:return new j.VideoFileCompressionStandardCameraCommand;case $e.TypeName.VideoFileFormatCameraCommand:return new U.VideoFileFormatCameraCommand;case $e.TypeName.VideoResolutionFrameRateCameraCommand:return new J.VideoResolutionFrameRateCameraCommand;case $e.TypeName.VideoStandardCameraCommand:return new G.VideoStandardCameraCommand;case $e.TypeName.WhiteBalanceCustomCameraCommand:return new W.WhiteBalanceCustomCameraCommand;case $e.TypeName.WhiteBalancePresetCameraCommand:return new q.WhiteBalancePresetCameraCommand}return null}static deserializeInstance(e){const t=rt.createInstance(e.type);if(null!==t)return rt.applyJSON(e,t)}}t.Serialization=rt,rt.WriteCompressByDefault=!0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);t.Identifiable=class{constructor(e=null){this.id=e||i.Common.uuid()}applyJSON(e){return!!e&&(this.id=e.id||i.Common.uuid(),!0)}get resettable(){return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(19),r=n(0),o=n(2);class a{constructor(e=0,t=0){this.type=r.TypeName.Vector2,this.direction=e,this.magnitude=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.direction=o.Common.parseFloat(e.direction),this.magnitude=o.Common.parseFloat(e.magnitude),!0)}copy(){return new a(this.direction,this.magnitude)}get x(){return this.magnitude*Math.cos(this.direction)}get y(){return this.magnitude*Math.sin(this.direction)}toPoint2(){return new i.Point2(this.x,this.y)}inverse(){return new a(this.direction+Math.PI,this.magnitude)}add(e){return new i.Point2(this.x+e.x,this.y+e.y).toVector2()}addToSelf(e){const t=this.add(e);this.direction=t.direction,this.magnitude=t.magnitude}subtract(e){return new i.Point2(this.x-e.x,this.y-e.y).toVector2()}subtractFromSelf(e){const t=this.subtract(e);this.direction=t.direction,this.magnitude=t.magnitude}static center(e){return i.Point2.center(e.map(e=>e.toPoint2())).toVector2()}}t.Vector2=a},function(e,t){(function(){e.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),r=n(62),o=n(29),a=n(102),s=n(3),u=n(63),l=n(64),c=n(0),m=n(20);class d{}t.Constants=d,d.MissionExecuteIntervalTarget=.05,d.MissionExecuteIntervalMax=.5,d.ComponentEstimateTolerance=3,d.SimulationUpdateInterval=.1,d.DroneConnectionLatency=.1,d.DroneMotionLimits={Generic:()=>{const e=new r.MotionLimits6;return e.horizontal.velocity.max=15,e.horizontal.acceleration.max=3,e.horizontal.acceleration.min=-e.horizontal.acceleration.max,e.vertical.velocity.max=4,e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=2,e.vertical.acceleration.min=-e.vertical.acceleration.max,e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(45),e.rotational.acceleration.min=-e.rotational.acceleration.max,e},Conservative:()=>{const e=new r.MotionLimits6;return e.horizontal.velocity.max=i.Convert.milesPerHourToMetersPerSecond(10),e.horizontal.acceleration.max=i.Convert.feetToMeters(8),e.horizontal.acceleration.min=i.Convert.feetToMeters(-3),e.vertical.velocity.max=i.Convert.feetToMeters(10),e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=i.Convert.feetToMeters(6),e.vertical.acceleration.min=i.Convert.feetToMeters(-3),e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(10),e.rotational.acceleration.min=-e.rotational.acceleration.max,e},Max:()=>{const e=new r.MotionLimits6;return e.horizontal.velocity.max=15,e.horizontal.acceleration.max=4,e.horizontal.acceleration.min=-e.horizontal.acceleration.max,e.vertical.velocity.max=4,e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=4,e.vertical.acceleration.min=-e.vertical.acceleration.max,e.rotational.velocity.max=i.Convert.degreesToRadians(200),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(100),e.rotational.acceleration.min=-e.rotational.acceleration.max,e}},d.DroneOrientationLimits={Yaw:new o.Limits(i.Convert.degreesToRadians(359),0)},d.GimbalLimits={Pitch:new o.Limits(i.Convert.degreesToRadians(30),i.Convert.degreesToRadians(-90)),Roll:new o.Limits(i.Convert.degreesToRadians(15),i.Convert.degreesToRadians(-15)),Yaw:new o.Limits(i.Convert.degreesToRadians(359),0)},d.GimbalMotionLimits=new u.MotionLimits3(new l.MotionLimits(new o.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new o.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90))),new l.MotionLimits(new o.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new o.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90))),new l.MotionLimits(new o.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new o.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90)))),d.CameraSpecifications=[new a.CameraSpecification("zenmuseX5S",s.Strings.CameraSpecification.models.zenmuseX5S,15,17.3,13,5820,3956),new a.CameraSpecification("zenmuseX4S",s.Strings.CameraSpecification.models.zenmuseX4S,9,12.8,9.6,5472,3648),new a.CameraSpecification("zenmuseX5R",s.Strings.CameraSpecification.models.zenmuseX5R,15,17.3,13,4608,3456),new a.CameraSpecification("zenmuseX5",s.Strings.CameraSpecification.models.zenmuseX5,15,17.3,13,4608,3456),new a.CameraSpecification("zenmuseX3",s.Strings.CameraSpecification.models.zenmuseX3,4,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavic2Pro",s.Strings.CameraSpecification.models.mavic2Pro,10.27,13.2,8.2,5472,3648),new a.CameraSpecification("mavic2ProHQ",s.Strings.CameraSpecification.models.mavic2ProHQ,10.27,9.4,5.9,5472,3648),new a.CameraSpecification("mavic2ZoomMin",s.Strings.CameraSpecification.models.mavic2ZoomMin,8.8,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavic2ZoomMax",s.Strings.CameraSpecification.models.mavic2ZoomMax,17.6,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavicAir",s.Strings.CameraSpecification.models.mavicAir,4,6.17,4.65,4056,3040),new a.CameraSpecification("mavicPro",s.Strings.CameraSpecification.models.mavicPro,5,6.17,4.65,4e3,3e3),new a.CameraSpecification("mavicProPlatinum",s.Strings.CameraSpecification.models.mavicProPlatinum,5,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom4Pro2_0",s.Strings.CameraSpecification.models.phantom4Pro2_0,9,12.8,9.6,5472,3648),new a.CameraSpecification("phantom4Pro",s.Strings.CameraSpecification.models.phantom4Pro,9,12.8,9.6,5472,3648),new a.CameraSpecification("phantom4Advanced",s.Strings.CameraSpecification.models.phantom4Advanced,4,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom3Pro",s.Strings.CameraSpecification.models.phantom3Pro,4,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom3Advanced",s.Strings.CameraSpecification.models.phantom3Advanced,4,6.17,4.65,4e3,3e3),new a.CameraSpecification("phantom3Standard",s.Strings.CameraSpecification.models.phantom3Standard,4,6.17,4.65,4e3,3e3),new a.CameraSpecification("spark",s.Strings.CameraSpecification.models.spark,4,6.17,4.65,3968,2976)],d.MissionReengagementAltitudeRange=i.Convert.feetToMeters(5),d.PlanComponentTakeoffDistanceHorizontal=i.Convert.feetToMeters(20),d.DroneMotionComponentGimbalOrientation=new m.Orientation3Optional(i.Convert.degreesToRadians(-12),c.OrientationXReference.Horizon,0,0,c.OrientationZReference.Path),d.DroneMotionComponentModelSampleTimeMax=2,d.DroneMotionComponentHorizontalErrorMax=2,d.DroneMotionComponentVerticalErrorMax=2,d.DroneMotionComponentRotationalErrorMax=i.Convert.degreesToRadians(60),d.DroneMotionComponentErrorK=2*Math.E,d.DestinationComponentHeadingAchievement=i.Convert.degreesToRadians(45),d.DestinationComponentEstimateSampleDistance=1,d.DestinationComponentAchievementTime=3,d.DestinationComponentAchievementDistanceHorizontal=i.Convert.feetToMeters(10),d.DestinationComponentAchievementDistanceVertical=i.Convert.feetToMeters(5),d.DestinationComponentAltitude=i.Convert.feetToMeters(100),d.DestinationComponentAltitudeRange=i.Convert.feetToMeters(15),d.CourseComponentAchievementTime=1,d.CourseComponentAchievementDistance=i.Convert.degreesToRadians(5),d.CourseComponentAchievementVelocity=i.Convert.milesPerHourToMetersPerSecond(.5),d.HeadingComponentAchievementTime=1,d.HeadingComponentAchievementDistance=i.Convert.degreesToRadians(5),d.MapComponentMaxHorizontalVelocity=i.Convert.milesPerHourToMetersPerSecond(26),d.MapComponentMinCaptureInterval=2,d.MapComponentFrontOverlap=.8,d.MapComponentSideOverlap=.7,d.MapComponentGimbalPitch=i.Convert.degreesToRadians(-90),d.MapComponentBaseDistanceMultiplier=1.5,d.MapComponentSampleDistance=.3,d.MapComponentMinimumTargetDistance=i.Convert.feetToMeters(5),d.MapCameraSpecification=new a.CameraSpecification("phantom4Pro2_0",s.Strings.CameraSpecification.models.phantom4Pro2_0,9,12.8,9.6,5472,3648),d.MapGimbalPitchLimits=new o.Limits(i.Convert.degreesToRadians(-35),i.Convert.degreesToRadians(-90)),d.OrbitComponentEstimateSampleDistance=1,d.OrbitComponentSampleDistance=.3,d.PathComponentCornerRadius=i.Convert.feetToMeters(20),d.PathComponentModelSampleDistance=.3,d.PathComponentModelSampleDistancePosition=1,d.VelocityHorizontalDampenThreshold=2,d.VelocityVerticalDampenThreshold=2,d.VelocityRotationalDampenThreshold=i.Convert.degreesToRadians(5),d.LowBatteryWarningThresholdDroneCommandValue=.2,d.ReturnHomeAltitudeDroneCommandValue=i.Convert.feetToMeters(100),d.MaxAltitudeDroneCommandValue=i.Convert.feetToMeters(400),d.MaxDistanceDroneCommandValue=i.Convert.feetToMeters(1e4),d.PhotoIntervalCommandValue=2},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.areaConversion=t.timeConversion=t.distanceConversion=t.altitudeKeys=t.latitudeKeys=t.longitudeKeys=t.MAXLON=t.MINLON=t.MAXLAT=t.MINLAT=t.earthRadius=t.sexagesimalPattern=void 0;t.sexagesimalPattern=/^([0-9]{1,3})°\s*([0-9]{1,3}(?:\.(?:[0-9]{1,}))?)['′]\s*(([0-9]{1,3}(\.([0-9]{1,}))?)["″]\s*)?([NEOSW]?)$/;t.earthRadius=6378137;t.MINLAT=-90;t.MAXLAT=90;t.MINLON=-180;t.MAXLON=180;t.longitudeKeys=["lng","lon","longitude",0];t.latitudeKeys=["lat","latitude",1];t.altitudeKeys=["alt","altitude","elevation","elev",2];t.distanceConversion={m:1,km:.001,cm:100,mm:1e3,mi:1/1609.344,sm:1/1852.216,ft:100/30.48,in:100/2.54,yd:1/.9144};t.timeConversion={m:60,h:3600,d:86400};var i={m2:1,km2:1e-6,ha:1e-4,a:.01,ft2:10.763911,yd2:1.19599,in2:1550.0031};t.areaConversion=i,i.sqm=i.m2,i.sqkm=i.km2,i.sqft=i.ft2,i.sqyd=i.yd2,i.sqin=i.in2},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.Message=class{constructor(e="",t=null,n=i.MessageLevel.Info){this.type=i.TypeName.Message,this.toString=(()=>this.details?`${this.title}: ${this.details}`:this.title),this.title=e,this.details=t,this.level=n}applyJSON(e){return!!(e&&e.type===this.type&&e.title&&e.level)&&(this.title=e.title,this.details=e.details,this.level=e.level,!0)}select(e){if(null===e)return this;switch(e.level){case i.MessageLevel.Info:switch(this.level){case i.MessageLevel.Warning:case i.MessageLevel.Danger:case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Warning:switch(this.level){case i.MessageLevel.Danger:case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Danger:switch(this.level){case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Error:return e}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2);class o{constructor(e=new Date){this.type=i.TypeName.Datetime,this.value=e}toJSON(){return{type:this.type,value:this.value.getTime()}}applyJSON(e){if(e.type!==this.type)return!1;const t=r.Common.parseInt(e.value,null);return null!==t&&(this.value=new Date(t),!0)}interpolate(e,t){return new o(new Date(t(this.value.getTime(),e.value.getTime())))}elapsedTime(e){return(this.value.getTime()-e.value.getTime())/1e3}}t.Datetime=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(32);t.DroneCommand=class extends i.Command{}},function(e,t,n){(function(){var t,i,r,o,a,s,u,l,c,m,d,h,p,f,g,y,v={}.hasOwnProperty,C=[].splice;({isObject:y,isFunction:g,isEmpty:f,getValue:p}=n(28)),l=null,r=null,o=null,a=null,s=null,d=null,h=null,m=null,u=null,i=null,c=null,t=null,e.exports=function(){class e{constructor(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,l||(l=n(124),r=n(126),o=n(127),a=n(128),s=n(129),d=n(134),h=n(135),m=n(136),u=n(198),i=n(8),c=n(253),n(125),t=n(254))}setParent(e){var t,n,i,r,o;for(this.parent=e,e&&(this.options=e.options,this.stringify=e.stringify),o=[],n=0,i=(r=this.children).length;n<i;n++)t=r[n],o.push(t.setParent(this));return o}element(e,t,n){var i,r,o,a,s,u,l,c,m;if(u=null,null===t&&null==n&&([t,n]=[{},null]),null==t&&(t={}),t=p(t),y(t)||([n,t]=[t,n]),null!=e&&(e=p(e)),Array.isArray(e))for(o=0,l=e.length;o<l;o++)r=e[o],u=this.element(r);else if(g(e))u=this.element(e.apply());else if(y(e)){for(s in e)if(v.call(e,s))if(m=e[s],g(m)&&(m=m.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===s.indexOf(this.stringify.convertAttKey))u=this.attribute(s.substr(this.stringify.convertAttKey.length),m);else if(!this.options.separateArrayItems&&Array.isArray(m)&&f(m))u=this.dummy();else if(y(m)&&f(m))u=this.element(s);else if(this.options.keepNullNodes||null!=m)if(!this.options.separateArrayItems&&Array.isArray(m))for(a=0,c=m.length;a<c;a++)r=m[a],(i={})[s]=r,u=this.element(i);else y(m)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===s.indexOf(this.stringify.convertTextKey)?u=this.element(m):(u=this.element(s)).element(m):u=this.element(s,m);else u=this.dummy()}else u=this.options.keepNullNodes||null!==n?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===e.indexOf(this.stringify.convertTextKey)?this.text(n):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===e.indexOf(this.stringify.convertCDataKey)?this.cdata(n):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===e.indexOf(this.stringify.convertCommentKey)?this.comment(n):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===e.indexOf(this.stringify.convertRawKey)?this.raw(n):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===e.indexOf(this.stringify.convertPIKey)?this.instruction(e.substr(this.stringify.convertPIKey.length),n):this.node(e,t,n):this.dummy();if(null==u)throw new Error("Could not create any elements with: "+e+". "+this.debugInfo());return u}insertBefore(e,t,n){var i,r,o,a,s;if(null!=e?e.type:void 0)return a=t,(o=e).setParent(this),a?(r=children.indexOf(a),s=children.splice(r),children.push(o),Array.prototype.push.apply(children,s)):children.push(o),o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return r=this.parent.children.indexOf(this),s=this.parent.children.splice(r),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,s),i}insertAfter(e,t,n){var i,r,o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return r=this.parent.children.indexOf(this),o=this.parent.children.splice(r+1),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,o),i}remove(){var e;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return e=this.parent.children.indexOf(this),C.apply(this.parent.children,[e,e-e+1].concat([])),this.parent}node(e,t,n){var i;return null!=e&&(e=p(e)),t||(t={}),t=p(t),y(t)||([n,t]=[t,n]),i=new l(this,e,t),null!=n&&i.text(n),this.children.push(i),i}text(e){var t;return y(e)&&this.element(e),t=new h(this,e),this.children.push(t),this}cdata(e){var t;return t=new r(this,e),this.children.push(t),this}comment(e){var t;return t=new o(this,e),this.children.push(t),this}commentBefore(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this}commentAfter(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t+1),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this}raw(e){var t;return t=new d(this,e),this.children.push(t),this}dummy(){return new u(this)}instruction(e,t){var n,i,r,o,a;if(null!=e&&(e=p(e)),null!=t&&(t=p(t)),Array.isArray(e))for(o=0,a=e.length;o<a;o++)n=e[o],this.instruction(n);else if(y(e))for(n in e)v.call(e,n)&&(i=e[n],this.instruction(n,i));else g(t)&&(t=t.apply()),r=new m(this,e,t),this.children.push(r);return this}instructionBefore(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this}instructionAfter(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n+1),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this}declaration(e,t,n){var r,o;return r=this.document(),o=new a(r,e,t,n),0===r.children.length?r.children.unshift(o):r.children[0].type===i.Declaration?r.children[0]=o:r.children.unshift(o),r.root()||r}dtd(e,t){var n,r,o,a,u,l,c,m,d;for(n=this.document(),r=new s(n,e,t),o=a=0,l=(m=n.children).length;a<l;o=++a)if(m[o].type===i.DocType)return n.children[o]=r,r;for(o=u=0,c=(d=n.children).length;u<c;o=++u)if(d[o].isRoot)return n.children.splice(o,0,r),r;return n.children.push(r),r}up(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent}root(){var e;for(e=this;e;){if(e.type===i.Document)return e.rootObject;if(e.isRoot)return e;e=e.parent}}document(){var e;for(e=this;e;){if(e.type===i.Document)return e;e=e.parent}}end(e){return this.document().end(e)}prev(){var e;if((e=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[e-1]}next(){var e;if(-1===(e=this.parent.children.indexOf(this))||e===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[e+1]}importDocument(e){var t,n,r,o,a;if((n=e.root().clone()).parent=this,n.isRoot=!1,this.children.push(n),this.type===i.Document&&(n.isRoot=!0,n.documentObject=this,this.rootObject=n,this.children))for(r=0,o=(a=this.children).length;r<o;r++)if((t=a[r]).type===i.DocType){t.name=n.name;break}return this}debugInfo(e){var t,n;return null!=(e=e||this.name)||(null!=(t=this.parent)?t.name:void 0)?null==e?"parent: <"+this.parent.name+">":(null!=(n=this.parent)?n.name:void 0)?"node: <"+e+">, parent: <"+this.parent.name+">":"node: <"+e+">":""}ele(e,t,n){return this.element(e,t,n)}nod(e,t,n){return this.node(e,t,n)}txt(e){return this.text(e)}dat(e){return this.cdata(e)}com(e){return this.comment(e)}ins(e,t){return this.instruction(e,t)}doc(){return this.document()}dec(e,t,n){return this.declaration(e,t,n)}e(e,t,n){return this.element(e,t,n)}n(e,t,n){return this.node(e,t,n)}t(e){return this.text(e)}d(e){return this.cdata(e)}c(e){return this.comment(e)}r(e){return this.raw(e)}i(e,t){return this.instruction(e,t)}u(){return this.up()}importXMLBuilder(e){return this.importDocument(e)}attribute(e,t){throw new Error("attribute() applies to element nodes only.")}att(e,t){return this.attribute(e,t)}a(e,t){return this.attribute(e,t)}removeAttribute(e){throw new Error("attribute() applies to element nodes only.")}replaceChild(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeChild(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}appendChild(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}hasChildNodes(){return 0!==this.children.length}cloneNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}normalize(){throw new Error("This DOM method is not implemented."+this.debugInfo())}isSupported(e,t){return!0}hasAttributes(){return 0!==this.attribs.length}compareDocumentPosition(e){var n;return this,this===e?0:this.document()!==e.document()?(n=t.Disconnected|t.ImplementationSpecific,Math.random()<.5?n|=t.Preceding:n|=t.Following,n):this.isAncestor(e)?t.Contains|t.Preceding:this.isDescendant(e)?t.Contains|t.Following:this.isPreceding(e)?t.Preceding:t.Following}isSameNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}lookupPrefix(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isDefaultNamespace(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}lookupNamespaceURI(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){var t,n,i;if(e.nodeType!==this.nodeType)return!1;if(e.children.length!==this.children.length)return!1;for(t=n=0,i=this.children.length-1;0<=i?n<=i:n>=i;t=0<=i?++n:--n)if(!this.children[t].isEqualNode(e.children[t]))return!1;return!0}getFeature(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setUserData(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}getUserData(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}contains(e){return!!e&&(e===this||this.isDescendant(e))}isDescendant(e){var t,n,i,r;for(n=0,i=(r=this.children).length;n<i;n++){if(e===(t=r[n]))return!0;if(t.isDescendant(e))return!0}return!1}isAncestor(e){return e.isDescendant(this)}isPreceding(e){var t,n;return t=this.treePosition(e),n=this.treePosition(this),-1!==t&&-1!==n&&t<n}isFollowing(e){var t,n;return t=this.treePosition(e),n=this.treePosition(this),-1!==t&&-1!==n&&t>n}treePosition(e){var t,n;return n=0,t=!1,this.foreachTreeNode(this.document(),function(i){if(n++,!t&&i===e)return t=!0}),t?n:-1}foreachTreeNode(e,t){var n,i,r,o,a;for(e||(e=this.document()),i=0,r=(o=e.children).length;i<r;i++){if(a=t(n=o[i]))return a;if(a=this.foreachTreeNode(n,t))return a}}}return Object.defineProperty(e.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.childNodeList&&this.childNodeList.nodes||(this.childNodeList=new c(this.children)),this.childNodeList}}),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){var e;return e=this.parent.children.indexOf(this),this.parent.children[e-1]||null}}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){var e;return e=this.parent.children.indexOf(this),this.parent.children[e+1]||null}}),Object.defineProperty(e.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(e.prototype,"textContent",{get:function(){var e,t,n,r,o;if(this.nodeType===i.Element||this.nodeType===i.DocumentFragment){for(o="",t=0,n=(r=this.children).length;t<n;t++)(e=r[t]).textContent&&(o+=e.textContent);return o}return null},set:function(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e}.call(this)}).call(this)},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(19),o=i(n(209));class a{static angleDifferenceSigned(e,t){return Math.atan2(Math.sin(e-t),Math.cos(e-t))}static roundedCorners(e,t){if(e.length<2)return[e];if(e.length<3)return[[e[0],e[1]]];const n=[[e[0]]];for(let i=1;i<e.length-1;i++){const a=e[i-1],s=e[i],u=e[i+1],l=new r.Point2(a.x-s.x,a.y-s.y).toVector2(),c=s.toVector2(),m=new r.Point2(u.x-s.x,u.y-s.y).toVector2();let d=10;t&&(d=Array.isArray(t)?t[i]:t),l.magnitude=Math.min(l.magnitude/2,d),m.magnitude=Math.min(m.magnitude/2,d);const h=new o.default(c.add(l).toPoint2(),s,c.add(m).toPoint2());let p=Math.max(10,Math.floor(2*h.length()));p%2==1&&p++,h.getLUT(p).forEach((e,t)=>{t===p/2&&n.push([]),n[n.length-1].push(new r.Point2(e.x,e.y))})}return n[n.length-1].push(e[e.length-1]),n}static cardinalSplinePoint2(e,t=.5,n=100,i=!1){if(e.length<2)return[e];if(e.length<3)return[[e[0],e[1]]];const o=[];e.forEach(e=>{o.push(e.x),o.push(e.y)});const s=[[]],u=a.cardinalSpline(o,t,n,i);let l=0;for(let e=0;e<u.length;e+=2)1===s.length?s[l].length===n+1&&(s[++l]=[]):s[l].length===n&&e<u.length-2&&(s[++l]=[]),s[l].push(new r.Point2(u[e],u[e+1]));return s}static cardinalSpline(e,t=.5,n=100,i=!1){let r,o=1,a=e.length,s=0,u=new Float32Array((a-2)*n+2+(i?2*n:0)),l=new Float32Array(4*(n+2)),c=4;for(r=e.slice(0),i?(r.unshift(e[a-1]),r.unshift(e[a-2]),r.push(e[0],e[1])):(r.unshift(e[1]),r.unshift(e[0]),r.push(e[a-2],e[a-1])),l[0]=1;o<n;o++){let e=o/n,t=e*e,i=t*e,r=2*i,a=3*t;l[c++]=r-a+1,l[c++]=a-r,l[c++]=i-2*t+e,l[c++]=i-t}l[++c]=1;const m=(e,i,r)=>{for(let o,a=2;a<r;a+=2){let r=e[a],l=e[a+1],c=e[a+2],m=e[a+3],d=(c-e[a-2])*t,h=(m-e[a-1])*t,p=(e[a+4]-r)*t,f=(e[a+5]-l)*t;for(o=0;o<n;o++){let e=o<<2,t=i[e],n=i[e+1],a=i[e+2],g=i[e+3];u[s++]=t*r+n*c+a*d+g*p,u[s++]=t*l+n*m+a*h+g*f}}};return m(r,l,a),i&&((r=[]).push(e[a-4],e[a-3],e[a-2],e[a-1]),r.push(e[0],e[1],e[2],e[3]),m(r,l,4)),a=i?0:e.length-2,u[s++]=e[a],u[s]=e[a+1],u}}t.Geometry=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static t1(e,t){return 0===e?0:t/e}static t2(e,t,n){if(0===t)return 0;const i=e+2*t*n;return i<=0?0:(-e+Math.sqrt(i))/t}static d1(e,t){return e*t}static d2(e,t,n){return(e+t)/2*n}static d3(e,t,n){return e*n+.5*t*Math.pow(n,2)}static d4(e,t,n){return(Math.pow(t,2)-Math.pow(e,2))/(2*n)}static v1(e,t){return i.v2(0,e,t)}static v2(e,t,n){return e+t*n}static v3(e,t,n){return Math.sqrt(Math.pow(e,2)+2*t*n)}static v4(e,t){return 0===t?0:e/t}static tLine(e,t,n,r,o=0){if(r<=0)return 0;(o<=0||o>r)&&(o=r);const a=i.d4(0,e,n),s=i.d4(0,e,-t),u=r-a-s;if(u>0){const l=i.t2(0,n,a),c=i.t1(e,u),m=i.t2(0,-t,s);return o===r?l+c+m:o>a+u?l+c+(m-i.t2(0,-t,s-(o-u-a))):o>a?l+i.t1(e,o-a):i.t2(0,n,o)}const l=r*(a/(a+s)),c=r-l,m=i.t2(0,n,l),d=i.t2(0,-t,c);if(o===r)return m+d;if(o>l){return m+(d-i.t2(0,-t,c-(o-l)))}return i.t2(0,n,o)}static vLine(e,t,n,r,o){return o<=0||o>=r?0:o<i.d4(0,e,n)?i.v3(0,n,o):r-o<i.d4(0,e,-t)?i.v3(0,-t,r-o):e}static dampen(e,t,n=2){return Math.abs(e)<t?t*Math.pow(Math.abs(e)/t,n):e}}t.Kinematic=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=a(n(67)),o=a(n(104));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=(0,r.default)(e,i.latitudeKeys);if(null!=n){var a=e[n];return!0===t?a:(0,o.default)(a)}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=a(n(67)),o=a(n(104));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=(0,r.default)(e,i.longitudeKeys);if(null!=n){var a=e[n];return!0===t?a:(0,o.default)(a)}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),r=n(0),o=n(2);class a{constructor(e=0,t=0){this.type=r.TypeName.Point2,this.x=e,this.y=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=o.Common.parseFloat(e.x),this.y=o.Common.parseFloat(e.y),!0)}get direction(){return Math.atan2(this.y,this.x)}get magnitude(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}toVector2(){return new i.Vector2(this.direction,this.magnitude)}distance(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))}midPoint(e){return this.interpolate(e,.5)}interpolateDistance(e,t){return 0===this.distance(e)?this:this.interpolate(e,Math.min(Math.max(t/this.distance(e),0),1))}interpolate(e,t){return new a(this.x+(e.x-this.x)*t,this.y+(e.y-this.y)*t)}static center(e){const t=new a;return e.forEach(n=>{t.x+=n.x/e.length,t.y+=n.y/e.length}),t}static boundingBox(e,t=0,n=1){const i=a.center(e).toVector2(),r=e.map(e=>{const n=e.toVector2().subtract(i);return n.direction-=t,n.toPoint2()});let o=new a,s=new a;r.forEach((e,t)=>{(0===t||e.x<o.x)&&(o.x=e.x),(0===t||e.y<o.y)&&(o.y=e.y),(0===t||e.x>s.x)&&(s.x=e.x),(0===t||e.y>s.y)&&(s.y=e.y)});const u={topLeft:new a(s.x,o.y).toVector2(),topRight:s.toVector2(),bottomLeft:o.toVector2(),bottomRight:new a(o.x,s.y).toVector2()};return u.topLeft.direction+=t,u.topLeft.magnitude=u.topLeft.magnitude*=n,u.topRight.direction+=t,u.topRight.magnitude=u.topRight.magnitude*=n,u.bottomLeft.direction+=t,u.bottomLeft.magnitude=u.bottomLeft.magnitude*=n,u.bottomRight.direction+=t,u.bottomRight.magnitude=u.bottomRight.magnitude*=n,{topLeft:i.add(u.topLeft).toPoint2(),topRight:i.add(u.topRight).toPoint2(),bottomLeft:i.add(u.bottomLeft).toPoint2(),bottomRight:i.add(u.bottomRight).toPoint2()}}}t.Point2=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(3),o=n(1),a=n(2),s=n(15),u=n(31),l=n(16),c=n(65);class m{constructor(e=null,t=i.OrientationXReference.Horizon,n=null,a=null,s=i.OrientationZReference.North){this.type=i.TypeName.Orientation3Optional,this.toString=(()=>{let e=[];return null!==this.x&&(this.xReference===i.OrientationXReference.Horizon?e.push(`${r.Strings.Orientation3.values.x} ${o.Format.angle(this.x,!1)}`):e.push(`${r.Strings.Orientation3.values.x} ${o.Format.angle(this.x,!1)} ∠ ${o.Format.string(`OrientationXReference.values.${this.xReference}.name`)}`)),null!==this.y&&e.push(`${r.Strings.Orientation3.values.y} ${o.Format.angle(this.y,!1)}`),null!==this.z&&(this.zReference===i.OrientationZReference.North?e.push(`${r.Strings.Orientation3.values.z} ${o.Format.angle(this.z,!0)}`):e.push(`${r.Strings.Orientation3.values.z} ${o.Format.angle(this.z,!0)} ∠ ${o.Format.string(`OrientationZReference.values.${this.zReference}.name`)}`)),e.join(r.Strings.Common.delimeter)}),this.x=e,this.xReference=t,this.y=n,this.z=a,this.zReference=s}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=a.Common.parseFloat(e.x,null),this.xReference=e.xReference||i.OrientationXReference.Horizon,this.y=a.Common.parseFloat(e.y,null),this.z=a.Common.parseFloat(e.z,null),this.zReference=e.zReference||i.OrientationZReference.North,!0)}interpolate(e,t,n,r){let o=this.x,a=this.xReference;if(null!==this.x&&null!==e.x){let n=this.x,u=e.x;e.xReference!==this.xReference&&(n=t.x.value(this.xReference)+this.x,u=t.x.value(e.xReference)+e.x,a=i.OrientationXReference.Horizon),o=n-r(0,s.Geometry.angleDifferenceSigned(n,u))}let u=this.z,l=this.zReference;if(null!==this.z&&null!==e.z){let n=this.z,o=e.z;e.zReference!==this.zReference&&(n=t.z.value(this.zReference)+this.z,o=t.z.value(e.zReference)+e.z,l=i.OrientationZReference.North),u=n-r(0,s.Geometry.angleDifferenceSigned(n,o))}const c=new m(o,a,null===this.y?null:null===e.y?this.y:r(this.y,e.y),u,l);return c.convertReferences(t,n),c}convertReferences(e,t=new c.OrientationReferenceTargets){this.xReference!==t.x&&(null!==this.x&&(this.x=e.x.value(this.xReference)+this.x-e.x.value(t.x)),this.xReference=t.x),this.zReference!==t.z&&(null!==this.z&&(this.z=e.z.value(this.zReference)+this.z-e.z.value(t.z)),this.zReference=t.z)}velocity(e,t){const n=new u.Velocity3;return null!==this.x&&null!==e.x&&this.xReference===e.xReference&&(n.x=l.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.x,e.x),t)),null!==this.y&&null!==e.y&&(n.y=l.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.y,e.y),t)),null!==this.z&&null!==e.z&&this.zReference===e.zReference&&(n.z=l.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.z,e.z),t)),n}get pitch(){return this.x}set pitch(e){this.x=e}get pitchReference(){return this.xReference}set pitchReference(e){this.xReference=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get yawReference(){return this.zReference}set yawReference(e){this.zReference=e}apply(e){return this.x=e.x,this.xReference=e.xReference,this.y=e.y,this.z=e.z,this.zReference=e.zReference,this}}t.Orientation3Optional=m},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),o=n(0),a=n(5),s=n(32),u=n(73),l=n(12),c=n(37),m=n(40),d=n(78),h=n(113),p=n(3),f=i(n(249)),g=n(22);t.Timeline=class{constructor(){this.type=o.TypeName.Timeline,this.frames=[],this.commands={},this.captures=[]}applyJSON(e){if(!e&&e.type!==this.type)return!1;if(this.frames=[],Array.isArray(e.frames))for(let t of e.frames){const e=new y;if(!e.applyJSON(t))return!1;this.frames.push(e)}return!0}addFrame(e,t){const n=new y(t);n.device=a.Serialization.clone(e.device),n.drone=a.Serialization.clone(e.drone);for(const t in e.execution.componentStates){const i=e.execution.componentStates[t];i.status===o.ComponentExecutionStatus.Executing&&(n.executingComponentStates[t]=a.Serialization.clone(i))}let i=this.lastFrame;return null===i?(n.datetime=a.Serialization.clone(e.engagement.engaged),this.frames.push(n),n):(n.distanceTravelledHorizontal=i.distanceTravelledHorizontal+n.drone.spatial.coordinate.distance(i.drone.spatial.coordinate),n.datetime=a.Serialization.clone(e.engagement.currentDatetime),this.frames.push(n),n)}get firstFrame(){return this.frames.length>0?this.frames[0]:null}get lastFrame(){return this.frames.length>0?r.Common.last(this.frames):null}getFrame(e){const t=this.getFrameIndex(e);return t?this.frames[t]:null}getFrameIndex(e){if(this.lastFrame){const t=this.lastFrame.elapsedTime;for(let n=0;n<this.frames.length;n++)if(this.frames[n].elapsedTime/t>=e)return n}return null}updateCommandExecutionState(e,t){let n=this.commands[e.id];return n||(n=new v(e,t),this.commands[e.id]=n),n.executionState=t,n}toKML(e,t=0){const n=e=>[`${e.drone.spatial.coordinate.longitude}`,`${e.drone.spatial.coordinate.latitude}`,`${t+e.drone.spatial.altitude.value}`].join(","),i=f.default.begin().e("kml",{xmlns:"http://www.opengis.net/kml/2.2","xmlns:gx":"http://www.google.com/kml/ext/2.2"}),r=i.e("Document");r.e("name",e.name),r.e("description",e.description);const o=r.e("Style",{id:"dronePath"}),a=o.e("LineStyle");a.e("color","ffffe500"),a.e("width","4");const s=o.e("PolyStyle");s.e("color","ffffe500"),s.e("width","4");const u=r.e("Placemark");u.e("name","Flight Path"),u.e("styleUrl","#dronePath");const l=u.e("LineString");l.e("altitudeMode","absolute"),l.e("coordinates",this.frames.map(e=>n(e)).join("\n"));const c=r.e("gx:Tour");c.e("name","Flight Motion");const m=c.e("gx:Playlist");let d=null;if(this.frames.forEach(e=>{const n=m.e("gx:FlyTo");n.e("gx:duration",d?e.elapsedTime-d.elapsedTime:.1),n.e("gx:flyToMode","smooth");const i=n.e("Camera");i.e("longitude",`${e.drone.spatial.coordinate.longitude}`),i.e("latitude",`${e.drone.spatial.coordinate.latitude}`),i.e("altitude",`${t+e.drone.spatial.altitude.value}`),i.e("altitudeMode","absolute"),i.e("heading",`${g.Convert.radiansToDegrees(e.drone.spatial.orientation.yaw)}`),i.e("tilt",`${g.Convert.radiansToDegrees(e.drone.gimbal().orientation.pitch)+90}`),d=e}),this.captures.length>0){r.e("Style",{id:"capture"}).e("IconStyle").e("Icon").e("href","http://maps.google.com/mapfiles/kml/shapes/placemark_circle_highlight.png");const e=r.e("Folder");e.e("name","Captures"),this.captures.forEach((t,i)=>{const r=this.frames[t.frameIndex],o=e.e("Placemark");o.e("name",`${i+1}`),o.e("description",t.title),o.e("styleUrl","#capture");const a=o.e("Point");a.e("altitudeMode","absolute"),a.e("coordinates",n(r))})}return i.end({pretty:!0})}};class y{constructor(e=0,t=0,n=new l.Datetime,i=new c.Device,r=new m.Drone,a={}){this.type=o.TypeName.TimelineFrame,this.elapsedTime=e,this.distanceTravelledHorizontal=t,this.datetime=n,this.device=i,this.drone=r,this.executingComponentStates=a}applyJSON(e){if(!e||e.type!==this.type)return!1;if(this.elapsedTime=r.Common.parseFloat(e.elapsedTime,0),this.distanceTravelledHorizontal=r.Common.parseFloat(e.distanceTravelledHorizontal,0),!this.datetime.applyJSON(e.datetime)||!this.device.applyJSON(e.device)||!this.drone.applyJSON(e.drone))return!1;this.executingComponentStates={};for(let t of Object.keys(e.executingComponentStates)){const n=new d.ComponentExecutionState(t);if(!n.applyJSON(e.executingComponentStates[t]))return!1;this.executingComponentStates[t]=n}return!0}}t.TimelineFrame=y;class v{constructor(e=new h.DefaultCommand,t=new u.CommandExecutionState){this.type=o.TypeName.TimelineFrame,this.command=e,this.executionState=t}applyJSON(e){if(!e||e.type!==this.type)return!1;if(!e.command)return!1;{const t=a.Serialization.deserialize(e.command);if(!(t&&t instanceof s.Command))return!1;this.command=t}return this.executionState.applyJSON(e.executionState)}}t.TimelineCommand=v;t.TimelineCameraCapture=class{constructor(e=0,t=0,n=o.CameraMode.Photo,i=o.CameraPhotoMode.Single,r=new l.Datetime,a=null){this.type=o.TypeName.TimelineCameraCapture,this.frameIndex=e,this.channel=t,this.mode=n,this.photoMode=i,this.started=r,this.finished=a}applyJSON(e){if(!(e&&e.type===this.type&&void 0!==e.frameIndex&&void 0!==e.channel&&e.mode&&e.photoMode&&e.started))return!1;if(this.frameIndex=r.Common.parseInt(e.frameIndex),this.channel=r.Common.parseInt(e.channel),this.mode=e.mode,this.photoMode=e.photoMode,this.started=new l.Datetime,!this.started.applyJSON(e.started))return!1;if(e.finished){if(this.finished=new l.Datetime,!this.finished.applyJSON(e.finished))return!1}else this.finished=null;return!0}get title(){let e=p.Strings.CameraMode.values[this.mode].name;return this.mode===o.CameraMode.Photo&&(e=`${p.Strings.CameraPhotoMode.values[this.photoMode].name} ${e}`),e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(3),o=n(1);class a{static feetToMeters(e){return.3048*e}static metersToFeet(e){return 3.28084*e}static metersToInches(e){return 39.3701*e}static milesPerHourToMetersPerSecond(e){return.44704*e}static metersPerSecondToMilesPerHour(e){return 2.23694*e}static metersPerSecondToKilometersPerHour(e){return 3.6*e}static kilometersPerHourToMetersPerSecond(e){return.277778*e}static radiansToDegrees(e,t=!1){if(t){if(e>2*Math.PI)return a.radiansToDegrees(e-2*Math.PI,t);if(e<0)return a.radiansToDegrees(e+2*Math.PI,t)}return 57.2958*e}static degreesToRadians(e,t=!1){if(t){if(e>360)return a.degreesToRadians(e-360,t);if(e<0)return a.degreesToRadians(e+360,t)}return.0174533*e}static distance(){switch(o.Format.UnitSystem){case i.UnitSystem.Metric:return new u(new s({name:r.Strings.Unit.values.meters.name,abbreviation:r.Strings.Unit.values.meters.abbreviation},1));case i.UnitSystem.Imperial:return new u(new s({name:r.Strings.Unit.values.feet.name,abbreviation:r.Strings.Unit.values.feet.abbreviation},0,a.metersToFeet),new s({name:r.Strings.Unit.values.meters.name,abbreviation:r.Strings.Unit.values.meters.abbreviation},1,a.feetToMeters))}}static angle(e=!1){return new u(new s({name:r.Strings.Unit.values.degrees.name,abbreviation:r.Strings.Unit.values.degrees.abbreviation},0,t=>a.radiansToDegrees(t,e)),new s({name:r.Strings.Unit.values.radians.name,abbreviation:r.Strings.Unit.values.radians.abbreviation},0,t=>a.degreesToRadians(t,e)))}static percent(){return new u(new s({name:r.Strings.Unit.values.percent.name,abbreviation:r.Strings.Unit.values.percent.abbreviation},0,e=>100*e),new s({name:r.Strings.Unit.values.percent.name,abbreviation:r.Strings.Unit.values.percent.abbreviation},2,e=>e/100))}static velocityHorizontal(){switch(o.Format.UnitSystem){case i.UnitSystem.Metric:return new u(new s({name:r.Strings.Unit.values.kilometersPerHour.name,abbreviation:r.Strings.Unit.values.kilometersPerHour.abbreviation},1,a.metersPerSecondToKilometersPerHour),new s({name:r.Strings.Unit.values.metersPerSecond.name,abbreviation:r.Strings.Unit.values.metersPerSecond.abbreviation},1,a.kilometersPerHourToMetersPerSecond));case i.UnitSystem.Imperial:return new u(new s({name:r.Strings.Unit.values.milesPerHour.name,abbreviation:r.Strings.Unit.values.milesPerHour.abbreviation},1,a.metersPerSecondToMilesPerHour),new s({name:r.Strings.Unit.values.metersPerSecond.name,abbreviation:r.Strings.Unit.values.metersPerSecond.abbreviation},1,a.milesPerHourToMetersPerSecond))}}static velocityVertical(){switch(o.Format.UnitSystem){case i.UnitSystem.Metric:return new u(new s({name:r.Strings.Unit.values.metersPerSecond.name,abbreviation:r.Strings.Unit.values.metersPerSecond.abbreviation},1));case i.UnitSystem.Imperial:return new u(new s({name:r.Strings.Unit.values.feetPerSecond.name,abbreviation:r.Strings.Unit.values.feetPerSecond.abbreviation},1,a.metersToFeet),new s({name:r.Strings.Unit.values.metersPerSecond.name,abbreviation:r.Strings.Unit.values.metersPerSecond.abbreviation},1,a.feetToMeters))}}static velocityRotational(){return new u(new s({name:r.Strings.Unit.values.degreesPerSecond.name,abbreviation:r.Strings.Unit.values.degreesPerSecond.abbreviation},1,a.radiansToDegrees),new s({name:r.Strings.Unit.values.radiansPerSecond.name,abbreviation:r.Strings.Unit.values.radiansPerSecond.abbreviation},1,a.degreesToRadians))}static accelerationHorizontal(){switch(o.Format.UnitSystem){case i.UnitSystem.Metric:return new u(new s({name:r.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:r.Strings.Unit.values.metersPerSecondSquared.abbreviation},1));case i.UnitSystem.Imperial:return new u(new s({name:r.Strings.Unit.values.feetPerSecondSquared.name,abbreviation:r.Strings.Unit.values.feetPerSecondSquared.abbreviation},1,a.metersToFeet),new s({name:r.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:r.Strings.Unit.values.metersPerSecondSquared.abbreviation},1,a.feetToMeters))}}static accelerationVertical(){return a.accelerationHorizontal()}static accelerationRotational(){return new u(new s({name:r.Strings.Unit.values.degreesPerSecondSquared.name,abbreviation:r.Strings.Unit.values.degreesPerSecondSquared.abbreviation},1,a.radiansToDegrees),new s({name:r.Strings.Unit.values.radiansPerSecondSquared.name,abbreviation:r.Strings.Unit.values.radiansPerSecondSquared.abbreviation},1,a.degreesToRadians))}}t.Convert=a;class s{constructor(e,t,n=null){this.unit=e,this.precision=t,this.convert=n||(e=>e)}get increment(){return 1/Math.pow(10,this.precision)}get incrementConverted(){return this.convert(this.increment)}display(e){return this.convert(e).toFixed(this.precision)}}t.Converter=s;class u{constructor(e,t=null){this.modelToUser=e,this.userToModel=t||e}}t.Converters=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(33),r=n(46),o=n(38),a=n(16),s=n(7),u=n(0),l=n(12),c=n(25),m=n(15),d=n(22);t.GeoSpatial=class{constructor(){this.type=u.TypeName.GeoSpatial,this.updated=new l.Datetime,this.coordinate=new o.GeoCoordinate,this.altitude=new i.Altitude,this.orientation=new r.Orientation3,this.velocity=new c.Velocity6}applyJSON(e){return!(!e||e.type!==this.type)&&this.updated.applyJSON(e.updated)&&this.coordinate.applyJSON(e.coordinate)&&this.altitude.applyJSON(e.altitude)&&this.orientation.applyJSON(e.orientation)&&this.velocity.applyJSON(e.velocity)}applyVelocity(e){this.coordinate=this.coordinate.geoCoordinate(new s.Vector2(this.velocity.horizontal.direction,a.Kinematic.d1(e,this.velocity.horizontal.magnitude))),this.altitude.value+=a.Kinematic.d1(this.velocity.vertical,e),this.orientation.applyVelocity(this.velocity.orientation,e)}interpolate(e,t,n,i){const r=this.coordinate.interpolate(e.coordinate,e=>i(0,e)).toGeoSpatial();return r.updated=this.updated.interpolate(e.updated,i),r.altitude=this.altitude.interpolate(e.altitude,i),r.orientation=this.orientation.interpolate(e.orientation,t,n,i),r.velocity=this.velocity.interpolate(e.velocity,i),r}projectCoordinate(e){return this.coordinate.geoCoordinate(new s.Vector2(this.velocity.horizontal.direction,a.Kinematic.d1(this.velocity.horizontal.magnitude,e)))}projectAltitude(e){return new i.Altitude(this.altitude.value+a.Kinematic.d1(this.velocity.vertical,e),this.altitude.system)}projectOrientation(e){return new r.Orientation3(this.orientation.x+a.Kinematic.d1(this.velocity.orientation.x,e),this.orientation.xReference,this.orientation.y+a.Kinematic.d1(this.velocity.orientation.y,e),this.orientation.z+a.Kinematic.d1(this.velocity.orientation.z,e),this.orientation.zReference)}groundCoordinate(e,t=0,n=d.Convert.degreesToRadians(-5)){e=Math.min(e,n);const i=m.Geometry.angleDifferenceSigned(e,-Math.PI/2);return 0===i?this.coordinate:this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+t,Math.tan(i)*Math.abs(this.altitude.value)))}groundCoordinates(e,t,n=d.Convert.degreesToRadians(-5)){if(t<-d.Convert.degreesToRadians(35)||t>d.Convert.degreesToRadians(15)){const i=t+e.vertical/2;if(i>n)return this.groundCoordinates(e,n-e.vertical/2-.01,n);const r=this.groundCoordinate(t),o=this.groundCoordinate(t-e.vertical/2),a=r.distance(o),u=this.groundCoordinate(i),l=r.distance(u),c=Math.atan2(e.horizontal,e.vertical),m=[];if(m.push(r.geoCoordinate(new s.Vector2(this.orientation.yaw+Math.PI+c,a*Math.tan(c)))),Math.abs(i-n)<.01){const e=25;for(let t=0;t<=e;t++)m.push(r.geoCoordinate(new s.Vector2(this.orientation.yaw-c+t/e*2*c,l*Math.tan(c))))}else m.push(r.geoCoordinate(new s.Vector2(this.orientation.yaw-c,l*Math.tan(c)))),m.push(r.geoCoordinate(new s.Vector2(this.orientation.yaw+c,l*Math.tan(c))));return m.push(r.geoCoordinate(new s.Vector2(this.orientation.yaw+Math.PI-c,a*Math.tan(c)))),m}const i=Math.min(t+e.vertical/2,n),r=t-e.vertical/2;if(r>=i)return[];const o=this.groundCoordinate(r),a=this.coordinate.distance(o);if(r<-Math.PI/2||a>1e3)return[];const u=this.groundCoordinate(i),l=this.coordinate.distance(u),c=e.horizontal/2,m=[];if(m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c,a))),i>=n){const e=25;for(let t=0;t<=e;t++)m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c+t/e*2*c,l)))}else m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c,l))),m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+c,l)));return m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+e.horizontal/2,a))),m}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return e*Math.PI/180};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(31),o=n(2),a=n(3),s=n(1);class u{constructor(e=new r.Velocity3,t=new r.Velocity3){this.type=i.TypeName.Velocity6,this.toString=(()=>o.Common.joinNotEmpty([0===this.horizontal.magnitude?"":a.Strings.formatString(a.Strings.Velocity6.toString.horizontal,s.Format.velocityHorizontal(this.horizontal.magnitude).toString(),s.Format.angle(this.horizontal.direction).toString()),0===this.vertical?"":a.Strings.formatString(a.Strings.Velocity6.toString.vertical,s.Format.velocityVertical(this.vertical).toString()),0===this.rotational?"":a.Strings.formatString(a.Strings.Velocity6.toString.rotational,s.Format.velocityRotational(this.rotational).toString())])),this.position=e,this.orientation=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.position.applyJSON(e.position)&&this.orientation.applyJSON(e.orientation))}interpolate(e,t){return new u(this.position.interpolate(e.position,t),this.orientation.interpolate(e.orientation,t))}get horizontal(){return this.position.horizontal}set horizontal(e){this.position.horizontal=e}get vertical(){return this.position.vertical}set vertical(e){this.position.vertical=e}get rotational(){return this.orientation.z}set rotational(e){this.orientation.z=e}}t.Velocity6=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(79),r=n(80),o=n(54),a=n(5),s=n(7),u=n(2);t.SubComponent=class extends r.Component{constructor(){super(...arguments),this.required=!0,this.exclusive=!1,this.reference=new i.SourcedGeoSpatial,this.pointsOfInterest=[]}applyJSON(e){if(!super.applyJSON(e))return!1;if(!this.descriptors.applyJSON(e.descriptors)||!this.coordinate.applyJSON(e.coordinate))return!1;if(this.required=u.Common.parseBoolean(e.required,!0),this.exclusive=u.Common.parseBoolean(e.exclusive,!1),!this.reference.applyJSON(e.reference))return!1;if(this.pointsOfInterest=[],Array.isArray(e.pointsOfInterest))for(let t of e.pointsOfInterest){const e=a.Serialization.deserialize(t);if(!(e&&e instanceof o.PointOfInterest))return!1;this.pointsOfInterest.push(e)}return!0}get pointsOfInterestEnabled(){return!1}get pointsOfInterestReferences(){return[]}get exclusiveReadonly(){return!1}get exclusiveExecution(){return this.exclusive}get repositionIfIncluded(){return!1}reposition(e,t){const n=this.node().referenceOffsets;if(n.length>0){const i=t?this.referenceCoordinate(t,null).offset(e).subtract(n[0]):new s.Vector2;n.forEach(e=>{e.addToSelf(i)})}}get referenceOffsets(){return this.pointsOfInterestEnabled?super.referenceOffsets.concat(this.pointsOfInterest.map(e=>e.referencedOffset.coordinateOffset)):super.referenceOffsets}referenceSpatial(e){return this.reference.value(e.spatialSources)}referenceCoordinate(e,t=null){return this.referenceSpatial(e).coordinate.geoCoordinate(t||new s.Vector2)}pointOfInterestCoordinate(e,t){return this.pointsOfInterest[t].referenceCoordinate(e.spatialSources,this.reference)}pointsOfInterestCoordinates(e){return this.pointsOfInterest.map(t=>t.referenceCoordinate(e.spatialSources,this.reference))}node(e=null){const t=super.node(e);return this.pointsOfInterestEnabled&&t.children.push(new o.PointsOfInterestNode(t,()=>this.pointsOfInterest)),t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(26),r=n(42),o=n(0),a=n(85),s=n(25),u=n(23),l=n(20),c=n(87),m=n(45),d=n(5),h=n(31),p=n(2),f=n(7),g=n(16),y=n(19),v=n(9),C=n(81),S=n(88),b=n(65);class w extends i.SubComponent{constructor(){super(...arguments),this.droneMotionLimits=new a.MotionLimits6Optional}applyJSON(e){return!!super.applyJSON(e)&&this.droneMotionLimits.applyJSON(e.droneMotionLimits)}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!0}get repositionIfIncluded(){return!0}descendantAllowed(e){return!!super.descendantAllowed(e)&&(!(e instanceof w)&&0===e.node().descendants.filter(e=>e instanceof C.ComponentNode&&e.component instanceof w).length)}resolveDroneMotionLimits(e,t=null){return e.plan.droneMotionLimits.resolve(t||this.droneMotionLimits)}addVelocityCommandsFromModel(e,t){const n=t.sampleInterpolated,{drone:i,execution:o}=e,a=this.referenceSpatial(e),u=i.projectSpatial(e.engagement.currentDatetime),l=d.Serialization.clone(n.droneSpatial.velocity),c=new s.Velocity6,m=u.coordinate.offset(n.droneSpatial.coordinate);r.VelocityDroneCommand.updateBoundedVelocityHorizontal(c,m.direction,m.magnitude<v.Constants.DroneMotionComponentHorizontalErrorMax?p.Common.sigmoid(m.magnitude/v.Constants.DroneMotionComponentHorizontalErrorMax,v.Constants.DroneMotionComponentErrorK):m.magnitude,n.droneMotionLimits,a.velocity.horizontal);const h=n.droneSpatial.altitude.value-u.altitude.value;r.VelocityDroneCommand.updateBoundedVelocityVertical(c,Math.abs(h)<v.Constants.DroneMotionComponentVerticalErrorMax?p.Common.matchSign(p.Common.sigmoid(Math.abs(h)/v.Constants.DroneMotionComponentVerticalErrorMax,v.Constants.DroneMotionComponentErrorK),h):h,n.droneMotionLimits,a.velocity.vertical),l.horizontal=l.horizontal.add(c.horizontal),l.vertical+=c.vertical;const f=new r.VelocityDroneCommand;f.velocity=l,f.velocity.rotational=0,f.heading=n.droneSpatial.orientation.yaw;const g=f.toMessage();g.details&&o.getComponentState(this).messages.push(g),i.addStatelessCommand(f);for(const t of Object.keys(n.gimbalOrientations))this.addGimbalVelocityCommand(e,parseInt(t),n.gimbalOrientations[t],{x:0,z:0},n.gimbalVelocities[t])}addDroneVelocityCommand(e,t,n=null){const i=e.execution.getComponentState(this),a=i.cachedData(o.TypeName.DroneMotionComponent,()=>new x),s=this.resolveDroneMotionLimits(e),u=new r.VelocityDroneCommand;return u.velocity=r.VelocityDroneCommand.boundedVelocity(a.previousVelocity,t,e.engagement.timeSinceLastExecution,s),u.heading=n,u.toMessage().details&&i.messages.push(u.toMessage()),e.drone.addStatelessCommand(u),a.previousVelocity=u.velocity,u}}t.DroneMotionComponent=w;class x{constructor(){this.previousVelocity=new s.Velocity6}}t.DroneMotionComponentModelData=class{constructor(e){this.currentTime=0,this._sample=e.first,this.totalTime=e.last.current.time}updateProgress(e){this.updateTime(Math.max(0,Math.min(1,e))*this.totalTime)}updateTime(e){for(e<this.currentTime&&(this._sample=this._sample.first),this.currentTime=e;this._sample.next&&this._sample.next.current.time<this.currentTime;)this._sample=this._sample.next}incrementTime(e){this.updateTime(this.currentTime+e)}get sampleLinked(){return this._sample}get sampleInterpolated(){if(!this._sample.next)return this._sample.current;const e=(this.currentTime-this._sample.current.time)/(this._sample.next.current.time-this._sample.current.time);return this._sample.current.interpolate(this._sample.next.current,e)}get progress(){return Math.min(1,this.currentTime/this.totalTime)}};class M{constructor(e){this.firstSample=e.first,this.samples=this.firstSample.list}addToEstimate(e){this.samples.length>0&&(e.droneSpatials.push(...this.samples.map(e=>e.current.droneSpatial)),e.time+=p.Common.last(this.samples).current.time)}static updateSamplesContrainVelocities(e,t){M.updateSamplesContrainHorizontalVelocitiesByAcceleration(e),M.updateSamplesContrainVerticalVelocitiesByAcceleration(e,t),M.updateSamplesTime(e),M.updateSamplesContrainHorizontalVelocitiesByTime(e),M.updateSamplesContrainHorizontalVelocitiesByAcceleration(e),M.updateSamplesTime(e),M.updateSamplesContrainVerticalVelocitiesByTime(e),M.updateSamplesContrainVerticalVelocitiesByAcceleration(e,t),M.updateSamplesTime(e),M.updateSamplesContrainVerticalVelocitiesByTime(e),M.updateSamplesContrainHorizontalVelocitiesByTime(e),M.updateSamplesOrientationVelocities(e)}static updateSamplesContrainHorizontalVelocitiesByAcceleration(e){const t=(e,t,n)=>{const i=t.droneSpatial.coordinate.offset(e.droneSpatial.coordinate);if(0===i.magnitude)return void(e.droneSpatial.velocity.horizontal=new f.Vector2);const r=e.droneSpatial.velocity.horizontal,o=t.droneSpatial.velocity.horizontal,a=0===o.magnitude?r.direction:o.direction;if(r.direction-=a,o.direction=0,r.x<=0)return void(e.droneSpatial.velocity.horizontal=new f.Vector2);const s=new f.Vector2(r.direction,i.magnitude),u=new y.Point2(Math.min(r.x,g.Kinematic.v3(o.x,n,s.x)),g.Kinematic.v3(0,n,Math.abs(s.y)));r.x>u.x&&(r.magnitude*=u.x/r.x),Math.abs(r.y)>u.y&&(r.magnitude*=u.y/Math.abs(r.y)),r.direction+=a,e.droneSpatial.velocity.horizontal=r};let n=e.first;for(n.current.droneSpatial.velocity.horizontal=new f.Vector2;n.next;)(n=n.next).next&&n.previous&&t(n.current,n.previous.current,n.current.droneMotionLimits.horizontal.acceleration.max);for((n=e.last).current.droneSpatial.velocity.horizontal=new f.Vector2;n.previous;)(n=n.previous).next&&n.previous&&t(n.current,n.next.current,-n.current.droneMotionLimits.horizontal.acceleration.min);for((n=e.first).current.droneSpatial.velocity.horizontal=new f.Vector2;n.next;)(n=n.next).next&&n.previous&&t(n.current,n.previous.current,n.current.droneMotionLimits.horizontal.acceleration.max)}static updateSamplesContrainVerticalVelocitiesByAcceleration(e,t){let n=e.first;for(;n.next;)if((n=n.next).next&&n.previous){let e=0;const i=n.current.droneSpatial.altitude.value-n.previous.current.droneSpatial.altitude.value;if(Math.abs(i)>.01*t){const t=n.previous.current.droneSpatial.velocity.vertical;i>0&&t>0?e=t:i<0&&t<0&&(e=Math.abs(t)),e=g.Kinematic.v3(e,n.current.droneMotionLimits.vertical.acceleration.max,Math.abs(i))}n.current.droneSpatial.velocity.vertical=n.current.droneMotionLimits.vertical.velocity.bound((i<0?-1:1)*e)}for((n=e.last).current.droneSpatial.velocity.vertical=0;n.previous;)if((n=n.previous).next&&n.previous&&0!==n.current.droneSpatial.velocity.vertical){let e=0;n.current.droneSpatial.velocity.vertical>0&&n.next.current.droneSpatial.velocity.vertical>0?e=n.next.current.droneSpatial.velocity.vertical:n.current.droneSpatial.velocity.vertical<0&&n.next.current.droneSpatial.velocity.vertical<0&&(e=Math.abs(n.next.current.droneSpatial.velocity.vertical));const t=n.current.droneSpatial.altitude.value-n.next.current.droneSpatial.altitude.value;e=g.Kinematic.v3(e,-n.current.droneMotionLimits.vertical.acceleration.min,Math.abs(t)),n.current.droneSpatial.velocity.vertical<0?(e=-e,n.current.droneSpatial.velocity.vertical<e&&(n.current.droneSpatial.velocity.vertical=e)):n.current.droneSpatial.velocity.vertical>e&&(n.current.droneSpatial.velocity.vertical=e)}}static updateSamplesContrainHorizontalVelocitiesByTime(e){let t=e.first;for(;t.next;)if((t=t.next).next&&t.previous){const e=t.current.droneSpatial.velocity.horizontal;e.magnitude=g.Kinematic.v4(t.current.droneSpatial.coordinate.distance(t.previous.current.droneSpatial.coordinate),t.current.time-t.previous.current.time),t.current.droneSpatial.velocity.horizontal=e}}static updateSamplesContrainVerticalVelocitiesByTime(e){let t=e.first;for(;t.next;)(t=t.next).next&&t.previous&&(t.current.droneSpatial.velocity.vertical=(t.current.droneSpatial.velocity.vertical<0?-1:1)*g.Kinematic.v4(Math.abs(t.current.droneSpatial.altitude.value-t.previous.current.droneSpatial.altitude.value),t.current.time-t.previous.current.time))}static updateSamplesTime(e){let t=e.first;for(;t.next;)if((t=t.next).previous){let e=0;const n=(null===t.next?t.previous:t).current.droneSpatial.velocity.horizontal.magnitude,i=Math.abs((null===t.next?t.previous:t).current.droneSpatial.velocity.vertical);if(n>0){const i=t.previous.current.droneSpatial.coordinate.distance(t.current.droneSpatial.coordinate);e=g.Kinematic.t1(n,i)}if(i>0&&(0===n||i>.1*n)){const n=Math.abs(t.current.droneSpatial.altitude.value-t.previous.current.droneSpatial.altitude.value);e=Math.max(g.Kinematic.t1(i,n),e)}e=Math.min(v.Constants.DroneMotionComponentModelSampleTimeMax,e),t.current.time=t.previous.current.time+e}}static updateSamplesOrientationVelocities(e){}}t.DroneMotionComponentModel=M;t.DroneMotionComponentModelSampleLinked=class extends c.LinkedValue{};class O{constructor(e,t,n,i){this.time=0,this.droneSpatial=new u.GeoSpatial,this.droneSpatial=e,this.droneMotionLimits=t,this.gimbalOrientations=n,this.gimbalVelocities=i}applyJSON(e){if(this.time=p.Common.parseFloat(e.time),!this.droneSpatial.applyJSON(e.droneSpatial))return!1;if(this.gimbalOrientations={},e.gimbalOrientations)for(let t of Object.keys(e.gimbalOrientations)){const n=new l.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}if(this.gimbalVelocities={},e.gimbalVelocities)for(let t of Object.keys(e.gimbalVelocities)){const n=new h.Velocity3;if(!n.applyJSON(e.gimbalVelocities[t]))return!1;this.gimbalVelocities[t]=n}return!0}interpolate(e,t,n=new S.OrientationReferenceSources){const i=(e,n)=>m.Interpolation.linear(e,n,t),r={};for(const t of Object.keys(this.gimbalOrientations))e.gimbalOrientations[t]?r[t]=this.gimbalOrientations[t].interpolate(e.gimbalOrientations[t],n,new b.OrientationReferenceTargets,i):r[t]=d.Serialization.clone(this.gimbalOrientations[t]);const o={};for(const t of Object.keys(this.gimbalVelocities))e.gimbalVelocities[t]?o[t]=this.gimbalVelocities[t].interpolate(e.gimbalVelocities[t],i):o[t]=d.Serialization.clone(this.gimbalVelocities[t]);const a=new O(this.droneSpatial.interpolate(e.droneSpatial,n,new b.OrientationReferenceTargets,i),this.droneMotionLimits.interpolate(e.droneMotionLimits,i),r,o);return a.time=i(this.time,e.time),a}}t.DroneMotionComponentModelSample=O},function(e,t){(function(){var t,n,i,r,o,a,s,u={}.hasOwnProperty;t=function(e,...t){var n,i,r,a;if(o(Object.assign))Object.assign.apply(null,arguments);else for(n=0,r=t.length;n<r;n++)if(null!=(a=t[n]))for(i in a)u.call(a,i)&&(e[i]=a[i]);return e},o=function(e){return!!e&&"[object Function]"===Object.prototype.toString.call(e)},a=function(e){var t;return!!e&&("function"==(t=typeof e)||"object"===t)},i=function(e){return o(Array.isArray)?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},r=function(e){var t;if(i(e))return!e.length;for(t in e)if(u.call(e,t))return!1;return!0},s=function(e){var t,n;return a(e)&&(n=Object.getPrototypeOf(e))&&(t=n.constructor)&&"function"==typeof t&&t instanceof t&&Function.prototype.toString.call(t)===Function.prototype.toString.call(Object)},n=function(e){return o(e.valueOf)?e.valueOf():e},e.exports.assign=t,e.exports.isFunction=o,e.exports.isObject=a,e.exports.isArray=i,e.exports.isEmpty=r,e.exports.isPlainObject=s,e.exports.getValue=n}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2),o=n(3),a=n(1);class s{constructor(e=0,t){this.type=i.TypeName.Limits,this.max=e,this.min=void 0===t?0===e?0:-e:t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.max=r.Common.parseFloat(e.max),this.min=r.Common.parseFloat(e.min),!0)}bound(e){return Math.max(Math.min(e,this.max),this.min)}valid(e){return e<=this.max&&e>=this.min}interpolate(e,t){return new s(t(this.max,e.max),t(this.min,e.min))}toString(e=null,t={min:!0,max:!0}){return t.min||t.max?(e||(e=a.Format.distance),t.min&&!t.max?e(this.min).toString():!t.min&&t.max?e(this.max).toString():this.max>0&&this.min<0&&Math.abs(this.max+this.min)<.01*Math.abs(this.max)?o.Strings.formatString(o.Strings.Limits.toString.same,e(this.max).toString()):o.Strings.formatString(o.Strings.Limits.toString.different,e(this.min).toString(),e(this.max).toString())):""}}t.Limits=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2);t.Descriptors=class{constructor(e="",t="",n=[]){this.type=i.TypeName.Descriptors,this.name=e,this.description=t,this.tags=n}applyJSON(e){return!(!e||e.type!==this.type||(this.name=e.name||this.name,this.description=e.description||this.description,this.tags=e.tags||this.tags,0))}toString(){return r.Common.joinNotEmpty([this.name,this.description])}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(19),o=n(2);class a{constructor(e=0,t=0,n=0){this.type=i.TypeName.Velocity3,this.x=e,this.y=t,this.z=n}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=o.Common.parseFloat(e.x),this.y=o.Common.parseFloat(e.y),this.z=o.Common.parseFloat(e.z),!0)}interpolate(e,t){return new a(t(this.x,e.x),t(this.y,e.y),t(this.z,e.z))}get horizontal(){return new r.Point2(this.x,this.y).toVector2()}set horizontal(e){this.x=e.x,this.y=e.y}get vertical(){return this.z}set vertical(e){this.z=e}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}}t.Velocity3=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(5),o=n(0);t.Command=class extends i.Identifiable{get title(){return r.Serialization.typeDisplay(this)}get subtitle(){return""}get estimatedTime(){return.3}get verifiable(){return!0}get reengagementTiming(){return o.CommandReengagementTiming.Never}get reengagementReplaceable(){return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2),o=n(1);class a{constructor(e=0,t=i.AltitudeSystem.ATL){this.type=i.TypeName.Altitude,this.system=i.AltitudeSystem.ATL,this.value=e,this.system=t}applyJSON(e){return!(!e||e.type!==this.type||!e.system)&&(this.system=e.system,this.value=r.Common.parseFloat(e.value),!0)}interpolate(e,t){return this.system===e.system?new a(t(this.value,e.value),this.system):this}toString(){return`${o.Format.altitude(this.value).toString()} ${o.Format.string(`AltitudeSystem.values.${this.system}.abbreviation`)}`}}t.Altitude=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(17)),r=s(n(18)),o=s(n(24)),a=n(10);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;n=void 0===n||isNaN(n)?1:n;var s,u=(0,i.default)(e),l=(0,r.default)(e),c=(0,i.default)(t),m=(0,r.default)(t),d=Math.acos((s=Math.sin((0,o.default)(c))*Math.sin((0,o.default)(u))+Math.cos((0,o.default)(c))*Math.cos((0,o.default)(u))*Math.cos((0,o.default)(l)-(0,o.default)(m)))>1?1:s<-1?-1:s)*a.earthRadius;return Math.round(d/n)*n};t.default=u},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var i=n(71),r=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=m;var o=n(48);o.inherits=n(41);var a=n(152),s=n(109);o.inherits(m,a);for(var u=r(s.prototype),l=0;l<u.length;l++){var c=u[l];m.prototype[c]||(m.prototype[c]=s.prototype[c])}function m(e){if(!(this instanceof m))return new m(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||i.nextTick(h,this)}function h(e){e.end()}Object.defineProperty(m.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),m.prototype._destroy=function(e,t){this.push(null),this.end(),i.nextTick(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(23),o=n(0);t.Device=class extends i.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.Device,this.spatial=new r.GeoSpatial}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||!this.spatial.applyJSON(e.spatial))}}},function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(213)),o=n(22),a=n(7),s=n(0),u=n(1),l=n(2),c=n(23);class m{constructor(e=0,t=0){this.type=s.TypeName.GeoCoordinate,this.latitude=e,this.longitude=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.latitude=l.Common.parseFloat(e.latitude),this.longitude=l.Common.parseFloat(e.longitude),!0)}distance(e){const t=o.Convert.degreesToRadians(e.latitude-this.latitude),n=o.Convert.degreesToRadians(e.longitude-this.longitude),i=Math.sin(t/2)*Math.sin(t/2)+Math.cos(o.Convert.degreesToRadians(this.latitude))*Math.cos(o.Convert.degreesToRadians(e.latitude))*Math.sin(n/2)*Math.sin(n/2),r=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i));return m.GeoRadius*r}bearing(e){return o.Convert.degreesToRadians(r.getGreatCircleBearing(this,e))}geoCoordinate(e=null){if(e){const t=r.computeDestinationPoint(this,e.magnitude,o.Convert.radiansToDegrees(e.direction),m.GeoRadius);return new m(t.latitude,t.longitude)}return new m(this.latitude,this.longitude)}offset(e){return new a.Vector2(this.bearing(e),this.distance(e))}interpolate(e,t){const n=this.offset(e);return this.geoCoordinate(new a.Vector2(n.direction,t(n.magnitude)))}toRadians(){return new m(o.Convert.degreesToRadians(this.latitude),o.Convert.degreesToRadians(this.longitude))}toLngLat(){return[this.longitude,this.latitude]}toGeoSpatial(){const e=new c.GeoSpatial;return e.coordinate=this,e}toString(){const e=u.Format.geoCoordinate(this);return`${e.latitude.toString()} ${e.longitude.toString()}`}}t.GeoCoordinate=m,m.GeoRadius=6378137},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return 180*e/Math.PI};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),r=n(38),o=n(6),a=n(23),s=n(32),u=n(73),l=n(0),c=n(58),m=n(98),d=n(12),h=n(89),p=n(9),f=n(90),g=n(88);t.Drone=class extends o.Identifiable{constructor(){super(...arguments),this.type=l.TypeName.Drone,this.serialNumber=null,this.takeoffCoordinate=new r.GeoCoordinate,this.spatial=new a.GeoSpatial,this.cameras={},this.gimbals={},this.statelessCommands=[],this.statefulCommands=[],this.commandExecutionStates={}}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.serialNumber=e.serialNumber,!this.takeoffCoordinate.applyJSON(e.takeoffCoordinate)||!this.spatial.applyJSON(e.spatial))return!1;this.cameras={};for(let t of Object.keys(e.cameras)){const n=new m.Camera(t);if(!n.applyJSON(e.cameras[t]))return!1;this.cameras[t]=n}this.gimbals={};for(let t of Object.keys(e.gimbals)){const n=new c.Gimbal(t);if(!n.applyJSON(e.gimbals[t]))return!1;this.gimbals[t]=n}if(this.statelessCommands=[],Array.isArray(e.statelessCommands))for(let t of e.statelessCommands){const e=i.Serialization.deserialize(t);if(!(e&&e instanceof s.Command))return!1;this.statelessCommands.push(e)}if(this.statefulCommands=[],Array.isArray(e.statefulCommands))for(let t of e.statefulCommands){const e=i.Serialization.deserialize(t);if(!(e&&e instanceof s.Command))return!1;this.statefulCommands.push(e)}this.commandExecutionStates={};for(let t of Object.keys(e.commandExecutionStates)){const n=new u.CommandExecutionState(t);if(!n.applyJSON(e.commandExecutionStates[t]))return!1;this.commandExecutionStates[t]=n}return!0}convertAltitude(e){return e.system,this.spatial.altitude.system,e.value}referenceSources(e){return new g.OrientationReferenceSources(new f.OrientationXReferenceSources(e.x),new h.OrientationZReferenceSources(this.spatial.velocity.horizontal.direction,this.spatial.orientation.yaw,e.z))}projectSpatial(e){const t=new a.GeoSpatial;t.updated=new d.Datetime(new Date(e.value.getTime()+2*p.Constants.DroneConnectionLatency));const n=t.updated.elapsedTime(this.spatial.updated);return t.coordinate=this.spatial.projectCoordinate(n),t.altitude=this.spatial.projectAltitude(n),t.orientation=this.spatial.projectOrientation(n),t.velocity=this.spatial.velocity,t}projectGimbalOrientation(e,t){const n=new d.Datetime(new Date(t.value.getTime()+2*p.Constants.DroneConnectionLatency)).elapsedTime(this.spatial.updated);return this.gimbal(e).projectOrientation(n)}camera(e=0){return this.cameras[e]||(this.cameras[e]=new m.Camera),this.cameras[e]}gimbal(e=0){return this.gimbals[e]||(this.gimbals[e]=new c.Gimbal),this.gimbals[e]}addStatelessCommand(e){this.statelessCommands.push(e)}addStatefulCommand(e){this.statefulCommands.push(e),this.commandExecutionStates[e.id]=new u.CommandExecutionState(e.id)}removeStatefulCommand(e){this.statefulCommands=this.statefulCommands.filter(t=>t.id!==e.id),delete this.commandExecutionStates[e.id]}removeAllStatefulCommands(){this.statefulCommands=[],this.commandExecutionStates={}}commandExecutionState(e){return this.commandExecutionStates[e]}updateCommandExecutionState(e,t,n=null,i=null){const r=this.commandExecutionState(e);r&&r.update(t,n,i)}statefulCommandsWhereStatus(e){return this.statefulCommands.filter(t=>{const n=this.commandExecutionState(t.id);return n&&n.status===e})}get groundCoordinateInView(){return this.spatial.groundCoordinate(this.gimbal().orientation.pitch)}groundCoordinatesInView(e){return this.spatial.groundCoordinates(e,this.gimbal().orientation.pitch)}}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),r=n(11),o=n(1),a=n(13),s=n(25),u=n(7),l=n(9),c=n(16),m=n(0),d=n(2);t.VelocityDroneCommand=class extends a.DroneCommand{constructor(){super(m.TypeName.VelocityDroneCommand),this.type=m.TypeName.VelocityDroneCommand,this.velocity=new s.Velocity6,this.heading=null}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(void 0===e.heading&&null===e.heading?this.heading=null:this.heading=d.Common.parseFloat(e.heading),this.velocity.applyJSON(e.velocity))}get verifiable(){return!1}toMessage(){return new r.Message(i.Strings.VelocityDroneCommand.messages.controls.title,d.Common.joinNotEmpty([this.velocity.horizontal.magnitude<.1?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.horizontal,o.Format.velocityHorizontal(this.velocity.horizontal.magnitude).toString(),o.Format.angle(this.velocity.horizontal.direction).toString()),Math.abs(this.velocity.vertical)<.1?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.vertical,o.Format.velocityVertical(this.velocity.vertical).toString()),null===this.heading?Math.abs(this.velocity.rotational)<.01?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.rotational,o.Format.velocityRotational(this.velocity.rotational).toString()):i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.heading,o.Format.angle(this.heading).toString())]))}static boundedVelocity(e,t,n,i){const r=new s.Velocity6,o=t.horizontal.subtract(e.horizontal);return r.horizontal=e.horizontal.add(new u.Vector2(o.direction,i.horizontal.currentVelocityLimits(0,n).bound(o.magnitude))),r.vertical=i.vertical.currentVelocityLimits(e.vertical,n).bound(t.vertical),r.rotational=i.rotational.currentVelocityLimits(e.rotational,n).bound(t.rotational),r}static updateBoundedVelocityHorizontal(e,t,n,i,r=new u.Vector2){const o=c.Kinematic.dampen(c.Kinematic.v3(0,-i.horizontal.acceleration.min,n),l.Constants.VelocityHorizontalDampenThreshold);e.horizontal=r.add(new u.Vector2(t,i.horizontal.velocity.bound(o)))}static updateBoundedVelocityVertical(e,t,n,i=0){const r=c.Kinematic.dampen(c.Kinematic.v3(0,-n.vertical.acceleration.min,Math.abs(t)),l.Constants.VelocityVerticalDampenThreshold);e.vertical=i+(t<0?-1:1)*n.vertical.velocity.bound(r)}static updateBoundedVelocityRotational(e,t,n,i=0){const r=Math.min(Math.abs(t),c.Kinematic.v3(0,-n.rotational.acceleration.min,Math.abs(t)));e.rotational=i+(t<0?-1:1)*n.rotational.velocity.bound(r)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0);t.StartCaptureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.StartCaptureCameraCommand}static possible(e){return e===r.CameraMode.Photo||e===r.CameraMode.Video}static continuous(e,t){return e===r.CameraMode.Video||e===r.CameraMode.Photo&&t===r.CameraPhotoMode.Interval}get estimatedTime(){return 1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0);t.StopCaptureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.StopCaptureCameraCommand}get estimatedTime(){return 1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2);class o{constructor(){this.type=i.TypeName.Interpolation,this.f=i.InterpolationFunction.Linear,this.sigmoidK=Math.E}applyJSON(e){return!(!e||e.type!==this.type||!e.f)&&(this.f=e.f,this.sigmoidK=r.Common.parseFloat(e.sigmoidK,Math.E),!0)}interpolate(e,t,n){switch(this.f){case i.InterpolationFunction.None:return e;case i.InterpolationFunction.Linear:return o.linear(e,t,n);case i.InterpolationFunction.Sigmoid:return o.sigmoid(e,t,n,this.sigmoidK)}}static linear(e,t,n){return e+(t-e)*n}static sigmoid(e,t,n,i){return e+(t-e)*r.Common.sigmoid(n,i)}}t.Interpolation=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(3),o=n(1),a=n(2),s=n(20),u=n(15),l=n(16),c=n(65);class m{constructor(e=0,t=i.OrientationXReference.Horizon,n=0,a=0,s=i.OrientationZReference.North){this.type=i.TypeName.Orientation3,this.toString=(()=>{const e=[];return this.xReference===i.OrientationXReference.Horizon?e.push(`${r.Strings.Orientation3.values.x} ${o.Format.angle(this.x,!1)}`):e.push(`${r.Strings.Orientation3.values.x} ${o.Format.angle(this.x,!1)} ∠ ${o.Format.string(`OrientationXReference.values.${this.xReference}.name`)}`),this.zReference===i.OrientationZReference.North?e.push(`${r.Strings.Orientation3.values.z} ${o.Format.angle(this.z,!0)}`):e.push(`${r.Strings.Orientation3.values.z} ${o.Format.angle(this.z,!0)} ∠ ${o.Format.string(`OrientationZReference.values.${this.zReference}.name`)}`),0!==this.y&&e.push(`${r.Strings.Orientation3.values.y} ${o.Format.angle(this.y,!1)}`),e.join(r.Strings.Common.delimeter)}),this.x=e,this.xReference=t,this.y=n,this.z=a,this.zReference=s}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x=a.Common.parseFloat(e.x),this.xReference=e.xReference||i.OrientationXReference.Horizon,this.y=a.Common.parseFloat(e.y),this.z=a.Common.parseFloat(e.z),this.zReference=e.zReference||i.OrientationZReference.North,!0)}applyVelocity(e,t){this.x+=l.Kinematic.d1(e.x,t),this.y+=l.Kinematic.d1(e.y,t),this.z+=l.Kinematic.d1(e.z,t)}interpolate(e,t,n,r){let o=this.x,a=this.xReference,s=this.x,l=e.x;e.xReference!==this.xReference&&(s=t.x.value(this.xReference)+this.x,l=t.x.value(e.xReference)+e.x,a=i.OrientationXReference.Horizon),o=s-r(0,u.Geometry.angleDifferenceSigned(s,l));let c=this.z,d=this.zReference,h=this.z,p=e.z;e.zReference!==this.zReference&&(h=t.z.value(this.zReference)+this.z,p=t.z.value(e.zReference)+e.z,d=i.OrientationZReference.North),c=h-r(0,u.Geometry.angleDifferenceSigned(h,p));const f=new m(o,a,r(this.y,e.y),c,d);return f.convertReferences(t,n),f}convertReferences(e,t=new c.OrientationReferenceTargets){this.xReference!==t.x&&(this.x=e.x.value(this.xReference)+this.x-e.x.value(t.x),this.xReference=t.x),this.zReference!==t.z&&(this.z=e.z.value(this.zReference)+this.z-e.z.value(t.z),this.zReference=t.z)}apply(e){return null!==e.x&&(this.x=e.x),e.xReference&&(this.xReference=e.xReference),null!==e.y&&(this.y=e.y),null!==e.z&&(this.z=e.z),e.zReference&&(this.zReference=e.zReference),this}get pitch(){return this.x}set pitch(e){this.x=e}get pitchReference(){return this.xReference}set pitchReference(e){this.xReference=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get yawReference(){return this.zReference}set yawReference(e){this.zReference=e}asOptional(){const e=new s.Orientation3Optional;return e.apply(this),e}}t.Orientation3=m},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var u,l=[],c=!1,m=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):m=-1,l.length&&h())}function h(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(u=l,l=[];++m<t;)u&&u[m].run();m=-1,t=l.length}u=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new p(e,t)),1!==l.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(106).Buffer)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(32),r=n(2);t.PayloadCommand=class extends i.Command{constructor(){super(...arguments),this.channel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.channel=r.Common.parseInt(e.channel),!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ModeCameraCommand,this.mode=r.CameraMode.Photo}applyJSON(e){return!(!super.applyJSON(e)||!e.mode||(this.mode=e.mode,0))}get subtitle(){return o.Format.string(`CameraMode.values.${this.mode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get reengagementReplaceable(){return!1}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.PhotoModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.PhotoModeCameraCommand,this.photoMode=r.CameraPhotoMode.Single}applyJSON(e){return!(!super.applyJSON(e)||!e.photoMode||(this.photoMode=e.photoMode,0))}get subtitle(){return o.Format.string(`CameraPhotoMode.values.${this.photoMode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Photo}get requiredCapturing(){return!1}get reengagementReplaceable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(49);t.GimbalCommand=class extends i.PayloadCommand{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(26),r=n(0),o=n(32),a=n(5),s=n(113),u=n(11),l=n(1),c=n(2);t.CommandComponent=class extends i.SubComponent{constructor(e=new s.DefaultCommand){super(),this.type=r.TypeName.CommandComponent,this.command=e}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(!e.command)return!1;{const t=a.Serialization.deserialize(e.command);if(!(t&&t instanceof o.Command))return!1;this.command=t}return!0}get title(){return this.command.title}get subtitle(){return this.command.subtitle}get verification(){return this.command.verifiable?a.Serialization.clone(this,!0):null}estimate(e,t){const n=super.estimate(e,t);return e.timeRequired&&(n.time=this.command.estimatedTime),n}execute(e){const t=super.execute(e);if(t.status!==r.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,i=n.commandExecutionState(this.command.id);if(i)switch(i.status){case r.CommandExecutionStatus.Pending:case r.CommandExecutionStatus.Queued:case r.CommandExecutionStatus.Executing:return t.messages.push(new u.Message(l.Format.string(`CommandExecutionStatus.values.${i.status}.name`))),t;case r.CommandExecutionStatus.Failed:return n.removeStatefulCommand(this.command),t.failed(i.error?c.Common.joinNotEmpty([this.command.title,this.command.subtitle,i.error]):null,e.engagement.currentDatetime);case r.CommandExecutionStatus.Succeeded:return n.removeStatefulCommand(this.command),t.succeeded(e.engagement.currentDatetime)}else n.addStatefulCommand(this.command);return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(0),o=n(30),a=n(112),s=n(1),u=n(83),l=n(5),c=n(55),m=n(3);class d extends i.Identifiable{constructor(){super(...arguments),this.type=r.TypeName.PointOfInterest,this.referencedOffset=new a.GeoReferencedOffset,this.descriptors=new o.Descriptors}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(!!this.descriptors.applyJSON(e.descriptors)&&this.referencedOffset.applyJSON(e.referencedOffset))}node(e,t){return new h(e,t,this)}referenceSpatial(e,t){return this.referencedOffset.value(e,t)}referenceCoordinate(e,t){return this.referenceSpatial(e,t).coordinate}title(e){return s.Format.icaoWords(e).join(" ")}abbreviation(e){return s.Format.icaoLetters(e)}}t.PointOfInterest=d;t.PointsOfInterestNode=class extends c.ListNode{constructor(e,t){super(e,"points-of-interest"),this.listAccessor=t,this.list.forEach((e,t)=>{this.children.push(new h(this,t,e))}),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0,this.appends.push({title:`${m.Strings.Common.new} ${m.Strings.PointOfInterest.name}`,tooltip:null,execute:e=>{e instanceof d&&this.list.push(e)}})}get title(){return m.Strings.PointOfInterest.multiple}get list(){return this.listAccessor()}};class h extends u.ListElementNode{constructor(e,t,n){super(n.id,e,t,l.Serialization.typeDisplay(n),!0),this.pointOfInterest=n}get subtitle(){return this.pointOfInterest.descriptors.description}}t.PointOfInterestNode=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(82),r=n(1);t.ListNode=class extends i.Node{constructor(e,t){super(`${e.id}-${t}`,e)}get subtitle(){return this.children.length>0?r.Format.integer(this.children.length):""}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(19);t.Line2=class{constructor(e=new r.Point2,t=new r.Point2){this.type=i.TypeName.Point2,this.a=e,this.b=t}applyJSON(e){return!(!e||e.type!==this.type)&&this.a.applyJSON(e.a)&&this.b.applyJSON(e.b)}closestPoint(e=new r.Point2){var t=this.b.x-this.a.x,n=this.b.y-this.a.y,i=t*t+n*n,o=(e.x-this.a.x)*t+(e.y-this.a.y)*n,a=Math.min(1,Math.max(0,0===i?0:o/i));return o=(this.b.x-this.a.x)*(e.y-this.a.y)-(this.b.y-this.a.y)*(e.x-this.a.x),new r.Point2(this.a.x+t*a,this.a.y+n*a)}static intersection(e,t){if(e.a.x===e.b.x&&e.a.y===e.b.y||t.a.x===t.b.x&&t.a.y===t.b.y)return null;const n=(t.b.y-t.a.y)*(e.b.x-e.a.x)-(t.b.x-t.a.x)*(e.b.y-e.a.y);if(0===n)return null;let i=((t.b.x-t.a.x)*(e.a.y-t.a.y)-(t.b.y-t.a.y)*(e.a.x-t.a.x))/n,o=((e.b.x-e.a.x)*(e.a.y-t.a.y)-(e.b.y-e.a.y)*(e.a.x-t.a.x))/n;return i<0||i>1||o<0||o>1?null:new r.Point2(e.a.x+i*(e.b.x-e.a.x),e.a.y+i*(e.b.y-e.a.y))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(55),r=n(7),o=n(0),a=n(6),s=n(3),u=n(1),l=n(248);t.MapComponentBoundaryPoint=class extends a.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.MapComponentBoundaryPoint,this.offset=new r.Vector2}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.offset.applyJSON(e.offset)}node(e,t){return new c(e,t,this)}title(e){return u.Format.icaoWords(e).join(" ")}abbreviation(e){return u.Format.icaoLetters(e)}};t.MapComponentBoundaryPointsNode=class extends i.ListNode{constructor(e){super(e,"boundaryPoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return s.Strings.MapComponent.values.boundaryPoints}};class c extends l.MapComponentElementNode{constructor(e,t,n){super(n.id,e,t,s.Strings.MapComponentBoundaryPoint.name,!0),this.boundaryPoint=n}}t.MapComponentBoundaryPointNode=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(141),r=n(0),o=n(31),a=n(46),s=n(12),u=n(16);t.Gimbal=class extends i.Payload{constructor(){super(...arguments),this.type=r.TypeName.Gimbal,this.updated=new s.Datetime,this.settings={mode:r.GimbalMode.YawFollow},this.orientation=new a.Orientation3,this.velocity=new o.Velocity3}applyJSON(e){return!(!e||e.type!==this.type||!e.settings)&&(this.settings.mode=e.settings.mode,this.updated.applyJSON(e.updated)&&this.orientation.applyJSON(e.orientation)&&this.velocity.applyJSON(e.velocity))}projectOrientation(e){return new a.Orientation3(this.orientation.x+u.Kinematic.d1(this.velocity.x,e),this.orientation.xReference,this.orientation.y+u.Kinematic.d1(this.velocity.y,e),this.orientation.z+u.Kinematic.d1(this.velocity.z,e),this.orientation.zReference)}static pitch(e,t){return 0===t?0:t<0?Math.PI/2-Math.atan(e/-t):Math.atan(e/t)-Math.PI/2}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(55),r=n(7),o=n(0),a=n(2),s=n(30),u=n(6),l=n(3),c=n(1),m=n(118);t.PathComponentWaypoint=class extends u.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.PathComponentWaypoint,this.offset=new r.Vector2,this.cornerRadius=null,this.descriptors=new s.Descriptors}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(this.cornerRadius=a.Common.parseFloat(e.cornerRadius,null),!!this.descriptors.applyJSON(e.descriptors)&&this.offset.applyJSON(e.offset))}node(e,t){return new d(e,t,this)}title(e){return c.Format.icaoWords(e).join(" ")}abbreviation(e){return c.Format.icaoLetters(e)}};t.PathComponentWaypointsNode=class extends i.ListNode{constructor(e){super(e,"waypoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return l.Strings.PathComponent.values.waypoints}};class d extends m.PathComponentElementNode{constructor(e,t,n){super(n.id,e,t,l.Strings.PathComponentWaypoint.name,!0),this.waypoint=n}get subtitle(){return this.waypoint.descriptors.description}}t.PathComponentWaypointNode=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2),o=n(6),a=n(33),s=n(85),u=n(20),l=n(5),c=n(26),m=n(3),d=n(1),h=n(55),p=n(118),f=n(45);t.PathComponentMarker=class extends o.Identifiable{constructor(e=0){super(),this.type=i.TypeName.PathComponentMarker,this.positioning=i.PathMarkerPositioning.Coordinate,this.interpolation=new f.Interpolation,this.component=null,this.altitude=null,this.pointOfInterestID=null,this.droneMotionLimits=null,this.droneOrientation=null,this.gimbalOrientations=null,this.toString=((e={horizontal:d.Format.velocityHorizontal,vertical:d.Format.velocityVertical,rotational:d.Format.velocityRotational})=>{const t=[this.altitude?this.altitude.toString():"",this.pointOfInterestID?m.Strings.PathComponentMarker.values.pointOfInterestID:"",this.droneMotionLimits&&this.droneMotionLimits.horizontal&&this.droneMotionLimits.horizontal.velocity?this.droneMotionLimits.horizontal.velocity.toString(e.horizontal,{min:!1,max:!0}):"",this.droneMotionLimits&&this.droneMotionLimits.vertical&&this.droneMotionLimits.vertical.velocity?this.droneMotionLimits.vertical.velocity.toString(e.vertical):"",this.droneMotionLimits&&this.droneMotionLimits.rotational&&this.droneMotionLimits.rotational.velocity?this.droneMotionLimits.rotational.velocity.toString(e.rotational):"",this.droneOrientation?this.droneOrientation.toString():""];if(this.gimbalOrientations)for(const e of Object.keys(this.gimbalOrientations)){const n=this.gimbalOrientations[e].toString();n&&("0"!==e||Object.keys(this.gimbalOrientations).length>1?t.push(...[`${m.Strings.Gimbal.name} ${e}`,n]):t.push(...[m.Strings.Gimbal.name,n]))}return this.component&&t.push(this.component.toString()),r.Common.joinNotEmpty(t)}),this.distance=e}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.distance=r.Common.parseFloat(e.distance),this.positioning=e.positioning||i.PathMarkerPositioning.Coordinate,!this.interpolation.applyJSON(e.interpolation))return!1;if(e.component){const t=l.Serialization.deserialize(e.component);if(!(t&&t instanceof c.SubComponent))return!1;this.component=t}else this.component=null;if(e.altitude){if(this.altitude=new a.Altitude,!this.altitude.applyJSON(e.altitude))return!1}else this.altitude=null;if(this.pointOfInterestID=e.pointOfInterestID,e.droneMotionLimits){if(this.droneMotionLimits=new s.MotionLimits6Optional,!this.droneMotionLimits.applyJSON(e.droneMotionLimits))return!1}else this.droneMotionLimits=null;if(e.droneOrientation){if(this.droneOrientation=new u.Orientation3Optional,!this.droneOrientation.applyJSON(e.droneOrientation))return!1}else this.droneOrientation=null;if(e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new u.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null;return!0}node(e,t){const n=new g(e,t,this);if(this.component){const e=this.component.node(n);e.remove=(()=>{this.component=null}),n.children.push(e)}return n}get interpolationPossible(){return Boolean(this.altitude||this.pointOfInterestID||this.droneMotionLimits||this.droneOrientation||this.gimbalOrientations)}get interpolationPreferred(){return this.interpolationPossible&&null===this.pointOfInterestID}pointOfInterest(e){return e.find(e=>e.id===this.pointOfInterestID)}};t.PathComponentMarkersNode=class extends h.ListNode{constructor(e){super(e,"markers"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return m.Strings.PathComponent.values.markers}};class g extends p.PathComponentElementNode{constructor(e,t,n){super(n.id,e,t,m.Strings.PathComponentMarker.name,!1),this.marker=n,n.component||this.appends.push({title:`${m.Strings.Common.set} ${m.Strings.Component.name}`,tooltip:null,execute:e=>{e instanceof c.SubComponent&&(this.marker.component=e)}})}get subtitle(){return this.marker.toString()}}t.PathComponentMarkerNode=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(0);t.User=class extends i.Identifiable{constructor(){super(...arguments),this.type=r.TypeName.User}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(63),o=n(2),a=n(1),s=n(16);class u{constructor(e=new r.MotionLimits3,t=new r.MotionLimits3){this.type=i.TypeName.MotionLimits6,this.toString=((e={position:{x:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},y:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},z:{velocity:a.Format.velocityVertical,acceleration:a.Format.accelerationVertical}},orientation:{x:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},y:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},z:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational}}})=>o.Common.joinNotEmpty([this.position.toString(e.position),this.orientation.toString(e.orientation)])),this.position=e,this.orientation=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.position.applyJSON(e.position)&&this.orientation.applyJSON(e.orientation))}resolve(e){return new u(this.position.resolve(e.position),this.orientation.resolve(e.orientation))}interpolate(e,t){return new u(this.position.interpolate(e.position,t),this.orientation.interpolate(e.orientation,t))}get horizontal(){return this.position.forwardBackward}set horizontal(e){this.position.forwardBackward=e}get vertical(){return this.position.upDown}set vertical(e){this.position.upDown=e}get rotational(){return this.orientation.yaw}set rotational(e){this.orientation.yaw=e}timeLineHorizontal(e,t=null){return s.Kinematic.tLine(this.horizontal.velocity.max,this.horizontal.acceleration.min,this.horizontal.acceleration.max,e,t||e)}timeLineVertical(e,t=null){return s.Kinematic.tLine(e<0?Math.abs(this.vertical.velocity.min):this.vertical.velocity.max,e<0?-this.vertical.acceleration.max:this.vertical.acceleration.min,e<0?-this.vertical.acceleration.min:this.vertical.acceleration.max,Math.abs(e),t||Math.abs(e))}timeLineRotational(e,t=null){return s.Kinematic.tLine(this.rotational.velocity.max,this.rotational.acceleration.min,this.rotational.acceleration.max,Math.abs(e),t||Math.abs(e))}}t.MotionLimits6=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(64),o=n(2);class a{constructor(e=new r.MotionLimits,t=new r.MotionLimits,n=new r.MotionLimits){this.type=i.TypeName.MotionLimits3,this.toString=(e=>o.Common.joinNotEmpty([this.x.toString(e.x),this.y.toString(e.y),this.z.toString(e.z)])),this.x=e,this.y=t,this.z=n}applyJSON(e){return!(!e||e.type!==this.type)&&(this.x.applyJSON(e.x)&&this.y.applyJSON(e.y)&&this.z.applyJSON(e.z))}resolve(e){return new a(this.x.resolve(e?e.x:null),this.y.resolve(e?e.y:null),this.z.resolve(e?e.z:null))}interpolate(e,t){return new a(this.x.interpolate(e.x,t),this.y.interpolate(e.y,t),this.z.interpolate(e.z,t))}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get forwardBackward(){return this.x}set forwardBackward(e){this.x=e}get leftRight(){return this.y}set leftRight(e){this.y=e}get upDown(){return this.z}set upDown(e){this.z=e}}t.MotionLimits3=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(16),r=n(29),o=n(0),a=n(2);class s{constructor(e=new r.Limits,t=new r.Limits){this.type=o.TypeName.MotionLimits,this.toString=(e=>a.Common.joinNotEmpty([this.velocity.toString(e.velocity),this.acceleration.toString(e.acceleration)])),this.velocity=e,this.acceleration=t}applyJSON(e){return!(!e||e.type!==this.type)&&(this.velocity.applyJSON(e.velocity)&&this.acceleration.applyJSON(e.acceleration))}currentVelocityLimits(e,t){return new r.Limits(Math.min(this.velocity.max,i.Kinematic.v2(e,this.acceleration.max,t)),Math.max(this.velocity.min,i.Kinematic.v2(e,this.acceleration.min,t)))}resolve(e){return new s(e&&e.velocity?e.velocity:this.velocity,e&&e.acceleration?e.acceleration:this.acceleration)}interpolate(e,t){return new s(this.velocity.interpolate(e.velocity,t),this.acceleration.interpolate(e.acceleration,t))}}t.MotionLimits=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationReferenceTargets=class{constructor(e=i.OrientationXReference.Horizon,t=i.OrientationZReference.North){this.x=e,this.z=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2);t.DistanceTolerance=class{constructor(e=0,t=0){this.type=i.TypeName.DistanceTolerance,this.horizontal=e,this.vertical=t}valid(e,t){return this.validHorizontal(e)&&this.validVertical(t)}validHorizontal(e){return e<=this.horizontal}validVertical(e){return Math.abs(e)<=this.vertical}applyJSON(e){return!(!e||e.type!==this.type||(this.horizontal=r.Common.parseFloat(e.horizontal),this.vertical=r.Common.parseFloat(e.vertical),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e,t){return t.reduce(function(t,n){if(null==e)throw new Error("'".concat(e,"' is no valid coordinate."));return e.hasOwnProperty(n)&&void 0!==n&&void 0===t?(t=n,n):t},void 0)};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){var t=e.toString().trim();return!isNaN(parseFloat(t))&&parseFloat(t)===Number(t)};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=function(e){return i.sexagesimalPattern.test(e.toString().trim())};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=function(e){var t=new RegExp(i.sexagesimalPattern).exec(e);if(null==t)throw new Error("Given value is not in sexagesimal format");var n=Number(t[2])/60||0,r=Number(t[4])/3600||0,o=parseFloat(t[1])+n+r;return["S","W"].includes(t[7])?-o:o};t.default=r},function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,i,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,i)});case 4:return t.nextTick(function(){e.call(null,n,i,r)});default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return t.nextTick(function(){e.apply(null,o)})}}}:e.exports=t}).call(this,n(47))},function(e,t,n){var i=n(106),r=i.Buffer;function o(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return r(e,t,n)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=i:(o(i,t),t.Buffer=a),o(r,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=r(e);return void 0!==t?"string"==typeof n?i.fill(t,n):i.fill(t):i.fill(0),i},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(6),o=n(12);t.CommandExecutionState=class extends r.Identifiable{constructor(e=null){super(e),this.type=i.TypeName.CommandExecutionState,this.status=i.CommandExecutionStatus.Pending,this.started=null,this.finished=null,this.error=null}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.status)return!1;if(this.status=e.status,e.started){if(this.started=new o.Datetime,!this.started.applyJSON(e.started))return!1}else this.started=null;if(e.finished){if(this.finished=new o.Datetime,!this.finished.applyJSON(e.finished))return!1}else this.finished=null;return this.error=e.error,!0}update(e,t=null,n=null){switch(e){case i.CommandExecutionStatus.Pending:break;case i.CommandExecutionStatus.Queued:this.status===i.CommandExecutionStatus.Pending&&(this.status=e);break;case i.CommandExecutionStatus.Executing:this.status!==i.CommandExecutionStatus.Pending&&this.status!==i.CommandExecutionStatus.Queued||(this.status=e,this.started=n||new o.Datetime);break;case i.CommandExecutionStatus.Succeeded:case i.CommandExecutionStatus.Failed:this.status!==i.CommandExecutionStatus.Queued&&this.status!==i.CommandExecutionStatus.Executing||(this.status=e,this.finished=n||new o.Datetime,this.error=t)}return this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(9),a=n(2),s=n(3);t.PhotoIntervalCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.PhotoIntervalCameraCommand,this.photoInterval=o.Constants.PhotoIntervalCommandValue}applyJSON(e){return!(!super.applyJSON(e)||!e.photoInterval||(this.photoInterval=a.Common.parseInt(e.photoInterval,o.Constants.PhotoIntervalCommandValue),0))}get subtitle(){return`${this.photoInterval} ${s.Strings.Unit.values.seconds.name}`}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(52),r=n(0),o=n(1);t.ModeGimbalCommand=class extends i.GimbalCommand{constructor(){super(...arguments),this.type=r.TypeName.ModeGimbalCommand,this.mode=r.GimbalMode.YawFollow}applyJSON(e){return!(!super.applyJSON(e)||!e.mode||(this.mode=e.mode,0))}get subtitle(){return o.Format.string(`GimbalMode.values.${this.mode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(52),r=n(0),o=n(20);t.OrientationGimbalCommand=class extends i.GimbalCommand{constructor(){super(...arguments),this.type=r.TypeName.OrientationGimbalCommand,this.orientation=new o.Orientation3Optional}applyJSON(e){return!!super.applyJSON(e)&&this.orientation.applyJSON(e.orientation)}get subtitle(){return this.orientation.toString()}get verifiable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(3),r=n(11),o=n(1),a=n(0),s=n(52),u=n(31),l=n(2);t.VelocityGimbalCommand=class extends s.GimbalCommand{constructor(){super(a.TypeName.VelocityGimbalCommand),this.type=a.TypeName.VelocityGimbalCommand,this.velocity=new u.Velocity3}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.velocity.applyJSON(e.velocity)}get verifiable(){return!1}toMessage(){return new r.Message(i.Strings.VelocityGimbalCommand.messages.controls.title,l.Common.joinNotEmpty([Math.abs(this.velocity.x)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.pitch,o.Format.velocityRotational(this.velocity.x).toString()),Math.abs(this.velocity.y)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.roll,o.Format.velocityRotational(this.velocity.y).toString()),Math.abs(this.velocity.z)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.yaw,o.Format.velocityRotational(this.velocity.z).toString())]))}static boundedVelocity(e,t,n,i){const r=new u.Velocity3;return r.x=i.x.currentVelocityLimits(e.x,n).bound(t.x),r.y=i.y.currentVelocityLimits(e.y,n).bound(t.y),r.z=i.z.currentVelocityLimits(e.z,n).bound(t.z),r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(12),o=n(11),a=n(6),s=n(2),u=n(5);t.ComponentExecutionState=class extends a.Identifiable{constructor(e=null){super(e),this.type=i.TypeName.ComponentExecutionState,this.status=i.ComponentExecutionStatus.Pending,this.progress=0,this.duration=0,this.started=null,this.finished=null,this.error=null,this.messages=[],this.cache={}}toJSON(){return{id:this.id,type:this.type,status:this.status,progress:this.progress,duration:this.duration,started:this.started,finished:this.finished,error:this.error,messages:this.messages}}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.status)return!1;if(this.status=e.status,this.progress=s.Common.parseFloat(e.progress),this.duration=s.Common.parseFloat(e.duration),e.started){if(this.started=new r.Datetime,!this.started.applyJSON(e.started))return!1}else this.started=null;if(e.finished){if(this.finished=new r.Datetime,!this.finished.applyJSON(e.finished))return!1}else this.finished=null;if(this.error=e.error,this.messages=[],Array.isArray(e.messages))for(let t of e.messages){const e=u.Serialization.deserialize(t);if(!(e&&e instanceof o.Message))return!1;this.messages.push(e)}return this.cache={},!0}cachedData(e,t=null){if(!this.cache[e]&&t){const n=t();n&&(this.cache[e]=n)}return this.cache[e]}update(e,t=null,n=null,o=0){switch(this.messages=[],e){case i.ComponentExecutionStatus.Pending:break;case i.ComponentExecutionStatus.Executing:this.status===i.ComponentExecutionStatus.Pending&&(this.status=e,this.progress=0,this.duration=0,this.started=n||new r.Datetime),this.status===i.ComponentExecutionStatus.Executing&&(this.duration+=o);break;case i.ComponentExecutionStatus.Succeeded:case i.ComponentExecutionStatus.Failed:this.status===i.ComponentExecutionStatus.Executing&&(this.status=e,this.progress=1,this.duration+=o,this.cache={},this.finished=n||new r.Datetime,this.error=t)}return this}executing(e,t=null){return this.update(i.ComponentExecutionStatus.Executing,null,t,e)}succeeded(e=null){return this.update(i.ComponentExecutionStatus.Succeeded,null,e)}failed(e=null,t=null){return this.update(i.ComponentExecutionStatus.Failed,e,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(23),o=n(6);t.SourcedGeoSpatial=class extends o.Identifiable{constructor(){super(...arguments),this.type=i.TypeName.SourcedGeoSpatial,this.source=i.GeoSpatialSource.Plan,this.input=null}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.source)return!1;if(this.source=e.source,this.source===i.GeoSpatialSource.Input){const t=new r.GeoSpatial;if(!t.applyJSON(e.input))return!1;this.input=t}return!0}value(e){return e.value(this.source,this.input)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(189),r=n(81),o=n(30),a=n(38),s=n(6),u=n(5),l=n(2),c=n(31),m=n(77),d=n(15),h=n(0),p=n(111);t.Component=class extends s.Identifiable{constructor(){super(...arguments),this.coordinate=new a.GeoCoordinate,this.descriptors=new o.Descriptors,this.source=null,this.toString=(()=>this.title)}applyJSON(e){if(!super.applyJSON(e))return!1;if(!this.descriptors.applyJSON(e.descriptors)||!this.coordinate.applyJSON(e.coordinate))return!1;if(e.source){if(this.source=new p.ComponentSource,!this.source.applyJSON(e.source))return!1}else this.source=null;return!0}get title(){return this.descriptors.name||u.Serialization.typeDisplay(this)}get subtitle(){return this.descriptors.name?l.Common.joinNotEmpty([u.Serialization.typeDisplay(this),this.descriptors.description]):this.descriptors.description}get verification(){return null}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!1}get referenceOffsets(){return[]}referenceOffsetsHandleCoordinate(e){return null}node(e=null){return new r.ComponentNode(e,this)}descendantAllowed(e){return!0}estimate(e,t){return new i.ComponentEstimate(this)}engaging(e){}execute(e){return e.execution.getComponentState(this).executing(e.engagement.timeSinceLastExecution,e.engagement.currentDatetime)}addGimbalVelocityCommand(e,t,n,i,r){const o=new m.VelocityGimbalCommand;o.channel=t;const a=e.drone.projectGimbalOrientation(t,e.engagement.currentDatetime),s=r?u.Serialization.clone(r):new c.Velocity3;null!==n.x&&(s.x+=d.Geometry.angleDifferenceSigned(n.x,a.x)),null!==n.y&&(s.y+=d.Geometry.angleDifferenceSigned(n.y,a.y)),n.convertReferences(e.drone.referenceSources(i)),null!==n.z&&e.drone.gimbal(t).settings.mode===h.GimbalMode.Free&&(s.z+=d.Geometry.angleDifferenceSigned(n.z,a.z)),o.velocity=s,e.drone.addStatelessCommand(o);const l=o.toMessage();return l.details&&e.execution.getComponentState(this).messages.push(l),o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(82),r=n(80),o=n(2),a=n(26),s=n(4),u=n(1),l=n(50),c=n(51),m=n(0),d=n(11),h=n(43),p=n(44),f=n(3),g=n(53);class y extends i.Node{constructor(e,t){super(t.id,e),this.label="",this.component=t}get name(){return o.Common.joinNotEmpty([this.ordinalDisplay,this.component.title]," - ")}get title(){return this.label||this.name}get subtitle(){return this.label?o.Common.joinNotEmpty([this.ordinalDisplay?this.name:this.component.title,this.component.subtitle]):this.component.subtitle}get subComponentCount(){return this.descendants.filter(e=>e instanceof y&&e.component instanceof a.SubComponent).length}descendantAllowed(e){return!(e instanceof r.Component&&!this.component.descendantAllowed(e))&&super.descendantAllowed(e)}addChild(e,t=!1){const n=e.node(this);return t?this.children.splice(0,0,n):this.children.push(n),n}get referenceOffsets(){const e=[];return this.children.forEach(t=>{t instanceof y&&e.push(...t.referenceOffsets)}),e.push(...this.component.referenceOffsets),e}get issues(){const e=[],t=this.descendants,n=new Set;return t.forEach(e=>{e instanceof y&&e.component instanceof g.CommandComponent&&e.component.command instanceof s.CameraCommand&&n.add(e.component.command.channel)}),n.forEach(n=>{let i=null,r=null,o=null;t.filter(e=>e instanceof y&&e.component instanceof g.CommandComponent&&e.component.command instanceof s.CameraCommand&&e.component.command.channel===n).forEach(t=>{const n=t.component.command,a=[];n instanceof s.CameraCommand&&(null===n.requiredCapturing||n.requiredCapturing||(null===o?a.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingUnknown.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingUnknown.details,m.MessageLevel.Warning)):o&&a.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingInvalid.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingInvalid.details,m.MessageLevel.Error))),n.requiredMode&&(null===i?a.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredModeUnknown.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredModeUnknown.details,m.MessageLevel.Warning)):n.requiredMode!==i&&a.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredModeInvalid.title,n.title,u.Format.string(`CameraMode.values.${i}.name`)),f.Strings.MissionIssue.messages.cameraCommand.requiredModeInvalid.details,m.MessageLevel.Error)))),n instanceof p.StopCaptureCameraCommand&&(o=!1),n instanceof h.StartCaptureCameraCommand&&(i&&!h.StartCaptureCameraCommand.possible(i)&&a.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.invalidMode.title,u.Format.string(`CameraMode.values.${i}.name`)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.invalidMode.details,m.MessageLevel.Error)),null===i?a.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeMode.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeMode.details,m.MessageLevel.Warning)):i===m.CameraMode.Photo&&null===r&&a.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoMode.title,u.Format.string(`CameraMode.values.${i}.name`)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoMode.details,m.MessageLevel.Info)),null===o?a.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeStopped.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeStopped.details,m.MessageLevel.Info)):o&&a.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.startedAlready.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.startedAlready.details,m.MessageLevel.Info)),o=h.StartCaptureCameraCommand.continuous(i||m.CameraMode.Photo,r||m.CameraPhotoMode.Single)),n instanceof l.ModeCameraCommand&&(i=n.mode),n instanceof c.PhotoModeCameraCommand&&(r=n.photoMode),a.forEach(n=>{e.push({message:n,node:t})})})}),e}}t.ComponentNode=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6);t.Node=class extends i.Identifiable{constructor(e,t){super(e),this.children=[],this.ordinal=null,this.remove=null,this.inserts=[],this.appends=[],this.emptyChildrenNavigationEnabled=!1,this.propertiesEditorDisabled=!1,this.parent=t;let n=0;this.nextOrdinal=t?t.nextOrdinal:()=>n++}get ordinalDisplay(){return null===this.ordinal?"":`${this.ordinal+1}`}get title(){return this.ordinalDisplay||this.id}get subtitle(){return""}get depth(){return null===this.parent?0:this.parent.depth+1}get root(){return null===this.parent?this:this.parent.root}get ancestors(){const e=[];return this.parent&&(e.push(this.parent),e.push(...this.parent.ancestors)),e}get descendants(){const e=[];return this.children.forEach(t=>{e.push(t),e.push(...t.descendants)}),e}find(e){return this.root.findDescendant(e)}findDescendant(e){if(this.id===e)return this;for(let t=0;t<this.children.length;t++){const n=this.children[t].findDescendant(e);if(n)return n}return null}descendantAllowed(e){return!(this.parent&&!this.parent.descendantAllowed(e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(82),r=n(1),o=n(3);t.ListElementNode=class extends i.Node{constructor(e,t,n,i,r){super(e,t),this.index=n,this.typeName=i,this.icaoIndex=r}get title(){return`${this.typeName} ${this.icaoIndex?o.Strings.Common.delimeter+r.Format.icaoWords(this.index):r.Format.integer(this.index+1)}`}get abbreviation(){return this.icaoIndex?r.Format.icaoLetters(this.index):r.Format.integer(this.index+1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(26),o=n(3),a=n(5),s=n(27);t.AchievableDroneMotionComponent=class extends s.DroneMotionComponent{constructor(){super(...arguments),this.immediateComponent=null,this.achievedComponent=null}applyJSON(e){if(!super.applyJSON(e))return!1;if(e.immediateComponent){const t=a.Serialization.deserialize(e.immediateComponent);if(!(t&&t instanceof r.SubComponent))return!1;this.immediateComponent=t}else this.immediateComponent=null;if(e.achievedComponent){const t=a.Serialization.deserialize(e.achievedComponent);if(!(t&&t instanceof r.SubComponent))return!1;this.achievedComponent=t}else this.achievedComponent=null;return!0}get verification(){const e=a.Serialization.clone(this,!0);return e.pointsOfInterest=[],e.immediateComponent=this.immediateComponent?this.immediateComponent.verification:null,e.achievedComponent=this.achievedComponent?this.achievedComponent.verification:null,e}node(e=null){const t=super.node(e);if(t.emptyChildrenNavigationEnabled=!0,this.immediateComponent){const e=t.addChild(this.immediateComponent);e.label=o.Strings.AchievableDroneMotionComponent.values.immediateComponent,e.remove=(()=>{this.immediateComponent=null})}else t.inserts.push({title:`${o.Strings.Common.set} ${o.Strings.AchievableDroneMotionComponent.values.immediateComponent} ${o.Strings.Component.name}`,tooltip:o.Strings.AchievableDroneMotionComponent.values.immediateComponentTooltip,execute:e=>{e instanceof r.SubComponent&&(this.immediateComponent=e)}});if(this.achievedComponent){const e=t.addChild(this.achievedComponent);e.label=o.Strings.AchievableDroneMotionComponent.values.achievedComponent,e.remove=(()=>{this.achievedComponent=null})}else t.appends.push({title:`${o.Strings.Common.set} ${o.Strings.AchievableDroneMotionComponent.values.achievedComponent} ${o.Strings.Component.name}`,tooltip:o.Strings.AchievableDroneMotionComponent.values.achievedComponentTooltip,execute:e=>{e instanceof r.SubComponent&&(this.achievedComponent=e)}});return t}achieved(e){return!1}estimate(e,t){const n=super.estimate(e,t);if(this.immediateComponent){const i=this.immediateComponent.estimate(e,t);i.timeConcurrent=!0,n.children.push(i)}if(this.achievedComponent){const i=this.achievedComponent.estimate(e,t);n.children.push(i)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;let n=!0;if(this.immediateComponent){const r=this.immediateComponent.execute(e);switch(r.status){case i.ComponentExecutionStatus.Pending:case i.ComponentExecutionStatus.Executing:n=!1;break;case i.ComponentExecutionStatus.Failed:if(this.immediateComponent.required)return t.update(i.ComponentExecutionStatus.Failed,r.error,e.engagement.currentDatetime);break;case i.ComponentExecutionStatus.Succeeded:}}if(n&&this.achieved(e)){if(!this.achievedComponent)return t.update(i.ComponentExecutionStatus.Succeeded,null,e.engagement.currentDatetime);if(n){const n=this.achievedComponent.execute(e);switch(n.status){case i.ComponentExecutionStatus.Pending:case i.ComponentExecutionStatus.Executing:break;case i.ComponentExecutionStatus.Failed:if(this.achievedComponent.required)return t.failed(n.error,e.engagement.currentDatetime);break;case i.ComponentExecutionStatus.Succeeded:return t.succeeded(e.engagement.currentDatetime)}}}return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(115),o=n(2),a=n(1);t.MotionLimits6Optional=class{constructor(e=null,t=null){this.type=i.TypeName.MotionLimits6Optional,this.toString=((e={position:{x:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},y:{velocity:a.Format.velocityHorizontal,acceleration:a.Format.accelerationHorizontal},z:{velocity:a.Format.velocityVertical,acceleration:a.Format.accelerationVertical}},orientation:{x:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},y:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational},z:{velocity:a.Format.velocityRotational,acceleration:a.Format.accelerationRotational}}})=>o.Common.joinNotEmpty([this.position?this.position.toString(e.position):"",this.orientation?this.orientation.toString(e.orientation):""])),this.position=e,this.orientation=t}applyJSON(e){if(!e)return this.position=null,this.orientation=null,!0;if(e.type!==this.type)return!1;if(e.position){if(this.position=new r.MotionLimits3Optional,!this.position.applyJSON(e.position))return!1}else this.position=null;if(e.orientation){if(this.orientation=new r.MotionLimits3Optional,!this.orientation.applyJSON(e.orientation))return!1}else this.orientation=null;return!0}get horizontal(){return this.position?this.position.forwardBackward:null}set horizontal(e){this.position||(this.position=new r.MotionLimits3Optional(e)),this.position.forwardBackward=e}get vertical(){return this.position?this.position.upDown:null}set vertical(e){this.position||(this.position=new r.MotionLimits3Optional),this.position.upDown=e}get rotational(){return this.orientation?this.orientation.yaw:null}set rotational(e){this.orientation||(this.orientation=new r.MotionLimits3Optional),this.orientation.yaw=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(29),r=n(0),o=n(2);t.MotionLimitsOptional=class{constructor(e=null,t=null){this.type=r.TypeName.MotionLimitsOptional,this.toString=(e=>o.Common.joinNotEmpty([this.velocity?this.velocity.toString(e.velocity):"",this.acceleration?this.acceleration.toString(e.acceleration):""])),this.velocity=e,this.acceleration=t}applyJSON(e){if(!e)return this.velocity=null,this.acceleration=null,!0;if(e.type!==this.type)return!1;if(e.velocity){if(this.velocity=new i.Limits,!this.velocity.applyJSON(e.velocity))return!1}else this.velocity=null;if(e.acceleration){if(this.acceleration=new i.Limits,!this.acceleration.applyJSON(e.acceleration))return!1}else this.acceleration=null;return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e,t=null){this._previous=null,this._next=null,this.current=e,this.previous=t}insertBefore(e){const t=new i(e);return t._next=this,this._previous&&(t._previous=this._previous,this._previous._next=t),this._previous=t,t}insertAfter(e){const t=new i(e);return t._previous=this,this._next&&(t._next=this._next,this._next._previous=t),this._next=t,t}get list(){const e=[];let t=this.first;for(;t;)e.push(t),t=t.next;return e}get valueList(){return this.list.map(e=>e.current)}get previous(){return this._previous}set previous(e){this._previous=e,e&&(e._next=this)}get next(){return this._next}set next(e){this._next=e,e&&(e._previous=this)}get first(){let e=this;for(;e._previous;)e=e._previous;return e}get last(){let e=this;for(;e._next;)e=e._next;return e}}t.LinkedValue=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(89),r=n(90);t.OrientationReferenceSources=class{constructor(e=new r.OrientationXReferenceSources,t=new i.OrientationZReferenceSources){this.x=e,this.z=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationZReferenceSources=class{constructor(e=0,t=0,n=0){this.course=e,this.heading=t,this.path=n}value(e){switch(e){case i.OrientationZReference.North:return 0;case i.OrientationZReference.Course:return this.course;case i.OrientationZReference.Heading:return this.heading;case i.OrientationZReference.Path:return this.path}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationXReferenceSources=class{constructor(e=0){this.path=e}value(e){switch(e){case i.OrientationXReference.Horizon:return 0;case i.OrientationXReference.Path:return this.path}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(7),o=n(15),a=n(97),s=n(29),u=n(9),l=n(66),c=n(3),m=n(11),d=n(1),h=n(42),p=n(25),f=n(2),g=n(84),y=n(33),v=n(27),C=n(5),S=n(19),b=n(56);t.DestinationComponent=class extends g.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.DestinationComponent,this.automaticOrientation=!0,this.destinationOffset=new r.Vector2,this.altitudeRange=new a.AltitudeRange(new y.Altitude(u.Constants.DestinationComponentAltitude),new s.Limits(u.Constants.DestinationComponentAltitudeRange)),this.achievementTime=u.Constants.DestinationComponentAchievementTime,this.achievementDistance=new l.DistanceTolerance(u.Constants.DestinationComponentAchievementDistanceHorizontal,u.Constants.DestinationComponentAchievementDistanceVertical)}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(this.automaticOrientation=f.Common.parseBoolean(e.automaticOrientation,!0),this.achievementTime=f.Common.parseFloat(e.achievementTime,u.Constants.DestinationComponentAchievementTime),this.destinationOffset.applyJSON(e.destinationOffset)&&this.altitudeRange.applyJSON(e.altitudeRange)&&this.achievementDistance.applyJSON(e.achievementDistance))}get subtitle(){return f.Common.joinNotEmpty([super.subtitle,this.altitudeRange.toString()])}get referenceOffsets(){return[this.destinationOffset].concat(super.referenceOffsets)}node(e=null){const t=super.node(e);return null===t.ordinal&&0===t.ancestors.filter(e=>e.component instanceof v.DroneMotionComponent).length&&(t.ordinal=t.nextOrdinal()),t}destinationCoordinate(e){return this.referenceCoordinate(e,this.destinationOffset)}estimate(e,t){const n=super.estimate(e,t);n.level=1,n.droneSpatials.push(t);const r=this.destinationCoordinate(e).toGeoSpatial();if(this.automaticOrientation&&(r.orientation.yaw=t.coordinate.bearing(r.coordinate)),e.altitudeRequired||e.timeRequired){r.altitude.system=i.AltitudeSystem.ATL,r.altitude.value=e.drone.convertAltitude(this.altitudeRange.altitude);const a=r.altitude.value-t.altitude.value;if(e.altitudeRequired&&!this.altitudeRange.range.valid(-a)){const e=C.Serialization.clone(t);e.altitude.value=r.altitude.value+this.altitudeRange.range.bound(-a),n.droneSpatials.push(e)}if(e.timeRequired){const i=this.resolveDroneMotionLimits(e),s=t.coordinate.distance(r.coordinate),l=s-this.achievementDistance.horizontal>0?i.timeLineHorizontal(s,s-this.achievementDistance.horizontal):0,c=o.Geometry.angleDifferenceSigned(r.orientation.yaw,t.orientation.yaw),m=i.timeLineRotational(c),d=c-u.Constants.DestinationComponentHeadingAchievement>0?i.timeLineRotational(c,c-u.Constants.DestinationComponentHeadingAchievement):0,h=Math.abs(a)-this.achievementDistance.vertical>0?i.timeLineVertical(a,Math.abs(a)-this.achievementDistance.vertical):0,p=this.altitudeRange.range.valid(-a)?0:i.timeLineVertical(a,Math.abs(a)-Math.abs(this.altitudeRange.range.bound(-a))),f=l+Math.max(p,d);n.time+=Math.max(m,h,f)+this.achievementTime;const g=n.children.find(e=>e.component===this.immediateComponent);g&&g.totalTime>n.time&&(n.time+=g.totalTime-n.time)}}return n.droneSpatials.push(r),n}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.DestinationComponent);if(t&&t.achievementDistanceValidSince){const{drone:n}=e,i=n.projectSpatial(e.engagement.currentDatetime),r=this.destinationCoordinate(e),o=n.convertAltitude(this.altitudeRange.altitude),a=i.coordinate.distance(r),s=o-i.altitude.value;if(this.achievementDistance.valid(a,s)&&e.elapsedTime(t.achievementDistanceValidSince)>=this.achievementTime)return!0}return!1}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,r=n.convertAltitude(this.altitudeRange.altitude),a=this.referenceSpatial(e),s=this.destinationCoordinate(e),l=t.cachedData(i.TypeName.DestinationComponent,()=>{const e=n.spatial.coordinate.geoCoordinate();return new w(e,e.distance(s))}),g=new p.Velocity6,y=n.projectSpatial(e.engagement.currentDatetime),v=y.coordinate.bearing(s),x=y.coordinate.distance(s),M=r-y.altitude.value,O=this.automaticOrientation?o.Geometry.angleDifferenceSigned(v,y.orientation.yaw):0,D=this.resolveDroneMotionLimits(e);if(this.altitudeRange.range.valid(-M)&&(this.achievementDistance.validHorizontal(x)||Math.abs(O)<u.Constants.DestinationComponentHeadingAchievement)){h.VelocityDroneCommand.updateBoundedVelocityHorizontal(g,v,x,D,a.velocity.horizontal);const e=l.startCoordinate,t=e.geoCoordinate(new b.Line2(new S.Point2,e.offset(s).toPoint2()).closestPoint(e.offset(y.coordinate).toPoint2()).toVector2()),n=y.coordinate.offset(t),i=new p.Velocity6;h.VelocityDroneCommand.updateBoundedVelocityHorizontal(i,n.direction,n.magnitude,D),g.horizontal=g.horizontal.add(i.horizontal)}if(h.VelocityDroneCommand.updateBoundedVelocityVertical(g,M,D,a.velocity.vertical),this.achievementDistance.validHorizontal(x)||h.VelocityDroneCommand.updateBoundedVelocityRotational(g,O,D,a.velocity.rotational),this.achievementDistance.valid(x,M)){l.achievementDistanceValidSince||(l.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(l.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new m.Message(c.Strings.AchievableDroneMotionComponent.messages.waiting.title,d.Format.number(this.achievementTime-n)))}else{l.achievementDistanceValidSince=null;const n=new m.Message(c.Strings.DestinationComponent.messages.moving.title,f.Common.joinNotEmpty([x<.1?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.distance,d.Format.distance(x).toString()),Math.abs(M)<.1?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.altitude,d.Format.altitude(M).toString()),Math.abs(O)<.01?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.heading,d.Format.angle(O,!1).toString())]));n.details&&t.messages.push(n),this.automaticOrientation&&this.addGimbalVelocityCommand(e,0,C.Serialization.clone(u.Constants.DroneMotionComponentGimbalOrientation),{x:0,z:v})}return this.addDroneVelocityCommand(e,g,this.automaticOrientation&&!this.achievementDistance.valid(x,M)?y.coordinate.bearing(s):null),t.progress=l.progress(y.coordinate.distance(s)),t}};class w{constructor(e,t){this.achievementDistanceValidSince=null,this.startCoordinate=e,this.totalDistance=t}progress(e){return e>this.totalDistance?0:(this.totalDistance-e)/this.totalDistance}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(91),r=n(5),o=n(0),a=n(3),s=n(27);t.ApproachableComponent=class extends s.DroneMotionComponent{constructor(){super(...arguments),this.approachComponent=new i.DestinationComponent}applyJSON(e){if(!super.applyJSON(e))return!1;const t=r.Serialization.deserialize(e.approachComponent);return!!(t&&t instanceof i.DestinationComponent)&&(this.approachComponent=t,!0)}get subtitle(){return this.approachComponent.subtitle}get verification(){const e=this.approachComponent.verification;if(!e)return null;const t=r.Serialization.clone(this,!0);return t.pointsOfInterest=[],t.approachComponent=e,t}approachCoordinate(e){return this.approachComponent.destinationCoordinate(e)}node(e=null){const t=super.node(e);t.emptyChildrenNavigationEnabled=!0,t.ordinal=t.nextOrdinal();const n=t.addChild(this.approachComponent,!0);return n.ordinal=t.ordinal,n.label=a.Strings.ApproachableComponent.values.approachComponent,t}estimate(e,t){const n=super.estimate(e,t);return n.children.push(this.approachComponent.estimate(e,t)),n}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;const n=this.approachComponent.execute(e);switch(n.status){case o.ComponentExecutionStatus.Pending:case o.ComponentExecutionStatus.Executing:return t;case o.ComponentExecutionStatus.Failed:return t.failed(n.error,e.engagement.currentDatetime);case o.ComponentExecutionStatus.Succeeded:}return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(5),o=n(2),a=n(26),s=n(3),u=n(7),l=n(11),c=n(1);t.ListComponent=class extends a.SubComponent{constructor(){super(...arguments),this.type=i.TypeName.ListComponent,this.childComponents=[],this.toString=(()=>o.Common.joinNotEmpty(this.childComponents.map(e=>e.toString()))||this.title)}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(this.childComponents=[],Array.isArray(e.childComponents))for(let t of e.childComponents){const e=r.Serialization.deserialize(t);if(!(e&&e instanceof a.SubComponent))return!1;this.childComponents.push(e)}return!0}get subtitle(){return this.childComponents.length>0?o.Common.joinNotEmpty(this.childComponents.map(e=>e.title),", "):super.subtitle}get verification(){const e=this.childComponents.map(e=>e.verification).filter(e=>null!=e);if(e.length>0){const t=r.Serialization.clone(this,!0);return t.childComponents=e,t}return null}get exclusiveReadonly(){for(let e of this.childComponents)if(e.exclusiveReadonly)return!0;return!1}get exclusiveExecution(){if(super.exclusiveExecution)return!0;for(let e of this.childComponents)if(e.exclusiveExecution)return!0;return!1}get repositionIfIncluded(){for(let e of this.childComponents)if(e.repositionIfIncluded)return!0;return!1}referenceOffsetsHandleCoordinate(e){const t=[];if(this.childComponents.forEach(n=>{t.push(...n.referenceOffsets.map(t=>n.referenceCoordinate(e,t)))}),t.length<=1)return null;const n=[new u.Vector2];for(let e=1;e<t.length;e++)n.push(t[0].offset(t[e]));return t[0].geoCoordinate(u.Vector2.center(n))}node(e=null){const t=super.node(e);t.emptyChildrenNavigationEnabled=!0,this.childComponents.forEach(e=>{t.addChild(e).remove=(()=>{this.childComponents=o.Common.remove(this.childComponents,e)})});for(const e of t.children)if(null!==e.ordinal){t.ordinal=t.nextOrdinal();break}return t.appends.push({title:`${s.Strings.Common.new} ${s.Strings.Component.name}`,tooltip:null,execute:e=>{e instanceof a.SubComponent&&this.childComponents.push(e)}}),t}estimate(e,t){const n=super.estimate(e,t);return this.childComponents.forEach(i=>{const r=i.estimate(e,t),a=r.allDroneSpatials;a.length>0&&(t=o.Common.last(a)),n.children.push(r)}),n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;let n=0,r=0,o=[];for(let a of this.childComponents){const s=a.execute(e);if(s.status===i.ComponentExecutionStatus.Pending){if(a.exclusiveExecution)break}else if(s.status===i.ComponentExecutionStatus.Executing){if(o.push(n),a.exclusiveExecution)break}else if(s.status===i.ComponentExecutionStatus.Succeeded)r++;else if(s.status===i.ComponentExecutionStatus.Failed&&(r++,a.required))return t.failed(s.error,e.engagement.currentDatetime);n++}return t.progress=Math.min(1,(r+1)/this.childComponents.length),r===this.childComponents.length?t.succeeded(e.engagement.currentDatetime):(o.length>0&&t.messages.push(new l.Message(1===o.length?s.Strings.formatString(s.Strings.ListComponent.messages.running.title.single,c.Format.integer(o[0]+1),c.Format.integer(this.childComponents.length)):s.Strings.formatString(s.Strings.ListComponent.messages.running.title.multiple,c.Format.integer(this.childComponents.length-o.length),c.Format.integer(this.childComponents.length)))),t)}}},function(e,t,n){(function(){var t;t=n(14),e.exports=function(){class e extends t{constructor(e){super(e),this.value=""}clone(){return Object.create(this)}substringData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}appendData(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}insertData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}deleteData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}replaceData(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){return!!super.isEqualNode(e)&&e.data===this.data}}return Object.defineProperty(e.prototype,"data",{get:function(){return this.value},set:function(e){return this.value=e||""}}),Object.defineProperty(e.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(e){return this.value=e||""}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(40),r=n(61),o=n(202),a=n(37);t.Context=class{constructor(e){this.user=new r.User,this.device=new a.Device,this.drone=new i.Drone,this.plan=e,this.device.spatial.coordinate=this.plan.takeoffCoordinate,this.drone.takeoffCoordinate=this.plan.takeoffCoordinate,this.drone.spatial.coordinate=this.plan.takeoffCoordinate}get spatialSources(){return new o.GeoSpatialSources(this.plan.coordinate.toGeoSpatial(),this.drone.spatial,this.device.spatial)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(29),o=n(33),a=n(3),s=n(1);t.AltitudeRange=class{constructor(e=new o.Altitude,t=new r.Limits){this.type=i.TypeName.AltitudeRange,this.altitude=new o.Altitude,this.altitude=e,this.range=t}applyJSON(e){return!(!e||e.type!==this.type)&&this.altitude.applyJSON(e.altitude)&&this.range.applyJSON(e.range)}toString(){return[this.altitude.toString(),this.range.toString(s.Format.altitude)].join(a.Strings.Common.delimeter)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(141),r=n(0),o=n(12),a=n(2);t.Camera=class extends i.Payload{constructor(){super(...arguments),this.type=r.TypeName.Camera,this.updated=new o.Datetime,this.capturing=!1,this.settings={mode:r.CameraMode.Photo,photoMode:r.CameraPhotoMode.Single,photoInterval:2}}applyJSON(e){return!(!e||e.type!==this.type||!e.settings||(this.capturing=a.Common.parseBoolean(e.capturing,!1),this.settings.mode=e.settings.mode,this.settings.photoMode=e.settings.photoMode,this.settings.photoInterval=a.Common.parseInt(e.settings.photoInterval,2),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2),o=n(3),a=n(1);t.CameraImageSpecification=class{constructor(e=1,t=1){this.type=i.TypeName.CameraImageSpecification,this.toString=(()=>`${o.Strings.CameraImageSpecification.name}: ${a.Format.cameraSpecificationPixels(this.width).toString()} x ${a.Format.cameraSpecificationPixels(this.height).toString()}`),this.width=e,this.height=t}applyJSON(e){return!(!e||e.type!==this.type||(this.width=r.Common.parseFloat(e.width),this.height=r.Common.parseFloat(e.height),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2),o=n(3),a=n(1);t.CameraLensSpecification=class{constructor(e=1){this.type=i.TypeName.CameraLensSpecification,this.toString=(()=>`${o.Strings.CameraLensSpecification.name}: ${a.Format.cameraSpecificationLength(this.focalLength).toString()}`),this.focalLength=e}applyJSON(e){return!(!e||e.type!==this.type||(this.focalLength=r.Common.parseFloat(e.focalLength),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2),o=n(3),a=n(1);t.CameraSensorSpecification=class{constructor(e=1,t=1){this.type=i.TypeName.CameraSensorSpecification,this.toString=(()=>`${o.Strings.CameraSensorSpecification.name}: ${a.Format.cameraSpecificationLength(this.width).toString()} x ${a.Format.cameraSpecificationLength(this.height).toString()}`),this.width=e,this.height=t}applyJSON(e){return!(!e||e.type!==this.type||(this.width=r.Common.parseFloat(e.width),this.height=r.Common.parseFloat(e.height),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(30),o=n(99),a=n(100),s=n(101),u=n(103),l=n(6),c=n(2);t.CameraSpecification=class extends l.Identifiable{constructor(e=null,t="",n=9,u=12.8,l=9.6,m=5472,d=3648){super(e),this.type=i.TypeName.CameraSpecification,this.toString=((e=!1)=>c.Common.joinNotEmpty([this.lens.toString(),this.sensor.toString(),e?this.image.toString():""])),this.descriptors=new r.Descriptors(t),this.lens=new a.CameraLensSpecification(n),this.sensor=new s.CameraSensorSpecification(u,l),this.image=new o.CameraImageSpecification(m,d)}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&this.descriptors.applyJSON(e.descriptors)&&this.lens.applyJSON(e.lens)&&this.sensor.applyJSON(e.sensor)&&this.image.applyJSON(e.image)}get resettable(){return!1}get fieldOfView(){return new u.FieldOfView(2*Math.atan(this.sensor.width/(2*this.lens.focalLength)),2*Math.atan(this.sensor.height/(2*this.lens.focalLength)),2*Math.atan(Math.sqrt(Math.pow(this.sensor.width,2)+Math.pow(this.sensor.height,2))/(2*this.lens.focalLength)))}groundSampleDistance(e){const t=this.sensor.width/1e3,n=this.sensor.height/1e3,i=this.lens.focalLength/1e3;return{width:e*t/(i*this.image.width),height:e*n/(i*this.image.height)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(2);t.FieldOfView=class{constructor(e=0,t=0,n=0){this.type=i.TypeName.FieldOfView,this.horizontal=e,this.vertical=t,this.diagonal=n}applyJSON(e){return!(!e||e.type!==this.type||(this.horizontal=r.Common.parseFloat(e.horizontal),this.vertical=r.Common.parseFloat(e.vertical),this.diagonal=r.Common.parseFloat(e.diagonal),0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=u(n(68)),r=u(n(69)),o=u(n(70)),a=u(n(142)),s=u(n(105));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function e(t){if((0,i.default)(t))return Number(t);if((0,r.default)(t))return(0,o.default)(t);if((0,a.default)(t)){var n=(0,s.default)(t);return Array.isArray(t)?t.map(function(t,n){return[0,1].includes(n)?e(t):t}):function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){l(e,t,n[t])})}return e}({},t,n.latitude&&l({},n.latitude,e(t[n.latitude])),n.longitude&&l({},n.longitude,e(t[n.longitude])))}return Array.isArray(t)?t.map(function(t){return(0,a.default)(t)?e(t):t}):t};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=n(10),o=(i=n(67))&&i.__esModule?i:{default:i};function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(e){var t=(0,o.default)(e,r.longitudeKeys),n=(0,o.default)(e,r.latitudeKeys),i=(0,o.default)(e,r.altitudeKeys);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){a(e,t,n[t])})}return e}({latitude:n,longitude:t},i?{altitude:i}:{})};t.default=s},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var i=n(236),r=n(237),o=n(149);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return m(this,e)}return l(this,e,t,n)}function l(e,t,n,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,i){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,n):new Uint8Array(t,n,i);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=d(e,t);return e}(e,t,n,i):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var i=0|p(t,n),r=(e=s(e,i)).write(t,n);r!==i&&(e=e.slice(0,r));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|h(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?s(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function m(e,t){if(c(t),e=s(e,t<0?0:0|h(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|h(t.length);e=s(e,n);for(var i=0;i<n;i+=1)e[i]=255&t[i];return e}function h(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return j(e).length;default:if(i)return V(e).length;t=(""+t).toLowerCase(),i=!0}}function f(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function g(e,t,n,i,r){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=u.from(t,i)),u.isBuffer(t))return 0===t.length?-1:y(e,t,n,i,r);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,i,r);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,i,r){var o,a=1,s=e.length,u=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(r){var c=-1;for(o=n;o<s;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(n+u>s&&(n=s-u),o=n;o>=0;o--){for(var m=!0,d=0;d<u;d++)if(l(e,o+d)!==l(t,d)){m=!1;break}if(m)return o}return-1}function v(e,t,n,i){n=Number(n)||0;var r=e.length-n;i?(i=Number(i))>r&&(i=r):i=r;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");i>o/2&&(i=o/2);for(var a=0;a<i;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function C(e,t,n,i){return U(V(t,e.length-n),e,n,i)}function S(e,t,n,i){return U(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,i)}function b(e,t,n,i){return S(e,t,n,i)}function w(e,t,n,i){return U(j(t),e,n,i)}function x(e,t,n,i){return U(function(e,t){for(var n,i,r,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),i=n>>8,r=n%256,o.push(r),o.push(i);return o}(t,e.length-n),e,n,i)}function M(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function O(e,t,n){n=Math.min(e.length,n);for(var i=[],r=t;r<n;){var o,a,s,u,l=e[r],c=null,m=l>239?4:l>223?3:l>191?2:1;if(r+m<=n)switch(m){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[r+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=e[r+1],a=e[r+2],128==(192&o)&&128==(192&a)&&(u=(15&l)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=e[r+1],a=e[r+2],s=e[r+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,m=1):c>65535&&(c-=65536,i.push(c>>>10&1023|55296),c=56320|1023&c),i.push(c),r+=m}return function(e){var t=e.length;if(t<=D)return String.fromCharCode.apply(String,e);var n="",i=0;for(;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=D));return n}(i)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return l(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,i){return c(t),t<=0?s(e,t):void 0!==n?"string"==typeof i?s(e,t).fill(n,i):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return m(null,e)},u.allocUnsafeSlow=function(e){return m(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,i=t.length,r=0,o=Math.min(n,i);r<o;++r)if(e[r]!==t[r]){n=e[r],i=t[r];break}return n<i?-1:i<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var i=u.allocUnsafe(t),r=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,r),r+=a.length}return i},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)f(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)f(this,t,t+3),f(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)f(this,t,t+7),f(this,t+1,t+6),f(this,t+2,t+5),f(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?O(this,0,e):function(e,t,n){var i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return _(this,t,n);case"utf8":case"utf-8":return O(this,t,n);case"ascii":return P(this,t,n);case"latin1":case"binary":return T(this,t,n);case"base64":return M(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,n);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,i,r){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===r&&(r=this.length),t<0||n>e.length||i<0||r>this.length)throw new RangeError("out of range index");if(i>=r&&t>=n)return 0;if(i>=r)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(r>>>=0)-(i>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(o,a),l=this.slice(i,r),c=e.slice(t,n),m=0;m<s;++m)if(l[m]!==c[m]){o=l[m],a=c[m];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},u.prototype.write=function(e,t,n,i){if(void 0===t)i="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)i=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return C(this,e,t,n);case"ascii":return S(this,e,t,n);case"latin1":case"binary":return b(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var D=4096;function P(e,t,n){var i="";n=Math.min(e.length,n);for(var r=t;r<n;++r)i+=String.fromCharCode(127&e[r]);return i}function T(e,t,n){var i="";n=Math.min(e.length,n);for(var r=t;r<n;++r)i+=String.fromCharCode(e[r]);return i}function _(e,t,n){var i=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>i)&&(n=i);for(var r="",o=t;o<n;++o)r+=B(e[o]);return r}function E(e,t,n){for(var i=e.slice(t,n),r="",o=0;o<i.length;o+=2)r+=String.fromCharCode(i[o]+256*i[o+1]);return r}function N(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function F(e,t,n,i,r,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<o)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function I(e,t,n,i){t<0&&(t=65535+t+1);for(var r=0,o=Math.min(e.length-n,2);r<o;++r)e[n+r]=(t&255<<8*(i?r:1-r))>>>8*(i?r:1-r)}function A(e,t,n,i){t<0&&(t=4294967295+t+1);for(var r=0,o=Math.min(e.length-n,4);r<o;++r)e[n+r]=t>>>8*(i?r:3-r)&255}function L(e,t,n,i,r,o){if(n+i>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function R(e,t,n,i,o){return o||L(e,0,n,4),r.write(e,t,n,i,23,4),n+4}function k(e,t,n,i,o){return o||L(e,0,n,8),r.write(e,t,n,i,52,8),n+8}u.prototype.slice=function(e,t){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var r=t-e;n=new u(r,void 0);for(var o=0;o<r;++o)n[o]=this[o+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var i=this[e],r=1,o=0;++o<t&&(r*=256);)i+=this[e+o]*r;return i},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var i=this[e+--t],r=1;t>0&&(r*=256);)i+=this[e+--t]*r;return i},u.prototype.readUInt8=function(e,t){return t||N(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||N(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||N(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var i=this[e],r=1,o=0;++o<t&&(r*=256);)i+=this[e+o]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var i=t,r=1,o=this[e+--i];i>0&&(r*=256);)o+=this[e+--i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||N(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||N(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||N(e,4,this.length),r.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||N(e,4,this.length),r.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||N(e,8,this.length),r.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||N(e,8,this.length),r.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||F(this,e,t,n,Math.pow(2,8*n)-1,0);var r=1,o=0;for(this[t]=255&e;++o<n&&(r*=256);)this[t+o]=e/r&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||F(this,e,t,n,Math.pow(2,8*n)-1,0);var r=n-1,o=1;for(this[t+r]=255&e;--r>=0&&(o*=256);)this[t+r]=e/o&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):A(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):A(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t|=0,!i){var r=Math.pow(2,8*n-1);F(this,e,t,n,r-1,-r)}var o=0,a=1,s=0;for(this[t]=255&e;++o<n&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t|=0,!i){var r=Math.pow(2,8*n-1);F(this,e,t,n,r-1,-r)}var o=n-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):A(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||F(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):A(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return R(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return R(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return k(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return k(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,i){if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);var r,o=i-n;if(this===e&&n<t&&t<i)for(r=o-1;r>=0;--r)e[r+t]=this[r+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(r=0;r<o;++r)e[r+t]=this[r+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},u.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var r=e.charCodeAt(0);r<256&&(e=r)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!u.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var a=u.isBuffer(e)?e:V(new u(e,i).toString()),s=a.length;for(o=0;o<n-t;++o)this[o+t]=a[o%s]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function V(e,t){var n;t=t||1/0;for(var i=e.length,r=null,o=[],a=0;a<i;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===i){(t-=3)>-1&&o.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&o.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function j(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,n,i){for(var r=0;r<i&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}}).call(this,n(35))},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return"function"==typeof e}function r(e){return"object"==typeof e&&null!==e}function o(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,a,s,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||r(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(o(n=this._events[e]))return!1;if(i(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(r(n))for(s=Array.prototype.slice.call(arguments,1),a=(l=n.slice()).length,u=0;u<a;u++)l[u].apply(this,s);return!0},n.prototype.addListener=function(e,t){var a;if(!i(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,i(t.listener)?t.listener:t),this._events[e]?r(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,r(this._events[e])&&!this._events[e].warned&&(a=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[e].length>a&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!i(t))throw TypeError("listener must be a function");var n=!1;function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}return r.listener=t,this.on(e,r),this},n.prototype.removeListener=function(e,t){var n,o,a,s;if(!i(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(a=(n=this._events[e]).length,o=-1,n===t||i(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(r(n)){for(s=a;s-- >0;)if(n[s]===t||n[s].listener&&n[s].listener===t){o=s;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(i(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){(t=e.exports=n(152)).Stream=t,t.Readable=t,t.Writable=n(109),t.Duplex=n(36),t.Transform=n(156),t.PassThrough=n(243)},function(e,t,n){"use strict";(function(t,i,r){var o=n(71);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var i=e.entry;e.entry=null;for(;i;){var r=i.callback;t.pendingcb--,r(n),i=i.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=v;var s,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?i:o.nextTick;v.WritableState=y;var l=n(48);l.inherits=n(41);var c={deprecate:n(242)},m=n(153),d=n(72).Buffer,h=r.Uint8Array||function(){};var p,f=n(154);function g(){}function y(e,t){s=s||n(36),e=e||{};var i=t instanceof s;this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,l=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:i&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var m=!1===e.decodeStrings;this.decodeStrings=!m,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,i=n.sync,r=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,i,r){--t.pendingcb,n?(o.nextTick(r,i),o.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",i)):(r(i),e._writableState.errorEmitted=!0,e.emit("error",i),M(e,t))}(e,n,i,t,r);else{var a=w(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||b(e,n),i?u(S,e,n,a,r):S(e,n,a,r)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function v(e){if(s=s||n(36),!(p.call(v,this)||this instanceof s))return new v(e);this._writableState=new y(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),m.call(this)}function C(e,t,n,i,r,o,a){t.writelen=i,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(r,t.onwrite):e._write(r,o,t.onwrite),t.sync=!1}function S(e,t,n,i){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,i(),M(e,t)}function b(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var i=t.bufferedRequestCount,r=new Array(i),o=t.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)r[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;r.allBuffers=u,C(e,t,!0,t.length,r,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,m=n.callback;if(C(e,t,!1,t.objectMode?1:l.length,l,c,m),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function w(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),M(e,t)})}function M(e,t){var n=w(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}l.inherits(v,m),y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(y.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===v&&(e&&e._writableState instanceof y)}})):p=function(e){return e instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(e,t,n){var i,r=this._writableState,a=!1,s=!r.objectMode&&(i=e,d.isBuffer(i)||i instanceof h);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=r.defaultEncoding),"function"!=typeof n&&(n=g),r.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),o.nextTick(t,n)}(this,n):(s||function(e,t,n,i){var r=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(i,a),r=!1),r}(this,r,e,n))&&(r.pendingcb++,a=function(e,t,n,i,r,o){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n));return t}(t,i,r);i!==a&&(n=!0,r="buffer",i=a)}var s=t.objectMode?1:i.length;t.length+=s;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:i,encoding:r,isBuf:n,callback:o,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else C(e,t,!1,s,i,r,o);return u}(this,r,s,e,t,n)),a},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||b(this,e))},v.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(e,t,n){var i=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||function(e,t,n){t.ending=!0,M(e,t),n&&(t.finished?o.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,i,n)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),v.prototype.destroy=f.destroy,v.prototype._undestroy=f.undestroy,v.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(47),n(150).setImmediate,n(35))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ExposureModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ExposureModeCameraCommand,this.exposureMode=r.CameraExposureMode.Program}applyJSON(e){return!(!super.applyJSON(e)||!e.exposureMode||(this.exposureMode=e.exposureMode,0))}get subtitle(){return o.Format.string(`CameraExposureMode.values.${this.exposureMode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get reengagementReplaceable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(12);t.ComponentSource=class{constructor(e="",t=new r.Datetime){this.type=i.TypeName.ComponentSource,this.path=e,this.updated=t}applyJSON(e){return!(!e||e.type!==this.type||!e.path||!this.updated.applyJSON(e.updated)||(this.path=e.path,0))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(7),o=n(79),a=n(2),s=n(0),u=n(5);t.GeoReferencedOffset=class extends i.Identifiable{constructor(){super(...arguments),this.type=s.TypeName.GeoReferencedOffset,this.reference=null,this.coordinateOffset=new r.Vector2,this.altitudeOffset=0}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type)return!1;if(e.reference){if(this.reference=new o.SourcedGeoSpatial,!this.reference.applyJSON(e.reference))return!1}else this.reference=null;return this.altitudeOffset=a.Common.parseFloat(e.altitudeOffset),this.coordinateOffset.applyJSON(e.coordinateOffset)}value(e,t){const n=u.Serialization.clone((this.reference||t).value(e));return n.coordinate=n.coordinate.geoCoordinate(this.coordinateOffset),n.altitude.value+=this.altitudeOffset,n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(32);t.DefaultCommand=class extends i.Command{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(15),o=n(9),a=n(3),s=n(11),u=n(1),l=n(25),c=n(2),m=n(84),d=n(7);t.CourseComponent=class extends m.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.CourseComponent,this.course=0,this.achievementTime=o.Constants.CourseComponentAchievementTime,this.achievementDistance=o.Constants.CourseComponentAchievementDistance}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||(this.course=c.Common.parseFloat(e.course),this.achievementTime=c.Common.parseFloat(e.achievementTime),this.achievementDistance=c.Common.parseFloat(e.achievementDistance),0))}get subtitle(){const e=u.Format.angle(this.course).toString();return this.achievementDistance>0?a.Strings.formatString(a.Strings.CourseComponent.subtitle,e,u.Format.angle(this.achievementDistance).toString()):e}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.CourseComponent);if(t&&t.achievementDistanceVelocityValidSince){const n=e.drone.projectSpatial(e.engagement.currentDatetime),i=this.resolveDroneMotionLimits(e),a=r.Geometry.angleDifferenceSigned(this.course,n.velocity.horizontal.direction);if(Math.abs(a)<=this.achievementDistance&&Math.abs(n.velocity.horizontal.magnitude-i.horizontal.velocity.max)<=o.Constants.CourseComponentAchievementVelocity&&e.elapsedTime(t.achievementDistanceVelocityValidSince)>=this.achievementTime)return!0}return!1}estimate(e,t){return super.estimate(e,t)}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,c=n.projectSpatial(e.engagement.currentDatetime),m=this.resolveDroneMotionLimits(e),p=Math.abs(c.velocity.horizontal.magnitude-m.horizontal.velocity.max),f=t.cachedData(i.TypeName.CourseComponent,()=>new h(p)),g=r.Geometry.angleDifferenceSigned(this.course,c.velocity.horizontal.direction);if(Math.abs(g)<=this.achievementDistance&&p<=o.Constants.CourseComponentAchievementVelocity){f.achievementDistanceVelocityValidSince||(f.achievementDistanceVelocityValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(f.achievementDistanceVelocityValidSince);n<this.achievementTime&&t.messages.push(new s.Message(a.Strings.AchievableDroneMotionComponent.messages.waiting.title,u.Format.number(this.achievementTime-n)))}else f.achievementDistanceVelocityValidSince=null;const y=new l.Velocity6;return y.horizontal=new d.Vector2(this.course,m.horizontal.velocity.max),this.addDroneVelocityCommand(e,y),t.progress=f.progress(p),t}};class h{constructor(e){this.achievementDistanceVelocityValidSince=null,this.totalVelocity=e,this.totalVelocity=e}progress(e){return e>this.totalVelocity?0:(this.totalVelocity-e)/this.totalVelocity}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(86),o=n(2);t.MotionLimits3Optional=class{constructor(e=null,t=null,n=null){this.type=i.TypeName.MotionLimits3Optional,this.toString=(e=>o.Common.joinNotEmpty([this.x?this.x.toString(e.x):"",this.y?this.y.toString(e.y):"",this.z?this.z.toString(e.z):""])),this.x=e,this.y=t,this.z=n}applyJSON(e){if(!e)return this.x=null,this.z=null,this.z=null,!0;if(e.type!==this.type)return!1;if(e.x){if(this.x=new r.MotionLimitsOptional,!this.x.applyJSON(e.x))return!1}else this.x=null;if(e.y){if(this.y=new r.MotionLimitsOptional,!this.y.applyJSON(e.y))return!1}else this.y=null;if(e.z){if(this.z=new r.MotionLimitsOptional,!this.z.applyJSON(e.z))return!1}else this.z=null;return!0}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get forwardBackward(){return this.x}set forwardBackward(e){this.x=e}get leftRight(){return this.y}set leftRight(e){this.y=e}get upDown(){return this.z}set upDown(e){this.z=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(15),o=n(9),a=n(3),s=n(11),u=n(1),l=n(42),c=n(25),m=n(2),d=n(84),h=n(5);t.HeadingComponent=class extends d.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.HeadingComponent,this.heading=0,this.achievementTime=o.Constants.HeadingComponentAchievementTime,this.achievementDistance=o.Constants.HeadingComponentAchievementDistance}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type||(this.heading=m.Common.parseFloat(e.heading),this.achievementTime=m.Common.parseFloat(e.achievementTime),this.achievementDistance=m.Common.parseFloat(e.achievementDistance),0))}get subtitle(){const e=u.Format.angle(this.heading).toString();return this.achievementDistance>0?a.Strings.formatString(a.Strings.HeadingComponent.subtitle,e,u.Format.angle(this.achievementDistance).toString()):e}get repositionIfIncluded(){return!1}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.HeadingComponent);if(t&&t.achievementDistanceValidSince){const n=r.Geometry.angleDifferenceSigned(this.heading,e.drone.projectSpatial(e.engagement.currentDatetime).orientation.yaw);if(Math.abs(n)<=this.achievementDistance&&e.elapsedTime(t.achievementDistanceValidSince)>=this.achievementTime)return!0}return!1}estimate(e,t){const n=super.estimate(e,t),i=h.Serialization.clone(t);if(i.orientation.yaw=this.heading,n.droneSpatials.push(i),e.timeRequired){const e=o.Constants.DroneMotionLimits.Max(),i=Math.abs(r.Geometry.angleDifferenceSigned(this.heading,t.orientation.yaw));i-this.achievementDistance>0&&(n.time+=e.timeLineRotational(i,i-this.achievementDistance)),n.time+=this.achievementTime;const a=n.children.find(e=>e.component===this.immediateComponent);a&&a.totalTime>n.time&&(n.time+=a.totalTime-n.time)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,o=n.projectSpatial(e.engagement.currentDatetime),m=r.Geometry.angleDifferenceSigned(this.heading,o.orientation.yaw),d=this.resolveDroneMotionLimits(e),h=t.cachedData(i.TypeName.HeadingComponent,()=>new p(n.spatial.coordinate.geoCoordinate(),Math.abs(m))),f=new c.Velocity6;l.VelocityDroneCommand.updateBoundedVelocityRotational(f,m,d,this.referenceSpatial(e).velocity.rotational);const g=h.startCoordinate,y=o.coordinate.offset(g),v=new c.Velocity6;if(l.VelocityDroneCommand.updateBoundedVelocityHorizontal(v,y.direction,y.magnitude,d),f.horizontal=f.horizontal.add(v.horizontal),Math.abs(m)<=this.achievementDistance){h.achievementDistanceValidSince||(h.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(h.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new s.Message(a.Strings.AchievableDroneMotionComponent.messages.waiting.title,u.Format.number(this.achievementTime-n)))}else h.achievementDistanceValidSince=null,Math.abs(m)>.01&&t.messages.push(new s.Message(a.Strings.HeadingComponent.messages.rotating.title,u.Format.angle(m,!1).toString()));return this.addDroneVelocityCommand(e,f,this.heading),t.progress=h.progress(Math.abs(m)),t}};class p{constructor(e,t){this.achievementDistanceValidSince=null,this.startCoordinate=e,this.totalDistance=t}progress(e){return e>this.totalDistance?0:(this.totalDistance-e)/this.totalDistance}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(19),r=n(2),o=n(7),a=n(56);t.Path=class{constructor(e){let t=0,n=-1,i=0,r=null;this.segments=e.map(e=>{n++;let o=0;return e.map((e,a)=>{if(r){const t=e.distance(r);i+=t,a>0&&(o+=t)}return r=e,new s(e,t++,i,n,a,o)})}),this.distance=i}get points(){const e=[];return this.segments.forEach(t=>{e.push(...t)}),e}get coordinates(){return this.points.map(e=>e.coordinate)}get segmentEndPoints(){return this.segments.map(e=>r.Common.last(e))}get segmentCenterCoordinates(){return this.segments.map(e=>{if(e.length>1){const t=r.Common.last(e).segmentDistance/2;for(const n of e)if(n.segmentDistance>=t){if(n.segmentIndex>0)return n.coordinate.geoCoordinate(new o.Vector2(n.coordinate.bearing(e[n.segmentIndex-1].coordinate),n.segmentDistance-t));break}}return e[0].coordinate})}nextCoordinate(e=null,t=5){return null===e&&(e=this.distance),this.sampleForDistance(e+t,!1).coordinate}nearestDistance(e){const t=this.points;if(t.length<2)return 0;const n=t.map(n=>{if(0===n.index)return{point:n,intersect:n.coordinate,distance:e.distance(n.coordinate)};const r=t[n.index-1],o=r.coordinate.geoCoordinate(new a.Line2(new i.Point2,r.coordinate.offset(n.coordinate).toPoint2()).closestPoint(r.coordinate.offset(e).toPoint2()).toVector2());return{point:r,intersect:o,distance:e.distance(o)}}).sort((e,t)=>e.distance-t.distance)[0];return n.point.distance+n.intersect.distance(n.point.coordinate)}sampleForDistance(e,t=!0){return this.samplesForDistances([e],t)[0]}samplesForMaxDistance(e,t=!0){const n=Math.ceil(this.distance/e),i=this.distance/n,r=[];for(let e=0;e<this.distance;e+=i)r.push(e);return r.push(this.distance),this.samplesForDistances(r)}samplesForDistances(e,t=!0){if(0===e.length)return[];const n=this.points;if(0===n.length)return[];if(1===n.length)return e.map(e=>new u(n[0].coordinate,0,0));const i=e.map((e,t)=>({index:t,distance:e,coordinate:n[0].coordinate,direction:n[0].coordinate.bearing(n[1].coordinate)})).sort((e,t)=>e.distance-t.distance);let r=0;for(const e of n){for(;r<i.length;){const a=i[r],s=e.index===n.length-1;if(!(e.distance>=a.distance||s))break;s&&t&&a.distance>e.distance?(e.index>0?a.direction=n[e.index-1].coordinate.bearing(e.coordinate):e.index+1<n.length&&(a.direction=e.coordinate.bearing(n[e.index+1].coordinate)),a.coordinate=e.coordinate):e.index>0?(a.direction=n[e.index-1].coordinate.bearing(e.coordinate),a.coordinate=e.coordinate.geoCoordinate(new o.Vector2(a.direction+Math.PI,e.distance-a.distance))):(a.direction=e.coordinate.bearing(n[e.index+1].coordinate),a.coordinate=e.coordinate),r++}if(r===i.length)break}return i.sort((e,t)=>e.index-t.index).map(e=>new u(e.coordinate,e.direction,e.distance))}};class s{constructor(e,t,n,i,r,o){this.coordinate=e,this.index=t,this.distance=n,this.segment=i,this.segmentIndex=r,this.segmentDistance=o}}t.PathPoint=s;class u{constructor(e,t,n){this.coordinate=e,this.direction=t,this.distance=n}}t.PathSample=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(83);t.PathComponentElementNode=class extends i.ListElementNode{get pathComponentNode(){return this.parent.parent}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(80),r=n(5),o=n(26),a=n(0),s=n(7),u=n(66),l=n(9),c=n(93);t.PlanComponent=class extends i.Component{constructor(){super(...arguments),this.type=a.TypeName.PlanComponent,this.takeoffOffset=null,this.takeoffDistance=new u.DistanceTolerance(l.Constants.PlanComponentTakeoffDistanceHorizontal),this.droneMotionLimits=l.Constants.DroneMotionLimits.Generic(),this.rootComponent=new c.ListComponent,this.completeAction=a.PlanCompleteAction.None}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.completeAction)return!1;if(!(this.descriptors.applyJSON(e.descriptors)&&this.coordinate.applyJSON(e.coordinate)&&this.droneMotionLimits.applyJSON(e.droneMotionLimits)&&this.takeoffDistance.applyJSON(e.takeoffDistance)))return!1;if(e.takeoffOffset){if(this.takeoffOffset=new s.Vector2,!this.takeoffOffset.applyJSON(e.takeoffOffset))return!1}else this.takeoffOffset=null;if(e.rootComponent){const t=r.Serialization.deserialize(e.rootComponent);if(!(t&&t instanceof o.SubComponent))return!1;this.rootComponent=t}return this.completeAction=e.completeAction,!0}get verification(){const e=this.rootComponent.verification;if(!e)return null;const t=r.Serialization.clone(this,!0);return t.rootComponent=e,t}get requiredTakeoffCoordinate(){return this.takeoffOffset?this.coordinate.geoCoordinate(this.takeoffOffset):null}get takeoffCoordinate(){return this.requiredTakeoffCoordinate||this.coordinate}node(e=null){const t=super.node(e);return t.addChild(this.rootComponent,!1),t}estimate(e,t){return this.rootComponent.estimate(e,t)}execute(e){const t=super.execute(e);if(t.status!==a.ComponentExecutionStatus.Executing)return t;const n=this.rootComponent.execute(e);switch(n.status){case a.ComponentExecutionStatus.Pending:case a.ComponentExecutionStatus.Executing:return t;case a.ComponentExecutionStatus.Succeeded:case a.ComponentExecutionStatus.Failed:if(n.status===a.ComponentExecutionStatus.Failed&&this.rootComponent.required)return t.failed(n.error,e.engagement.currentDatetime)}return t.succeeded(e.engagement.currentDatetime)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(0),o=n(12),a=n(11);t.Disengagement=class extends i.Identifiable{constructor(e=new a.Message){super(),this.type=r.TypeName.Disengagement,this.disengaged=new o.Datetime,this.reason=e}applyJSON(e){return!(!super.applyJSON(e)&&e.type!==this.type||!this.disengaged.applyJSON(e.disengaged)||!this.reason.applyJSON(e.reason))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(2),o=n(0),a=n(12),s=n(40),u=n(5),l=n(122),c=n(120),m=n(61),d=n(37);t.Engagement=class extends i.Identifiable{constructor(e=null,t=new m.User,n=new d.Device,i=new s.Drone,r=null){super(),this.type=o.TypeName.Engagement,this.reengagement=null,this.lastExecuted=null,this.timeSinceLastExecution=0,this.totalExecutes=0,this.disengagement=null,this.engaged=e||new a.Datetime,this.reengagement=r,this.lastUserSnapshot=u.Serialization.clone(t),this.startDeviceSpatial=u.Serialization.clone(n.spatial),this.lastDeviceSnapshot=u.Serialization.clone(n),this.startDroneSpatial=u.Serialization.clone(i.spatial),this.lastDroneSnapshot=u.Serialization.clone(i)}applyJSON(e){return!(!super.applyJSON(e)&&e.type!==this.type||!this.engaged.applyJSON(e.engaged)||(this.reengagement=null,e.reengagement&&(this.reengagement=new l.Mission,!this.reengagement.applyJSON(e.reengagement))||!this.lastUserSnapshot.applyJSON(e.lastUserSnapshot)||!this.startDeviceSpatial.applyJSON(e.startDeviceSpatial)||!this.lastDeviceSnapshot.applyJSON(e.lastDeviceSnapshot)||!this.startDroneSpatial.applyJSON(e.startDroneSpatial)||!this.lastDroneSnapshot.applyJSON(e.lastDroneSnapshot)||e.lastExecuted&&(this.lastExecuted=new a.Datetime,!this.lastExecuted.applyJSON(e.lastExecuted))||(this.timeSinceLastExecution=r.Common.parseFloat(e.timeSinceLastExecution),this.totalExecutes=r.Common.parseInt(e.totalExecutes),this.disengagement=null,e.disengagement&&(this.disengagement=new c.Disengagement,!this.disengagement.applyJSON(e.disengagement)))))}execute(e,t,n=new d.Device,i){this.lastExecuted&&(this.timeSinceLastExecution=e.elapsedTime(this.lastExecuted)),this.lastUserSnapshot=u.Serialization.clone(t),this.lastDeviceSnapshot=u.Serialization.clone(n),this.lastDroneSnapshot=u.Serialization.clone(i),this.lastExecuted=e,this.totalExecutes++}get currentDatetime(){return this.lastExecuted||this.engaged}get timeElapsed(){return(this.currentDatetime.value.getTime()-this.engaged.value.getTime())/1e3}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))(function(r,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((i=i.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const r=n(119),o=n(121),a=n(123),s=n(2),u=n(30),l=n(6),c=n(0),m=n(26),d=n(12),h=n(194),p=n(201),f=n(5),g=n(9),y=n(81),v=n(203),C=n(11),S=n(21),b=n(120),w=n(3),x=n(204),M=n(93),O=n(91),D=n(116),P=n(53),T=n(76),_=n(75),E=n(44),N=n(29),F=n(49),I=n(43),A=n(138),L=n(7),R=n(16),k=n(114),z=n(86),B=n(96),V=n(1),j=n(27);class U extends l.Identifiable{constructor(){super(...arguments),this.type=c.TypeName.Mission,this.descriptors=null,this.plan=new r.PlanComponent,this.execution=new a.Execution,this.engagements=[]}applyJSON(e){if(!super.applyJSON(e)&&e.type!==this.type)return!1;if(e.descriptors){if(this.descriptors=this.descriptors||new u.Descriptors,!this.descriptors.applyJSON(e.descriptors))return!1}else this.descriptors=null;if(!this.plan.applyJSON(e.plan)||!this.execution.applyJSON(e.execution))return!1;if(this.engagements=[],Array.isArray(e.engagements))for(let t of e.engagements){const e=new o.Engagement;if(!e.applyJSON(t))return!1;this.engagements.push(e)}return!0}static createFromComponent(e){const t=new U;return e instanceof r.PlanComponent?t.plan=e:e instanceof m.SubComponent&&(Object.assign(t.plan.coordinate,e.coordinate),t.plan.descriptors.name=e.descriptors.name,t.plan.rootComponent=e),t.descriptors=f.Serialization.clone(t.plan.descriptors),t}get verification(){const e=new U,t=this.plan.verification;return t&&(e.plan=t),e.descriptors=f.Serialization.clone(this.descriptors||this.plan.descriptors),e}get complete(){switch(this.execution.getComponentState(this.plan).status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:return!1;case c.ComponentExecutionStatus.Succeeded:case c.ComponentExecutionStatus.Failed:return!0}}get state(){return this.execution.getComponentState(this.plan.rootComponent)}get componentNodeExecutionStates(){const e=this.plan.node(),t=[new x.ComponentNodeExecutionState(e,this.execution.getComponentState(this.plan))];return e.descendants.forEach(e=>{e instanceof y.ComponentNode&&t.push(new x.ComponentNodeExecutionState(e,this.execution.getComponentState(e.component)))}),t}get executingMessageGroups(){const e=[];if(!this.engaged)return e;if(this.reengaging){const t=s.Common.lastSafe(this.engagements);if(t&&t.reengagement){const n=new A.MessageGroup;return n.descriptors.name=w.Strings.Mission.values.reengagement,e.push(n),e.concat(t.reengagement.executingMessageGroups)}}return this.componentNodeExecutionStates.forEach(t=>{if(t.state.status===c.ComponentExecutionStatus.Executing){if(t.node.component instanceof r.PlanComponent)return;if(t.node.parent&&t.node.parent instanceof y.ComponentNode&&t.node.parent.component instanceof r.PlanComponent)return;const n=new A.MessageGroup;n.descriptors.name=t.node.title,n.messages.push(...t.state.messages),e.push(n)}}),e}get timeElapsed(){let e=0;return this.engagements.forEach(t=>{e+=t.timeElapsed}),e}get engaged(){const e=s.Common.lastSafe(this.engagements);return!!e&&!e.disengagement}get reengaging(){if(this.engaged){const e=s.Common.lastSafe(this.engagements);if(e&&e.reengagement)return!e.reengagement.complete}return!1}get context(){return new B.Context(this.plan)}componentExecuteContext(e,t,n){const i=new p.ComponentExecuteContext(this.plan,this.execution,n);return i.user=e,i.drone=t,i}estimate(e=!1,t=!1,n=null){const i=new v.ComponentEstimateContext(this.plan);return n&&(i.drone=n),i.altitudeRequired=e,i.timeRequired=t,this.plan.estimate(i,f.Serialization.clone(this.engagements.length>0?this.engagements[0].startDroneSpatial:i.drone.spatial))}engageDisallowedReasons(e,t,n){if(this.complete)return[new C.Message(w.Strings.Mission.messages.engageDisallowed.complete)];if(this.engaged)return[new C.Message(w.Strings.Mission.messages.engageDisallowed.engaged)];const i=[],r=this.plan.requiredTakeoffCoordinate;return r&&n.takeoffCoordinate.distance(r)>this.plan.takeoffDistance.horizontal&&i.push(new C.Message(w.Strings.Mission.messages.engageDisallowed.requiredTakeoffInvalid.title,w.Strings.formatString(w.Strings.Mission.messages.engageDisallowed.requiredTakeoffInvalid.details,V.Format.distance(n.takeoffCoordinate.distance(r)-this.plan.takeoffDistance.horizontal).toString()))),i}engage(e,t,n,i=null){if(this.complete)return s.Common.last(this.engagements);let r=s.Common.lastSafe(this.engagements);r&&this.disengage(n,new C.Message(w.Strings.Mission.messages.reengaging)),r=new o.Engagement(i,e,t,n,this.reengagement(n)),this.engagements.push(r);const a=this.componentExecuteContext(e,n,r);return this.plan.node().descendants.forEach(e=>{e instanceof y.ComponentNode&&e.component.engaging(a)}),r.reengagement&&r.reengagement.engage(e,t,n,i),r}execute(e,t,n,i=null,r=null){let o=this.state;switch(o.status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:r=r||new d.Datetime;let a=s.Common.lastSafe(this.engagements);if(a&&(a.disengagement?a=null:a.lastExecuted&&r.elapsedTime(a.lastExecuted)>g.Constants.MissionExecuteIntervalMax?(this.disengage(n,new C.Message(w.Strings.Mission.messages.reengagementDelay)),a=null):a.lastUserSnapshot.id!==e.id?(this.disengage(n,new C.Message(w.Strings.Mission.messages.reengagementUserID)),a=null):a.lastDeviceSnapshot.id!==t.id?(this.disengage(n,new C.Message(w.Strings.Mission.messages.reengagementDeviceID)),a=null):a.lastDroneSnapshot.id!==n.id&&(this.disengage(n,new C.Message(w.Strings.Mission.messages.reengagementDroneID)),a=null)),!a)return o;let u=!0;if(a.reengagement&&a.reengagement.engaged)switch(a.reengagement.state.status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:u=!1,a.reengagement.execute(e,t,n,null,r);break;case c.ComponentExecutionStatus.Failed:this.disengage(n,new C.Message(w.Strings.Mission.messages.reengagementFailed,a.reengagement.state.error)),u=!1;break;case c.ComponentExecutionStatus.Succeeded:}if(u){a.execute(r,e,t,n),n.statefulCommands.forEach(e=>{n.commandExecutionState(e.id).status===c.CommandExecutionStatus.Succeeded&&this.execution.addCommandSucceeded(e)});const s=this.componentExecuteContext(e,n,a);if(o=this.plan.execute(s),this.complete)switch(o.status){case c.ComponentExecutionStatus.Failed:this.disengage(n,new C.Message(w.Strings.Mission.messages.failed,o.error));break;case c.ComponentExecutionStatus.Succeeded:this.disengage(n,new C.Message(w.Strings.Mission.messages.succeeded))}i&&i.addFrame(s,o.duration)}return o;default:return o}}disengage(e,t){const n=s.Common.lastSafe(this.engagements);n&&!n.disengagement&&(e.removeAllStatefulCommands(),n.disengagement=new b.Disengagement(t))}get disengagement(){const e=s.Common.lastSafe(this.engagements);return e?e.disengagement:null}reengagement(e){if(this.complete)return null;const t=s.Common.lastSafe(this.engagements.filter(e=>!e.reengagement||e.reengagement.state.status===c.ComponentExecutionStatus.Succeeded));if(!t)return null;const n=t.lastDroneSnapshot.spatial,i=e=>{let t=[];return this.execution.commandsSucceeded.forEach(n=>{n.reengagementTiming===e&&(t=t.filter(e=>e.type!==n.type||(!e.reengagementReplaceable||e instanceof F.PayloadCommand&&n instanceof F.PayloadCommand&&e.channel!==n.channel))).push(f.Serialization.clone(n,!0))}),t},r=new U;r.plan.descriptors=this.plan.descriptors,r.plan.droneMotionLimits=this.plan.droneMotionLimits,r.plan.coordinate=this.plan.coordinate;const o=new M.ListComponent;r.plan.rootComponent=o;let a=!1,u=null;for(const e of this.componentNodeExecutionStates)e.state.status===c.ComponentExecutionStatus.Executing&&e.node.component instanceof O.DestinationComponent&&(u=e.node.component),e.state.status!==c.ComponentExecutionStatus.Pending&&e.node.component instanceof j.DroneMotionComponent&&(a=!0);let l=!1;const m=new O.DestinationComponent;if(m.destinationOffset=r.plan.coordinate.offset(n.coordinate),m.altitudeRange.altitude.value=n.altitude.value,m.altitudeRange.range=new N.Limits(g.Constants.MissionReengagementAltitudeRange),u)e.spatial.altitude.value>n.altitude.value&&(m.altitudeRange.altitude.value=Math.max(n.altitude.value,Math.min(e.spatial.altitude.value,e.convertAltitude(u.altitudeRange.altitude)))),o.childComponents.push(m);else if(a)if((l=n.velocity.horizontal.magnitude>g.Constants.CourseComponentAchievementVelocity)&&m.destinationOffset.addToSelf(new L.Vector2(n.velocity.horizontal.direction+Math.PI,R.Kinematic.d4(0,n.velocity.horizontal.magnitude,r.plan.droneMotionLimits.horizontal.acceleration.max))),e.spatial.altitude.value>n.altitude.value){const t=f.Serialization.clone(m,!0);m.altitudeRange.altitude.value=e.spatial.altitude.value,o.childComponents.push(m),o.childComponents.push(t)}else o.childComponents.push(m);else m.destinationOffset=r.plan.coordinate.offset(e.spatial.coordinate),m.altitudeRange.altitude.value=e.spatial.altitude.value,o.childComponents.push(m);const d=new M.ListComponent;for(const e of Object.keys(t.lastDroneSnapshot.cameras)){const t=new E.StopCaptureCameraCommand;t.channel=parseInt(e),d.childComponents.push(new P.CommandComponent(t))}for(const e of Object.keys(t.lastDroneSnapshot.gimbals)){const t=new _.ModeGimbalCommand;t.channel=parseInt(e),t.mode=c.GimbalMode.YawFollow,d.childComponents.push(new P.CommandComponent(t))}i(c.CommandReengagementTiming.Approach).forEach(e=>{d.childComponents.push(new P.CommandComponent(e))}),m.immediateComponent=d;const h=new D.HeadingComponent;h.heading=n.orientation.yaw,o.childComponents.push(h);const p=new M.ListComponent;i(c.CommandReengagementTiming.Destination).forEach(e=>{p.childComponents.push(new P.CommandComponent(e))});for(const e of Object.keys(t.lastDroneSnapshot.gimbals)){const n=new T.OrientationGimbalCommand;n.channel=parseInt(e),n.orientation.apply(t.lastDroneSnapshot.gimbal(n.channel).orientation),p.childComponents.push(new P.CommandComponent(n))}p.childComponents.length>0&&(h.immediateComponent=p);const y=new M.ListComponent;for(const e of Object.keys(t.lastDroneSnapshot.cameras)){if(t.lastDroneSnapshot.camera(parseInt(e)).capturing){const t=new I.StartCaptureCameraCommand;t.channel=parseInt(e),y.childComponents.push(new P.CommandComponent(t))}}if(y.childComponents.length>0&&(h.achievedComponent=y),l){const e=new k.CourseComponent;e.course=n.velocity.horizontal.direction,e.droneMotionLimits.horizontal=new z.MotionLimitsOptional(new N.Limits(n.velocity.horizontal.magnitude,0)),e.achievementTime=0,o.childComponents.push(e)}return r}simulate(e=null){return i(this,void 0,void 0,function*(){return new Promise(t=>{const n=f.Serialization.clone(this),i=new S.Timeline,r=new h.Simulation(n.plan.takeoffCoordinate,r=>{switch(n.state.status){case c.ComponentExecutionStatus.Pending:break;case c.ComponentExecutionStatus.Executing:const o=i.lastFrame;o&&(e&&!1===e(o)&&(r.stop(),t({mission:n,timeline:i})),o.elapsedTime>18e3&&(r.stop(),t({mission:n,timeline:i})));break;case c.ComponentExecutionStatus.Failed:case c.ComponentExecutionStatus.Succeeded:r.stop(),t({mission:n,timeline:i})}});r.missionExecuteIntervalTarget=g.Constants.SimulationUpdateInterval,r.engage(n,i),r.rate=null})})}}t.Mission=U},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(78),r=n(0),o=n(32),a=n(5);t.Execution=class{constructor(){this.type=r.TypeName.Execution,this.componentStates={},this.commandsSucceeded=[]}getComponentStateByID(e){let t=this.componentStates[e];return t||(t=new i.ComponentExecutionState(e),this.componentStates[e]=t),t}getComponentState(e){return this.getComponentStateByID(e.id)}addCommandSucceeded(e){-1===this.commandsSucceeded.indexOf(e)&&this.commandsSucceeded.push(e)}applyJSON(e){if(!e||e.type!==this.type)return!1;this.componentStates={};for(let t of Object.keys(e.componentStates)){const n=new i.ComponentExecutionState(t);if(!n.applyJSON(e.componentStates[t]))return!1;this.componentStates[t]=n}if(this.commandsSucceeded=[],Array.isArray(e.commandsSucceeded))for(let t of e.commandsSucceeded){const e=a.Serialization.deserialize(t);if(!(e&&e instanceof o.Command))return!1;this.commandsSucceeded.push(e)}return!0}}},function(e,t,n){(function(){var t,i,r,o,a,s,u,l={}.hasOwnProperty;({isObject:u,isFunction:s,getValue:a}=n(28)),o=n(14),t=n(8),i=n(197),r=n(125),e.exports=function(){class e extends o{constructor(e,n,i){var r,o,a,s;if(super(e),null==n)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(n),this.type=t.Element,this.attribs={},this.schemaTypeInfo=null,null!=i&&this.attribute(i),e.type===t.Document&&(this.isRoot=!0,this.documentObject=e,e.rootObject=this,e.children))for(o=0,a=(s=e.children).length;o<a;o++)if((r=s[o]).type===t.DocType){r.name=this.name;break}}clone(){var e,t,n,i;for(t in(n=Object.create(this)).isRoot&&(n.documentObject=null),n.attribs={},i=this.attribs)l.call(i,t)&&(e=i[t],n.attribs[t]=e.clone());return n.children=[],this.children.forEach(function(e){var t;return(t=e.clone()).parent=n,n.children.push(t)}),n}attribute(e,t){var n,r;if(null!=e&&(e=a(e)),u(e))for(n in e)l.call(e,n)&&(r=e[n],this.attribute(n,r));else s(t)&&(t=t.apply()),this.options.keepNullAttributes&&null==t?this.attribs[e]=new i(this,e,""):null!=t&&(this.attribs[e]=new i(this,e,t));return this}removeAttribute(e){var t,n,i;if(null==e)throw new Error("Missing attribute name. "+this.debugInfo());if(e=a(e),Array.isArray(e))for(n=0,i=e.length;n<i;n++)t=e[n],delete this.attribs[t];else delete this.attribs[e];return this}toString(e){return this.options.writer.element(this,this.options.writer.filterOptions(e))}att(e,t){return this.attribute(e,t)}a(e,t){return this.attribute(e,t)}getAttribute(e){return this.attribs.hasOwnProperty(e)?this.attribs[e].value:null}setAttribute(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNode(e){return this.attribs.hasOwnProperty(e)?this.attribs[e]:null}setAttributeNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeAttributeNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setAttributeNS(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNodeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setAttributeNodeNS(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}hasAttribute(e){return this.attribs.hasOwnProperty(e)}hasAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setIdAttribute(e,t){return this.attribs.hasOwnProperty(e)?this.attribs[e].isId:t}setIdAttributeNS(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}setIdAttributeNode(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByClassName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){var t,n,i;if(!super.isEqualNode(e))return!1;if(e.namespaceURI!==this.namespaceURI)return!1;if(e.prefix!==this.prefix)return!1;if(e.localName!==this.localName)return!1;if(e.attribs.length!==this.attribs.length)return!1;for(t=n=0,i=this.attribs.length-1;0<=i?n<=i:n>=i;t=0<=i?++n:--n)if(!this.attribs[t].isEqualNode(e.attribs[t]))return!1;return!0}}return Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.attributeMap&&this.attributeMap.nodes||(this.attributeMap=new r(this.attribs)),this.attributeMap}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.nodes=e}clone(){return this.nodes=null}getNamedItem(e){return this.nodes[e]}setNamedItem(e){var t;return t=this.nodes[e.nodeName],this.nodes[e.nodeName]=e,t||null}removeNamedItem(e){var t;return t=this.nodes[e],delete this.nodes[e],t||null}item(e){return this.nodes[Object.keys(this.nodes)[e]]||null}getNamedItemNS(e,t){throw new Error("This DOM method is not implemented.")}setNamedItemNS(e){throw new Error("This DOM method is not implemented.")}removeNamedItemNS(e,t){throw new Error("This DOM method is not implemented.")}}return Object.defineProperty(e.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(8),i=n(94),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=t.CData,this.value=this.stringify.cdata(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.cdata(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;t=n(8),i=n(94),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=t.Comment,this.value=this.stringify.comment(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.comment(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,r;({isObject:r}=n(28)),i=n(14),t=n(8),e.exports=class extends i{constructor(e,n,i,o){super(e),r(n)&&({version:n,encoding:i,standalone:o}=n),n||(n="1.0"),this.type=t.Declaration,this.version=this.stringify.xmlVersion(n),null!=i&&(this.encoding=this.stringify.xmlEncoding(i)),null!=o&&(this.standalone=this.stringify.xmlStandalone(o))}toString(e){return this.options.writer.declaration(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,s,u,l;({isObject:l}=n(28)),u=n(14),t=n(8),i=n(130),o=n(131),r=n(132),a=n(133),s=n(125),e.exports=function(){class e extends u{constructor(e,n,i){var r,o,a,s;if(super(e),this.type=t.DocType,e.children)for(o=0,a=(s=e.children).length;o<a;o++)if((r=s[o]).type===t.Element){this.name=r.name;break}this.documentObject=e,l(n)&&({pubID:n,sysID:i}=n),null==i&&([i,n]=[n,i]),null!=n&&(this.pubID=this.stringify.dtdPubID(n)),null!=i&&(this.sysID=this.stringify.dtdSysID(i))}element(e,t){var n;return n=new r(this,e,t),this.children.push(n),this}attList(e,t,n,r,o){var a;return a=new i(this,e,t,n,r,o),this.children.push(a),this}entity(e,t){var n;return n=new o(this,!1,e,t),this.children.push(n),this}pEntity(e,t){var n;return n=new o(this,!0,e,t),this.children.push(n),this}notation(e,t){var n;return n=new a(this,e,t),this.children.push(n),this}toString(e){return this.options.writer.docType(this,this.options.writer.filterOptions(e))}ele(e,t){return this.element(e,t)}att(e,t,n,i,r){return this.attList(e,t,n,i,r)}ent(e,t){return this.entity(e,t)}pent(e,t){return this.pEntity(e,t)}not(e,t){return this.notation(e,t)}up(){return this.root()||this.documentObject}isEqualNode(e){return!!super.isEqualNode(e)&&(e.name===this.name&&(e.publicId===this.publicId&&e.systemId===this.systemId))}}return Object.defineProperty(e.prototype,"entities",{get:function(){var e,n,i,r,o;for(r={},n=0,i=(o=this.children).length;n<i;n++)(e=o[n]).type!==t.EntityDeclaration||e.pe||(r[e.name]=e);return new s(r)}}),Object.defineProperty(e.prototype,"notations",{get:function(){var e,n,i,r,o;for(r={},n=0,i=(o=this.children).length;n<i;n++)(e=o[n]).type===t.NotationDeclaration&&(r[e.name]=e);return new s(r)}}),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(14),t=n(8),e.exports=class extends i{constructor(e,n,i,r,o,a){if(super(e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());if(null==i)throw new Error("Missing DTD attribute name. "+this.debugInfo(n));if(!r)throw new Error("Missing DTD attribute type. "+this.debugInfo(n));if(!o)throw new Error("Missing DTD attribute default. "+this.debugInfo(n));if(0!==o.indexOf("#")&&(o="#"+o),!o.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(n));if(a&&!o.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(n));this.elementName=this.stringify.name(n),this.type=t.AttributeDeclaration,this.attributeName=this.stringify.name(i),this.attributeType=this.stringify.dtdAttType(r),a&&(this.defaultValue=this.stringify.dtdAttDefault(a)),this.defaultValueType=o}toString(e){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,r;({isObject:r}=n(28)),i=n(14),t=n(8),e.exports=function(){class e extends i{constructor(e,n,i,o){if(super(e),null==i)throw new Error("Missing DTD entity name. "+this.debugInfo(i));if(null==o)throw new Error("Missing DTD entity value. "+this.debugInfo(i));if(this.pe=!!n,this.name=this.stringify.name(i),this.type=t.EntityDeclaration,r(o)){if(!o.pubID&&!o.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(i));if(o.pubID&&!o.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(i));if(this.internal=!1,null!=o.pubID&&(this.pubID=this.stringify.dtdPubID(o.pubID)),null!=o.sysID&&(this.sysID=this.stringify.dtdSysID(o.sysID)),null!=o.nData&&(this.nData=this.stringify.dtdNData(o.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(i))}else this.value=this.stringify.dtdEntityValue(o),this.internal=!0}toString(e){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(e))}}return Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return null}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(14),t=n(8),e.exports=class extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());i||(i="(#PCDATA)"),Array.isArray(i)&&(i="("+i.join(",")+")"),this.name=this.stringify.name(n),this.type=t.ElementDeclaration,this.value=this.stringify.dtdElementValue(i)}toString(e){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;i=n(14),t=n(8),e.exports=function(){class e extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing DTD notation name. "+this.debugInfo(n));if(!i.pubID&&!i.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(n));this.name=this.stringify.name(n),this.type=t.NotationDeclaration,null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID))}toString(e){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(e))}}return Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(8),i=n(14),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing raw text. "+this.debugInfo());this.type=t.Raw,this.value=this.stringify.raw(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.raw(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;t=n(8),i=n(94),e.exports=function(){class e extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=t.Text,this.value=this.stringify.text(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.text(this,this.options.writer.filterOptions(e))}splitText(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}replaceWholeText(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}}return Object.defineProperty(e.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"wholeText",{get:function(){var e,t,n;for(n="",t=this.previousSibling;t;)n=t.data+n,t=t.previousSibling;for(n+=this.data,e=this.nextSibling;e;)n+=e.data,e=e.nextSibling;return n}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(8),i=n(94),e.exports=class extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing instruction target. "+this.debugInfo());this.type=t.ProcessingInstruction,this.target=this.stringify.insTarget(n),this.name=this.target,i&&(this.value=this.stringify.insValue(i))}clone(){return Object.create(this)}toString(e){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(e))}isEqualNode(e){return!!super.isEqualNode(e)&&e.target===this.target}}}).call(this)},function(e,t,n){(function(){var t;t=n(200),e.exports=class extends t{constructor(e){super(e)}document(e,t){var n,i,r,o,a;for(t=this.filterOptions(t),o="",i=0,r=(a=e.children).length;i<r;i++)n=a[i],o+=this.writeChildNode(n,t,0);return t.pretty&&o.slice(-t.newline.length)===t.newline&&(o=o.slice(0,-t.newline.length)),o}}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(30),o=n(11),a=n(5),s=n(2);t.MessageGroup=class{constructor(){this.type=i.TypeName.MessageGroup,this.descriptors=new r.Descriptors,this.messages=[],this.toString=(()=>s.Common.joinNotEmpty([this.descriptors.toString()].concat(this.messages.map(e=>e.toString())),"\n"))}applyJSON(e){if(!e||e.type!==this.type)return!1;if(!this.descriptors.applyJSON(e.descriptors))return!1;if(this.messages=[],Array.isArray(e.messages))for(let t of e.messages){const e=a.Serialization.deserialize(t);if(!(e&&e instanceof o.Message))return!1;this.messages.push(e)}return!0}}},function(e,t,n){!function(){"use strict";var t=Math.abs,i=Math.min,r=Math.max,o=Math.cos,a=Math.sin,s=Math.acos,u=Math.sqrt,l=Math.PI,c={x:0,y:0,z:0},m=n(140),d=n(210),h=function(e){var n=e&&e.forEach?e:[].slice.call(arguments),i=!1;if("object"==typeof n[0]){i=n.length;var r=[];n.forEach(function(e){["x","y","z"].forEach(function(t){void 0!==e[t]&&r.push(e[t])})}),n=r}var o=!1,a=n.length;if(i){if(i>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");o=!0}}else if(6!==a&&8!==a&&9!==a&&12!==a&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");var s=!o&&(9===a||12===a)||e&&e[0]&&void 0!==e[0].z;this._3d=s;for(var u=[],l=0,c=s?3:2;l<a;l+=c){var d={x:n[l],y:n[l+1]};s&&(d.z=n[l+2]),u.push(d)}this.order=u.length-1,this.points=u;var h=["x","y"];s&&h.push("z"),this.dims=h,this.dimlen=h.length,function(e){for(var n=e.order,i=e.points,r=m.align(i,{p1:i[0],p2:i[n]}),o=0;o<r.length;o++)if(t(r[o].y)>1e-4)return void(e._linear=!1);e._linear=!0}(this),this._t1=0,this._t2=1,this.update()},p=n(211);function f(e,t,n,i,r){void 0===r&&(r=.5);var o=m.projectionratio(r,e),a=1-o,s={x:o*t.x+a*i.x,y:o*t.y+a*i.y},u=m.abcratio(r,e);return{A:{x:n.x+(n.x-s.x)/u,y:n.y+(n.y-s.y)/u},B:n,C:s}}h.SVGtoBeziers=function(e){return p(h,e)},h.quadraticFromPoints=function(e,t,n,i){if(void 0===i&&(i=.5),0===i)return new h(t,t,n);if(1===i)return new h(e,t,t);var r=f(2,e,t,n,i);return new h(e,r.A,n)},h.cubicFromPoints=function(e,t,n,i,r){void 0===i&&(i=.5);var o=f(3,e,t,n,i);void 0===r&&(r=m.dist(t,o.C));var a=r*(1-i)/i,s=m.dist(e,n),u=(n.x-e.x)/s,l=(n.y-e.y)/s,c=r*u,d=r*l,p=a*u,g=a*l,y=t.x-c,v=t.y-d,C=t.x+p,S=t.y+g,b=o.A,w=b.x+(y-b.x)/(1-i),x=b.y+(v-b.y)/(1-i),M=b.x+(C-b.x)/i,O=b.y+(S-b.y)/i,D={x:e.x+(w-e.x)/i,y:e.y+(x-e.y)/i},P={x:n.x+(M-n.x)/(1-i),y:n.y+(O-n.y)/(1-i)};return new h(e,D,P,n)};var g=function(){return m};h.getUtils=g,h.PolyBezier=d,h.prototype={getUtils:g,valueOf:function(){return this.toString()},toString:function(){return m.pointsToString(this.points)},toSVG:function(e){if(this._3d)return!1;for(var t=this.points,n=["M",t[0].x,t[0].y,2===this.order?"Q":"C"],i=1,r=t.length;i<r;i++)n.push(t[i].x),n.push(t[i].y);return n.join(" ")},setRatios:function(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]},update:function(){this._lut=[],this.dpoints=m.derive(this.points,this._3d),this.computedirection()},computedirection:function(){var e=this.points,t=m.angle(e[0],e[this.order],e[1]);this.clockwise=t>0},length:function(){return m.length(this.derivative.bind(this))},_lut:[],getLUT:function(e){if(e=e||100,this._lut.length===e)return this._lut;this._lut=[],e--;for(var t=0;t<=e;t++)this._lut.push(this.compute(t/e));return this._lut},on:function(e,t){t=t||5;for(var n,i=this.getLUT(),r=[],o=0,a=0;a<i.length;a++)n=i[a],m.dist(n,e)<t&&(r.push(n),o+=a/i.length);return!!r.length&&o/r.length},project:function(e){var t=this.getLUT(),n=t.length-1,i=m.closest(t,e),r=i.mdist,o=i.mpos;if(0===o||o===n){var a=o/n,s=this.compute(a);return s.t=a,s.d=r,s}var u,l,c,d=(o+1)/n,h=.1/n;for(r+=1,u=a=(o-1)/n;a<d+h;a+=h)l=this.compute(a),(c=m.dist(e,l))<r&&(r=c,u=a);return(l=this.compute(u)).t=u,l.d=r,l},get:function(e){return this.compute(e)},point:function(e){return this.points[e]},compute:function(e){return this.ratios?m.computeWithRatios(e,this.points,this.ratios,this._3d):m.compute(e,this.points,this._3d,this.ratios)},raise:function(){for(var e,t,n=this.points,i=[n[0]],r=n.length,o=1;o<r;o++)e=n[o],t=n[o-1],i[o]={x:(r-o)/r*e.x+o/r*t.x,y:(r-o)/r*e.y+o/r*t.y};return i[r]=n[r-1],new h(i)},derivative:function(e){var t,n,i=1-e,r=0,o=this.dpoints[0];2===this.order&&(o=[o[0],o[1],c],t=i,n=e),3===this.order&&(t=i*i,n=i*e*2,r=e*e);var a={x:t*o[0].x+n*o[1].x+r*o[2].x,y:t*o[0].y+n*o[1].y+r*o[2].y};return this._3d&&(a.z=t*o[0].z+n*o[1].z+r*o[2].z),a},curvature:function(e){return m.curvature(e,this.points,this._3d)},inflections:function(){return m.inflections(this.points)},normal:function(e){return this._3d?this.__normal3(e):this.__normal2(e)},__normal2:function(e){var t=this.derivative(e),n=u(t.x*t.x+t.y*t.y);return{x:-t.y/n,y:t.x/n}},__normal3:function(e){var t=this.derivative(e),n=this.derivative(e+.01),i=u(t.x*t.x+t.y*t.y+t.z*t.z),r=u(n.x*n.x+n.y*n.y+n.z*n.z);t.x/=i,t.y/=i,t.z/=i,n.x/=r,n.y/=r,n.z/=r;var o={x:n.y*t.z-n.z*t.y,y:n.z*t.x-n.x*t.z,z:n.x*t.y-n.y*t.x},a=u(o.x*o.x+o.y*o.y+o.z*o.z);o.x/=a,o.y/=a,o.z/=a;var s=[o.x*o.x,o.x*o.y-o.z,o.x*o.z+o.y,o.x*o.y+o.z,o.y*o.y,o.y*o.z-o.x,o.x*o.z-o.y,o.y*o.z+o.x,o.z*o.z];return{x:s[0]*t.x+s[1]*t.y+s[2]*t.z,y:s[3]*t.x+s[4]*t.y+s[5]*t.z,z:s[6]*t.x+s[7]*t.y+s[8]*t.z}},hull:function(e){var t,n=this.points,i=[],r=[],o=0,a=0,s=0;for(r[o++]=n[0],r[o++]=n[1],r[o++]=n[2],3===this.order&&(r[o++]=n[3]);n.length>1;){for(i=[],a=0,s=n.length-1;a<s;a++)t=m.lerp(e,n[a],n[a+1]),r[o++]=t,i.push(t);n=i}return r},split:function(e,t){if(0===e&&t)return this.split(t).left;if(1===t)return this.split(e).right;var n=this.hull(e),i={left:2===this.order?new h([n[0],n[3],n[5]]):new h([n[0],n[4],n[7],n[9]]),right:2===this.order?new h([n[5],n[4],n[2]]):new h([n[9],n[8],n[6],n[3]]),span:n};return i.left._t1=m.map(0,0,1,this._t1,this._t2),i.left._t2=m.map(e,0,1,this._t1,this._t2),i.right._t1=m.map(e,0,1,this._t1,this._t2),i.right._t2=m.map(1,0,1,this._t1,this._t2),t?(t=m.map(t,e,1,0,1),i.right.split(t).left):i},extrema:function(){var e,t,n=this.dims,i={},r=[];return n.forEach(function(n){t=function(e){return e[n]},e=this.dpoints[0].map(t),i[n]=m.droots(e),3===this.order&&(e=this.dpoints[1].map(t),i[n]=i[n].concat(m.droots(e))),i[n]=i[n].filter(function(e){return e>=0&&e<=1}),r=r.concat(i[n].sort(m.numberSort))}.bind(this)),r=r.sort(m.numberSort).filter(function(e,t){return r.indexOf(e)===t}),i.values=r,i},bbox:function(){var e=this.extrema(),t={};return this.dims.forEach(function(n){t[n]=m.getminmax(this,n,e[n])}.bind(this)),t},overlaps:function(e){var t=this.bbox(),n=e.bbox();return m.bboxoverlap(t,n)},offset:function(e,t){if(void 0!==t){var n=this.get(e),i=this.normal(e),r={c:n,n:i,x:n.x+i.x*t,y:n.y+i.y*t};return this._3d&&(r.z=n.z+i.z*t),r}if(this._linear){var o=this.normal(0),a=this.points.map(function(t){var n={x:t.x+e*o.x,y:t.y+e*o.y};return t.z&&i.z&&(n.z=t.z+e*o.z),n});return[new h(a)]}return this.reduce().map(function(t){return t.scale(e)})},simple:function(){if(3===this.order){var e=m.angle(this.points[0],this.points[3],this.points[1]),n=m.angle(this.points[0],this.points[3],this.points[2]);if(e>0&&n<0||e<0&&n>0)return!1}var i=this.normal(0),r=this.normal(1),o=i.x*r.x+i.y*r.y;return this._3d&&(o+=i.z*r.z),t(s(o))<l/3},reduce:function(){var e,n,i=0,r=0,o=[],a=[],s=this.extrema().values;for(-1===s.indexOf(0)&&(s=[0].concat(s)),-1===s.indexOf(1)&&s.push(1),i=s[0],e=1;e<s.length;e++)r=s[e],(n=this.split(i,r))._t1=i,n._t2=r,o.push(n),i=r;return o.forEach(function(e){for(i=0,r=0;r<=1;)for(r=i+.01;r<=1.01;r+=.01)if(!(n=e.split(i,r)).simple()){if(t(i-(r-=.01))<.01)return[];(n=e.split(i,r))._t1=m.map(i,0,1,e._t1,e._t2),n._t2=m.map(r,0,1,e._t1,e._t2),a.push(n),i=r;break}i<1&&((n=e.split(i,1))._t1=m.map(i,0,1,e._t1,e._t2),n._t2=e._t2,a.push(n))}),a},scale:function(e){var t=this.order,n=!1;if("function"==typeof e&&(n=e),n&&2===t)return this.raise().scale(n);var i=this.clockwise,r=n?n(0):e,o=n?n(1):e,a=[this.offset(0,10),this.offset(1,10)],s=m.lli4(a[0],a[0].c,a[1],a[1].c);if(!s)throw new Error("cannot scale this curve. Try reducing it first.");var l=this.points,c=[];return[0,1].forEach(function(e){var n=c[e*t]=m.copy(l[e*t]);n.x+=(e?o:r)*a[e].n.x,n.y+=(e?o:r)*a[e].n.y}.bind(this)),n?([0,1].forEach(function(r){if(2!==this.order||!r){var o=l[r+1],a={x:o.x-s.x,y:o.y-s.y},m=n?n((r+1)/t):e;n&&!i&&(m=-m);var d=u(a.x*a.x+a.y*a.y);a.x/=d,a.y/=d,c[r+1]={x:o.x+m*a.x,y:o.y+m*a.y}}}.bind(this)),new h(c)):([0,1].forEach(function(e){if(2!==this.order||!e){var n=c[e*t],i=this.derivative(e),r={x:n.x+i.x,y:n.y+i.y};c[e+1]=m.lli4(n,r,s,l[e+1])}}.bind(this)),new h(c))},outline:function(e,t,n,i){t=void 0===t?e:t;var r,o=this.reduce(),a=o.length,s=[],u=[],l=0,c=this.length(),h=void 0!==n&&void 0!==i;function p(e,t,n,i,r){return function(o){var a=i/n,s=(i+r)/n,u=t-e;return m.map(o,0,1,e+a*u,e+s*u)}}o.forEach(function(r){w=r.length(),h?(s.push(r.scale(p(e,n,c,l,w))),u.push(r.scale(p(-t,-i,c,l,w)))):(s.push(r.scale(e)),u.push(r.scale(-t))),l+=w}),u=u.map(function(e){return(r=e.points)[3]?e.points=[r[3],r[2],r[1],r[0]]:e.points=[r[2],r[1],r[0]],e}).reverse();var f=s[0].points[0],g=s[a-1].points[s[a-1].points.length-1],y=u[a-1].points[u[a-1].points.length-1],v=u[0].points[0],C=m.makeline(y,f),S=m.makeline(g,v),b=[C].concat(s).concat([S]).concat(u),w=b.length;return new d(b)},outlineshapes:function(e,t,n){t=t||e;for(var i=this.outline(e,t).curves,r=[],o=1,a=i.length;o<a/2;o++){var s=m.makeshape(i[o],i[a-o],n);s.startcap.virtual=o>1,s.endcap.virtual=o<a/2-1,r.push(s)}return r},intersects:function(e,t){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof h&&(e=e.reduce()),this.curveintersects(this.reduce(),e,t)):this.selfintersects(t)},lineIntersects:function(e){var t=i(e.p1.x,e.p2.x),n=i(e.p1.y,e.p2.y),o=r(e.p1.x,e.p2.x),a=r(e.p1.y,e.p2.y),s=this;return m.roots(this.points,e).filter(function(e){var i=s.get(e);return m.between(i.x,t,o)&&m.between(i.y,n,a)})},selfintersects:function(e){var t,n,i,r,o=this.reduce(),a=o.length-2,s=[];for(t=0;t<a;t++)i=o.slice(t,t+1),r=o.slice(t+2),n=this.curveintersects(i,r,e),s=s.concat(n);return s},curveintersects:function(e,t,n){var i=[];e.forEach(function(e){t.forEach(function(t){e.overlaps(t)&&i.push({left:e,right:t})})});var r=[];return i.forEach(function(e){var t=m.pairiteration(e.left,e.right,n);t.length>0&&(r=r.concat(t))}),r},arcs:function(e){e=e||.5;return this._iterate(e,[])},_error:function(e,n,i,r){var o=(r-i)/4,a=this.get(i+o),s=this.get(r-o),u=m.dist(e,n),l=m.dist(e,a),c=m.dist(e,s);return t(l-u)+t(c-u)},_iterate:function(e,t){var n,i=0,r=1;do{n=0,r=1;var s,u,l,c,d,h=this.get(i),p=!1,f=!1,g=r,y=1;do{if(f=p,c=l,g=(i+r)/2,0,s=this.get(g),u=this.get(r),(l=m.getccenter(h,s,u)).interval={start:i,end:r},p=this._error(l,h,i,r)<=e,(d=f&&!p)||(y=r),p){if(r>=1){if(l.interval.end=y=1,c=l,r>1){var v={x:l.x+l.r*o(l.e),y:l.y+l.r*a(l.e)};l.e+=m.angle({x:l.x,y:l.y},v,this.get(1))}break}r+=(r-i)/2}else r=g}while(!d&&n++<100);if(n>=100)break;c=c||l,t.push(c),i=y}while(r<1);return t}},e.exports=h}()},function(e,t,n){!function(){"use strict";var t=Math.abs,i=Math.cos,r=Math.sin,o=Math.acos,a=Math.atan2,s=Math.sqrt,u=Math.pow,l=function(e){return e<0?-u(-e,1/3):u(e,1/3)},c=Math.PI,m=2*c,d=c/2,h=Number.MAX_SAFE_INTEGER||9007199254740991,p=Number.MIN_SAFE_INTEGER||-9007199254740991,f={x:0,y:0,z:0},g={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(e,t){var n=t(e),i=n.x*n.x+n.y*n.y;return void 0!==n.z&&(i+=n.z*n.z),s(i)},compute:function(e,t,n){if(0===e)return t[0];var i=t.length-1;if(1===e)return t[i];var r=t,o=1-e;if(0===i)return t[0];if(1===i)return d={x:o*r[0].x+e*r[1].x,y:o*r[0].y+e*r[1].y},n&&(d.z=o*r[0].z+e*r[1].z),d;if(i<4){var a,s,u,l=o*o,c=e*e,m=0;2===i?(r=[r[0],r[1],r[2],f],a=l,s=o*e*2,u=c):3===i&&(a=l*o,s=l*e*3,u=o*c*3,m=e*c);var d={x:a*r[0].x+s*r[1].x+u*r[2].x+m*r[3].x,y:a*r[0].y+s*r[1].y+u*r[2].y+m*r[3].y};return n&&(d.z=a*r[0].z+s*r[1].z+u*r[2].z+m*r[3].z),d}for(var h=JSON.parse(JSON.stringify(t));h.length>1;){for(var p=0;p<h.length-1;p++)h[p]={x:h[p].x+(h[p+1].x-h[p].x)*e,y:h[p].y+(h[p+1].y-h[p].y)*e},void 0!==h[p].z&&(h[p]=h[p].z+(h[p+1].z-h[p].z)*e);h.splice(h.length-1,1)}return h[0]},computeWithRatios:function(e,t,n,i){var r,o=1-e,a=n,s=t,u=a[0],l=a[1],c=a[2],m=a[3];return u*=o,l*=e,2===s.length?(r=u+l,{x:(u*s[0].x+l*s[1].x)/r,y:(u*s[0].y+l*s[1].y)/r,z:!!i&&(u*s[0].z+l*s[1].z)/r}):(u*=o,l*=2*o,c*=e*e,3===s.length?(r=u+l+c,{x:(u*s[0].x+l*s[1].x+c*s[2].x)/r,y:(u*s[0].y+l*s[1].y+c*s[2].y)/r,z:!!i&&(u*s[0].z+l*s[1].z+c*s[2].z)/r}):(u*=o,l*=1.5*o,c*=3*o,m*=e*e*e,4===s.length?(r=u+l+c+m,{x:(u*s[0].x+l*s[1].x+c*s[2].x+m*s[3].x)/r,y:(u*s[0].y+l*s[1].y+c*s[2].y+m*s[3].y)/r,z:!!i&&(u*s[0].z+l*s[1].z+c*s[2].z+m*s[3].z)/r}):void 0))},derive:function(e,t){for(var n=[],i=e,r=i.length,o=r-1;r>1;r--,o--){for(var a,s=[],u=0;u<o;u++)a={x:o*(i[u+1].x-i[u].x),y:o*(i[u+1].y-i[u].y)},t&&(a.z=o*(i[u+1].z-i[u].z)),s.push(a);n.push(s),i=s}return n},between:function(e,t,n){return t<=e&&e<=n||g.approximately(e,t)||g.approximately(e,n)},approximately:function(e,n,i){return t(e-n)<=(i||1e-6)},length:function(e){var t,n,i=0,r=g.Tvalues.length;for(t=0;t<r;t++)n=.5*g.Tvalues[t]+.5,i+=g.Cvalues[t]*g.arcfn(n,e);return.5*i},map:function(e,t,n,i,r){return i+(r-i)*((e-t)/(n-t))},lerp:function(e,t,n){var i={x:t.x+e*(n.x-t.x),y:t.y+e*(n.y-t.y)};return t.z&&n.z&&(i.z=t.z+e*(n.z-t.z)),i},pointToString:function(e){var t=e.x+"/"+e.y;return void 0!==e.z&&(t+="/"+e.z),t},pointsToString:function(e){return"["+e.map(g.pointToString).join(", ")+"]"},copy:function(e){return JSON.parse(JSON.stringify(e))},angle:function(e,t,n){var i=t.x-e.x,r=t.y-e.y,o=n.x-e.x,s=n.y-e.y;return a(i*s-r*o,i*o+r*s)},round:function(e,t){var n=""+e,i=n.indexOf(".");return parseFloat(n.substring(0,i+1+t))},dist:function(e,t){var n=e.x-t.x,i=e.y-t.y;return s(n*n+i*i)},closest:function(e,t){var n,i,r=u(2,63);return e.forEach(function(e,o){(i=g.dist(t,e))<r&&(r=i,n=o)}),{mdist:r,mpos:n}},abcratio:function(e,n){if(2!==n&&3!==n)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;var i=u(e,n)+u(1-e,n);return t((i-1)/i)},projectionratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;var n=u(1-e,t);return n/(u(e,t)+n)},lli8:function(e,t,n,i,r,o,a,s){var u=(e-n)*(o-s)-(t-i)*(r-a);return 0!=u&&{x:((e*i-t*n)*(r-a)-(e-n)*(r*s-o*a))/u,y:((e*i-t*n)*(o-s)-(t-i)*(r*s-o*a))/u}},lli4:function(e,t,n,i){var r=e.x,o=e.y,a=t.x,s=t.y,u=n.x,l=n.y,c=i.x,m=i.y;return g.lli8(r,o,a,s,u,l,c,m)},lli:function(e,t){return g.lli4(e,e.c,t,t.c)},makeline:function(e,t){var i=n(139),r=e.x,o=e.y,a=t.x,s=t.y,u=(a-r)/3,l=(s-o)/3;return new i(r,o,r+u,o+l,r+2*u,o+2*l,a,s)},findbbox:function(e){var t=h,n=h,i=p,r=p;return e.forEach(function(e){var o=e.bbox();t>o.x.min&&(t=o.x.min),n>o.y.min&&(n=o.y.min),i<o.x.max&&(i=o.x.max),r<o.y.max&&(r=o.y.max)}),{x:{min:t,mid:(t+i)/2,max:i,size:i-t},y:{min:n,mid:(n+r)/2,max:r,size:r-n}}},shapeintersections:function(e,t,n,i,r){if(!g.bboxoverlap(t,i))return[];var o=[],a=[e.startcap,e.forward,e.back,e.endcap],s=[n.startcap,n.forward,n.back,n.endcap];return a.forEach(function(t){t.virtual||s.forEach(function(i){if(!i.virtual){var a=t.intersects(i,r);a.length>0&&(a.c1=t,a.c2=i,a.s1=e,a.s2=n,o.push(a))}})}),o},makeshape:function(e,t,n){var i=t.points.length,r=e.points.length,o=g.makeline(t.points[i-1],e.points[0]),a=g.makeline(e.points[r-1],t.points[0]),s={startcap:o,forward:e,back:t,endcap:a,bbox:g.findbbox([o,e,t,a])},u=g;return s.intersections=function(e){return u.shapeintersections(s,s.bbox,e,e.bbox,n)},s},getminmax:function(e,t,n){if(!n)return{min:0,max:0};var i,r,o=h,a=p;-1===n.indexOf(0)&&(n=[0].concat(n)),-1===n.indexOf(1)&&n.push(1);for(var s=0,u=n.length;s<u;s++)i=n[s],(r=e.get(i))[t]<o&&(o=r[t]),r[t]>a&&(a=r[t]);return{min:o,mid:(o+a)/2,max:a,size:a-o}},align:function(e,t){var n=t.p1.x,o=t.p1.y,s=-a(t.p2.y-o,t.p2.x-n);return e.map(function(e){return{x:(e.x-n)*i(s)-(e.y-o)*r(s),y:(e.x-n)*r(s)+(e.y-o)*i(s)}})},roots:function(e,t){t=t||{p1:{x:0,y:0},p2:{x:1,y:0}};var n=e.length-1,r=g.align(e,t),a=function(e){return 0<=e&&e<=1};if(2===n){if(0!==(f=(y=r[0].y)-2*(v=r[1].y)+(C=r[2].y))){var u=-s(v*v-y*C),c=-y+v;return[-(u+c)/f,-(-u+c)/f].filter(a)}return v!==C&&0===f?[(2*v-C)/(2*v-2*C)].filter(a):[]}var d=r[0].y,h=r[1].y,p=r[2].y,f=3*h-d-3*p+r[3].y,y=3*d-6*h+3*p,v=-3*d+3*h,C=d;if(g.approximately(f,0)){if(g.approximately(y,0))return g.approximately(v,0)?[]:[-C/v].filter(a);var S=2*y;return[((b=s(v*v-4*y*C))-v)/S,(-v-b)/S].filter(a)}var b,w,x=(r=(3*(v/=f)-(y/=f)*y)/3)/3,M=(b=(2*y*y*y-9*y*v+27*(C/=f))/27)/2,O=M*M+x*x*x;if(O<0){var D=-r/3,P=s(D*D*D),T=-b/(2*P),_=o(T<-1?-1:T>1?1:T),E=2*l(P);return[E*i(_/3)-y/3,E*i((_+m)/3)-y/3,E*i((_+2*m)/3)-y/3].filter(a)}if(0===O)return[2*(w=M<0?l(-M):-l(M))-y/3,-w-y/3].filter(a);var N=s(O);return[(w=l(-M+N))-l(M+N)-y/3].filter(a)},droots:function(e){if(3===e.length){var t=e[0],n=e[1],i=e[2],r=t-2*n+i;if(0!==r){var o=-s(n*n-t*i),a=-t+n;return[-(o+a)/r,-(-o+a)/r]}return n!==i&&0===r?[(2*n-i)/(2*(n-i))]:[]}if(2===e.length)return(t=e[0])!==(n=e[1])?[t/(t-n)]:[]},curvature:function(e,n,i,r){var o,a,l,c,m,d,h=g.derive(n),p=h[0],f=h[1],y=g.compute(e,p),v=g.compute(e,f),C=y.x*y.x+y.y*y.y;if(i?(o=s(u(y.y*v.z-v.y*y.z,2)+u(y.z*v.x-v.z*y.x,2)+u(y.x*v.y-v.x*y.y,2)),a=u(C+y.z*y.z,2/3)):(o=y.x*v.y-y.y*v.x,a=u(C,2/3)),0===o||0===a)return{k:0,r:0};if(m=o/a,d=a/o,!r){var S=g.curvature(e-.001,n,i,!0).k,b=g.curvature(e+.001,n,i,!0).k;c=(b-m+(m-S))/2,l=(t(b-m)+t(m-S))/2}return{k:m,r:d,dk:c,adk:l}},inflections:function(e){if(e.length<4)return[];var t=g.align(e,{p1:e[0],p2:e.slice(-1)[0]}),n=t[2].x*t[1].y,i=t[3].x*t[1].y,r=t[1].x*t[2].y,o=18*(-3*n+2*i+3*r-(m=t[3].x*t[2].y)),a=18*(3*n-i-3*r),s=18*(r-n);if(g.approximately(o,0)){if(!g.approximately(a,0)){var u=-s/a;if(0<=u&&u<=1)return[u]}return[]}var l=a*a-4*o*s,c=Math.sqrt(l),m=2*o;return g.approximately(m,0)?[]:[(c-a)/m,-(a+c)/m].filter(function(e){return 0<=e&&e<=1})},bboxoverlap:function(e,n){var i,r,o,a,s,u=["x","y"],l=u.length;for(i=0;i<l;i++)if(o=e[r=u[i]].mid,a=n[r].mid,s=(e[r].size+n[r].size)/2,t(o-a)>=s)return!1;return!0},expandbox:function(e,t){t.x.min<e.x.min&&(e.x.min=t.x.min),t.y.min<e.y.min&&(e.y.min=t.y.min),t.z&&t.z.min<e.z.min&&(e.z.min=t.z.min),t.x.max>e.x.max&&(e.x.max=t.x.max),t.y.max>e.y.max&&(e.y.max=t.y.max),t.z&&t.z.max>e.z.max&&(e.z.max=t.z.max),e.x.mid=(e.x.min+e.x.max)/2,e.y.mid=(e.y.min+e.y.max)/2,e.z&&(e.z.mid=(e.z.min+e.z.max)/2),e.x.size=e.x.max-e.x.min,e.y.size=e.y.max-e.y.min,e.z&&(e.z.size=e.z.max-e.z.min)},pairiteration:function(e,t,n){var i=e.bbox(),r=t.bbox(),o=1e5,a=n||.5;if(i.x.size+i.y.size<a&&r.x.size+r.y.size<a)return[(o*(e._t1+e._t2)/2|0)/o+"/"+(o*(t._t1+t._t2)/2|0)/o];var s=e.split(.5),u=t.split(.5),l=[{left:s.left,right:u.left},{left:s.left,right:u.right},{left:s.right,right:u.right},{left:s.right,right:u.left}];l=l.filter(function(e){return g.bboxoverlap(e.left.bbox(),e.right.bbox())});var c=[];return 0===l.length?c:(l.forEach(function(e){c=c.concat(g.pairiteration(e.left,e.right,a))}),c=c.filter(function(e,t){return c.indexOf(e)===t}))},getccenter:function(e,t,n){var o,s=t.x-e.x,u=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=s*i(d)-u*r(d),p=s*r(d)+u*i(d),f=l*i(d)-c*r(d),y=l*r(d)+c*i(d),v=(e.x+t.x)/2,C=(e.y+t.y)/2,S=(t.x+n.x)/2,b=(t.y+n.y)/2,w=v+h,x=C+p,M=S+f,O=b+y,D=g.lli8(v,C,w,x,S,b,M,O),P=g.dist(D,e),T=a(e.y-D.y,e.x-D.x),_=a(t.y-D.y,t.x-D.x),E=a(n.y-D.y,n.x-D.x);return T<E?((T>_||_>E)&&(T+=m),T>E&&(o=E,E=T,T=o)):E<_&&_<T?(o=E,E=T,T=o):E+=m,D.s=T,D.e=E,D.r=P,D},numberSort:function(e,t){return e-t}};e.exports=g}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(2);t.Payload=class extends i.Identifiable{constructor(){super(...arguments),this.channel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.channel=r.Common.parseInt(e.channel),!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=a(n(105)),r=a(n(143)),o=a(n(144));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=(0,i.default)(e),n=t.latitude,a=t.longitude;if(Array.isArray(e)&&e.length>=2)return(0,o.default)(e[0])&&(0,r.default)(e[1]);if(void 0===n||void 0===a)return!1;var s=e[a],u=e[n];return void 0!==u&&void 0!==s&&!1!==(0,r.default)(u)&&!1!==(0,o.default)(s)};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(68)),r=s(n(69)),o=s(n(70)),a=n(10);function s(e){return e&&e.__esModule?e:{default:e}}var u=function e(t){return(0,i.default)(t)?!(parseFloat(t)>a.MAXLAT||t<a.MINLAT):!!(0,r.default)(t)&&e((0,o.default)(t))};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(68)),r=s(n(69)),o=s(n(70)),a=n(10);function s(e){return e&&e.__esModule?e:{default:e}}var u=function e(t){return(0,i.default)(t)?!(parseFloat(t)>a.MAXLON||t<a.MINLON):!!(0,r.default)(t)&&e((0,o.default)(t))};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(34))&&i.__esModule?i:{default:i};var o=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.default;return n="function"==typeof n?n:r.default,t.slice().sort(function(t,i){return n(e,t)-n(e,i)})};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=o(n(17)),r=o(n(18));function o(e){return e&&e.__esModule?e:{default:e}}var a=function(e){if(!1===Array.isArray(e)||0===e.length)throw new Error("No points were given.");return e.reduce(function(e,t){var n=(0,i.default)(t),o=(0,r.default)(t);return{maxLat:Math.max(n,e.maxLat),minLat:Math.min(n,e.minLat),maxLng:Math.max(o,e.maxLng),minLng:Math.min(o,e.minLng)}},{maxLat:-1/0,minLat:1/0,maxLng:-1/0,minLng:1/0})};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(17)),r=s(n(18)),o=s(n(24)),a=s(n(39));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=(0,o.default)((0,r.default)(t))-(0,o.default)((0,r.default)(e)),s=Math.log(Math.tan((0,o.default)((0,i.default)(t))/2+Math.PI/4)/Math.tan((0,o.default)((0,i.default)(e))/2+Math.PI/4));return Math.abs(n)>Math.PI&&(n=n>0?-1*(2*Math.PI-n):2*Math.PI+n),((0,a.default)(Math.atan2(n,s))+360)%360};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(34))&&i.__esModule?i:{default:i};var o=function(e,t,n){var i=(0,r.default)(t,e),o=(0,r.default)(e,n),a=(0,r.default)(t,n),s=Math.acos((i*i+a*a-o*o)/(2*i*a)),u=Math.acos((o*o+a*a-i*i)/(2*o*a));return s>Math.PI/2?i:u>Math.PI/2?o:Math.sin(s)*i};t.default=o},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(238),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(35))},function(e,t,n){e.exports=r;var i=n(107).EventEmitter;function r(){i.call(this)}n(41)(r,i),r.Readable=n(108),r.Writable=n(244),r.Duplex=n(245),r.Transform=n(246),r.PassThrough=n(247),r.Stream=r,r.prototype.pipe=function(e,t){var n=this;function r(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",r),e.on("drain",o),e._isStdio||t&&!1===t.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,e.end())}function u(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(c(),0===i.listenerCount(this,"error"))throw e}function c(){n.removeListener("data",r),e.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",l),e.removeListener("error",l),n.removeListener("end",c),n.removeListener("close",c),e.removeListener("close",c)}return n.on("error",l),e.on("error",l),n.on("end",c),n.on("close",c),e.on("close",c),e.emit("pipe",n),e}},function(e,t,n){"use strict";(function(t,i){var r=n(71);e.exports=C;var o,a=n(149);C.ReadableState=v;n(107).EventEmitter;var s=function(e,t){return e.listeners(t).length},u=n(153),l=n(72).Buffer,c=t.Uint8Array||function(){};var m=n(48);m.inherits=n(41);var d=n(239),h=void 0;h=d&&d.debuglog?d.debuglog("stream"):function(){};var p,f=n(240),g=n(154);m.inherits(C,u);var y=["error","close","destroy","pause","resume"];function v(e,t){e=e||{};var i=t instanceof(o=o||n(36));this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:i&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new f,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=n(155).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function C(e){if(o=o||n(36),!(this instanceof C))return new C(e);this._readableState=new v(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function S(e,t,n,i,r){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,M(e)}(e,a)):(r||(o=function(e,t){var n;i=t,l.isBuffer(i)||i instanceof c||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var i;return n}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===l.prototype||(t=function(e){return l.from(e)}(t)),i?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):b(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?b(e,a,t,!1):D(e,a)):b(e,a,t,!1))):i||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function b(e,t,n,i){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&M(e)),D(e,t)}Object.defineProperty(C.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),C.prototype.destroy=g.destroy,C.prototype._undestroy=g.undestroy,C.prototype._destroy=function(e,t){this.push(null),t(e)},C.prototype.push=function(e,t){var n,i=this._readableState;return i.objectMode?n=!0:"string"==typeof e&&((t=t||i.defaultEncoding)!==i.encoding&&(e=l.from(e,t),t=""),n=!0),S(this,e,t,!1,n)},C.prototype.unshift=function(e){return S(this,e,null,!0,!1)},C.prototype.isPaused=function(){return!1===this._readableState.flowing},C.prototype.setEncoding=function(e){return p||(p=n(155).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var w=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=w?e=w:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function M(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(h("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?r.nextTick(O,e):O(e))}function O(e){h("emit readable"),e.emit("readable"),E(e)}function D(e,t){t.readingMore||(t.readingMore=!0,r.nextTick(P,e,t))}function P(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(h("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function T(e){h("readable nexttick read 0"),e.read(0)}function _(e,t){t.reading||(h("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),E(e),t.flowing&&!t.reading&&e.read(0)}function E(e){var t=e._readableState;for(h("flow",t.flowing);t.flowing&&null!==e.read(););}function N(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var i;e<t.head.data.length?(i=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):i=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,i=1,r=n.data;e-=r.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(a===o.length?r+=o:r+=o.slice(0,e),0===(e-=a)){a===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++i}return t.length-=i,r}(e,t):function(e,t){var n=l.allocUnsafe(e),i=t.head,r=1;i.data.copy(n),e-=i.data.length;for(;i=i.next;){var o=i.data,a=e>o.length?o.length:e;if(o.copy(n,n.length-e,0,a),0===(e-=a)){a===o.length?(++r,i.next?t.head=i.next:t.head=t.tail=null):(t.head=i,i.data=o.slice(a));break}++r}return t.length-=r,n}(e,t);return i}(e,t.buffer,t.decoder),n);var n}function F(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,r.nextTick(I,t,e))}function I(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function A(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}C.prototype.read=function(e){h("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return h("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?F(this):M(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&F(this),null;var i,r=t.needReadable;return h("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&h("length less than watermark",r=!0),t.ended||t.reading?h("reading or ended",r=!1):r&&(h("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(n,t))),null===(i=e>0?N(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&F(this)),null!==i&&this.emit("data",i),i},C.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},C.prototype.pipe=function(e,t){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,h("pipe count=%d opts=%j",o.pipesCount,t);var u=(!t||!1!==t.end)&&e!==i.stdout&&e!==i.stderr?c:C;function l(t,i){h("onunpipe"),t===n&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,h("cleanup"),e.removeListener("close",y),e.removeListener("finish",v),e.removeListener("drain",m),e.removeListener("error",g),e.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",C),n.removeListener("data",f),d=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||m())}function c(){h("onend"),e.end()}o.endEmitted?r.nextTick(u):n.once("end",u),e.on("unpipe",l);var m=function(e){return function(){var t=e._readableState;h("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,E(e))}}(n);e.on("drain",m);var d=!1;var p=!1;function f(t){h("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==A(o.pipes,e))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function g(t){h("onerror",t),C(),e.removeListener("error",g),0===s(e,"error")&&e.emit("error",t)}function y(){e.removeListener("finish",v),C()}function v(){h("onfinish"),e.removeListener("close",y),C()}function C(){h("unpipe"),n.unpipe(e)}return n.on("data",f),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",g),e.once("close",y),e.once("finish",v),e.emit("pipe",n),o.flowing||(h("pipe resume"),n.resume()),e},C.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var i=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<r;o++)i[o].emit("unpipe",this,n);return this}var a=A(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},C.prototype.on=function(e,t){var n=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var i=this._readableState;i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.emittedReadable=!1,i.reading?i.length&&M(this):r.nextTick(T,this))}return n},C.prototype.addListener=C.prototype.on,C.prototype.resume=function(){var e=this._readableState;return e.flowing||(h("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,r.nextTick(_,e,t))}(this,e)),this},C.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},C.prototype.wrap=function(e){var t=this,n=this._readableState,i=!1;for(var r in e.on("end",function(){if(h("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(r){(h("wrapped data"),n.decoder&&(r=n.decoder.write(r)),n.objectMode&&null==r)||(n.objectMode||r&&r.length)&&(t.push(r)||(i=!0,e.pause()))}),e)void 0===this[r]&&"function"==typeof e[r]&&(this[r]=function(t){return function(){return e[t].apply(e,arguments)}}(r));for(var o=0;o<y.length;o++)e.on(y[o],this.emit.bind(this,y[o]));return this._read=function(t){h("wrapped _read",t),i&&(i=!1,e.resume())},this},Object.defineProperty(C.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),C._fromList=N}).call(this,n(35),n(47))},function(e,t,n){e.exports=n(107).EventEmitter},function(e,t,n){"use strict";var i=n(71);function r(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||i.nextTick(r,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(i.nextTick(r,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){"use strict";var i=n(72).Buffer,r=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(i.isEncoding===r||!r(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=l,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=c,this.end=m,t=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var i=n.charCodeAt(n.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function c(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function m(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function h(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var n=function(e,t,n){var i=t.length-1;if(i<n)return 0;var r=a(t[i]);if(r>=0)return r>0&&(e.lastNeed=r-1),r;if(--i<n||-2===r)return 0;if((r=a(t[i]))>=0)return r>0&&(e.lastNeed=r-2),r;if(--i<n||-2===r)return 0;if((r=a(t[i]))>=0)return r>0&&(2===r?r=0:e.lastNeed=r-3),r;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var i=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",t,i)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";e.exports=a;var i=n(36),r=n(48);function o(e,t){var n=this._transformState;n.transforming=!1;var i=n.writecb;if(!i)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),i(e);var r=this._readableState;r.reading=!1,(r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);i.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){u(e,t,n)}):u(this,null,null)}function u(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}r.inherits=n(41),r.inherits(a,i),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,n){var i=this._transformState;if(i.writecb=n,i.writechunk=e,i.writeencoding=t,!i.transforming){var r=this._readableState;(i.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var n=this;i.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1);t.ConnectionFailSafeBehaviorDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.ConnectionFailSafeBehaviorDroneCommand,this.connectionFailSafeBehavior=r.DroneConnectionFailSafeBehavior.Hover}applyJSON(e){return!(!super.applyJSON(e)||!e.connectionFailSafeBehavior||(this.connectionFailSafeBehavior=e.connectionFailSafeBehavior,0))}get subtitle(){return o.Format.string(`DroneConnectionFailSafeBehavior.values.${this.connectionFailSafeBehavior}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(2),a=n(3);t.LightbridgeChannelDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.LightbridgeChannelDroneCommand,this.lightbridgeChannel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.lightbridgeChannel=o.Common.parseInt(e.lightbridgeChannel,0),!0)}get subtitle(){return`${a.Strings.LightbridgeChannelDroneCommand.values.lightbridgeChannel} ${this.lightbridgeChannel}`}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1);t.LightbridgeChannelSelectionModeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.LightbridgeChannelSelectionModeDroneCommand,this.lightbridgeChannelSelectionMode=r.DroneLightbridgeChannelSelectionMode.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.lightbridgeChannelSelectionMode||(this.lightbridgeChannelSelectionMode=e.lightbridgeChannelSelectionMode,0))}get subtitle(){return o.Format.string(`DroneLightbridgeChannelSelectionMode.values.${this.lightbridgeChannelSelectionMode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1);t.LightbridgeFrequencyBandDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.LightbridgeFrequencyBandDroneCommand,this.lightbridgeFrequencyBand=r.DroneLightbridgeFrequencyBand._2dot4ghz}applyJSON(e){return!(!super.applyJSON(e)||!e.lightbridgeFrequencyBand||(this.lightbridgeFrequencyBand=e.lightbridgeFrequencyBand,0))}get subtitle(){return o.Format.string(`DroneLightbridgeFrequencyBand.values.${this.lightbridgeFrequencyBand}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1),a=n(2),s=n(9);t.LowBatteryWarningThresholdDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.LowBatteryWarningThresholdDroneCommand,this.lowBatteryWarningThreshold=s.Constants.LowBatteryWarningThresholdDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.lowBatteryWarningThreshold=a.Common.parseFloat(e.lowBatteryWarningThreshold,s.Constants.LowBatteryWarningThresholdDroneCommandValue),!0)}get subtitle(){return o.Format.percent(this.lowBatteryWarningThreshold).toString()}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1),a=n(2),s=n(9);t.MaxAltitudeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.MaxAltitudeDroneCommand,this.maxAltitude=s.Constants.MaxAltitudeDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.maxAltitude=a.Common.parseFloat(e.maxAltitude,s.Constants.MaxAltitudeDroneCommandValue),!0)}get subtitle(){return o.Format.altitude(this.maxAltitude).toString()}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1),a=n(2),s=n(9);t.MaxDistanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.MaxDistanceDroneCommand,this.maxDistance=s.Constants.MaxDistanceDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.maxDistance=a.Common.parseFloat(e.maxDistance,s.Constants.MaxDistanceDroneCommandValue),!0)}get subtitle(){return o.Format.altitude(this.maxDistance).toString()}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(2),a=n(3);t.OcuSyncChannelDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.OcuSyncChannelDroneCommand,this.ocuSyncChannel=0}applyJSON(e){return!!super.applyJSON(e)&&(this.ocuSyncChannel=o.Common.parseInt(e.ocuSyncChannel,0),!0)}get subtitle(){return`${a.Strings.OcuSyncChannelDroneCommand.values.ocuSyncChannel} ${this.ocuSyncChannel}`}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1);t.OcuSyncChannelSelectionModeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.OcuSyncChannelSelectionModeDroneCommand,this.ocuSyncChannelSelectionMode=r.DroneOcuSyncChannelSelectionMode.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.ocuSyncChannelSelectionMode||(this.ocuSyncChannelSelectionMode=e.ocuSyncChannelSelectionMode,0))}get subtitle(){return o.Format.string(`DroneOcuSyncChannelSelectionMode.values.${this.ocuSyncChannelSelectionMode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1);t.OcuSyncFrequencyBandDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.OcuSyncFrequencyBandDroneCommand,this.ocuSyncFrequencyBand=r.DroneOcuSyncFrequencyBand.Dual}applyJSON(e){return!(!super.applyJSON(e)||!e.ocuSyncFrequencyBand||(this.ocuSyncFrequencyBand=e.ocuSyncFrequencyBand,0))}get subtitle(){return o.Format.string(`DroneOcuSyncFrequencyBand.values.${this.ocuSyncFrequencyBand}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13),r=n(0),o=n(1),a=n(2),s=n(9);t.ReturnHomeAltitudeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=r.TypeName.ReturnHomeAltitudeDroneCommand,this.returnHomeAltitude=s.Constants.ReturnHomeAltitudeDroneCommandValue}applyJSON(e){return!!super.applyJSON(e)&&(this.returnHomeAltitude=a.Common.parseFloat(e.returnHomeAltitude,s.Constants.ReturnHomeAltitudeDroneCommandValue),!0)}get subtitle(){return o.Format.altitude(this.returnHomeAltitude).toString()}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.AEBCountCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.AEBCountCameraCommand,this.aebCount=r.CameraAEBCount._3}applyJSON(e){return!(!super.applyJSON(e)||!e.aebCount||(this.aebCount=e.aebCount,0))}get subtitle(){return o.Format.string(`CameraAEBCount.values.${this.aebCount}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ApertureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ApertureCameraCommand,this.aperture=r.CameraAperture.F5dot6}applyJSON(e){return!(!super.applyJSON(e)||!e.aperture||(this.aperture=e.aperture,0))}get subtitle(){return o.Format.string(`CameraAperture.values.${this.aperture}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(3);t.AutoExposureLockCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.AutoExposureLockCameraCommand,this.enabled=!0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.enabled||(this.enabled=!!e.enabled,0))}get subtitle(){return this.enabled?o.Strings.Common.enabled:o.Strings.Common.disabled}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ColorCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ColorCameraCommand,this.color=r.CameraColor.None}applyJSON(e){return!(!super.applyJSON(e)||!e.color||(this.color=e.color,0))}get subtitle(){return o.Format.string(`CameraColor.values.${this.color}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ContrastCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ContrastCameraCommand,this.contrast=0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.contrast||(this.contrast=e.contrast,0))}get subtitle(){return o.Format.integer(this.contrast)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ExposureCompensationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ExposureCompensationCameraCommand,this.exposureCompensation=r.CameraExposureCompensation.N00}applyJSON(e){return!(!super.applyJSON(e)||!e.exposureCompensation||(this.exposureCompensation=e.exposureCompensation,0))}get subtitle(){return o.Format.string(`CameraExposureCompensation.values.${this.exposureCompensation}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.FileIndexModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.FileIndexModeCameraCommand,this.fileIndexMode=r.CameraFileIndexMode.Sequence}applyJSON(e){return!(!super.applyJSON(e)||!e.fileIndexMode||(this.fileIndexMode=e.fileIndexMode,0))}get subtitle(){return o.Format.string(`CameraFileIndexMode.values.${this.fileIndexMode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.FocusModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.FocusModeCameraCommand,this.focusMode=r.CameraFocusMode.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.focusMode||(this.focusMode=e.focusMode,0))}get subtitle(){return o.Format.string(`CameraFocusMode.values.${this.focusMode}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ISOCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ISOCameraCommand,this.iso=r.CameraISO.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.iso||(this.iso=e.iso,0))}get subtitle(){return o.Format.string(`CameraISO.values.${this.iso}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.PhotoAspectRatioCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.PhotoAspectRatioCameraCommand,this.photoAspectRatio=r.CameraPhotoAspectRatio._4_3}applyJSON(e){return!(!super.applyJSON(e)||!e.photoAspectRatio||(this.photoAspectRatio=e.photoAspectRatio,0))}get subtitle(){return o.Format.string(`CameraPhotoAspectRatio.values.${this.photoAspectRatio}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.PhotoFileFormatCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.PhotoFileFormatCameraCommand,this.photoFileFormat=r.CameraPhotoFileFormat.JPEG}applyJSON(e){return!(!super.applyJSON(e)||!e.photoFileFormat||(this.photoFileFormat=e.photoFileFormat,0))}get subtitle(){return o.Format.string(`CameraPhotoFileFormat.values.${this.photoFileFormat}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.SaturationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.SaturationCameraCommand,this.saturation=0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.saturation||(this.saturation=e.saturation,0))}get subtitle(){return o.Format.integer(this.saturation)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.SharpnessCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.SharpnessCameraCommand,this.sharpness=0}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.sharpness||(this.sharpness=e.sharpness,0))}get subtitle(){return o.Format.integer(this.sharpness)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.ShutterSpeedCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.ShutterSpeedCameraCommand,this.shutterSpeed=r.CameraShutterSpeed._1_800}applyJSON(e){return!(!super.applyJSON(e)||!e.shutterSpeed||(this.shutterSpeed=e.shutterSpeed,0))}get subtitle(){return o.Format.string(`CameraShutterSpeed.values.${this.shutterSpeed}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.StorageLocationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.StorageLocationCameraCommand,this.storageLocation=r.CameraStorageLocation.SDCard}applyJSON(e){return!(!super.applyJSON(e)||!e.storageLocation||(this.storageLocation=e.storageLocation,0))}get subtitle(){return o.Format.string(`CameraStorageLocation.values.${this.storageLocation}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.VideoFileCompressionStandardCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.VideoFileCompressionStandardCameraCommand,this.videoFileCompressionStandard=r.CameraVideoFileCompressionStandard.H264}applyJSON(e){return!(!super.applyJSON(e)||!e.videoFileCompressionStandard||(this.videoFileCompressionStandard=e.videoFileCompressionStandard,0))}get subtitle(){return o.Format.string(`CameraVideoFileCompressionStandard.values.${this.videoFileCompressionStandard}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.VideoFileFormatCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.VideoFileFormatCameraCommand,this.videoFileFormat=r.CameraVideoFileFormat.MP4}applyJSON(e){return!(!super.applyJSON(e)||!e.videoFileFormat||(this.videoFileFormat=e.videoFileFormat,0))}get subtitle(){return o.Format.string(`CameraVideoFileFormat.values.${this.videoFileFormat}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1),a=n(2);t.VideoResolutionFrameRateCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.VideoResolutionFrameRateCameraCommand,this.videoResolution=r.CameraVideoResolution._3840x2160,this.videoFrameRate=r.CameraVideoFrameRate._29dot970,this.videoFieldOfView=r.CameraVideoFieldOfView.Default}applyJSON(e){return!!(super.applyJSON(e)&&e.videoResolution&&e.videoFrameRate)&&(this.videoResolution=e.videoResolution,this.videoFrameRate=e.videoFrameRate,this.videoFieldOfView=e.videoFieldOfView||r.CameraVideoFieldOfView.Default,!0)}get subtitle(){const e=`${o.Format.string(`CameraVideoResolution.values.${this.videoResolution}.name`)}@${o.Format.string(`CameraVideoFrameRate.values.${this.videoFrameRate}.name`)}`;return this.videoFieldOfView!==r.CameraVideoFieldOfView.Default?a.Common.joinNotEmpty([e,o.Format.string(`CameraVideoFieldOfView.values.${this.videoFieldOfView}.name`)]):e}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.VideoStandardCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.VideoStandardCameraCommand,this.videoStandard=r.CameraVideoStandard.NTSC}applyJSON(e){return!(!super.applyJSON(e)||!e.videoStandard||(this.videoStandard=e.videoStandard,0))}get subtitle(){return o.Format.string(`CameraVideoStandard.values.${this.videoStandard}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}get requiredMode(){return r.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.WhiteBalanceCustomCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.WhiteBalanceCustomCameraCommand,this.whiteBalanceCustom=5600}applyJSON(e){return!(!super.applyJSON(e)||void 0===e.whiteBalanceCustom||(this.whiteBalanceCustom=e.whiteBalanceCustom,0))}get subtitle(){return o.Format.absoluteTemperature(this.whiteBalanceCustom)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),r=n(0),o=n(1);t.WhiteBalancePresetCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=r.TypeName.WhiteBalancePresetCameraCommand,this.whiteBalancePreset=r.CameraWhiteBalancePreset.Auto}applyJSON(e){return!(!super.applyJSON(e)||!e.whiteBalancePreset||(this.whiteBalancePreset=e.whiteBalancePreset,0))}get subtitle(){return o.Format.string(`CameraWhiteBalancePreset.values.${this.whiteBalancePreset}.name`)}get reengagementTiming(){return r.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(9);t.ComponentEstimate=class extends i.Identifiable{constructor(e,t=[],n=0){super(e.id),this.timeConcurrent=!1,this.level=0,this.children=[],this.component=e,this.droneSpatials=t,this.time=n}get list(){const e=[];return this.children.forEach(t=>{e.push(...t.list)}),e.push(this),e}startWithinTolerance(e,t=r.Constants.ComponentEstimateTolerance){let n=this.firstDroneSpatial;return!!n&&n.coordinate.distance(e.coordinate)<t&&Math.abs(n.altitude.value-e.altitude.value)<t}get firstDroneSpatial(){for(let e of this.children){let t=e.firstDroneSpatial;if(t)return t}return this.droneSpatials.length>0?this.droneSpatials[0]:null}get allDroneSpatials(){const e=[];return this.list.forEach(t=>{e.push(...t.droneSpatials)}),e}segments(e){return this.list.filter(t=>t.droneSpatials.length>0&&(!e||e(t)))}get totalTime(){let e=this.time;return this.children.forEach(t=>{t.timeConcurrent||(e+=t.totalTime)}),e}findDescendant(e){if(this.id===e)return this;for(let t=0;t<this.children.length;t++){const n=this.children[t].findDescendant(e);if(n)return n}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(92),o=n(9),a=n(46),s=n(57),u=n(3),l=n(7),c=n(5),m=n(2),d=n(1),h=n(22),p=n(56),f=n(23),g=n(27),y=n(19),v=n(87),C=n(15),S=n(16),b=n(117),w=n(43),x=n(44),M=n(53),O=n(50),D=n(51),P=n(74);t.MapComponent=class extends r.ApproachableComponent{constructor(){super(...arguments),this.type=i.TypeName.MapComponent,this.cameraSpecification=c.Serialization.clone(o.Constants.MapCameraSpecification),this.direction=0,this.cameraMode=i.CameraMode.Photo,this.minCaptureInterval=o.Constants.MapComponentMinCaptureInterval,this.targetDistance=null,this.pattern=i.MapPattern.Normal,this.frontOverlap=o.Constants.MapComponentFrontOverlap,this.sideOverlap=o.Constants.MapComponentSideOverlap,this.gimbalOrientation=new a.Orientation3(o.Constants.MapComponentGimbalPitch),this.boundaryPoints=[]}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.pattern)return!1;if(this.direction=m.Common.parseFloat(e.direction),this.cameraMode=e.cameraMode||i.CameraMode.Photo,this.minCaptureInterval=m.Common.parseFloat(e.minCaptureInterval,o.Constants.MapComponentMinCaptureInterval),this.targetDistance=m.Common.parseFloat(e.targetDistance,null),this.pattern=e.pattern,this.frontOverlap=m.Common.parseFloat(e.frontOverlap,o.Constants.MapComponentFrontOverlap),this.sideOverlap=m.Common.parseFloat(e.sideOverlap,o.Constants.MapComponentSideOverlap),this.boundaryPoints=[],Array.isArray(e.boundaryPoints))for(let t of e.boundaryPoints){const e=c.Serialization.deserialize(t);if(!(e&&e instanceof s.MapComponentBoundaryPoint))return!1;this.boundaryPoints.push(e)}return this.cameraSpecification.applyJSON(e.cameraSpecification)&&this.gimbalOrientation.applyJSON(e.gimbalOrientation)}get subtitle(){return m.Common.joinNotEmpty([this.approachComponent.altitudeRange.altitude.toString(),this.pattern===i.MapPattern.Normal?"":d.Format.string(`MapPattern.values.${this.pattern}.name`),Math.abs(this.gimbalOrientation.pitch-h.Convert.degreesToRadians(-90))<h.Convert.degreesToRadians(1)?"":d.Format.angle(this.gimbalOrientation.pitch,!1).toString(),d.Format.percent(this.frontOverlap).toString(),d.Format.percent(this.sideOverlap).toString()])}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.cameraMode=i.CameraMode.Unknown,t}get referenceOffsets(){return super.referenceOffsets.concat(this.boundaryPointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}node(e=null){const t=super.node(e),n=new s.MapComponentBoundaryPointsNode(t);return this.boundaryPoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${u.Strings.Common.new} ${u.Strings.MapComponentBoundaryPoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addBoundaryPoint(e,t)}}),t.children.push(n),t}centerCoordinate(e){return this.referenceCoordinate(e,l.Vector2.center(this.boundaryPointOffsets))}groundSampleDistance(e){let t=this.targetDistance;if(null===t&&(t=e.drone.convertAltitude(this.approachComponent.altitudeRange.altitude),this.gimbalOrientation.pitch>h.Convert.degreesToRadians(-89))){const e=Math.cos(Math.abs(h.Convert.degreesToRadians(-90)-this.gimbalOrientation.pitch));t=0===e?t:t/e}return t=Math.max(t,o.Constants.MapComponentMinimumTargetDistance),this.cameraSpecification.groundSampleDistance(t)}resetApproachDestinationOffset(e){const t=this.resolveDroneMotionLimits(e,this.droneMotionLimits),n=this.segments(e);if(n.length>0){const e=n[0],i=e.a.toVector2().subtract(e.b.toVector2());this.approachComponent.destinationOffset=e.a.toVector2().add(new l.Vector2(i.direction,S.Kinematic.d4(0,t.horizontal.velocity.max,t.horizontal.acceleration.max)*o.Constants.MapComponentBaseDistanceMultiplier*1.5))}}addBoundaryPoint(e,t=null,n=null){return null===n?this.boundaryPoints.push(e):this.boundaryPoints.splice(n,0,e),t&&this.resetApproachDestinationOffset(t),e}updateBoundaryPointCoordinate(e,t,n){const i=this.boundaryPoints[e].offset,r=this.referenceCoordinate(n).offset(t);this.boundaryPoints[e].offset=r;let o=this.boundarySegments,a=e,s=0;for(const t of o){if(s!==a&&s!==m.Common.modSafe(a+1,o.length)&&s!==m.Common.modSafe(a-1,o.length)&&null!==p.Line2.intersection(o[a],t))return void(this.boundaryPoints[e].offset=i);s++}a=m.Common.modSafe(e-1,o.length),s=0;for(const t of o){if(s!==a&&s!==m.Common.modSafe(a+1,o.length)&&s!==m.Common.modSafe(a-1,o.length)&&null!==p.Line2.intersection(o[a],t))return void(this.boundaryPoints[e].offset=i);s++}this.resetApproachDestinationOffset(n)}removeBoundaryPoint(e,t){return this.boundaryPoints=this.boundaryPoints.filter(t=>t!==e),t&&this.resetApproachDestinationOffset(t),e}get boundaryPointOffsets(){return this.boundaryPoints.map(e=>e.offset)}get boundarySegments(){return this.boundaryPoints.map((e,t)=>new p.Line2(e.offset.toPoint2(),this.boundaryPoints[(t+1)%this.boundaryPoints.length].offset.toPoint2()))}boundaryBoundingBox(e=0){return y.Point2.boundingBox(this.boundaryPointOffsets.map(e=>e.toPoint2()),this.direction+e,1.5)}boundaryPointCoordinates(e){return this.boundaryPointOffsets.map(t=>this.referenceCoordinate(e,t))}boundaryPointCoordinate(e,t){return this.referenceCoordinate(e,this.boundaryPoints[t].offset)}estimate(e,t){const n=super.estimate(e,t),i=this.model(e,!e.timeRequired);return i&&i.addToEstimate(n),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(i.TypeName.MapComponent,()=>{const n=this.model(e);if(n){const e=new T(n.firstSample,n.captureInterval);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==i.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(0===t.progress&&this.cameraMode!==i.CameraMode.Unknown){n.commandComponents.push(new M.CommandComponent(new x.StopCaptureCameraCommand));const e=new O.ModeCameraCommand;if(e.mode=this.cameraMode,n.commandComponents.push(new M.CommandComponent(e)),this.cameraMode===i.CameraMode.Photo){const e=new D.PhotoModeCameraCommand;e.photoMode=i.CameraPhotoMode.Interval,n.commandComponents.push(new M.CommandComponent(e));const t=new P.PhotoIntervalCameraCommand;t.photoInterval=n.captureInterval,n.commandComponents.push(new M.CommandComponent(t))}}const{engagement:r}=e,o=n.sampleLinked;n.incrementTime(r.timeSinceLastExecution);let a=[],s=n.sampleLinked;for(;s&&s!==o;)s.current.commandComponent&&a.push(s.current.commandComponent),s=s.previous;a.reverse().forEach(e=>{n.commandComponents.push(e)});const u=[];for(const t of n.commandComponents){const n=t.execute(e);if(n.status===i.ComponentExecutionStatus.Pending||n.status===i.ComponentExecutionStatus.Executing){if(u.push(t),t.exclusiveExecution)break}else if(n.status===i.ComponentExecutionStatus.Failed&&t.required)return n.failed(n.error,r.currentDatetime)}return n.sampleLinked.next||0!==u.length?(this.addVelocityCommandsFromModel(e,n),t.progress=n.progress,t):t.succeeded(r.currentDatetime)}model(e,t=!1){let n=this.segments(e);if(0===n.length)return null;this.pattern===i.MapPattern.Grid&&(n=n.concat(this.segments(e,Math.PI/2,m.Common.last(n).b)));const r=c.Serialization.clone(this.resolveDroneMotionLimits(e,this.droneMotionLimits));let a=this.minCaptureInterval;if(this.cameraMode===i.CameraMode.Photo){const t=this.groundSampleDistance(e).height*this.cameraSpecification.image.height*(1-this.frontOverlap);for(;;){const e=S.Kinematic.v4(t,a);if(e<r.horizontal.velocity.max){r.horizontal.velocity.max=e;break}a+=1}}let s=[],u=[];const d=[],h=S.Kinematic.d4(0,r.horizontal.velocity.max,r.horizontal.acceleration.max)*o.Constants.MapComponentBaseDistanceMultiplier;n.forEach(t=>{const n=t.a.toVector2(),r=t.b.toVector2(),o=r.subtract(n).direction,a=n.add(new l.Vector2(o+Math.PI,h)),c=r.add(new l.Vector2(o,h));d.push(a.toPoint2()),d.push(n.toPoint2()),d.push(r.toPoint2()),d.push(c.toPoint2()),this.cameraMode!==i.CameraMode.Unknown&&(s.push(this.referenceCoordinate(e,n)),u.push(this.referenceCoordinate(e,r)))});const p=C.Geometry.roundedCorners(d,h);if(t){const t=[];p.forEach(e=>{e.forEach(e=>{t.push(e.toVector2())})});let n=null;return t.forEach((t,i)=>{0===i&&(n=new v.LinkedValue(new E(this.approachComponent.destinationCoordinate(e).toGeoSpatial(),r,{},{}),n));const o=this.referenceCoordinate(e,t).toGeoSpatial();o.altitude.value=e.drone.convertAltitude(this.approachComponent.altitudeRange.altitude),n=new v.LinkedValue(new E(o,r,{},{}),n)}),new _(n,a)}const y=[];p.forEach((t,n)=>{const i=[];0===n&&i.push(this.approachComponent.destinationCoordinate(e)),t.forEach(t=>{i.push(this.referenceCoordinate(e,t.toVector2()))}),y.push(i)});const O=new b.Path(y).samplesForMaxDistance(o.Constants.MapComponentSampleDistance);if(!O||0===O.length)return null;let D=null;for(const t of O){const n=new f.GeoSpatial;n.coordinate=t.coordinate,n.altitude.value=e.drone.convertAltitude(this.approachComponent.altitudeRange.altitude),n.velocity.horizontal=new l.Vector2(t.direction,r.horizontal.velocity.max),n.orientation.yaw=n.velocity.horizontal.direction,n.orientation.yawReference=i.OrientationZReference.North,D=new v.LinkedValue(new E(n,r,{0:this.gimbalOrientation.asOptional()},{}),D)}if(g.DroneMotionComponentModel.updateSamplesContrainVelocities(D,o.Constants.MapComponentSampleDistance),D){let e=!0;s=s.reverse(),u=u.reverse();for(const t of D.list){if(0===s.length&&0===u.length)break;if(t.previous){const n=m.Common.last(e?s:u),i=t.current.droneSpatial.coordinate.distance(n);i<10*o.Constants.MapComponentSampleDistance&&i>t.previous.current.droneSpatial.coordinate.distance(n)&&(t.previous.current.commandComponent=new M.CommandComponent(e?new w.StartCaptureCameraCommand:new x.StopCaptureCameraCommand),e?s.pop():u.pop(),e=!e)}}}return new _(D,a)}segments(e,t=0,n=null){if(this.boundaryPoints.length<3)return[];const i=this.boundarySegments,r=this.boundaryBoundingBox(t),o=this.groundSampleDistance(e),a=r.bottomRight.toVector2().subtract(r.bottomLeft.toVector2()),s=Math.ceil(a.magnitude/(o.width*this.cameraSpecification.image.width*(1-this.sideOverlap))),u=a.magnitude/s,c=[];for(let e=0;e<s;e++){const t=new l.Vector2(a.direction,u*e+u/2),n=new p.Line2(r.bottomLeft.toVector2().add(t).toPoint2(),r.topLeft.toVector2().add(t).toPoint2()),o=[];i.forEach(e=>{const t=p.Line2.intersection(e,n);t&&o.push(t)});for(let e=0;e+1<o.length;e+=2)c.push(new p.Line2(o[e],o[e+1]))}const m=[];if(c.length>0){let e=n||c[0].b;for(;c.length>0;){c.sort((t,n)=>Math.min(e.distance(n.a),e.distance(n.b))-Math.min(e.distance(t.a),e.distance(t.b)));const t=c.pop();t&&(e.distance(t.a)<e.distance(t.b)?(m.push(new p.Line2(t.a,t.b)),e=t.b):(m.push(new p.Line2(t.b,t.a)),e=t.a))}}return m}};class T extends g.DroneMotionComponentModelData{constructor(e,t){super(e),this.commandComponents=[],this.captureInterval=t}}t.MapComponentModelData=T;class _ extends g.DroneMotionComponentModel{constructor(e,t){super(e),this.captureInterval=t}}t.MapComponentModel=_;class E extends g.DroneMotionComponentModelSample{constructor(){super(...arguments),this.commandComponent=null}}t.MapComponentModelSample=E},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(7),o=n(92),a=n(2),s=n(3),u=n(1),l=n(27),c=n(87),m=n(9),d=n(20),h=n(58),p=n(89),f=n(33),g=n(45),y=n(5),v=n(88),C=n(90);t.OrbitComponent=class extends o.ApproachableComponent{constructor(){super(...arguments),this.type=i.TypeName.OrbitComponent,this.centerOffset=new r.Vector2,this.direction=i.OrbitDirection.Clockwise,this.circumference=2*Math.PI,this.finalAltitude=null,this.finalRadius=null,this.droneOrientation=null,this.gimbalOrientations=null}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.direction)return!1;if(!this.centerOffset.applyJSON(e.centerOffset))return!1;if(this.direction=e.direction||this.direction,this.circumference=a.Common.parseFloat(e.circumference,2*Math.PI),this.finalAltitude=null,e.finalAltitude&&(this.finalAltitude=new f.Altitude,!this.finalAltitude.applyJSON(e.finalAltitude)))return!1;if(this.finalRadius=a.Common.parseFloat(e.finalRadius,null),e.droneOrientation){if(this.droneOrientation=new d.Orientation3Optional,!this.droneOrientation.applyJSON(e.droneOrientation))return!1}else this.droneOrientation=null;if(e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new d.Orientation3Optional;if(!n.applyJSON(e.gimbalOrientations[t]))return!1;this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null;return!0}get subtitle(){return a.Common.joinNotEmpty([this.approachComponent.altitudeRange.altitude.toString(),s.Strings.formatString(s.Strings.OrbitComponent.subtitle,u.Format.angle(this.circumference,!1).toString(),u.Format.string(`OrbitDirection.values.${this.direction}.name`),u.Format.distance(this.radius).toString())])}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.droneOrientation=new d.Orientation3Optional,t.droneOrientation.z=0,t.droneOrientation.zReference=i.OrientationZReference.Path,e}get referenceOffsets(){return[this.centerOffset].concat(super.referenceOffsets)}get radius(){return Math.abs(this.approachComponent.destinationOffset.subtract(this.centerOffset).magnitude)}set radius(e){const t=this.approachComponent.destinationOffset.subtract(this.centerOffset);t.magnitude=e,this.approachComponent.destinationOffset=this.centerOffset.add(t)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}centerCoordinate(e){return this.referenceCoordinate(e,this.centerOffset)}estimate(e,t){const n=super.estimate(e,t),i=this.model(e,!e.timeRequired);return i&&i.addToEstimate(n),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(i.TypeName.OrbitComponent,()=>{const n=this.model(e);if(n){const e=new l.DroneMotionComponentModelData(n.firstSample);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==i.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;const{engagement:r}=e;return n.incrementTime(r.timeSinceLastExecution),n.sampleLinked.next?(this.addVelocityCommandsFromModel(e,n),t.progress=n.progress,t):t.succeeded(r.currentDatetime)}model(e,t=!1){const n=this.approachComponent.destinationCoordinate(e),o=this.centerCoordinate(e),a=this.resolveDroneMotionLimits(e,this.droneMotionLimits);let s=null;const u=this.direction===i.OrbitDirection.Clockwise?1:-1,f=o.offset(n),S=f.magnitude,b=Math.max(1,Math.ceil(this.circumference*f.magnitude/m.Constants.OrbitComponentSampleDistance));for(let n=0;n<=b;n++){let m={};f.direction+=u*this.circumference*(1/b),this.finalRadius&&(f.magnitude=g.Interpolation.linear(S,this.finalRadius,n/b));const w=o.geoCoordinate(f).toGeoSpatial();let x=this.approachComponent.altitudeRange.altitude;if(this.finalAltitude&&(x=this.approachComponent.altitudeRange.altitude.interpolate(this.finalAltitude,(e,t)=>g.Interpolation.linear(e,t,n/b))),w.altitude.value=e.drone.convertAltitude(x),!t){w.velocity.horizontal=new r.Vector2(f.direction+u*(Math.PI/2),a.horizontal.velocity.max);const e=w.velocity.horizontal.direction,t=new v.OrientationReferenceSources(new C.OrientationXReferenceSources,new p.OrientationZReferenceSources(e,e,e));if(s&&(t.x.path=h.Gimbal.pitch(w.coordinate.distance(s.current.droneSpatial.coordinate),s.current.droneSpatial.altitude.value-w.altitude.value)),this.droneOrientation?(w.orientation.apply(this.droneOrientation),w.orientation.convertReferences(t)):(w.orientation.yaw=w.coordinate.bearing(o),w.orientation.yawReference=i.OrientationZReference.North),this.gimbalOrientations)m=this.gimbalOrientations;else{const e=new d.Orientation3Optional;e.pitch=h.Gimbal.pitch(f.magnitude,w.altitude.value),e.roll=0,e.yaw=w.orientation.yaw,e.yawReference=w.orientation.yawReference,m[0]=e}Object.keys(m).forEach(e=>{m[e]=y.Serialization.clone(m[e]),m[e].convertReferences(t)})}const M=new l.DroneMotionComponentModelSample(w,a,m,{});s=null===s?new c.LinkedValue(M):s.insertAfter(M)}return t||l.DroneMotionComponentModel.updateSamplesContrainVelocities(s,m.Constants.OrbitComponentSampleDistance),new l.DroneMotionComponentModel(s)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),r=n(5),o=n(0),a=n(15),s=n(92),u=n(3),l=n(1),c=n(2),m=n(59),d=n(9),h=n(60),p=n(117),f=n(193),g=n(20),y=n(27);t.PathComponent=class extends s.ApproachableComponent{constructor(){super(...arguments),this.type=o.TypeName.PathComponent,this.cornering=o.PathCornering.Intersect,this.cornerRadius=d.Constants.PathComponentCornerRadius,this.waypoints=[],this.markers=[]}applyJSON(e){if(!super.applyJSON(e)||e.type!==this.type||!e.cornering)return!1;if(this.cornering=e.cornering,this.cornerRadius=c.Common.parseFloat(e.cornerRadius,d.Constants.PathComponentCornerRadius),this.waypoints=[],Array.isArray(e.waypoints))for(let t of e.waypoints){const e=r.Serialization.deserialize(t);if(!(e&&e instanceof m.PathComponentWaypoint))return!1;this.waypoints.push(e)}if(this.markers=[],Array.isArray(e.markers))for(let t of e.markers){const e=r.Serialization.deserialize(t);if(!(e&&e instanceof h.PathComponentMarker))return!1;this.markers.push(e)}return!0}get subtitle(){return c.Common.joinNotEmpty([`${l.Format.integer(this.waypoints.length)} ${1===this.waypoints.length?u.Strings.PathComponentWaypoint.name:u.Strings.PathComponentWaypoint.multiple}`,0===this.markers.length?"":`${l.Format.integer(this.markers.length)} ${1===this.markers.length?u.Strings.PathComponentMarker.name:u.Strings.PathComponentMarker.multiple}`,0===this.pointsOfInterest.length?"":`${l.Format.integer(this.pointsOfInterest.length)} ${1===this.pointsOfInterest.length?u.Strings.PointOfInterest.name:u.Strings.PointOfInterest.multiple}`])||super.subtitle}get verification(){const e=super.verification;if(!e)return null;const t=e;return t.markers.forEach(e=>{if(e.pointOfInterestID=null,e.droneOrientation=null,e.gimbalOrientations=null,e.component){const t=e.component.verification;e.component=t||null}}),t}get pointsOfInterestEnabled(){return!0}get pointsOfInterestReferences(){return super.pointsOfInterestReferences.concat(this.markers.filter(e=>e.pointOfInterestID))}get waypointOffsets(){return this.waypoints.map(e=>e.offset)}get referenceOffsets(){return super.referenceOffsets.concat(this.waypointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}node(e=null){const t=super.node(e),n=new m.PathComponentWaypointsNode(t);this.waypoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${u.Strings.Common.new} ${u.Strings.PathComponentWaypoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addWaypoint(e,t)}}),t.children.push(n);const i=new h.PathComponentMarkersNode(t);return this.markers.forEach((e,t)=>{i.children.push(e.node(i,t))}),i.appends.push({title:`${u.Strings.Common.new} ${u.Strings.PathComponentMarker.name}`,tooltip:null,execute:e=>{this.addMarker(e)}}),t.children.push(i),t}centerCoordinate(e){return this.referenceCoordinate(e,i.Vector2.center(this.waypointOffsets.concat([this.approachComponent.destinationOffset])))}waypointCoordinate(e,t){return this.referenceCoordinate(e,this.waypoints[t].offset)}waypointCoordinates(e){return this.waypointOffsets.map(t=>this.referenceCoordinate(e,t))}addWaypoint(e,t=null){if(t&&this.markers.length>0){const n=this.markerCoordinates(t);if(n){this.waypoints.push(e);const i=this.path(t);return i&&(n.forEach((e,t)=>{this.markers[t].distance=i.nearestDistance(e)}),this.orderMarkers()),e}}return this.waypoints.push(e),e}markerCoordinates(e){const t=this.path(e);return t?t.samplesForDistances(this.markers.map(e=>e.distance)).map(e=>e.coordinate):null}addMarker(e){return this.markers.push(e),this.orderMarkers(),e}orderMarkers(){this.markers.sort((e,t)=>e.distance-t.distance)}path(e){const t=[this.approachComponent.destinationOffset].concat(this.waypointOffsets).map(e=>e.toPoint2());let n=null;switch(this.cornering){case o.PathCornering.Intersect:n=a.Geometry.cardinalSplinePoint2(t);break;case o.PathCornering.Rounded:n=a.Geometry.roundedCorners(t,[0].concat(this.waypoints.map(e=>e.cornerRadius||this.cornerRadius)).concat([0]))}return null!==n&&n.length>0?new p.Path(n.map(t=>t.map(t=>this.referenceCoordinate(e,t.toVector2()))).filter(e=>{for(const t of e)if(null===t)return!1;return!0})):null}estimate(e,t){const n=super.estimate(e,t);if(e.altitudeRequired||e.timeRequired){const t=this.model(e,!e.timeRequired);if(t){t.addToEstimate(n);let i=0;const r=t.firstSample.last.current.time;this.markers.forEach(o=>{if(o.component){let a=t.firstSample;for(;a.next&&o.distance>a.next.current.pathDistance;)a=a.next;const s=o.component.estimate(e,a.current.droneSpatial),u=r-a.current.time;s.time>u&&(i=Math.max(i,s.time-u)),s.timeConcurrent=!0,n.children.push()}}),i>0&&(n.time+=i)}}else{const t=this.path(e);t&&t.segments.length>0&&n.droneSpatials.push(...t.coordinates.map(e=>e.toGeoSpatial()))}return n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(o.TypeName.PathComponent,()=>{const n=this.model(e);if(n){const e=new y.DroneMotionComponentModelData(n.firstSample);return e.updateProgress(t.progress),e}return null})}engaging(e){super.engaging(e),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==o.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;const{engagement:i}=e;n.incrementTime(i.timeSinceLastExecution);const r=[];for(const a of this.markers)if((null===n.sampleLinked.next||a.distance<=n.sampleLinked.current.pathDistance)&&a.component){const n=a.component.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(r.push(a),a.component.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&a.component.required)return t.failed(n.error,i.currentDatetime)}return n.sampleLinked.next||0!==r.length?(this.addVelocityCommandsFromModel(e,n),t.progress=n.progress,t):t.succeeded(i.currentDatetime)}model(e,t=!1){const n=this.path(e);if(!n)return null;let i=new f.PathComponentModelParameterAltitude(this.approachComponent.altitudeRange.altitude),r=new f.PathComponentModelParameterMotionLimits6(this.resolveDroneMotionLimits(e));const a=new g.Orientation3Optional;a.yaw=0,a.yawReference=o.OrientationZReference.Path;let s=new f.PathComponentModelParameterOrientation3Optional(a),u={},l=null;return this.markers.forEach(t=>{t.altitude&&(i=new f.PathComponentModelParameterAltitude(t.altitude,t,i)),t.droneMotionLimits&&(r=new f.PathComponentModelParameterMotionLimits6(this.resolveDroneMotionLimits(e,t.droneMotionLimits),t,r)),t.droneOrientation&&(s=new f.PathComponentModelParameterOrientation3Optional(t.droneOrientation,t,s));const n=t.pointOfInterest(this.pointsOfInterest);if(n&&(l=new f.PathComponentModelParameterPointOfInterest(n,t,l)),t.gimbalOrientations)for(const e of Object.keys(t.gimbalOrientations))u[e]=new f.PathComponentModelParameterOrientation3Optional(t.gimbalOrientations[e],t,u[e])}),f.PathComponentModel.generate(e,new f.PathComponentModelParameters(this.reference,t?d.Constants.PathComponentModelSampleDistancePosition:d.Constants.PathComponentModelSampleDistance,n,e.drone.convertAltitude(this.approachComponent.altitudeRange.altitude),i,r,s,u,l),t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(87),r=n(20),o=n(62),a=n(89),s=n(23),u=n(5),l=n(27),c=n(0),m=n(45),d=n(2),h=n(7),p=n(58),f=n(88),g=n(65),y=n(90);class v extends l.DroneMotionComponentModel{static generate(e,t,n){const i=v.createSamples(e,t,n);return i?(n||(v.insertSamplesAltitudeChanges(i,t),l.DroneMotionComponentModel.updateSamplesContrainVelocities(i,t.maxSampleDistance)),new v(i)):null}static createSamples(e,t,n){let o=null;const l=t.path.samplesForMaxDistance(t.maxSampleDistance);return l&&0!==l.length?n?(l.forEach(n=>{t.advanceToDistance(n.distance);const r=new s.GeoSpatial;r.coordinate=n.coordinate,r.altitude.value=e.drone.convertAltitude(t.altitude.valueInterpolated(n.distance)),o=new i.LinkedValue(new C(n.distance,r,t.droneMotionLimits.current.value),o)}),o):(l.forEach(n=>{t.advanceToDistance(n.distance);const l=new s.GeoSpatial;l.coordinate=n.coordinate,l.altitude.value=e.drone.convertAltitude(t.altitude.valueInterpolated(n.distance)),l.velocity.horizontal=new h.Vector2(n.direction,t.droneMotionLimits.valueInterpolated(n.distance).horizontal.velocity.max);const m={},d=new f.OrientationReferenceSources(new y.OrientationXReferenceSources,new a.OrientationZReferenceSources(l.velocity.horizontal.direction,n.direction,n.direction));if(o&&(d.x.path=p.Gimbal.pitch(n.distance-o.current.pathDistance,o.current.droneSpatial.altitude.value-l.altitude.value)),t.pointOfInterest){const i=t.pointOfInterestInterpolates?t.pointOfInterest.valueInterpolated(n.distance,e.spatialSources,t.reference):t.pointOfInterest.current.value.referenceSpatial(e.spatialSources,t.reference);l.orientation.yaw=l.coordinate.bearing(i.coordinate),l.orientation.yawReference=c.OrientationZReference.North,d.z.heading=l.orientation.yaw;const o=new r.Orientation3Optional,a=l.coordinate.distance(i.coordinate),s=l.altitude.value-e.drone.convertAltitude(i.altitude);o.pitch=p.Gimbal.pitch(a,s),o.roll=0,o.yaw=l.orientation.yaw,o.yawReference=l.orientation.yawReference,m[0]=o}t.droneOrientation&&(t.droneOrientationInterpolates?l.orientation.apply(t.droneOrientation.valueInterpolated(n.distance,d)):(l.orientation.apply(t.droneOrientation.current.value),l.orientation.convertReferences(d)));for(const e of t.gimbalOrientations)t.gimbalOrientationInterpolates(e.channel)?m[e.channel]=e.orientation.valueInterpolated(n.distance,d):(m[e.channel]=u.Serialization.clone(e.orientation.current.value),m[e.channel].convertReferences(d));o=new i.LinkedValue(new C(n.distance,l,t.droneMotionLimits.current.value,m),o)}),o):null}static insertSamplesAltitudeChanges(e,t){let n=e.first;for(;n.next;){const e=n.next.current.droneSpatial.altitude.value-n.current.droneSpatial.altitude.value;if(Math.abs(e)>t.maxSampleDistance){const i=Math.ceil(Math.abs(e)/t.maxSampleDistance),r=n,o=n.next;for(let e=1;e<i;e++)n=n.insertAfter(r.current.interpolate(o.current,e/i));n=o}else n=n.next}const i=((n=e.first).current.droneSpatial.altitude.value<t.approachAltitude?1:-1)*t.maxSampleDistance;for(;Math.abs(n.current.droneSpatial.altitude.value-t.approachAltitude)>t.maxSampleDistance;)(n=n.insertBefore(u.Serialization.clone(n.current))).current.droneSpatial.altitude.value+=i,n.current.droneSpatial.velocity.horizontal=new h.Vector2}}t.PathComponentModel=v;class C extends l.DroneMotionComponentModelSample{constructor(e=0,t=new s.GeoSpatial,n=new o.MotionLimits6,i={},r={}){super(t,n,i,r),this.type=c.TypeName.PathComponentModelSample,this.pathDistance=e,this.droneMotionLimits=n}applyJSON(e){return!(!super.applyJSON(e)||e.type!==this.type)&&(!!this.droneMotionLimits.applyJSON(e.droneMotionLimits)&&(this.pathDistance=d.Common.parseFloat(e.pathDistance),!0))}interpolate(e,t,n){const i=super.interpolate(e,t,n);return new C(m.Interpolation.linear(this.pathDistance,e.pathDistance,t),i.droneSpatial,i.droneMotionLimits,i.gimbalOrientations,i.gimbalVelocities)}}t.PathComponentModelSample=C;class S{constructor(e,t=null){this.value=e,this.marker=t}get distance(){return this.marker?this.marker.distance:0}}t.PathComponentModelParameter=S;class b extends i.LinkedValue{constructor(e,t=null,n=null){super(new S(e,t),null!==t&&t.distance>0?n:null)}get nextMarker(){return this.next?this.next.current.marker:null}interpolationPercentForDistance(e){return this.next&&this.next.current.distance>this.current.distance?(e-this.current.distance)/(this.next.current.distance-this.current.distance):0}}t.PathComponentModelParameterLinked=b;t.PathComponentModelParameterAltitude=class extends b{valueInterpolated(e){if(this.next&&this.nextMarker){const t=this.nextMarker.interpolation;return this.current.value.interpolate(this.next.current.value,(n,i)=>t.interpolate(n,i,this.interpolationPercentForDistance(e)))}return this.current.value}};t.PathComponentModelParameterOrientation3Optional=class extends b{valueInterpolated(e,t){if(this.next&&this.nextMarker){const n=this.nextMarker.interpolation,i=this.interpolationPercentForDistance(e);return this.current.value.interpolate(this.next.current.value,t,new g.OrientationReferenceTargets,(e,t)=>n.interpolate(e,t,i))}return this.current.value}};t.PathComponentModelParameterMotionLimits6=class extends b{valueInterpolated(e){if(this.next&&this.nextMarker){const t=this.nextMarker.interpolation,n=this.interpolationPercentForDistance(e);return this.current.value.interpolate(this.next.current.value,(e,i)=>t.interpolate(e,i,n))}return this.current.value}};t.PathComponentModelParameterPointOfInterest=class extends b{valueInterpolated(e,t,n){const i=this.current.value.referenceSpatial(t,n);if(this.next&&this.nextMarker){const r=this.next.current.value.referenceSpatial(t,n),o=u.Serialization.clone(i),a=this.nextMarker.interpolation,s=this.interpolationPercentForDistance(e);return o.coordinate=i.coordinate.interpolate(r.coordinate,e=>a.interpolate(0,e,s)),o.altitude=o.altitude.interpolate(r.altitude,(e,t)=>a.interpolate(e,t,s)),o}return i}};t.PathComponentModelParameters=class{constructor(e,t,n,i,r,o,a,s,u){this._distance=0,this.reference=e,this.maxSampleDistance=t,this.path=n,this.approachAltitude=i,this._altitude=r,this._droneMotionLimits=o,this._droneOrientation=a,this._gimbalOrientations=s,this._pointOfInterest=u,this.resetToFirst()}resetToFirst(){this._distance=0,this._altitude=this._altitude.first,this._droneMotionLimits=this._droneMotionLimits.first,this._droneOrientation=this._droneOrientation.first;for(const e of Object.keys(this._gimbalOrientations))this._gimbalOrientations[e]=this._gimbalOrientations[e].first;return this._pointOfInterest&&(this._pointOfInterest=this._pointOfInterest.first),this}advanceToDistance(e){this._distance=e,this._altitude.next&&this._altitude.next.current.distance<=e&&(this._altitude=this._altitude.next),this._droneMotionLimits.next&&this._droneMotionLimits.next.current.distance<=e&&(this._droneMotionLimits=this._droneMotionLimits.next),this._droneOrientation.next&&this._droneOrientation.next.current.distance<=e&&(this._droneOrientation=this._droneOrientation.next);for(const t of Object.keys(this._gimbalOrientations)){const n=this._gimbalOrientations[t];n.next&&n.next.current.distance<=e&&(this._gimbalOrientations[t]=n.next)}return this._pointOfInterest&&this._pointOfInterest.next&&this._pointOfInterest.next.current.distance<=e&&(this._pointOfInterest=this._pointOfInterest.next),this}get distance(){return this._distance}get altitude(){return this._altitude}get droneMotionLimits(){return this._droneMotionLimits}get droneOrientation(){const e=this.pointOfInterest;return e&&this._droneOrientation.current.distance<=e.current.distance?null:this._droneOrientation}get droneOrientationInterpolates(){const e=this.pointOfInterestNext;return null!==this._droneOrientation.next&&(null===e||this._droneOrientation.next.current.distance<e.current.distance)}get gimbalOrientations(){const e=[];for(const t of Object.keys(this._gimbalOrientations)){const n=this.gimbalOrientation(parseInt(t));n&&e.push({channel:parseInt(t),orientation:n})}return e}gimbalOrientation(e){const t=this._gimbalOrientations[e];if(this.distance<t.current.distance)return null;if(0===e){const e=this.pointOfInterest;if(e&&t&&t.current.distance<=e.current.distance)return null}return t}gimbalOrientationInterpolates(e){const t=this._gimbalOrientations[e];if(t&&t.next){if(0===e){const e=this.pointOfInterestNext;return null===e||t.next.current.distance<e.current.distance}return!0}return!1}get orientationDistanceCurrent(){const e=this._droneOrientation.current.distance,t=this._gimbalOrientations[0];return t&&t.current.distance<e?t.current.distance:e}get orientationDistanceNext(){let e=null;this._droneOrientation.next&&(e=this._droneOrientation.next.current.distance);const t=this._gimbalOrientations[0];return t&&t.next&&(e=null===e?t.next.current.distance:Math.min(e,t.next.current.distance)),e}get pointOfInterest(){return this._pointOfInterest&&this._distance>=this._pointOfInterest.current.distance&&this._pointOfInterest.current.distance>=this.orientationDistanceCurrent?this._pointOfInterest:null}get pointOfInterestInterpolates(){return null!==this.pointOfInterestNext}get pointOfInterestNext(){if(this._pointOfInterest&&this._pointOfInterest.next){const e=this.orientationDistanceNext;if(null===e||this._pointOfInterest.next.current.distance<e)return this._pointOfInterest}return null}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))(function(r,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,s)}u((i=i.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const r=n(40),o=n(38),a=n(2),s=n(42),u=n(61),l=n(0),c=n(9),m=n(4),d=n(25),h=n(52),p=n(13),f=n(50),g=n(51),y=n(110),v=n(49),C=n(75),S=n(76),b=n(43),w=n(44),x=n(12),M=n(77),O=n(11),D=n(3),P=n(37),T=n(21),_=n(15),E=n(74);t.Simulation=class{constructor(e=new o.GeoCoordinate,t){this.updateInterval=c.Constants.SimulationUpdateInterval,this.missionExecuteIntervalTarget=c.Constants.MissionExecuteIntervalTarget,this.preventThreadStarvation=!0,this.droneMotionLimits=c.Constants.DroneMotionLimits.Generic(),this.rate=1,this.started=null,this.millisSinceStart=0,this.mission=null,this.timeline=null,this.currentCameraCapture=null,this.executionListeners=[],this.user=new u.User,this.device=new P.Device,this.device.spatial.coordinate=e,this.drone=new r.Drone,this.drone.takeoffCoordinate=e,this.drone.spatial.coordinate=e,t&&this.executionListeners.push(t)}get currentDatetime(){return new x.Datetime(this.started?new Date(this.started.value.getTime()+this.millisSinceStart):new Date)}get engaged(){return null!==this.mission&&this.mission.engaged&&null===this.mission.disengagement}start(){this.started||(this.millisSinceStart=0,this.started=this.currentDatetime,this.execute())}loadMission(e,t=null){this.engaged||(this.mission=e,this.timeline=t,this.currentCameraCapture=null)}addExecutionListener(e){this.executionListeners.push(e)}engage(e,t=null){this.start(),this.engaged||(e&&this.loadMission(e,t),this.mission&&this.mission.engage(this.user,this.device,this.drone,this.currentDatetime))}disengage(e){this.engaged&&this.mission&&this.mission.disengage(this.drone,e)}stop(){this.disengage(new O.Message(D.Strings.Simulation.messages.disengageStop)),this.started=null}execute(){return i(this,void 0,void 0,function*(){let e=new s.VelocityDroneCommand,t={},n=[],i={},r={},o=0;for(;this.started;){const u=this.currentDatetime,f=(new Date).getTime(),g=u.elapsedTime(this.drone.spatial.updated);if(g>=this.updateInterval){if(this.drone.spatial.velocity=s.VelocityDroneCommand.boundedVelocity(this.drone.spatial.velocity,e.velocity,g,this.droneMotionLimits),this.drone.spatial.applyVelocity(g),null!=e.heading){const t=_.Geometry.angleDifferenceSigned(e.heading,this.drone.spatial.orientation.z),n=this.droneMotionLimits.rotational.velocity.max*this.missionExecuteIntervalTarget;Math.abs(t)>n?this.drone.spatial.orientation.z+=a.Common.matchSign(n,t):this.drone.spatial.orientation.z=e.heading}this.drone.spatial.updated.value=u.value,n=this.processCommands(u,n);for(let e of Object.keys(i))i[e]=this.processCommands(u,i[e]);for(let e of Object.keys(t)){const n=this.drone.gimbal(parseInt(e)),i=t[e];n.velocity=M.VelocityGimbalCommand.boundedVelocity(n.velocity,i.velocity,g,c.Constants.GimbalMotionLimits),n.orientation.applyVelocity(n.velocity,g),n.settings.mode===l.GimbalMode.YawFollow&&(n.velocity.yaw=0,n.orientation.yaw=this.drone.spatial.orientation.yaw),n.updated.value=u.value}for(let e of Object.keys(r))r[e]=this.processCommands(u,r[e])}if(e=new s.VelocityDroneCommand,t={},this.mission&&this.engaged)switch(this.mission.execute(this.user,this.device,this.drone,this.timeline,u).status){case l.ComponentExecutionStatus.Pending:case l.ComponentExecutionStatus.Executing:this.drone.statelessCommands.forEach(n=>{n instanceof s.VelocityDroneCommand?e=n:n instanceof M.VelocityGimbalCommand&&(t[n.channel]=n)}),this.drone.statefulCommands.forEach(e=>{const t=this.drone.commandExecutionState(e.id);t&&t.status===l.CommandExecutionStatus.Pending&&(e instanceof p.DroneCommand?(t.update(l.CommandExecutionStatus.Queued,null,u),n.push(e)):e instanceof m.CameraCommand?(i[e.channel]||(i[e.channel]=[]),t.update(l.CommandExecutionStatus.Queued,null,u),i[e.channel].push(e)):e instanceof h.GimbalCommand&&(r[e.channel]||(r[e.channel]=[]),t.update(l.CommandExecutionStatus.Queued,null,u),r[e.channel].push(e))),this.timeline&&this.timeline.updateCommandExecutionState(e,t)});break;case l.ComponentExecutionStatus.Succeeded:switch(this.mission.plan.completeAction){case l.PlanCompleteAction.AutoLand:this.drone.spatial.altitude.value=0,this.drone.spatial.velocity=new d.Velocity6;break;case l.PlanCompleteAction.ReturnHome:this.drone.spatial.coordinate=this.drone.takeoffCoordinate,this.drone.spatial.velocity=new d.Velocity6,this.drone.spatial.altitude.value=0}break;case l.ComponentExecutionStatus.Failed:}if(this.engaged||this.finishCurrentCameraCapture(u),this.drone.statelessCommands=[],this.executionListeners.forEach(e=>{e(this)}),this.rate&&this.rate>0){let e=1e3*this.missionExecuteIntervalTarget-((new Date).getTime()-f);e>0&&(e/=this.rate,yield a.Common.sleep(e))}else this.preventThreadStarvation&&o%200==0&&(yield a.Common.sleep(5));this.millisSinceStart+=1e3*this.missionExecuteIntervalTarget,o++}})}processCommands(e,t){let n=!1;return t.filter(t=>{const i=this.drone.commandExecutionState(t.id);if(!i)return!1;switch(i.status){case l.CommandExecutionStatus.Pending:case l.CommandExecutionStatus.Queued:return n||(this.applyCommandStart(e,t),i.update(l.CommandExecutionStatus.Executing,null,e),n=!0),!0;case l.CommandExecutionStatus.Executing:return i.started&&e.elapsedTime(i.started)>=t.estimatedTime?(this.applyCommandFinish(e,t),i.update(l.CommandExecutionStatus.Succeeded,null,e),!1):(n=!0,!0);case l.CommandExecutionStatus.Failed:case l.CommandExecutionStatus.Succeeded:return!1}})}applyCommandStart(e,t){t instanceof p.DroneCommand?this.applyDroneCommandStart(e,t):t instanceof v.PayloadCommand&&this.applyPayloadCommandStart(e,t)}applyCommandFinish(e,t){t instanceof p.DroneCommand?this.applyDroneCommandFinish(e,t):t instanceof v.PayloadCommand&&this.applyPayloadCommandFinish(e,t)}applyDroneCommandStart(e,t){}applyDroneCommandFinish(e,t){}applyPayloadCommandStart(e,t){t instanceof m.CameraCommand?this.applyCameraCommandStart(e,t):t instanceof h.GimbalCommand&&this.applyGimbalCommandStart(e,t)}applyPayloadCommandFinish(e,t){t instanceof m.CameraCommand?this.applyCameraCommandFinish(e,t):t instanceof h.GimbalCommand&&this.applyGimbalCommandFinish(e,t)}applyCameraCommandStart(e,t){const n=this.drone.camera(t.channel);n.updated.value=e.value,t instanceof b.StartCaptureCameraCommand&&b.StartCaptureCameraCommand.possible(n.settings.mode)&&(n.capturing=!0,this.timeline&&(this.currentCameraCapture=new T.TimelineCameraCapture(this.timeline.frames.length-1,t.channel,n.settings.mode,n.settings.photoMode,e)))}finishCurrentCameraCapture(e){if(this.currentCameraCapture){if(this.timeline){const t=new b.StartCaptureCameraCommand;if(this.currentCameraCapture.mode===l.CameraMode.Photo&&this.currentCameraCapture.photoMode===l.CameraPhotoMode.Interval){const n=this.drone.camera(this.currentCameraCapture.channel),i=Math.max(1,Math.floor(e.elapsedTime(this.currentCameraCapture.started)/n.settings.photoInterval));for(let e=0;e<i;e++){const i=new x.Datetime(new Date(this.currentCameraCapture.started.value.getTime()+e*n.settings.photoInterval*1e3));let r=this.currentCameraCapture.frameIndex;for(;r+1<this.timeline.frames.length&&!(this.timeline.frames[r+1].datetime.value.getTime()>=i.value.getTime());)r++;const o=new T.TimelineCameraCapture(r,this.currentCameraCapture.channel,l.CameraMode.Photo,l.CameraPhotoMode.Single,i);o.finished=new x.Datetime(new Date(o.started.value.getTime()+1e3*t.estimatedTime)),this.timeline.captures.push(o)}}else this.currentCameraCapture.finished=e,this.timeline.captures.push(this.currentCameraCapture)}this.currentCameraCapture=null}}applyCameraCommandFinish(e,t){const n=this.drone.camera(t.channel);if(n.updated.value=e.value,!(t instanceof b.StartCaptureCameraCommand))return t instanceof w.StopCaptureCameraCommand?(n.capturing=!1,void this.finishCurrentCameraCapture(e)):void(t instanceof f.ModeCameraCommand?n.settings.mode=t.mode:t instanceof y.ExposureModeCameraCommand||(t instanceof g.PhotoModeCameraCommand?n.settings.photoMode=t.photoMode:t instanceof E.PhotoIntervalCameraCommand&&(n.settings.photoInterval=t.photoInterval)));b.StartCaptureCameraCommand.continuous(n.settings.mode,n.settings.photoMode)||(n.capturing=!1,this.finishCurrentCameraCapture(new x.Datetime(new Date(e.value.getTime()+1e3*t.estimatedTime))))}applyGimbalCommandStart(e,t){this.drone.gimbal(t.channel).updated.value=e.value}applyGimbalCommandFinish(e,t){const n=this.drone.gimbal(t.channel);n.updated.value=e.value,t instanceof C.ModeGimbalCommand?n.settings.mode=t.mode:t instanceof S.OrientationGimbalCommand&&n.orientation.apply(t.orientation)}}},function(e,t){(function(){e.exports=class{hasFeature(e,t){return!0}createDocumentType(e,t,n){throw new Error("This DOM method is not implemented.")}createDocument(e,t,n){throw new Error("This DOM method is not implemented.")}createHTMLDocument(e){throw new Error("This DOM method is not implemented.")}getFeature(e,t){throw new Error("This DOM method is not implemented.")}}}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,s,u;({isPlainObject:u}=n(28)),r=n(195),i=n(250),o=n(14),t=n(8),s=n(199),a=n(137),e.exports=function(){class e extends o{constructor(e){super(null),this.name="#document",this.type=t.Document,this.documentURI=null,this.domConfig=new i,e||(e={}),e.writer||(e.writer=new a),this.options=e,this.stringify=new s(e)}end(e){var t;return t={},e?u(e)&&(t=e,e=this.options.writer):e=this.options.writer,e.document(this,e.filterOptions(t))}toString(e){return this.options.writer.document(this,this.options.writer.filterOptions(e))}createElement(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createDocumentFragment(){throw new Error("This DOM method is not implemented."+this.debugInfo())}createTextNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createComment(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createCDATASection(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createProcessingInstruction(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createAttribute(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createEntityReference(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}importNode(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createElementNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementById(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}adoptNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}normalizeDocument(){throw new Error("This DOM method is not implemented."+this.debugInfo())}renameNode(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByClassName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createEvent(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createRange(){throw new Error("This DOM method is not implemented."+this.debugInfo())}createNodeIterator(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}createTreeWalker(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}}return Object.defineProperty(e.prototype,"implementation",{value:new r}),Object.defineProperty(e.prototype,"doctype",{get:function(){var e,n,i,r;for(n=0,i=(r=this.children).length;n<i;n++)if((e=r[n]).type===t.DocType)return e;return null}}),Object.defineProperty(e.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration?this.children[0].encoding:null}}),Object.defineProperty(e.prototype,"xmlStandalone",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration&&"yes"===this.children[0].standalone}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(e.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(e.prototype,"origin",{get:function(){return null}}),Object.defineProperty(e.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(e.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(e.prototype,"contentType",{get:function(){return null}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t;t=n(8),n(14),e.exports=function(){class e{constructor(e,n,i){if(this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),null==n)throw new Error("Missing attribute name. "+this.debugInfo(n));this.name=this.stringify.name(n),this.value=this.stringify.attValue(i),this.type=t.Attribute,this.isId=!1,this.schemaTypeInfo=null}clone(){return Object.create(this)}toString(e){return this.options.writer.attribute(this,this.options.writer.filterOptions(e))}debugInfo(e){return null==(e=e||this.name)?"parent: <"+this.parent.name+">":"attribute: {"+e+"}, parent: <"+this.parent.name+">"}isEqualNode(e){return e.namespaceURI===this.namespaceURI&&(e.prefix===this.prefix&&(e.localName===this.localName&&e.value===this.value))}}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(e){return this.value=e||""}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"specified",{get:function(){return!0}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(14),t=n(8),e.exports=class extends i{constructor(e){super(e),this.type=t.Dummy}clone(){return Object.create(this)}toString(e){return""}}}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){class e{constructor(e){var n,i,r;for(n in this.assertLegalChar=this.assertLegalChar.bind(this),this.assertLegalName=this.assertLegalName.bind(this),e||(e={}),this.options=e,this.options.version||(this.options.version="1.0"),i=e.stringify||{})t.call(i,n)&&(r=i[n],this[n]=r)}name(e){return this.options.noValidation?e:this.assertLegalName(""+e||"")}text(e){return this.options.noValidation?e:this.assertLegalChar(this.textEscape(""+e||""))}cdata(e){return this.options.noValidation?e:(e=(e=""+e||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(e))}comment(e){if(this.options.noValidation)return e;if((e=""+e||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+e);return this.assertLegalChar(e)}raw(e){return this.options.noValidation?e:""+e||""}attValue(e){return this.options.noValidation?e:this.assertLegalChar(this.attEscape(e=""+e||""))}insTarget(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}insValue(e){if(this.options.noValidation)return e;if((e=""+e||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+e);return this.assertLegalChar(e)}xmlVersion(e){if(this.options.noValidation)return e;if(!(e=""+e||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+e);return e}xmlEncoding(e){if(this.options.noValidation)return e;if(!(e=""+e||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+e);return this.assertLegalChar(e)}xmlStandalone(e){return this.options.noValidation?e:e?"yes":"no"}dtdPubID(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdSysID(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdElementValue(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdAttType(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdAttDefault(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdEntityValue(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdNData(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}assertLegalChar(e){var t,n;if(this.options.noValidation)return e;if(t="","1.0"===this.options.version){if(t=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,n=e.match(t))throw new Error(`Invalid character in string: ${e} at index ${n.index}`)}else if("1.1"===this.options.version&&(t=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,n=e.match(t)))throw new Error(`Invalid character in string: ${e} at index ${n.index}`);return e}assertLegalName(e){var t;if(this.options.noValidation)return e;if(this.assertLegalChar(e),t=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!e.match(t))throw new Error("Invalid character in name");return e}textEscape(e){var t;return this.options.noValidation?e:(t=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))}attEscape(e){var t;return this.options.noValidation?e:(t=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))}}return e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i,r,o={}.hasOwnProperty;({assign:r}=n(28)),t=n(8),n(128),n(129),n(126),n(127),n(124),n(134),n(135),n(136),n(198),n(130),n(132),n(131),n(133),i=n(95),e.exports=class{constructor(e){var t,n,i;for(t in e||(e={}),this.options=e,n=e.writer||{})o.call(n,t)&&(i=n[t],this["_"+t]=this[t],this[t]=i)}filterOptions(e){var t,n,o,a,s,u,l,c,m;return e||(e={}),e=r({},this.options,e),(t={writer:this}).pretty=e.pretty||!1,t.allowEmpty=e.allowEmpty||!1,t.indent=null!=(n=e.indent)?n:"  ",t.newline=null!=(o=e.newline)?o:"\n",t.offset=null!=(a=e.offset)?a:0,t.width=null!=(s=e.width)?s:0,t.dontPrettyTextNodes=null!=(u=null!=(l=e.dontPrettyTextNodes)?l:e.dontprettytextnodes)?u:0,t.spaceBeforeSlash=null!=(c=null!=(m=e.spaceBeforeSlash)?m:e.spacebeforeslash)?c:"",!0===t.spaceBeforeSlash&&(t.spaceBeforeSlash=" "),t.suppressPrettyCount=0,t.user={},t.state=i.None,t}indent(e,t,n){var i;return!t.pretty||t.suppressPrettyCount?"":t.pretty&&(i=(n||0)+t.offset+1)>0?new Array(i).join(t.indent):""}endline(e,t,n){return!t.pretty||t.suppressPrettyCount?"":t.newline}attribute(e,t,n){var i;return this.openAttribute(e,t,n),i=t.pretty&&t.width>0?e.name+'="'+e.value+'"':" "+e.name+'="'+e.value+'"',this.closeAttribute(e,t,n),i}cdata(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<![CDATA[",t.state=i.InsideTag,r+=e.value,t.state=i.CloseTag,r+="]]>"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}comment(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"\x3c!-- ",t.state=i.InsideTag,r+=e.value,t.state=i.CloseTag,r+=" --\x3e"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}declaration(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<?xml",t.state=i.InsideTag,r+=' version="'+e.version+'"',null!=e.encoding&&(r+=' encoding="'+e.encoding+'"'),null!=e.standalone&&(r+=' standalone="'+e.standalone+'"'),t.state=i.CloseTag,r+=t.spaceBeforeSlash+"?>",r+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}docType(e,t,n){var r,o,a,s,u;if(n||(n=0),this.openNode(e,t,n),t.state=i.OpenTag,s=this.indent(e,t,n),s+="<!DOCTYPE "+e.root().name,e.pubID&&e.sysID?s+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(s+=' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(s+=" [",s+=this.endline(e,t,n),t.state=i.InsideTag,o=0,a=(u=e.children).length;o<a;o++)r=u[o],s+=this.writeChildNode(r,t,n+1);t.state=i.CloseTag,s+="]"}return t.state=i.CloseTag,s+=t.spaceBeforeSlash+">",s+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),s}element(e,n,r){var a,s,u,l,c,m,d,h,p,f,g,y,v,C,S,b,w,x;if(r||(r=0),g=!1,this.openNode(e,n,r),n.state=i.OpenTag,y=this.indent(e,n,r)+"<"+e.name,n.pretty&&n.width>0)for(f in d=y.length,C=e.attribs)o.call(C,f)&&(a=C[f],d+(v=this.attribute(a,n,r)).length>n.width?(x=this.indent(e,n,r+1)+v,y+=this.endline(e,n,r)+x,d=x.length):(y+=x=" "+v,d+=x.length));else for(f in S=e.attribs)o.call(S,f)&&(a=S[f],y+=this.attribute(a,n,r));if(l=0===(u=e.children.length)?null:e.children[0],0===u||e.children.every(function(e){return(e.type===t.Text||e.type===t.Raw)&&""===e.value}))n.allowEmpty?(y+=">",n.state=i.CloseTag,y+="</"+e.name+">"+this.endline(e,n,r)):(n.state=i.CloseTag,y+=n.spaceBeforeSlash+"/>"+this.endline(e,n,r));else if(!n.pretty||1!==u||l.type!==t.Text&&l.type!==t.Raw||null==l.value){if(n.dontPrettyTextNodes)for(c=0,h=(b=e.children).length;c<h;c++)if(((s=b[c]).type===t.Text||s.type===t.Raw)&&null!=s.value){n.suppressPrettyCount++,g=!0;break}for(y+=">"+this.endline(e,n,r),n.state=i.InsideTag,m=0,p=(w=e.children).length;m<p;m++)s=w[m],y+=this.writeChildNode(s,n,r+1);n.state=i.CloseTag,y+=this.indent(e,n,r)+"</"+e.name+">",g&&n.suppressPrettyCount--,y+=this.endline(e,n,r),n.state=i.None}else y+=">",n.state=i.InsideTag,n.suppressPrettyCount++,g=!0,y+=this.writeChildNode(l,n,r+1),n.suppressPrettyCount--,g=!1,n.state=i.CloseTag,y+="</"+e.name+">"+this.endline(e,n,r);return this.closeNode(e,n,r),y}writeChildNode(e,n,i){switch(e.type){case t.CData:return this.cdata(e,n,i);case t.Comment:return this.comment(e,n,i);case t.Element:return this.element(e,n,i);case t.Raw:return this.raw(e,n,i);case t.Text:return this.text(e,n,i);case t.ProcessingInstruction:return this.processingInstruction(e,n,i);case t.Dummy:return"";case t.Declaration:return this.declaration(e,n,i);case t.DocType:return this.docType(e,n,i);case t.AttributeDeclaration:return this.dtdAttList(e,n,i);case t.ElementDeclaration:return this.dtdElement(e,n,i);case t.EntityDeclaration:return this.dtdEntity(e,n,i);case t.NotationDeclaration:return this.dtdNotation(e,n,i);default:throw new Error("Unknown XML node type: "+e.constructor.name)}}processingInstruction(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<?",t.state=i.InsideTag,r+=e.target,e.value&&(r+=" "+e.value),t.state=i.CloseTag,r+=t.spaceBeforeSlash+"?>",r+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}raw(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n),t.state=i.InsideTag,r+=e.value,t.state=i.CloseTag,r+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}text(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n),t.state=i.InsideTag,r+=e.value,t.state=i.CloseTag,r+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}dtdAttList(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<!ATTLIST",t.state=i.InsideTag,r+=" "+e.elementName+" "+e.attributeName+" "+e.attributeType,"#DEFAULT"!==e.defaultValueType&&(r+=" "+e.defaultValueType),e.defaultValue&&(r+=' "'+e.defaultValue+'"'),t.state=i.CloseTag,r+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}dtdElement(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<!ELEMENT",t.state=i.InsideTag,r+=" "+e.name+" "+e.value,t.state=i.CloseTag,r+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}dtdEntity(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<!ENTITY",t.state=i.InsideTag,e.pe&&(r+=" %"),r+=" "+e.name,e.value?r+=' "'+e.value+'"':(e.pubID&&e.sysID?r+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(r+=' SYSTEM "'+e.sysID+'"'),e.nData&&(r+=" NDATA "+e.nData)),t.state=i.CloseTag,r+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}dtdNotation(e,t,n){var r;return this.openNode(e,t,n),t.state=i.OpenTag,r=this.indent(e,t,n)+"<!NOTATION",t.state=i.InsideTag,r+=" "+e.name,e.pubID&&e.sysID?r+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.pubID?r+=' PUBLIC "'+e.pubID+'"':e.sysID&&(r+=' SYSTEM "'+e.sysID+'"'),t.state=i.CloseTag,r+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),r}openNode(e,t,n){}closeNode(e,t,n){}openAttribute(e,t,n){}closeAttribute(e,t,n){}}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(96);t.ComponentExecuteContext=class extends i.Context{constructor(e,t,n){super(e),this.execution=t,this.engagement=n}elapsedTime(e){return this.engagement.currentDatetime.elapsedTime(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.GeoSpatialSources=class{constructor(e,t,n){this.plan=e,this.drone=t,this.device=n}value(e,t=null){switch(e){case i.GeoSpatialSource.Input:return t||this.drone;case i.GeoSpatialSource.Plan:return this.plan;case i.GeoSpatialSource.Device:return this.device||this.drone;case i.GeoSpatialSource.Drone:return this.drone}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(96);t.ComponentEstimateContext=class extends i.Context{constructor(){super(...arguments),this.altitudeRequired=!1,this.timeRequired=!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ComponentNodeExecutionState=class{constructor(e,t){this.node=e,this.state=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);t.Common=i.Common;var r=n(22);t.Convert=r.Convert;var o=n(22);t.Converter=o.Converter;var a=n(22);t.Converters=a.Converters;var s=n(1);t.Format=s.Format;var u=n(1);t.FormattedValue=u.FormattedValue;var l=n(15);t.Geometry=l.Geometry;var c=n(16);t.Kinematic=c.Kinematic;var m=n(0);t.AltitudeSystem=m.AltitudeSystem;var d=n(0);t.CameraAEBCount=d.CameraAEBCount;var h=n(0);t.CameraAperture=h.CameraAperture;var p=n(0);t.CameraColor=p.CameraColor;var f=n(0);t.CameraExposureCompensation=f.CameraExposureCompensation;var g=n(0);t.CameraExposureMode=g.CameraExposureMode;var y=n(0);t.CameraFileIndexMode=y.CameraFileIndexMode;var v=n(0);t.CameraFocusMode=v.CameraFocusMode;var C=n(0);t.CameraISO=C.CameraISO;var S=n(0);t.CameraMode=S.CameraMode;var b=n(0);t.CameraPhotoAspectRatio=b.CameraPhotoAspectRatio;var w=n(0);t.CameraPhotoFileFormat=w.CameraPhotoFileFormat;var x=n(0);t.CameraPhotoMode=x.CameraPhotoMode;var M=n(0);t.CameraShutterSpeed=M.CameraShutterSpeed;var O=n(0);t.CameraStorageLocation=O.CameraStorageLocation;var D=n(0);t.CameraVideoFileCompressionStandard=D.CameraVideoFileCompressionStandard;var P=n(0);t.CameraVideoFieldOfView=P.CameraVideoFieldOfView;var T=n(0);t.CameraVideoFileFormat=T.CameraVideoFileFormat;var _=n(0);t.CameraVideoFrameRate=_.CameraVideoFrameRate;var E=n(0);t.CameraVideoResolution=E.CameraVideoResolution;var N=n(0);t.CameraVideoStandard=N.CameraVideoStandard;var F=n(0);t.CameraWhiteBalancePreset=F.CameraWhiteBalancePreset;var I=n(0);t.CommandExecutionStatus=I.CommandExecutionStatus;var A=n(0);t.CommandReengagementTiming=A.CommandReengagementTiming;var L=n(0);t.ComponentExecutionStatus=L.ComponentExecutionStatus;var R=n(0);t.DroneConnectionFailSafeBehavior=R.DroneConnectionFailSafeBehavior;var k=n(0);t.DroneLightbridgeChannelSelectionMode=k.DroneLightbridgeChannelSelectionMode;var z=n(0);t.DroneLightbridgeFrequencyBand=z.DroneLightbridgeFrequencyBand;var B=n(0);t.DroneOcuSyncChannelSelectionMode=B.DroneOcuSyncChannelSelectionMode;var V=n(0);t.DroneOcuSyncFrequencyBand=V.DroneOcuSyncFrequencyBand;var j=n(0);t.GeoSpatialSource=j.GeoSpatialSource;var U=n(0);t.GimbalMode=U.GimbalMode;var J=n(0);t.InterpolationFunction=J.InterpolationFunction;var G=n(0);t.MapPattern=G.MapPattern;var W=n(0);t.MessageLevel=W.MessageLevel;var q=n(0);t.OrbitDirection=q.OrbitDirection;var H=n(0);t.OrientationXReference=H.OrientationXReference;var $=n(0);t.OrientationZReference=$.OrientationZReference;var K=n(0);t.PathCornering=K.PathCornering;var Y=n(0);t.PathMarkerPositioning=Y.PathMarkerPositioning;var X=n(0);t.PlanCompleteAction=X.PlanCompleteAction;var Z=n(0);t.TypeName=Z.TypeName;var Q=n(0);t.UnitSystem=Q.UnitSystem;var ee=n(33);t.Altitude=ee.Altitude;var te=n(97);t.AltitudeRange=te.AltitudeRange;var ne=n(98);t.Camera=ne.Camera;var ie=n(99);t.CameraImageSpecification=ie.CameraImageSpecification;var re=n(100);t.CameraLensSpecification=re.CameraLensSpecification;var oe=n(101);t.CameraSensorSpecification=oe.CameraSensorSpecification;var ae=n(102);t.CameraSpecification=ae.CameraSpecification;var se=n(9);t.Constants=se.Constants;var ue=n(12);t.Datetime=ue.Datetime;var le=n(30);t.Descriptors=le.Descriptors;var ce=n(66);t.DistanceTolerance=ce.DistanceTolerance;var me=n(37);t.Device=me.Device;var de=n(40);t.Drone=de.Drone;var he=n(121);t.Engagement=he.Engagement;var pe=n(123);t.Execution=pe.Execution;var fe=n(103);t.FieldOfView=fe.FieldOfView;var ge=n(38);t.GeoCoordinate=ge.GeoCoordinate;var ye=n(112);t.GeoReferencedOffset=ye.GeoReferencedOffset;var ve=n(23);t.GeoSpatial=ve.GeoSpatial;var Ce=n(202);t.GeoSpatialSources=Ce.GeoSpatialSources;var Se=n(58);t.Gimbal=Se.Gimbal;var be=n(6);t.Identifiable=be.Identifiable;var we=n(45);t.Interpolation=we.Interpolation;var xe=n(29);t.Limits=xe.Limits;var Me=n(56);t.Line2=Me.Line2;var Oe=n(83);t.ListElementNode=Oe.ListElementNode;var De=n(55);t.ListNode=De.ListNode;var Pe=n(11);t.Message=Pe.Message;var Te=n(138);t.MessageGroup=Te.MessageGroup;var _e=n(122);t.Mission=_e.Mission;var Ee=n(64);t.MotionLimits=Ee.MotionLimits;var Ne=n(86);t.MotionLimitsOptional=Ne.MotionLimitsOptional;var Fe=n(63);t.MotionLimits3=Fe.MotionLimits3;var Ie=n(115);t.MotionLimits3Optional=Ie.MotionLimits3Optional;var Ae=n(62);t.MotionLimits6=Ae.MotionLimits6;var Le=n(85);t.MotionLimits6Optional=Le.MotionLimits6Optional;var Re=n(82);t.Node=Re.Node;var ke=n(46);t.Orientation3=ke.Orientation3;var ze=n(20);t.Orientation3Optional=ze.Orientation3Optional;var Be=n(117);t.Path=Be.Path;var Ve=n(19);t.Point2=Ve.Point2;var je=n(54);t.PointOfInterest=je.PointOfInterest;var Ue=n(54);t.PointOfInterestNode=Ue.PointOfInterestNode;var Je=n(54);t.PointsOfInterestNode=Je.PointsOfInterestNode;var Ge=n(5);t.Serialization=Ge.Serialization;var We=n(194);t.Simulation=We.Simulation;var qe=n(79);t.SourcedGeoSpatial=qe.SourcedGeoSpatial;var He=n(3);t.Strings=He.Strings;var $e=n(21);t.Timeline=$e.Timeline;var Ke=n(21);t.TimelineCameraCapture=Ke.TimelineCameraCapture;var Ye=n(21);t.TimelineCommand=Ye.TimelineCommand;var Xe=n(21);t.TimelineFrame=Xe.TimelineFrame;var Ze=n(61);t.User=Ze.User;var Qe=n(7);t.Vector2=Qe.Vector2;var et=n(31);t.Velocity3=et.Velocity3;var tt=n(25);t.Velocity6=tt.Velocity6;var nt=n(32);t.Command=nt.Command;var it=n(73);t.CommandExecutionState=it.CommandExecutionState;var rt=n(113);t.DefaultCommand=rt.DefaultCommand;var ot=n(49);t.PayloadCommand=ot.PayloadCommand;var at=n(13);t.DroneCommand=at.DroneCommand;var st=n(4);t.CameraCommand=st.CameraCommand;var ut=n(52);t.GimbalCommand=ut.GimbalCommand;var lt=n(157);t.ConnectionFailSafeBehaviorDroneCommand=lt.ConnectionFailSafeBehaviorDroneCommand;var ct=n(158);t.LightbridgeChannelDroneCommand=ct.LightbridgeChannelDroneCommand;var mt=n(159);t.LightbridgeChannelSelectionModeDroneCommand=mt.LightbridgeChannelSelectionModeDroneCommand;var dt=n(160);t.LightbridgeFrequencyBandDroneCommand=dt.LightbridgeFrequencyBandDroneCommand;var ht=n(161);t.LowBatteryWarningThresholdDroneCommand=ht.LowBatteryWarningThresholdDroneCommand;var pt=n(162);t.MaxAltitudeDroneCommand=pt.MaxAltitudeDroneCommand;var ft=n(163);t.MaxDistanceDroneCommand=ft.MaxDistanceDroneCommand;var gt=n(164);t.OcuSyncChannelDroneCommand=gt.OcuSyncChannelDroneCommand;var yt=n(165);t.OcuSyncChannelSelectionModeDroneCommand=yt.OcuSyncChannelSelectionModeDroneCommand;var vt=n(166);t.OcuSyncFrequencyBandDroneCommand=vt.OcuSyncFrequencyBandDroneCommand;var Ct=n(167);t.ReturnHomeAltitudeDroneCommand=Ct.ReturnHomeAltitudeDroneCommand;var St=n(42);t.VelocityDroneCommand=St.VelocityDroneCommand;var bt=n(168);t.AEBCountCameraCommand=bt.AEBCountCameraCommand;var wt=n(169);t.ApertureCameraCommand=wt.ApertureCameraCommand;var xt=n(170);t.AutoExposureLockCameraCommand=xt.AutoExposureLockCameraCommand;var Mt=n(171);t.ColorCameraCommand=Mt.ColorCameraCommand;var Ot=n(172);t.ContrastCameraCommand=Ot.ContrastCameraCommand;var Dt=n(173);t.ExposureCompensationCameraCommand=Dt.ExposureCompensationCameraCommand;var Pt=n(110);t.ExposureModeCameraCommand=Pt.ExposureModeCameraCommand;var Tt=n(174);t.FileIndexModeCameraCommand=Tt.FileIndexModeCameraCommand;var _t=n(175);t.FocusModeCameraCommand=_t.FocusModeCameraCommand;var Et=n(176);t.ISOCameraCommand=Et.ISOCameraCommand;var Nt=n(177);t.PhotoAspectRatioCameraCommand=Nt.PhotoAspectRatioCameraCommand;var Ft=n(178);t.PhotoFileFormatCameraCommand=Ft.PhotoFileFormatCameraCommand;var It=n(74);t.PhotoIntervalCameraCommand=It.PhotoIntervalCameraCommand;var At=n(51);t.PhotoModeCameraCommand=At.PhotoModeCameraCommand;var Lt=n(50);t.ModeCameraCommand=Lt.ModeCameraCommand;var Rt=n(179);t.SaturationCameraCommand=Rt.SaturationCameraCommand;var kt=n(180);t.SharpnessCameraCommand=kt.SharpnessCameraCommand;var zt=n(181);t.ShutterSpeedCameraCommand=zt.ShutterSpeedCameraCommand;var Bt=n(43);t.StartCaptureCameraCommand=Bt.StartCaptureCameraCommand;var Vt=n(44);t.StopCaptureCameraCommand=Vt.StopCaptureCameraCommand;var jt=n(182);t.StorageLocationCameraCommand=jt.StorageLocationCameraCommand;var Ut=n(183);t.VideoFileCompressionStandardCameraCommand=Ut.VideoFileCompressionStandardCameraCommand;var Jt=n(184);t.VideoFileFormatCameraCommand=Jt.VideoFileFormatCameraCommand;var Gt=n(185);t.VideoResolutionFrameRateCameraCommand=Gt.VideoResolutionFrameRateCameraCommand;var Wt=n(186);t.VideoStandardCameraCommand=Wt.VideoStandardCameraCommand;var qt=n(187);t.WhiteBalanceCustomCameraCommand=qt.WhiteBalanceCustomCameraCommand;var Ht=n(188);t.WhiteBalancePresetCameraCommand=Ht.WhiteBalancePresetCameraCommand;var $t=n(75);t.ModeGimbalCommand=$t.ModeGimbalCommand;var Kt=n(76);t.OrientationGimbalCommand=Kt.OrientationGimbalCommand;var Yt=n(77);t.VelocityGimbalCommand=Yt.VelocityGimbalCommand;var Xt=n(80);t.Component=Xt.Component;var Zt=n(189);t.ComponentEstimate=Zt.ComponentEstimate;var Qt=n(203);t.ComponentEstimateContext=Qt.ComponentEstimateContext;var en=n(201);t.ComponentExecuteContext=en.ComponentExecuteContext;var tn=n(78);t.ComponentExecutionState=tn.ComponentExecutionState;var nn=n(53);t.CommandComponent=nn.CommandComponent;var rn=n(81);t.ComponentNode=rn.ComponentNode;var on=n(204);t.ComponentNodeExecutionState=on.ComponentNodeExecutionState;var an=n(111);t.ComponentSource=an.ComponentSource;var sn=n(84);t.AchievableDroneMotionComponent=sn.AchievableDroneMotionComponent;var un=n(91);t.DestinationComponent=un.DestinationComponent;var ln=n(27);t.DroneMotionComponent=ln.DroneMotionComponent;var cn=n(114);t.CourseComponent=cn.CourseComponent;var mn=n(116);t.HeadingComponent=mn.HeadingComponent;var dn=n(93);t.ListComponent=dn.ListComponent;var hn=n(190);t.MapComponent=hn.MapComponent;var pn=n(57);t.MapComponentBoundaryPoint=pn.MapComponentBoundaryPoint;var fn=n(57);t.MapComponentBoundaryPointNode=fn.MapComponentBoundaryPointNode;var gn=n(57);t.MapComponentBoundaryPointsNode=gn.MapComponentBoundaryPointsNode;var yn=n(191);t.OrbitComponent=yn.OrbitComponent;var vn=n(192);t.PathComponent=vn.PathComponent;var Cn=n(118);t.PathComponentElementNode=Cn.PathComponentElementNode;var Sn=n(60);t.PathComponentMarker=Sn.PathComponentMarker;var bn=n(60);t.PathComponentMarkerNode=bn.PathComponentMarkerNode;var wn=n(60);t.PathComponentMarkersNode=wn.PathComponentMarkersNode;var xn=n(59);t.PathComponentWaypoint=xn.PathComponentWaypoint;var Mn=n(59);t.PathComponentWaypointNode=Mn.PathComponentWaypointNode;var On=n(59);t.PathComponentWaypointsNode=On.PathComponentWaypointsNode;var Dn=n(119);t.PlanComponent=Dn.PlanComponent;var Pn=n(26);t.SubComponent=Pn.SubComponent;var Tn=n(92);t.ApproachableComponent=Tn.ApproachableComponent;var _n=n(96);t.Context=_n.Context},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(r)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(207));var u=/(\{[\d|\w]+\})/,l=/(\$ref\{[\w|.]+\})/,c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"==typeof n&&(n={customLanguageInterface:n}),this._opts=o({},{customLanguageInterface:s.getInterfaceLanguage,pseudo:!1,pseudoMultipleLanguages:!1,logsEnabled:!0},n),this._interfaceLanguage=this._opts.customLanguageInterface(),this._language=this._interfaceLanguage,this.setContent(t)}return a(e,[{key:"setContent",value:function(e){var t=this,n=Object.keys(e),i=r(n,1)[0];this._defaultLanguage=i,this._defaultLanguageFirstLevelKeys=[],this._props=e,s.validateTranslationKeys(Object.keys(e[this._defaultLanguage])),Object.keys(this._props[this._defaultLanguage]).forEach(function(e){"string"==typeof t._props[t._defaultLanguage][e]&&t._defaultLanguageFirstLevelKeys.push(e)}),this.setLanguage(this._interfaceLanguage),this._opts.pseudo&&this._pseudoAllValues(this._props)}},{key:"_pseudoAllValues",value:function(e){var t=this;Object.keys(e).forEach(function(n){if("object"===i(e[n]))t._pseudoAllValues(e[n]);else if("string"==typeof e[n]){if(0===e[n].indexOf("[")&&e[n].lastIndexOf("]")===e[n].length-1)return;for(var r=e[n].split(" "),o=0;o<r.length;o+=1)if(r[o].match(u));else if(r[o].match(l));else{var a=r[o].length;t._opts.pseudoMultipleLanguages&&(a=parseInt(1.4*a,10)),r[o]=s.randomPseudo(a)}e[n]="["+r.join(" ")+"]"}})}},{key:"setLanguage",value:function(e){var t=this,n=s.getBestMatchingLanguage(e,this._props),i=Object.keys(this._props)[0];if(this._language=n,this._props[n]){for(var r=0;r<this._defaultLanguageFirstLevelKeys.length;r+=1)delete this[this._defaultLanguageFirstLevelKeys[r]];var a=o({},this._props[this._language]);Object.keys(a).forEach(function(e){t[e]=a[e]}),i!==this._language&&(a=this._props[i],this._fallbackValues(a,this))}}},{key:"_fallbackValues",value:function(e,t){var n=this;Object.keys(e).forEach(function(i){Object.prototype.hasOwnProperty.call(e,i)&&!t[i]&&""!==t[i]?(t[i]=e[i],n._opts.logsEnabled&&console.log("🚧 👷 key '"+i+"' not found in localizedStrings for language "+n._language+" 🚧")):"string"!=typeof t[i]&&n._fallbackValues(e[i],t[i])})}},{key:"getLanguage",value:function(){return this._language}},{key:"getInterfaceLanguage",value:function(){return this._interfaceLanguage}},{key:"getAvailableLanguages",value:function(){var e=this;return this._availableLanguages||(this._availableLanguages=[],Object.keys(this._props).forEach(function(t){e._availableLanguages.push(t)})),this._availableLanguages}},{key:"formatString",value:function(e){for(var t=this,n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var o=e||"";return"string"==typeof o&&(o=this.getString(e,null,!0)||o),o.split(l).filter(function(e){return!!e}).map(function(n){if(n.match(l)){var i=n.slice(5,-1),r=t.getString(i);return r||(t._opts.logsEnabled&&console.log("No Localization ref found for '"+n+"' in string '"+e+"'"),"$ref(id:"+i+")")}return n}).join("").split(u).filter(function(e){return!!e}).map(function(e){if(e.match(u)){var t=e.slice(1,-1),n=i[t];if(void 0===n){var r=i[0][t];if(void 0===r)return n;n=r}return n}return e}).join("")}},{key:"getString",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];try{for(var i=this._props[t||this._language],r=e.split("."),o=0;o<r.length;o+=1){if(void 0===i[r[o]])throw Error(r[o]);i=i[r[o]]}return i}catch(i){!n&&this._opts.logsEnabled&&console.log("No localization found for key '"+e+"' and language '"+t+"', failed on "+i.message)}return null}},{key:"getContent",value:function(){return this._props}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInterfaceLanguage=function(){if("undefined"==typeof navigator)return"en-US";var e=navigator;if(e){if(e.language)return e.language;if(e.languages&&e.languages[0])return e.languages[0];if(e.userLanguage)return e.userLanguage;if(e.browserLanguage)return e.browserLanguage}return"en-US"},t.getBestMatchingLanguage=function(e,t){if(t[e])return e;var n=e.indexOf("-"),i=n>=0?e.substring(0,n):e;return t[i]?i:Object.keys(t)[0]},t.validateTranslationKeys=function(e){var t=["_interfaceLanguage","_language","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props"];e.forEach(function(e){if(-1!==t.indexOf(e))throw new Error(e+" cannot be used as a key. It is a reserved word.")})},t.randomPseudo=function(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=0;i<e;i+=1)t+=n.charAt(Math.floor(Math.random()*n.length));return t}},function(e,t,n){var i,r;
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */void 0===(r="function"==typeof(i=function(){var e,t,n,i,r,o={},a={},s={currentLocale:"en",zeroFormat:null,nullFormat:null,defaultFormat:"0,0",scalePercentBy100:!0},u={currentLocale:s.currentLocale,zeroFormat:s.zeroFormat,nullFormat:s.nullFormat,defaultFormat:s.defaultFormat,scalePercentBy100:s.scalePercentBy100};function l(e,t){this._input=e,this._value=t}return(e=function(n){var i,r,a,s;if(e.isNumeral(n))i=n.value();else if(0===n||void 0===n)i=0;else if(null===n||t.isNaN(n))i=null;else if("string"==typeof n)if(u.zeroFormat&&n===u.zeroFormat)i=0;else if(u.nullFormat&&n===u.nullFormat||!n.replace(/[^0-9]+/g,"").length)i=null;else{for(r in o)if((s="function"==typeof o[r].regexps.unformat?o[r].regexps.unformat():o[r].regexps.unformat)&&n.match(s)){a=o[r].unformat;break}i=(a=a||e._.stringToNumber)(n)}else i=Number(n)||null;return new l(n,i)}).version="2.0.6",e.isNumeral=function(e){return e instanceof l},e._=t={numberToFormat:function(t,n,i){var r,o,s,u,l,c,m,d,h=a[e.options.currentLocale],p=!1,f=!1,g="",y="",v=!1;if(t=t||0,s=Math.abs(t),e._.includes(n,"(")?(p=!0,n=n.replace(/[\(|\)]/g,"")):(e._.includes(n,"+")||e._.includes(n,"-"))&&(c=e._.includes(n,"+")?n.indexOf("+"):t<0?n.indexOf("-"):-1,n=n.replace(/[\+|\-]/g,"")),e._.includes(n,"a")&&(o=!!(o=n.match(/a(k|m|b|t)?/))&&o[1],e._.includes(n," a")&&(g=" "),n=n.replace(new RegExp(g+"a[kmbt]?"),""),s>=1e12&&!o||"t"===o?(g+=h.abbreviations.trillion,t/=1e12):s<1e12&&s>=1e9&&!o||"b"===o?(g+=h.abbreviations.billion,t/=1e9):s<1e9&&s>=1e6&&!o||"m"===o?(g+=h.abbreviations.million,t/=1e6):(s<1e6&&s>=1e3&&!o||"k"===o)&&(g+=h.abbreviations.thousand,t/=1e3)),e._.includes(n,"[.]")&&(f=!0,n=n.replace("[.]",".")),u=t.toString().split(".")[0],l=n.split(".")[1],m=n.indexOf(","),r=(n.split(".")[0].split(",")[0].match(/0/g)||[]).length,l?(e._.includes(l,"[")?(l=(l=l.replace("]","")).split("["),y=e._.toFixed(t,l[0].length+l[1].length,i,l[1].length)):y=e._.toFixed(t,l.length,i),u=y.split(".")[0],y=e._.includes(y,".")?h.delimiters.decimal+y.split(".")[1]:"",f&&0===Number(y.slice(1))&&(y="")):u=e._.toFixed(t,0,i),g&&!o&&Number(u)>=1e3&&g!==h.abbreviations.trillion)switch(u=String(Number(u)/1e3),g){case h.abbreviations.thousand:g=h.abbreviations.million;break;case h.abbreviations.million:g=h.abbreviations.billion;break;case h.abbreviations.billion:g=h.abbreviations.trillion}if(e._.includes(u,"-")&&(u=u.slice(1),v=!0),u.length<r)for(var C=r-u.length;C>0;C--)u="0"+u;return m>-1&&(u=u.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+h.delimiters.thousands)),0===n.indexOf(".")&&(u=""),d=u+y+(g||""),p?d=(p&&v?"(":"")+d+(p&&v?")":""):c>=0?d=0===c?(v?"-":"+")+d:d+(v?"-":"+"):v&&(d="-"+d),d},stringToNumber:function(e){var t,n,i,r=a[u.currentLocale],o=e,s={thousand:3,million:6,billion:9,trillion:12};if(u.zeroFormat&&e===u.zeroFormat)n=0;else if(u.nullFormat&&e===u.nullFormat||!e.replace(/[^0-9]+/g,"").length)n=null;else{for(t in n=1,"."!==r.delimiters.decimal&&(e=e.replace(/\./g,"").replace(r.delimiters.decimal,".")),s)if(i=new RegExp("[^a-zA-Z]"+r.abbreviations[t]+"(?:\\)|(\\"+r.currency.symbol+")?(?:\\))?)?$"),o.match(i)){n*=Math.pow(10,s[t]);break}n*=(e.split("-").length+Math.min(e.split("(").length-1,e.split(")").length-1))%2?1:-1,e=e.replace(/[^0-9\.]+/g,""),n*=Number(e)}return n},isNaN:function(e){return"number"==typeof e&&isNaN(e)},includes:function(e,t){return-1!==e.indexOf(t)},insert:function(e,t,n){return e.slice(0,n)+t+e.slice(n)},reduce:function(e,t){if(null===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof t)throw new TypeError(t+" is not a function");var n,i=Object(e),r=i.length>>>0,o=0;if(3===arguments.length)n=arguments[2];else{for(;o<r&&!(o in i);)o++;if(o>=r)throw new TypeError("Reduce of empty array with no initial value");n=i[o++]}for(;o<r;o++)o in i&&(n=t(n,i[o],o,i));return n},multiplier:function(e){var t=e.toString().split(".");return t.length<2?1:Math.pow(10,t[1].length)},correctionFactor:function(){return Array.prototype.slice.call(arguments).reduce(function(e,n){var i=t.multiplier(n);return e>i?e:i},1)},toFixed:function(e,t,n,i){var r,o,a,s,u=e.toString().split("."),l=t-(i||0);return r=2===u.length?Math.min(Math.max(u[1].length,l),t):l,a=Math.pow(10,r),s=(n(e+"e+"+r)/a).toFixed(r),i>t-r&&(o=new RegExp("\\.?0{1,"+(i-(t-r))+"}$"),s=s.replace(o,"")),s}},e.options=u,e.formats=o,e.locales=a,e.locale=function(e){return e&&(u.currentLocale=e.toLowerCase()),u.currentLocale},e.localeData=function(e){if(!e)return a[u.currentLocale];if(e=e.toLowerCase(),!a[e])throw new Error("Unknown locale : "+e);return a[e]},e.reset=function(){for(var e in s)u[e]=s[e]},e.zeroFormat=function(e){u.zeroFormat="string"==typeof e?e:null},e.nullFormat=function(e){u.nullFormat="string"==typeof e?e:null},e.defaultFormat=function(e){u.defaultFormat="string"==typeof e?e:"0.0"},e.register=function(e,t,n){if(t=t.toLowerCase(),this[e+"s"][t])throw new TypeError(t+" "+e+" already registered.");return this[e+"s"][t]=n,n},e.validate=function(t,n){var i,r,o,a,s,u,l,c;if("string"!=typeof t&&(t+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",t)),(t=t.trim()).match(/^\d+$/))return!0;if(""===t)return!1;try{l=e.localeData(n)}catch(t){l=e.localeData(e.locale())}return o=l.currency.symbol,s=l.abbreviations,i=l.delimiters.decimal,r="."===l.delimiters.thousands?"\\.":l.delimiters.thousands,!(null!==(c=t.match(/^[^\d]+/))&&(t=t.substr(1),c[0]!==o)||null!==(c=t.match(/[^\d]+$/))&&(t=t.slice(0,-1),c[0]!==s.thousand&&c[0]!==s.million&&c[0]!==s.billion&&c[0]!==s.trillion)||(u=new RegExp(r+"{2}"),t.match(/[^\d.,]/g)||(a=t.split(i)).length>2||(a.length<2?!a[0].match(/^\d+.*\d$/)||a[0].match(u):1===a[0].length?!a[0].match(/^\d+$/)||a[0].match(u)||!a[1].match(/^\d+$/):!a[0].match(/^\d+.*\d$/)||a[0].match(u)||!a[1].match(/^\d+$/))))},e.fn=l.prototype={clone:function(){return e(this)},format:function(t,n){var i,r,a,s=this._value,l=t||u.defaultFormat;if(n=n||Math.round,0===s&&null!==u.zeroFormat)r=u.zeroFormat;else if(null===s&&null!==u.nullFormat)r=u.nullFormat;else{for(i in o)if(l.match(o[i].regexps.format)){a=o[i].format;break}r=(a=a||e._.numberToFormat)(s,l,n)}return r},value:function(){return this._value},input:function(){return this._input},set:function(e){return this._value=Number(e),this},add:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([this._value,e],function(e,t,i,r){return e+Math.round(n*t)},0)/n,this},subtract:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([e],function(e,t,i,r){return e-Math.round(n*t)},Math.round(this._value*n))/n,this},multiply:function(e){return this._value=t.reduce([this._value,e],function(e,n,i,r){var o=t.correctionFactor(e,n);return Math.round(e*o)*Math.round(n*o)/Math.round(o*o)},1),this},divide:function(e){return this._value=t.reduce([this._value,e],function(e,n,i,r){var o=t.correctionFactor(e,n);return Math.round(e*o)/Math.round(n*o)}),this},difference:function(t){return Math.abs(e(this._value).subtract(t).value())}},e.register("locale","en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$"}}),e.register("format","bps",{regexps:{format:/(BPS)/,unformat:/(BPS)/},format:function(t,n,i){var r,o=e._.includes(n," BPS")?" ":"";return t*=1e4,n=n.replace(/\s?BPS/,""),r=e._.numberToFormat(t,n,i),e._.includes(r,")")?((r=r.split("")).splice(-1,0,o+"BPS"),r=r.join("")):r=r+o+"BPS",r},unformat:function(t){return+(1e-4*e._.stringToNumber(t)).toFixed(15)}}),i={base:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},r="("+(r=(n={base:1e3,suffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}).suffixes.concat(i.suffixes.filter(function(e){return n.suffixes.indexOf(e)<0})).join("|")).replace("B","B(?!PS)")+")",e.register("format","bytes",{regexps:{format:/([0\s]i?b)/,unformat:new RegExp(r)},format:function(t,r,o){var a,s,u,l=e._.includes(r,"ib")?i:n,c=e._.includes(r," b")||e._.includes(r," ib")?" ":"";for(r=r.replace(/\s?i?b/,""),a=0;a<=l.suffixes.length;a++)if(s=Math.pow(l.base,a),u=Math.pow(l.base,a+1),null===t||0===t||t>=s&&t<u){c+=l.suffixes[a],s>0&&(t/=s);break}return e._.numberToFormat(t,r,o)+c},unformat:function(t){var r,o,a=e._.stringToNumber(t);if(a){for(r=n.suffixes.length-1;r>=0;r--){if(e._.includes(t,n.suffixes[r])){o=Math.pow(n.base,r);break}if(e._.includes(t,i.suffixes[r])){o=Math.pow(i.base,r);break}}a*=o||1}return a}}),e.register("format","currency",{regexps:{format:/(\$)/},format:function(t,n,i){var r,o,a=e.locales[e.options.currentLocale],s={before:n.match(/^([\+|\-|\(|\s|\$]*)/)[0],after:n.match(/([\+|\-|\)|\s|\$]*)$/)[0]};for(n=n.replace(/\s?\$\s?/,""),r=e._.numberToFormat(t,n,i),t>=0?(s.before=s.before.replace(/[\-\(]/,""),s.after=s.after.replace(/[\-\)]/,"")):t<0&&!e._.includes(s.before,"-")&&!e._.includes(s.before,"(")&&(s.before="-"+s.before),o=0;o<s.before.length;o++)switch(s.before[o]){case"$":r=e._.insert(r,a.currency.symbol,o);break;case" ":r=e._.insert(r," ",o+a.currency.symbol.length-1)}for(o=s.after.length-1;o>=0;o--)switch(s.after[o]){case"$":r=o===s.after.length-1?r+a.currency.symbol:e._.insert(r,a.currency.symbol,-(s.after.length-(1+o)));break;case" ":r=o===s.after.length-1?r+" ":e._.insert(r," ",-(s.after.length-(1+o)+a.currency.symbol.length-1))}return r}}),e.register("format","exponential",{regexps:{format:/(e\+|e-)/,unformat:/(e\+|e-)/},format:function(t,n,i){var r=("number"!=typeof t||e._.isNaN(t)?"0e+0":t.toExponential()).split("e");return n=n.replace(/e[\+|\-]{1}0/,""),e._.numberToFormat(Number(r[0]),n,i)+"e"+r[1]},unformat:function(t){var n=e._.includes(t,"e+")?t.split("e+"):t.split("e-"),i=Number(n[0]),r=Number(n[1]);return r=e._.includes(t,"e-")?r*=-1:r,e._.reduce([i,Math.pow(10,r)],function(t,n,i,r){var o=e._.correctionFactor(t,n);return t*o*(n*o)/(o*o)},1)}}),e.register("format","ordinal",{regexps:{format:/(o)/},format:function(t,n,i){var r=e.locales[e.options.currentLocale],o=e._.includes(n," o")?" ":"";return n=n.replace(/\s?o/,""),o+=r.ordinal(t),e._.numberToFormat(t,n,i)+o}}),e.register("format","percentage",{regexps:{format:/(%)/,unformat:/(%)/},format:function(t,n,i){var r,o=e._.includes(n," %")?" ":"";return e.options.scalePercentBy100&&(t*=100),n=n.replace(/\s?\%/,""),r=e._.numberToFormat(t,n,i),e._.includes(r,")")?((r=r.split("")).splice(-1,0,o+"%"),r=r.join("")):r=r+o+"%",r},unformat:function(t){var n=e._.stringToNumber(t);return e.options.scalePercentBy100?.01*n:n}}),e.register("format","time",{regexps:{format:/(:)/,unformat:/(:)/},format:function(e,t,n){var i=Math.floor(e/60/60),r=Math.floor((e-60*i*60)/60),o=Math.round(e-60*i*60-60*r);return i+":"+(r<10?"0"+r:r)+":"+(o<10?"0"+o:o)},unformat:function(e){var t=e.split(":"),n=0;return 3===t.length?(n+=60*Number(t[0])*60,n+=60*Number(t[1]),n+=Number(t[2])):2===t.length&&(n+=60*Number(t[0]),n+=Number(t[1])),Number(n)}}),e})?i.call(t,n,t,e):i)||(e.exports=r)},function(e,t,n){e.exports=n(139)},function(e,t,n){!function(){"use strict";var t=n(140),i=function(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)};i.prototype={valueOf:function(){return this.toString()},toString:function(){return"["+this.curves.map(function(e){return t.pointsToString(e.points)}).join(", ")+"]"},addCurve:function(e){this.curves.push(e),this._3d=this._3d||e._3d},length:function(){return this.curves.map(function(e){return e.length()}).reduce(function(e,t){return e+t})},curve:function(e){return this.curves[e]},bbox:function(){for(var e=this.curves,n=e[0].bbox(),i=1;i<e.length;i++)t.expandbox(n,e[i].bbox());return n},offset:function(e){var t=[];return this.curves.forEach(function(n){t=t.concat(n.offset(e))}),new i(t)}},e.exports=i}()},function(e,t,n){var i=n(212),r={x:!1,y:!1};function o(e,t,n){if("Z"!==t){if("M"!==t){var i=[!1,r.x,r.y].concat(n),o=new(e.bind.apply(e,i)),a=n.slice(-2);return r={x:a[0],y:a[1]},o}r={x:n[0],y:n[1]}}}e.exports=function(e,t){for(var n,r,a=i(t).split(" "),s=new RegExp("[MLCQZ]",""),u=[],l={C:6,Q:4,L:2,M:2};a.length;)n=a.splice(0,1)[0],s.test(n)&&(r=o(e,n,a.splice(0,l[n]).map(parseFloat)))&&u.push(r);return new e.PolyBezier(u)}},function(e,t){e.exports=function(e){var t,n,i,r,o,a,s=(e=e.replace(/,/g," ").replace(/-/g," - ").replace(/-\s+/g,"-").replace(/([a-zA-Z])/g," $1 ")).replace(/([a-zA-Z])\s?/g,"|$1").split("|"),u=s.length,l=[],c=0,m=0,d=0,h=0,p=0,f=0,g=0,y=0,v="";for(t=1;t<u;t++)if(r=(i=(n=s[t]).substring(0,1)).toLowerCase(),o=(l=(l=n.replace(i,"").trim().split(" ")).filter(function(e){return""!==e}).map(parseFloat)).length,"m"===r){if(v+="M ","m"===i?(d+=l[0],h+=l[1]):(d=l[0],h=l[1]),c=d,m=h,v+=d+" "+h+" ",o>2)for(a=0;a<o;a+=2)"m"===i?(d+=l[a],h+=l[a+1]):(d=l[a],h=l[a+1]),v+=["L",d,h,""].join(" ")}else if("l"===r)for(a=0;a<o;a+=2)"l"===i?(d+=l[a],h+=l[a+1]):(d=l[a],h=l[a+1]),v+=["L",d,h,""].join(" ");else if("h"===r)for(a=0;a<o;a++)"h"===i?d+=l[a]:d=l[a],v+=["L",d,h,""].join(" ");else if("v"===r)for(a=0;a<o;a++)"v"===i?h+=l[a]:h=l[a],v+=["L",d,h,""].join(" ");else if("q"===r)for(a=0;a<o;a+=4)"q"===i?(p=d+l[a],f=h+l[a+1],d+=l[a+2],h+=l[a+3]):(p=l[a],f=l[a+1],d=l[a+2],h=l[a+3]),v+=["Q",p,f,d,h,""].join(" ");else if("t"===r)for(a=0;a<o;a+=2)p=d+(d-p),f=h+(h-f),"t"===i?(d+=l[a],h+=l[a+1]):(d=l[a],h=l[a+1]),v+=["Q",p,f,d,h,""].join(" ");else if("c"===r)for(a=0;a<o;a+=6)"c"===i?(p=d+l[a],f=h+l[a+1],g=d+l[a+2],y=h+l[a+3],d+=l[a+4],h+=l[a+5]):(p=l[a],f=l[a+1],g=l[a+2],y=l[a+3],d=l[a+4],h=l[a+5]),v+=["C",p,f,g,y,d,h,""].join(" ");else if("s"===r)for(a=0;a<o;a+=4)p=d+(d-g),f=h+(h-y),"s"===i?(g=d+l[a],y=h+l[a+1],d+=l[a+2],h+=l[a+3]):(g=l[a],y=l[a+1],d=l[a+2],h=l[a+3]),v+=["C",p,f,g,y,d,h,""].join(" ");else"z"===r&&(v+="Z ",d=c,h=m);return v.trim()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"computeDestinationPoint",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"convertArea",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"convertDistance",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"convertSpeed",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"decimalToSexagesimal",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"findNearest",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"getAreaOfPolygon",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"getBounds",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"getBoundsOfDistance",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"getCenter",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"getCenterOfBounds",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"getCompassDirection",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"getCoordinateKey",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"getCoordinateKeys",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"getDistance",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"getDistanceFromLine",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"getGreatCircleBearing",{enumerable:!0,get:function(){return C.default}}),Object.defineProperty(t,"getLatitude",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(t,"getLongitude",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"getPathLength",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(t,"getPreciseDistance",{enumerable:!0,get:function(){return x.default}}),Object.defineProperty(t,"getRhumbLineBearing",{enumerable:!0,get:function(){return M.default}}),Object.defineProperty(t,"getRoughCompassDirection",{enumerable:!0,get:function(){return O.default}}),Object.defineProperty(t,"getSpeed",{enumerable:!0,get:function(){return D.default}}),Object.defineProperty(t,"isDecimal",{enumerable:!0,get:function(){return P.default}}),Object.defineProperty(t,"isPointInLine",{enumerable:!0,get:function(){return T.default}}),Object.defineProperty(t,"isPointInPolygon",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"isPointNearLine",{enumerable:!0,get:function(){return E.default}}),Object.defineProperty(t,"isPointWithinRadius",{enumerable:!0,get:function(){return N.default}}),Object.defineProperty(t,"isSexagesimal",{enumerable:!0,get:function(){return F.default}}),Object.defineProperty(t,"isValidCoordinate",{enumerable:!0,get:function(){return I.default}}),Object.defineProperty(t,"isValidLatitude",{enumerable:!0,get:function(){return A.default}}),Object.defineProperty(t,"isValidLongitude",{enumerable:!0,get:function(){return L.default}}),Object.defineProperty(t,"orderByDistance",{enumerable:!0,get:function(){return R.default}}),Object.defineProperty(t,"sexagesimalToDecimal",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(t,"toDecimal",{enumerable:!0,get:function(){return z.default}}),Object.defineProperty(t,"toRad",{enumerable:!0,get:function(){return B.default}}),Object.defineProperty(t,"toDeg",{enumerable:!0,get:function(){return V.default}});var i=j(n(214)),r=j(n(215)),o=j(n(216)),a=j(n(217)),s=j(n(218)),u=j(n(219)),l=j(n(220)),c=j(n(146)),m=j(n(221)),d=j(n(222)),h=j(n(223)),p=j(n(224)),f=j(n(67)),g=j(n(105)),y=j(n(34)),v=j(n(148)),C=j(n(225)),S=j(n(17)),b=j(n(18)),w=j(n(226)),x=j(n(227)),M=j(n(147)),O=j(n(228)),D=j(n(229)),P=j(n(68)),T=j(n(230)),_=j(n(231)),E=j(n(232)),N=j(n(233)),F=j(n(69)),I=j(n(142)),A=j(n(143)),L=j(n(144)),R=j(n(145)),k=j(n(70)),z=j(n(104)),B=j(n(24)),V=j(n(39));function j(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=u(n(17)),r=u(n(18)),o=u(n(24)),a=u(n(39)),s=n(10);function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t,n){var u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:6371e3,l=(0,i.default)(e),c=(0,r.default)(e),m=t/u,d=(0,o.default)(n),h=(0,o.default)(l),p=(0,o.default)(c),f=Math.asin(Math.sin(h)*Math.cos(m)+Math.cos(h)*Math.sin(m)*Math.cos(d)),g=p+Math.atan2(Math.sin(d)*Math.sin(m)*Math.cos(h),Math.cos(m)-Math.sin(h)*Math.sin(f)),y=(0,a.default)(g);return(y<s.MINLON||y>s.MAXLON)&&(g=(g+3*Math.PI)%(2*Math.PI)-Math.PI,y=(0,a.default)(g)),{latitude:(0,a.default)(f),longitude:y}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"m",n=i.areaConversion[t];if(n)return e*n;throw new Error("Invalid unit used for area conversion.")};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"m",n=i.distanceConversion[t];if(n)return e*n;throw new Error("Invalid unit used for distance conversion.")};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(10),r=function(e){switch(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"kmh"){case"kmh":return e*i.timeConversion.h*i.distanceConversion.km;case"mph":return e*i.timeConversion.h*i.distanceConversion.mi;default:return e}};t.default=r},function(e,t,n){"use strict";function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){var t=Math.pow(10,12);return Math.round(e*t)/t},o=function(e){var t=i(e.toString().split("."),2),n=t[0],o=t[1],a=Math.abs(Number(n)),s=r(60*Number("0."+(o||0))),u=Math.floor(s),l=r(60*(s%u||0));return a+"° "+Number(u.toFixed(6)).toString().split(".").map(function(e,t){return 0===t?e.padStart(2,"0"):e}).join(".")+"' "+Number(l.toFixed(4)).toString().split(".").map(function(e,t){return 0===t?e.padStart(2,"0"):e}).join(".")+'"'};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(145))&&i.__esModule?i:{default:i};var o=function(e,t){return(0,r.default)(e,t)[0]};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(24)),r=s(n(17)),o=s(n(18)),a=n(10);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){var t=0;if(e.length>2){for(var n,s,u,l=0;l<e.length;l++){l===e.length-2?(n=e.length-2,s=e.length-1,u=0):l===e.length-1?(n=e.length-1,s=0,u=1):(n=l,s=l+1,u=l+2);var c=(0,o.default)(e[n]),m=(0,r.default)(e[s]),d=(0,o.default)(e[u]);t+=((0,i.default)(d)-(0,i.default)(c))*Math.sin((0,i.default)(m))}t=t*a.earthRadius*a.earthRadius/2}return Math.abs(t)};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=u(n(17)),r=u(n(18)),o=u(n(24)),a=u(n(39)),s=n(10);function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t){var n,u,l=(0,i.default)(e),c=(0,r.default)(e),m=(0,o.default)(l),d=(0,o.default)(c),h=t/s.earthRadius,p=m-h,f=m+h,g=(0,o.default)(s.MAXLAT),y=(0,o.default)(s.MINLAT),v=(0,o.default)(s.MAXLON),C=(0,o.default)(s.MINLON);if(p>y&&f<g){var S=Math.asin(Math.sin(h)/Math.cos(m));(n=d-S)<C&&(n+=2*Math.PI),(u=d+S)>v&&(u-=2*Math.PI)}else p=Math.max(p,y),f=Math.min(f,g),n=C,u=v;return[{latitude:(0,a.default)(p),longitude:(0,a.default)(n)},{latitude:(0,a.default)(f),longitude:(0,a.default)(u)}]};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(17)),r=s(n(18)),o=s(n(24)),a=s(n(39));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){if(!1===Array.isArray(e)||0===e.length)return!1;var t=e.length,n=e.reduce(function(e,t){var n=(0,o.default)((0,i.default)(t)),a=(0,o.default)((0,r.default)(t));return{X:e.X+Math.cos(n)*Math.cos(a),Y:e.Y+Math.cos(n)*Math.sin(a),Z:e.Z+Math.sin(n)}},{X:0,Y:0,Z:0}),s=n.X/t,u=n.Y/t,l=n.Z/t;return{longitude:(0,a.default)(Math.atan2(u,s)),latitude:(0,a.default)(Math.atan2(l,Math.sqrt(s*s+u*u)))}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(146))&&i.__esModule?i:{default:i};var o=function(e){var t=(0,r.default)(e),n=t.minLat+(t.maxLat-t.minLat)/2,i=t.minLng+(t.maxLng-t.minLng)/2;return{latitude:parseFloat(n.toFixed(6)),longitude:parseFloat(i.toFixed(6))}};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(147))&&i.__esModule?i:{default:i};var o=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.default,i="function"==typeof n?n(e,t):(0,r.default)(e,t);if(isNaN(i))throw new Error("Could not calculate bearing for given points. Check your bearing function");switch(Math.round(i/22.5)){case 1:return"NNE";case 2:return"NE";case 3:return"ENE";case 4:return"E";case 5:return"ESE";case 6:return"SE";case 7:return"SSE";case 8:return"S";case 9:return"SSW";case 10:return"SW";case 11:return"WSW";case 12:return"W";case 13:return"WNW";case 14:return"NW";case 15:return"NNW";default:return"N"}};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(17)),r=s(n(18)),o=s(n(24)),a=s(n(39));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=(0,i.default)(t),s=(0,r.default)(t),u=(0,i.default)(e),l=(0,r.default)(e);return((0,a.default)(Math.atan2(Math.sin((0,o.default)(s)-(0,o.default)(l))*Math.cos((0,o.default)(n)),Math.cos((0,o.default)(u))*Math.sin((0,o.default)(n))-Math.sin((0,o.default)(u))*Math.cos((0,o.default)(n))*Math.cos((0,o.default)(s)-(0,o.default)(l))))+360)%360};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(34))&&i.__esModule?i:{default:i};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.default;return e.reduce(function(e,n){return"object"===o(e)&&null!==e.last&&(e.distance+=t(n,e.last)),e.last=n,e},{last:null,distance:0}).distance};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(17)),r=s(n(18)),o=s(n(24)),a=n(10);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;n=void 0===n||isNaN(n)?1:n;var s,u,l,c,m,d,h,p=(0,i.default)(e),f=(0,r.default)(e),g=(0,i.default)(t),y=(0,r.default)(t),v=6356752.314245,C=(0,o.default)(y-f),S=Math.atan(.9966471893352525*Math.tan((0,o.default)(parseFloat(p)))),b=Math.atan(.9966471893352525*Math.tan((0,o.default)(parseFloat(g)))),w=Math.sin(S),x=Math.cos(S),M=Math.sin(b),O=Math.cos(b),D=C,P=100;do{var T=Math.sin(D),_=Math.cos(D);if(0===(d=Math.sqrt(O*T*(O*T)+(x*M-w*O*_)*(x*M-w*O*_))))return 0;s=w*M+x*O*_,u=Math.atan2(d,s),m=s-2*w*M/(c=1-(l=x*O*T/d)*l),isNaN(m)&&(m=0);var E=1/298.257223563/16*c*(4+1/298.257223563*(4-3*c));h=D,D=C+1/298.257223563*(1-E)*l*(u+E*d*(m+E*s*(2*m*m-1)))}while(Math.abs(D-h)>1e-12&&--P>0);if(0===P)return NaN;var N=c*(a.earthRadius*a.earthRadius-v*v)/(v*v),F=N/1024*(256+N*(N*(74-47*N)-128)),I=v*(1+N/16384*(4096+N*(N*(320-175*N)-768)))*(u-F*d*(m+F/4*(s*(2*m*m-1)-F/6*m*(4*d*d-3)*(4*m*m-3))));return Math.round(I/n)*n};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return/^NNE|NE|NNW|N$/.test(e)?"N":/^ENE|E|ESE|SE$/.test(e)?"E":/^SSE|S|SSW|SW$/.test(e)?"S":/^WSW|W|WNW|NW$/.test(e)?"W":void 0};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(34))&&i.__esModule?i:{default:i};var o=function(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.default)(e,t)/(Number(t.time)-Number(e.time))*1e3};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(34))&&i.__esModule?i:{default:i};var o=function(e,t,n){return(0,r.default)(t,e)+(0,r.default)(e,n)===(0,r.default)(t,n)};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=o(n(17)),r=o(n(18));function o(e){return e&&e.__esModule?e:{default:e}}var a=function(e,t){for(var n=!1,o=t.length,a=-1,s=o-1;++a<o;s=a)((0,r.default)(t[a])<=(0,r.default)(e)&&(0,r.default)(e)<(0,r.default)(t[s])||(0,r.default)(t[s])<=(0,r.default)(e)&&(0,r.default)(e)<(0,r.default)(t[a]))&&(0,i.default)(e)<((0,i.default)(t[s])-(0,i.default)(t[a]))*((0,r.default)(e)-(0,r.default)(t[a]))/((0,r.default)(t[s])-(0,r.default)(t[a]))+(0,i.default)(t[a])&&(n=!n);return n};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(148))&&i.__esModule?i:{default:i};var o=function(e,t,n,i){return(0,r.default)(e,t,n)<i};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,r=(i=n(34))&&i.__esModule?i:{default:i};var o=function(e,t,n){return(0,r.default)(e,t)<n};t.default=o},function(e,t,n){(function(e,t,i,r,o){
/*!
 LZ-UTF8 v0.5.5

 Copyright (c) 2018, Rotem Dan
 Released under the MIT license.

 Build date: 2018-07-30 

 Please report any issue at https://github.com/rotemdan/lzutf8.js/issues
*/
var a;if(function(r){r.runningInNodeJS=function(){return"object"==typeof e&&"object"==typeof e.versions&&"string"==typeof e.versions.node},r.runningInMainNodeJSModule=function(){return r.runningInNodeJS()&&n.c[n.s]===t},r.commonJSAvailable=function(){return"object"==typeof t.exports},r.runningInWebWorker=function(){return"undefined"==typeof window&&"object"==typeof self&&"function"==typeof self.addEventListener&&"function"==typeof self.close},r.runningInNodeChildProcess=function(){return r.runningInNodeJS()&&"function"==typeof e.send},r.runningInNullOrigin=function(){return"object"==typeof window&&"object"==typeof window.location&&("http:"!==document.location.protocol&&"https:"!==document.location.protocol)},r.webWorkersAvailable=function(){return"function"==typeof Worker&&!r.runningInNullOrigin()&&(!r.runningInNodeJS()&&!(navigator&&navigator.userAgent&&navigator.userAgent.indexOf("Android 4.3")>=0))},r.log=function(e,t){void 0===t&&(t=!1),"object"==typeof console&&(console.log(e),t&&"object"==typeof document&&(document.body.innerHTML+=e+"<br/>"))},r.createErrorMessage=function(e,t){if(void 0===t&&(t="Unhandled exception"),null==e)return t;if(t+=": ","object"==typeof e.content){if(r.runningInNodeJS())return t+e.content.stack;var n=JSON.stringify(e.content);return"{}"!==n?t+n:t+e.content}return"string"==typeof e.content?t+e.content:t+e},r.printExceptionAndStackTraceToConsole=function(e,t){void 0===t&&(t="Unhandled exception"),r.log(r.createErrorMessage(e,t))},r.getGlobalObject=function(){return"object"==typeof i?i:"object"==typeof window?window:"object"==typeof self?self:{}},r.toString=Object.prototype.toString,r.commonJSAvailable()&&(t.exports=r)}(a||(a={})),"function"==typeof Uint8Array&&0!==new Uint8Array(1).subarray(1).byteLength){var s=function(e,t){var n=function(e,t,n){return e<t?t:e>n?n:e};e|=0,t|=0,arguments.length<1&&(e=0),arguments.length<2&&(t=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e=n(e,0,this.length);var i=(t=n(t,0,this.length))-e;return i<0&&(i=0),new this.constructor(this.buffer,this.byteOffset+e*this.BYTES_PER_ELEMENT,i)},u=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],l=void 0;if("object"==typeof window?l=window:"object"==typeof self&&(l=self),void 0!==l)for(var c=0;c<u.length;c++)l[u[c]]&&(l[u[c]].prototype.subarray=s)}!function(e){var t=function(){function t(){}return t.compressAsync=function(t,n,i){var r=new e.Timer,o=new e.Compressor;if(!i)throw new TypeError("compressAsync: No callback argument given");if("string"==typeof t)t=e.encodeUTF8(t);else if(null==t||!(t instanceof Uint8Array))return void i(void 0,new TypeError("compressAsync: Invalid input argument, only 'string' and 'Uint8Array' are supported"));var a=e.ArrayTools.splitByteArray(t,n.blockSize),s=[],u=function(t){if(t<a.length){var l=void 0;try{l=o.compressBlock(a[t])}catch(e){return void i(void 0,e)}s.push(l),r.getElapsedTime()<=20?u(t+1):(e.enqueueImmediate(function(){return u(t+1)}),r.restart())}else{var c=e.ArrayTools.concatUint8Arrays(s);e.enqueueImmediate(function(){var t;try{t=e.CompressionCommon.encodeCompressedBytes(c,n.outputEncoding)}catch(e){return void i(void 0,e)}e.enqueueImmediate(function(){return i(t)})})}};e.enqueueImmediate(function(){return u(0)})},t.createCompressionStream=function(){var t=new e.Compressor,i=new(n(151).Transform)({decodeStrings:!0,highWaterMark:65536});return i._transform=function(n,r,o){var a;try{a=e.BufferTools.uint8ArrayToBuffer(t.compressBlock(e.BufferTools.bufferToUint8Array(n)))}catch(e){return void i.emit("error",e)}i.push(a),o()},i},t}();e.AsyncCompressor=t}(a||(a={})),function(e){var t=function(){function t(){}return t.decompressAsync=function(t,n,i){if(!i)throw new TypeError("decompressAsync: No callback argument given");var r=new e.Timer;try{t=e.CompressionCommon.decodeCompressedBytes(t,n.inputEncoding)}catch(e){return void i(void 0,e)}var o=new e.Decompressor,a=e.ArrayTools.splitByteArray(t,n.blockSize),s=[],u=function(t){if(t<a.length){var l=void 0;try{l=o.decompressBlock(a[t])}catch(e){return void i(void 0,e)}s.push(l),r.getElapsedTime()<=20?u(t+1):(e.enqueueImmediate(function(){return u(t+1)}),r.restart())}else{var c=e.ArrayTools.concatUint8Arrays(s);e.enqueueImmediate(function(){var t;try{t=e.CompressionCommon.encodeDecompressedBytes(c,n.outputEncoding)}catch(e){return void i(void 0,e)}e.enqueueImmediate(function(){return i(t)})})}};e.enqueueImmediate(function(){return u(0)})},t.createDecompressionStream=function(){var t=new e.Decompressor,i=new(n(151).Transform)({decodeStrings:!0,highWaterMark:65536});return i._transform=function(n,r,o){var a;try{a=e.BufferTools.uint8ArrayToBuffer(t.decompressBlock(e.BufferTools.bufferToUint8Array(n)))}catch(e){return void i.emit("error",e)}i.push(a),o()},i},t}();e.AsyncDecompressor=t}(a||(a={})),function(e){var t;!function(t){t.compressAsync=function(e,n,i){if("ByteArray"!=n.inputEncoding||e instanceof Uint8Array){var r={token:Math.random().toString(),type:"compress",data:e,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},o=function(e){var n=e.data;n&&n.token==r.token&&(t.globalWorker.removeEventListener("message",o),"error"==n.type?i(void 0,new Error(n.error)):i(n.data))};t.globalWorker.addEventListener("message",o),t.globalWorker.postMessage(r,[])}else i(void 0,new TypeError("compressAsync: input is not a Uint8Array"))},t.decompressAsync=function(e,n,i){var r={token:Math.random().toString(),type:"decompress",data:e,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},o=function(e){var n=e.data;n&&n.token==r.token&&(t.globalWorker.removeEventListener("message",o),"error"==n.type?i(void 0,new Error(n.error)):i(n.data))};t.globalWorker.addEventListener("message",o),t.globalWorker.postMessage(r,[])},t.installWebWorkerIfNeeded=function(){"object"==typeof self&&void 0===self.document&&null!=self.addEventListener&&(self.addEventListener("message",function(t){var n=t.data;if("compress"==n.type){var i=void 0;try{i=e.compress(n.data,{outputEncoding:n.outputEncoding})}catch(t){return void self.postMessage({token:n.token,type:"error",error:e.createErrorMessage(t)},[])}(r={token:n.token,type:"compressionResult",data:i,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(r,[r.data.buffer]):self.postMessage(r,[])}else if("decompress"==n.type){var r,o=void 0;try{o=e.decompress(n.data,{inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding})}catch(t){return void self.postMessage({token:n.token,type:"error",error:e.createErrorMessage(t)},[])}(r={token:n.token,type:"decompressionResult",data:o,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(r,[r.data.buffer]):self.postMessage(r,[])}}),self.addEventListener("error",function(t){e.log(e.createErrorMessage(t.error,"Unexpected LZUTF8 WebWorker exception"))}))},t.createGlobalWorkerIfNeeded=function(){if(t.globalWorker)return!0;if(!e.webWorkersAvailable())return!1;if(!t.scriptURI&&"object"==typeof document){var n=document.getElementById("lzutf8");null!=n&&(t.scriptURI=n.getAttribute("src")||void 0)}return!!t.scriptURI&&(t.globalWorker=new Worker(t.scriptURI),!0)},t.terminate=function(){t.globalWorker&&(t.globalWorker.terminate(),t.globalWorker=void 0)}}(t=e.WebWorker||(e.WebWorker={})),t.installWebWorkerIfNeeded()}(a||(a={})),function(e){var t=function(){function e(e,t,n){this.container=e,this.startPosition=t,this.length=n}return e.prototype.get=function(e){return this.container[this.startPosition+e]},e.prototype.getInReversedOrder=function(e){return this.container[this.startPosition+this.length-1-e]},e.prototype.set=function(e,t){this.container[this.startPosition+e]=t},e}();e.ArraySegment=t}(a||(a={})),function(e){!function(e){e.copyElements=function(e,t,n,i,r){for(;r--;)n[i++]=e[t++]},e.zeroElements=function(e,t,n){for(;n--;)e[t++]=0},e.countNonzeroValuesInArray=function(e){for(var t=0,n=0;n<e.length;n++)e[n]&&t++;return t},e.truncateStartingElements=function(e,t){if(e.length<=t)throw new RangeError("truncateStartingElements: Requested length should be smaller than array length");for(var n=e.length-t,i=0;i<t;i++)e[i]=e[n+i];e.length=t},e.doubleByteArrayCapacity=function(e){var t=new Uint8Array(2*e.length);return t.set(e),t},e.concatUint8Arrays=function(e){for(var t=0,n=0,i=e;n<i.length;n++){t+=(u=i[n]).length}for(var r=new Uint8Array(t),o=0,a=0,s=e;a<s.length;a++){var u=s[a];r.set(u,o),o+=u.length}return r},e.splitByteArray=function(e,t){for(var n=[],i=0;i<e.length;){var r=Math.min(t,e.length-i);n.push(e.subarray(i,i+r)),i+=r}return n}}(e.ArrayTools||(e.ArrayTools={}))}(a||(a={})),function(e){!function(e){e.convertToUint8ArrayIfNeeded=function(t){return"function"==typeof r&&r.isBuffer(t)?e.bufferToUint8Array(t):t},e.uint8ArrayToBuffer=function(e){if(r.prototype instanceof Uint8Array){var t=new Uint8Array(e.buffer,e.byteOffset,e.byteLength);return Object.setPrototypeOf(t,r.prototype),t}for(var n=e.length,i=new r(n),o=0;o<n;o++)i[o]=e[o];return i},e.bufferToUint8Array=function(e){if(r.prototype instanceof Uint8Array)return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);for(var t=e.length,n=new Uint8Array(t),i=0;i<t;i++)n[i]=e[i];return n}}(e.BufferTools||(e.BufferTools={}))}(a||(a={})),function(e){!function(t){t.getCroppedBuffer=function(e,t,n,i){void 0===i&&(i=0);var r=new Uint8Array(n+i);return r.set(e.subarray(t,t+n)),r},t.getCroppedAndAppendedByteArray=function(t,n,i,r){return e.ArrayTools.concatUint8Arrays([t.subarray(n,n+i),r])},t.detectCompressionSourceEncoding=function(e){if(null==e)throw new TypeError("detectCompressionSourceEncoding: input is null or undefined");if("string"==typeof e)return"String";if(e instanceof Uint8Array||"function"==typeof r&&r.isBuffer(e))return"ByteArray";throw new TypeError("detectCompressionSourceEncoding: input must be of type 'string', 'Uint8Array' or 'Buffer'")},t.encodeCompressedBytes=function(t,n){switch(n){case"ByteArray":return t;case"Buffer":return e.BufferTools.uint8ArrayToBuffer(t);case"Base64":return e.encodeBase64(t);case"BinaryString":return e.encodeBinaryString(t);case"StorageBinaryString":return e.encodeStorageBinaryString(t);default:throw new TypeError("encodeCompressedBytes: invalid output encoding requested")}},t.decodeCompressedBytes=function(t,n){if(null==n)throw new TypeError("decodeCompressedData: Input is null or undefined");switch(n){case"ByteArray":case"Buffer":var i=e.BufferTools.convertToUint8ArrayIfNeeded(t);if(!(i instanceof Uint8Array))throw new TypeError("decodeCompressedData: 'ByteArray' or 'Buffer' input type was specified but input is not a Uint8Array or Buffer");return i;case"Base64":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'Base64' input type was specified but input is not a string");return e.decodeBase64(t);case"BinaryString":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'BinaryString' input type was specified but input is not a string");return e.decodeBinaryString(t);case"StorageBinaryString":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'StorageBinaryString' input type was specified but input is not a string");return e.decodeStorageBinaryString(t);default:throw new TypeError("decodeCompressedData: invalid input encoding requested: '"+n+"'")}},t.encodeDecompressedBytes=function(t,n){switch(n){case"String":return e.decodeUTF8(t);case"ByteArray":return t;case"Buffer":if("function"!=typeof r)throw new TypeError("encodeDecompressedBytes: a 'Buffer' type was specified but is not supported at the current envirnment");return e.BufferTools.uint8ArrayToBuffer(t);default:throw new TypeError("encodeDecompressedBytes: invalid output encoding requested")}}}(e.CompressionCommon||(e.CompressionCommon={}))}(a||(a={})),function(e){var t;!function(t){var n,i=[];t.enqueueImmediate=function(e){i.push(e),1===i.length&&n()},t.initializeScheduler=function(){var t=function(){for(var t=0,n=i;t<n.length;t++){var r=n[t];try{r.call(void 0)}catch(t){e.printExceptionAndStackTraceToConsole(t,"enqueueImmediate exception")}}i.length=0};if(e.runningInNodeJS()&&(n=function(){return o(function(){return t()})}),"object"==typeof window&&"function"==typeof window.addEventListener&&"function"==typeof window.postMessage){var r,a="enqueueImmediate-"+Math.random().toString();window.addEventListener("message",function(e){e.data===a&&t()}),r=e.runningInNullOrigin()?"*":window.location.href,n=function(){return window.postMessage(a,r)}}else if("function"==typeof MessageChannel&&"function"==typeof MessagePort){var s=new MessageChannel;s.port1.onmessage=function(){return t()},n=function(){return s.port2.postMessage(0)}}else n=function(){return setTimeout(function(){return t()},0)}},t.initializeScheduler()}(t=e.EventLoop||(e.EventLoop={})),e.enqueueImmediate=function(e){return t.enqueueImmediate(e)}}(a||(a={})),function(e){!function(e){e.override=function(t,n){return e.extend(t,n)},e.extend=function(e,t){if(null==e)throw new TypeError("obj is null or undefined");if("object"!=typeof e)throw new TypeError("obj is not an object");if(null==t&&(t={}),"object"!=typeof t)throw new TypeError("newProperties is not an object");if(null!=t)for(var n in t)e[n]=t[n];return e}}(e.ObjectTools||(e.ObjectTools={}))}(a||(a={})),function(e){e.getRandomIntegerInRange=function(e,t){return e+Math.floor(Math.random()*(t-e))},e.getRandomUTF16StringOfLength=function(t){for(var n="",i=0;i<t;i++){var r=void 0;do{r=e.getRandomIntegerInRange(0,1114112)}while(r>=55296&&r<=57343);n+=e.Encoding.CodePoint.decodeToString(r)}return n}}(a||(a={})),function(e){var t=function(){function e(e){void 0===e&&(e=1024),this.outputBufferCapacity=e,this.outputPosition=0,this.outputString="",this.outputBuffer=new Uint16Array(this.outputBufferCapacity)}return e.prototype.appendCharCode=function(e){this.outputBuffer[this.outputPosition++]=e,this.outputPosition===this.outputBufferCapacity&&this.flushBufferToOutputString()},e.prototype.appendCharCodes=function(e){for(var t=0,n=e.length;t<n;t++)this.appendCharCode(e[t])},e.prototype.appendString=function(e){for(var t=0,n=e.length;t<n;t++)this.appendCharCode(e.charCodeAt(t))},e.prototype.appendCodePoint=function(e){if(e<=65535)this.appendCharCode(e);else{if(!(e<=1114111))throw new Error("appendCodePoint: A code point of "+e+" cannot be encoded in UTF-16");this.appendCharCode(55296+(e-65536>>>10)),this.appendCharCode(56320+(e-65536&1023))}},e.prototype.getOutputString=function(){return this.flushBufferToOutputString(),this.outputString},e.prototype.flushBufferToOutputString=function(){this.outputPosition===this.outputBufferCapacity?this.outputString+=String.fromCharCode.apply(null,this.outputBuffer):this.outputString+=String.fromCharCode.apply(null,this.outputBuffer.subarray(0,this.outputPosition)),this.outputPosition=0},e}();e.StringBuilder=t}(a||(a={})),function(t){var n=function(){function n(){this.restart()}return n.prototype.restart=function(){this.startTime=n.getTimestamp()},n.prototype.getElapsedTime=function(){return n.getTimestamp()-this.startTime},n.prototype.getElapsedTimeAndRestart=function(){var e=this.getElapsedTime();return this.restart(),e},n.prototype.logAndRestart=function(e,n){void 0===n&&(n=!0);var i=this.getElapsedTime(),r=e+": "+i.toFixed(3)+"ms";return t.log(r,n),this.restart(),i},n.getTimestamp=function(){return this.timestampFunc||this.createGlobalTimestampFunction(),this.timestampFunc()},n.getMicrosecondTimestamp=function(){return Math.floor(1e3*n.getTimestamp())},n.createGlobalTimestampFunction=function(){if("object"==typeof e&&"function"==typeof e.hrtime){var t=0;this.timestampFunc=function(){var n=e.hrtime(),i=1e3*n[0]+n[1]/1e6;return t+i},t=Date.now()-this.timestampFunc()}else if("object"==typeof chrome&&chrome.Interval){var n=Date.now(),i=new chrome.Interval;i.start(),this.timestampFunc=function(){return n+i.microseconds()/1e3}}else if("object"==typeof performance&&performance.now){var r=Date.now()-performance.now();this.timestampFunc=function(){return r+performance.now()}}else Date.now?this.timestampFunc=function(){return Date.now()}:this.timestampFunc=function(){return(new Date).getTime()}},n}();t.Timer=n}(a||(a={})),function(e){var t=function(){function t(t){void 0===t&&(t=!0),this.MinimumSequenceLength=4,this.MaximumSequenceLength=31,this.MaximumMatchDistance=32767,this.PrefixHashTableSize=65537,this.inputBufferStreamOffset=1,t&&"function"==typeof Uint32Array?this.prefixHashTable=new e.CompressorCustomHashTable(this.PrefixHashTableSize):this.prefixHashTable=new e.CompressorSimpleHashTable(this.PrefixHashTableSize)}return t.prototype.compressBlock=function(t){if(null==t)throw new TypeError("compressBlock: undefined or null input received");return"string"==typeof t&&(t=e.encodeUTF8(t)),t=e.BufferTools.convertToUint8ArrayIfNeeded(t),this.compressUtf8Block(t)},t.prototype.compressUtf8Block=function(e){if(!e||0==e.length)return new Uint8Array(0);var t=this.cropAndAddNewBytesToInputBuffer(e),n=this.inputBuffer,i=this.inputBuffer.length;this.outputBuffer=new Uint8Array(e.length),this.outputBufferPosition=0;for(var r=0,o=t;o<i;o++){var a=n[o],s=o<r;if(o>i-this.MinimumSequenceLength)s||this.outputRawByte(a);else{var u=this.getBucketIndexForPrefix(o);if(!s){var l=this.findLongestMatch(o,u);null!=l&&(this.outputPointerBytes(l.length,l.distance),r=o+l.length,s=!0)}s||this.outputRawByte(a);var c=this.inputBufferStreamOffset+o;this.prefixHashTable.addValueToBucket(u,c)}}return this.outputBuffer.subarray(0,this.outputBufferPosition)},t.prototype.findLongestMatch=function(e,t){var n=this.prefixHashTable.getArraySegmentForBucketIndex(t,this.reusableArraySegmentObject);if(null==n)return null;for(var i,r=this.inputBuffer,o=0,a=0;a<n.length;a++){var s=n.getInReversedOrder(a)-this.inputBufferStreamOffset,u=e-s,l=void 0;if(l=void 0===i?this.MinimumSequenceLength-1:i<128&&u>=128?o+(o>>>1):o,u>this.MaximumMatchDistance||l>=this.MaximumSequenceLength||e+l>=r.length)break;if(r[s+l]===r[e+l])for(var c=0;;c++){if(e+c===r.length||r[s+c]!==r[e+c]){c>l&&(i=u,o=c);break}if(c===this.MaximumSequenceLength)return{distance:u,length:this.MaximumSequenceLength}}}return void 0!==i?{distance:i,length:o}:null},t.prototype.getBucketIndexForPrefix=function(e){return(7880599*this.inputBuffer[e]+39601*this.inputBuffer[e+1]+199*this.inputBuffer[e+2]+this.inputBuffer[e+3])%this.PrefixHashTableSize},t.prototype.outputPointerBytes=function(e,t){t<128?(this.outputRawByte(192|e),this.outputRawByte(t)):(this.outputRawByte(224|e),this.outputRawByte(t>>>8),this.outputRawByte(255&t))},t.prototype.outputRawByte=function(e){this.outputBuffer[this.outputBufferPosition++]=e},t.prototype.cropAndAddNewBytesToInputBuffer=function(t){if(void 0===this.inputBuffer)return this.inputBuffer=t,0;var n=Math.min(this.inputBuffer.length,this.MaximumMatchDistance),i=this.inputBuffer.length-n;return this.inputBuffer=e.CompressionCommon.getCroppedAndAppendedByteArray(this.inputBuffer,i,n,t),this.inputBufferStreamOffset+=i,n},t}();e.Compressor=t}(a||(a={})),function(e){var t=function(){function t(e){this.minimumBucketCapacity=4,this.maximumBucketCapacity=64,this.bucketLocators=new Uint32Array(2*e),this.storage=new Uint32Array(2*e),this.storageIndex=1}return t.prototype.addValueToBucket=function(t,n){t<<=1,this.storageIndex>=this.storage.length>>>1&&this.compact();var i,r=this.bucketLocators[t];if(0===r)r=this.storageIndex,i=1,this.storage[this.storageIndex]=n,this.storageIndex+=this.minimumBucketCapacity;else{(i=this.bucketLocators[t+1])===this.maximumBucketCapacity-1&&(i=this.truncateBucketToNewerElements(r,i,this.maximumBucketCapacity/2));var o=r+i;0===this.storage[o]?(this.storage[o]=n,o===this.storageIndex&&(this.storageIndex+=i)):(e.ArrayTools.copyElements(this.storage,r,this.storage,this.storageIndex,i),r=this.storageIndex,this.storageIndex+=i,this.storage[this.storageIndex++]=n,this.storageIndex+=i),i++}this.bucketLocators[t]=r,this.bucketLocators[t+1]=i},t.prototype.truncateBucketToNewerElements=function(t,n,i){var r=t+n-i;return e.ArrayTools.copyElements(this.storage,r,this.storage,t,i),e.ArrayTools.zeroElements(this.storage,t+i,n-i),i},t.prototype.compact=function(){var t=this.bucketLocators,n=this.storage;this.bucketLocators=new Uint32Array(this.bucketLocators.length),this.storageIndex=1;for(var i=0;i<t.length;i+=2){var r=t[i+1];0!==r&&(this.bucketLocators[i]=this.storageIndex,this.bucketLocators[i+1]=r,this.storageIndex+=Math.max(Math.min(2*r,this.maximumBucketCapacity),this.minimumBucketCapacity))}this.storage=new Uint32Array(8*this.storageIndex);for(i=0;i<t.length;i+=2){var o=t[i];if(0!==o){var a=this.bucketLocators[i],s=this.bucketLocators[i+1];e.ArrayTools.copyElements(n,o,this.storage,a,s)}}},t.prototype.getArraySegmentForBucketIndex=function(t,n){t<<=1;var i=this.bucketLocators[t];return 0===i?null:(void 0===n&&(n=new e.ArraySegment(this.storage,i,this.bucketLocators[t+1])),n)},t.prototype.getUsedBucketCount=function(){return Math.floor(e.ArrayTools.countNonzeroValuesInArray(this.bucketLocators)/2)},t.prototype.getTotalElementCount=function(){for(var e=0,t=0;t<this.bucketLocators.length;t+=2)e+=this.bucketLocators[t+1];return e},t}();e.CompressorCustomHashTable=t}(a||(a={})),function(e){var t=function(){function t(e){this.maximumBucketCapacity=64,this.buckets=new Array(e)}return t.prototype.addValueToBucket=function(t,n){var i=this.buckets[t];void 0===i?this.buckets[t]=[n]:(i.length===this.maximumBucketCapacity-1&&e.ArrayTools.truncateStartingElements(i,this.maximumBucketCapacity/2),i.push(n))},t.prototype.getArraySegmentForBucketIndex=function(t,n){var i=this.buckets[t];return void 0===i?null:(void 0===n&&(n=new e.ArraySegment(i,0,i.length)),n)},t.prototype.getUsedBucketCount=function(){return e.ArrayTools.countNonzeroValuesInArray(this.buckets)},t.prototype.getTotalElementCount=function(){for(var e=0,t=0;t<this.buckets.length;t++)void 0!==this.buckets[t]&&(e+=this.buckets[t].length);return e},t}();e.CompressorSimpleHashTable=t}(a||(a={})),function(e){var t=function(){function t(){this.MaximumMatchDistance=32767,this.outputPosition=0}return t.prototype.decompressBlockToString=function(t){return t=e.BufferTools.convertToUint8ArrayIfNeeded(t),e.decodeUTF8(this.decompressBlock(t))},t.prototype.decompressBlock=function(t){this.inputBufferRemainder&&(t=e.ArrayTools.concatUint8Arrays([this.inputBufferRemainder,t]),this.inputBufferRemainder=void 0);for(var n=this.cropOutputBufferToWindowAndInitialize(Math.max(4*t.length,1024)),i=0,r=t.length;i<r;i++){var o=t[i];if(o>>>6==3){var a=o>>>5;if(i==r-1||i==r-2&&7==a){this.inputBufferRemainder=t.subarray(i);break}if(t[i+1]>>>7==1)this.outputByte(o);else{var s=31&o,u=void 0;6==a?(u=t[i+1],i+=1):(u=t[i+1]<<8|t[i+2],i+=2);for(var l=this.outputPosition-u,c=0;c<s;c++)this.outputByte(this.outputBuffer[l+c])}}else this.outputByte(o)}return this.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence(),e.CompressionCommon.getCroppedBuffer(this.outputBuffer,n,this.outputPosition-n)},t.prototype.outputByte=function(t){this.outputPosition===this.outputBuffer.length&&(this.outputBuffer=e.ArrayTools.doubleByteArrayCapacity(this.outputBuffer)),this.outputBuffer[this.outputPosition++]=t},t.prototype.cropOutputBufferToWindowAndInitialize=function(t){if(!this.outputBuffer)return this.outputBuffer=new Uint8Array(t),0;var n=Math.min(this.outputPosition,this.MaximumMatchDistance);if(this.outputBuffer=e.CompressionCommon.getCroppedBuffer(this.outputBuffer,this.outputPosition-n,n,t),this.outputPosition=n,this.outputBufferRemainder){for(var i=0;i<this.outputBufferRemainder.length;i++)this.outputByte(this.outputBufferRemainder[i]);this.outputBufferRemainder=void 0}return n},t.prototype.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence=function(){for(var e=1;e<=4&&this.outputPosition-e>=0;e++){var t=this.outputBuffer[this.outputPosition-e];if(e<4&&t>>>3==30||e<3&&t>>>4==14||e<2&&t>>>5==6)return this.outputBufferRemainder=this.outputBuffer.subarray(this.outputPosition-e,this.outputPosition),void(this.outputPosition-=e)}},t}();e.Decompressor=t}(a||(a={})),function(e){!function(t){!function(t){var n=new Uint8Array([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47]),i=new Uint8Array([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,255,255,255,255]);t.encode=function(n){return n&&0!=n.length?e.runningInNodeJS()?e.BufferTools.uint8ArrayToBuffer(n).toString("base64"):t.encodeWithJS(n):""},t.decode=function(n){return n?e.runningInNodeJS()?e.BufferTools.bufferToUint8Array(new r(n,"base64")):t.decodeWithJS(n):new Uint8Array(0)},t.encodeWithJS=function(t,i){if(void 0===i&&(i=!0),!t||0==t.length)return"";for(var r,o=n,a=new e.StringBuilder,s=0,u=t.length;s<u;s+=3)s<=u-3?(r=t[s]<<16|t[s+1]<<8|t[s+2],a.appendCharCode(o[r>>>18&63]),a.appendCharCode(o[r>>>12&63]),a.appendCharCode(o[r>>>6&63]),a.appendCharCode(o[63&r]),r=0):s===u-2?(r=t[s]<<16|t[s+1]<<8,a.appendCharCode(o[r>>>18&63]),a.appendCharCode(o[r>>>12&63]),a.appendCharCode(o[r>>>6&63]),i&&a.appendCharCode(61)):s===u-1&&(r=t[s]<<16,a.appendCharCode(o[r>>>18&63]),a.appendCharCode(o[r>>>12&63]),i&&(a.appendCharCode(61),a.appendCharCode(61)));return a.getOutputString()},t.decodeWithJS=function(e,t){if(!e||0==e.length)return new Uint8Array(0);var n=e.length%4;if(1===n)throw new Error("Invalid Base64 string: length % 4 == 1");2===n?e+="==":3===n&&(e+="="),t||(t=new Uint8Array(e.length));for(var r=0,o=e.length,a=0;a<o;a+=4){var s=i[e.charCodeAt(a)]<<18|i[e.charCodeAt(a+1)]<<12|i[e.charCodeAt(a+2)]<<6|i[e.charCodeAt(a+3)];t[r++]=s>>>16&255,t[r++]=s>>>8&255,t[r++]=255&s}return 61==e.charCodeAt(o-1)&&r--,61==e.charCodeAt(o-2)&&r--,t.subarray(0,r)}}(t.Base64||(t.Base64={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(t){!function(t){t.encode=function(t){if(null==t)throw new TypeError("BinaryString.encode: undefined or null input received");if(0===t.length)return"";for(var n=t.length,i=new e.StringBuilder,r=0,o=1,a=0;a<n;a+=2){var s=void 0;s=a==n-1?t[a]<<8:t[a]<<8|t[a+1],i.appendCharCode(r<<16-o|s>>>o),r=s&(1<<o)-1,15===o?(i.appendCharCode(r),r=0,o=1):o+=1,a>=n-2&&i.appendCharCode(r<<16-o)}return i.appendCharCode(32768|n%2),i.getOutputString()},t.decode=function(e){if("string"!=typeof e)throw new TypeError("BinaryString.decode: invalid input type");if(""==e)return new Uint8Array(0);for(var t=new Uint8Array(3*e.length),n=0,i=function(e){t[n++]=e>>>8,t[n++]=255&e},r=0,o=0,a=0;a<e.length;a++){var s=e.charCodeAt(a);s>=32768?(32769==s&&n--,o=0):(0==o?r=s:(i(r<<o|s>>>15-o),r=s&(1<<15-o)-1),15==o?o=0:o+=1)}return t.subarray(0,n)}}(t.BinaryString||(t.BinaryString={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(e){!function(e){e.encodeFromString=function(e,t){var n=e.charCodeAt(t);if(n<55296||n>56319)return n;var i=e.charCodeAt(t+1);if(i>=56320&&i<=57343)return i-56320+(n-55296<<10)+65536;throw new Error("getUnicodeCodePoint: Received a lead surrogate character, char code "+n+", followed by "+i+", which is not a trailing surrogate character code.")},e.decodeToString=function(e){if(e<=65535)return String.fromCharCode(e);if(e<=1114111)return String.fromCharCode(55296+(e-65536>>>10),56320+(e-65536&1023));throw new Error("getStringFromUnicodeCodePoint: A code point of "+e+" cannot be encoded in UTF-16")}}(e.CodePoint||(e.CodePoint={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(e){!function(e){var t=["000","001","002","003","004","005","006","007","008","009","010","011","012","013","014","015","016","017","018","019","020","021","022","023","024","025","026","027","028","029","030","031","032","033","034","035","036","037","038","039","040","041","042","043","044","045","046","047","048","049","050","051","052","053","054","055","056","057","058","059","060","061","062","063","064","065","066","067","068","069","070","071","072","073","074","075","076","077","078","079","080","081","082","083","084","085","086","087","088","089","090","091","092","093","094","095","096","097","098","099","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255"];e.encode=function(e){for(var n=[],i=0;i<e.length;i++)n.push(t[e[i]]);return n.join(" ")}}(e.DecimalString||(e.DecimalString={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(e){!function(t){t.encode=function(t){return e.BinaryString.encode(t).replace(/\0/g,"耂")},t.decode=function(t){return e.BinaryString.decode(t.replace(/\u8002/g,"\0"))}}(e.StorageBinaryString||(e.StorageBinaryString={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){!function(t){!function(n){var i,o;n.encode=function(t){return t&&0!=t.length?e.runningInNodeJS()?e.BufferTools.bufferToUint8Array(new r(t,"utf8")):n.createNativeTextEncoderAndDecoderIfAvailable()?i.encode(t):n.encodeWithJS(t):new Uint8Array(0)},n.decode=function(t){return t&&0!=t.length?e.runningInNodeJS()?e.BufferTools.uint8ArrayToBuffer(t).toString("utf8"):n.createNativeTextEncoderAndDecoderIfAvailable()?o.decode(t):n.decodeWithJS(t):""},n.encodeWithJS=function(e,n){if(!e||0==e.length)return new Uint8Array(0);n||(n=new Uint8Array(4*e.length));for(var i=0,r=0;r<e.length;r++){var o=t.CodePoint.encodeFromString(e,r);if(o<=127)n[i++]=o;else if(o<=2047)n[i++]=192|o>>>6,n[i++]=128|63&o;else if(o<=65535)n[i++]=224|o>>>12,n[i++]=128|o>>>6&63,n[i++]=128|63&o;else{if(!(o<=1114111))throw new Error("Invalid UTF-16 string: Encountered a character unsupported by UTF-8/16 (RFC 3629)");n[i++]=240|o>>>18,n[i++]=128|o>>>12&63,n[i++]=128|o>>>6&63,n[i++]=128|63&o,r++}}return n.subarray(0,i)},n.decodeWithJS=function(t,n,i){if(void 0===n&&(n=0),!t||0==t.length)return"";void 0===i&&(i=t.length);for(var r,o,a=new e.StringBuilder,s=n,u=i;s<u;){if((o=t[s])>>>7==0)r=o,s+=1;else if(o>>>5==6){if(s+1>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);r=(31&o)<<6|63&t[s+1],s+=2}else if(o>>>4==14){if(s+2>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);r=(15&o)<<12|(63&t[s+1])<<6|63&t[s+2],s+=3}else{if(o>>>3!=30)throw new Error("Invalid UTF-8 stream: An invalid lead byte value encountered at position "+s);if(s+3>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);r=(7&o)<<18|(63&t[s+1])<<12|(63&t[s+2])<<6|63&t[s+3],s+=4}a.appendCodePoint(r)}return a.getOutputString()},n.createNativeTextEncoderAndDecoderIfAvailable=function(){return!!i||"function"==typeof TextEncoder&&(i=new TextEncoder("utf-8"),o=new TextDecoder("utf-8"),!0)}}(t.UTF8||(t.UTF8={}))}(e.Encoding||(e.Encoding={}))}(a||(a={})),function(e){e.compress=function(t,n){if(void 0===n&&(n={}),null==t)throw new TypeError("compress: undefined or null input received");var i=e.CompressionCommon.detectCompressionSourceEncoding(t);n=e.ObjectTools.override({inputEncoding:i,outputEncoding:"ByteArray"},n);var r=(new e.Compressor).compressBlock(t);return e.CompressionCommon.encodeCompressedBytes(r,n.outputEncoding)},e.decompress=function(t,n){if(void 0===n&&(n={}),null==t)throw new TypeError("decompress: undefined or null input received");n=e.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String"},n);var i=e.CompressionCommon.decodeCompressedBytes(t,n.inputEncoding),r=(new e.Decompressor).decompressBlock(i);return e.CompressionCommon.encodeDecompressedBytes(r,n.outputEncoding)},e.compressAsync=function(t,n,i){var r;null==i&&(i=function(){});try{r=e.CompressionCommon.detectCompressionSourceEncoding(t)}catch(e){return void i(void 0,e)}n=e.ObjectTools.override({inputEncoding:r,outputEncoding:"ByteArray",useWebWorker:!0,blockSize:65536},n),e.enqueueImmediate(function(){n.useWebWorker&&e.WebWorker.createGlobalWorkerIfNeeded()?e.WebWorker.compressAsync(t,n,i):e.AsyncCompressor.compressAsync(t,n,i)})},e.decompressAsync=function(t,n,i){if(null==i&&(i=function(){}),null!=t){n=e.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String",useWebWorker:!0,blockSize:65536},n);var r=e.BufferTools.convertToUint8ArrayIfNeeded(t);e.EventLoop.enqueueImmediate(function(){n.useWebWorker&&e.WebWorker.createGlobalWorkerIfNeeded()?e.WebWorker.decompressAsync(r,n,i):e.AsyncDecompressor.decompressAsync(t,n,i)})}else i(void 0,new TypeError("decompressAsync: undefined or null input received"))},e.createCompressionStream=function(){return e.AsyncCompressor.createCompressionStream()},e.createDecompressionStream=function(){return e.AsyncDecompressor.createDecompressionStream()},e.encodeUTF8=function(t){return e.Encoding.UTF8.encode(t)},e.decodeUTF8=function(t){return e.Encoding.UTF8.decode(t)},e.encodeBase64=function(t){return e.Encoding.Base64.encode(t)},e.decodeBase64=function(t){return e.Encoding.Base64.decode(t)},e.encodeBinaryString=function(t){return e.Encoding.BinaryString.encode(t)},e.decodeBinaryString=function(t){return e.Encoding.BinaryString.decode(t)},e.encodeStorageBinaryString=function(t){return e.Encoding.StorageBinaryString.encode(t)},e.decodeStorageBinaryString=function(t){return e.Encoding.StorageBinaryString.decode(t)}}(a||(a={}))}).call(this,n(47),n(235)(e),n(35),n(106).Buffer,n(150).setImmediate)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],i=t[1];return 3*(n+i)/4-i},t.toByteArray=function(e){for(var t,n=l(e),i=n[0],a=n[1],s=new o(function(e,t,n){return 3*(t+n)/4-n}(0,i,a)),u=0,c=a>0?i-4:i,m=0;m<c;m+=4)t=r[e.charCodeAt(m)]<<18|r[e.charCodeAt(m+1)]<<12|r[e.charCodeAt(m+2)]<<6|r[e.charCodeAt(m+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=r[e.charCodeAt(m)]<<2|r[e.charCodeAt(m+1)]>>4,s[u++]=255&t);1===a&&(t=r[e.charCodeAt(m)]<<10|r[e.charCodeAt(m+1)]<<4|r[e.charCodeAt(m+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,o=[],a=0,s=n-r;a<s;a+=16383)o.push(c(e,a,a+16383>s?s:a+16383));1===r?(t=e[n-1],o.push(i[t>>2]+i[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],o.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"="));return o.join("")};for(var i=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)i[s]=a[s],r[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var r,o,a=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(i[(o=r)>>18&63]+i[o>>12&63]+i[o>>6&63]+i[63&o]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,i,r){var o,a,s=8*r-i-1,u=(1<<s)-1,l=u>>1,c=-7,m=n?r-1:0,d=n?-1:1,h=e[t+m];for(m+=d,o=h&(1<<-c)-1,h>>=-c,c+=s;c>0;o=256*o+e[t+m],m+=d,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=i;c>0;a=256*a+e[t+m],m+=d,c-=8);if(0===o)o=1-l;else{if(o===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,i),o-=l}return(h?-1:1)*a*Math.pow(2,o-i)},t.write=function(e,t,n,i,r,o){var a,s,u,l=8*o-r-1,c=(1<<l)-1,m=c>>1,d=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,h=i?0:o-1,p=i?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+m>=1?d/u:d*Math.pow(2,1-m))*u>=2&&(a++,u/=2),a+m>=c?(s=0,a=c):a+m>=1?(s=(t*u-1)*Math.pow(2,r),a+=m):(s=t*Math.pow(2,m-1)*Math.pow(2,r),a=0));r>=8;e[n+h]=255&s,h+=p,s/=256,r-=8);for(a=a<<r|s,l+=r;l>0;e[n+h]=255&a,h+=p,a/=256,l-=8);e[n+h-p]|=128*f}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,u=1,l={},c=!1,m=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){o.port2.postMessage(e)}):m&&"onreadystatechange"in m.createElement("script")?(r=m.documentElement,i=function(e){var t=m.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return l[u]=r,i(u),u++},d.clearImmediate=h}function h(e){delete l[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=l[e];if(t){c=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{h(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(35),n(47))},function(e,t){},function(e,t,n){"use strict";var i=n(72).Buffer,r=n(241);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var t,n,r,o=i.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,n=o,r=s,t.copy(n,r),s+=a.data.length,a=a.next;return o},e}(),r&&r.inspect&&r.inspect.custom&&(e.exports.prototype[r.inspect.custom]=function(){var e=r.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var i=!1;return function(){if(!i){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),i=!0}return e.apply(this,arguments)}}}).call(this,n(35))},function(e,t,n){"use strict";e.exports=o;var i=n(156),r=n(48);function o(e){if(!(this instanceof o))return new o(e);i.call(this,e)}r.inherits=n(41),r.inherits(o,i),o.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(109)},function(e,t,n){e.exports=n(36)},function(e,t,n){e.exports=n(108).Transform},function(e,t,n){e.exports=n(108).PassThrough},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(83);t.MapComponentElementNode=class extends i.ListElementNode{get mapComponentNode(){return this.parent.parent}}},function(e,t,n){(function(){var t,i,r,o,a,s,u,l,c;({assign:l,isFunction:c}=n(28)),r=n(195),o=n(196),a=n(255),u=n(137),s=n(256),t=n(8),i=n(95),e.exports.create=function(e,t,n,i){var r,a;if(null==e)throw new Error("Root element needs a name.");return i=l({},t,n,i),a=(r=new o(i)).element(e),i.headless||(r.declaration(i),null==i.pubID&&null==i.sysID||r.dtd(i)),a},e.exports.begin=function(e,t,n){return c(e)&&([t,n]=[e,t],e={}),t?new a(e,t,n):new o(e)},e.exports.stringWriter=function(e){return new u(e)},e.exports.streamWriter=function(e,t){return new s(e,t)},e.exports.implementation=new r,e.exports.nodeType=t,e.exports.writerState=i}).call(this)},function(e,t,n){(function(){var t,i;t=n(251),i=n(252),e.exports=function(){class e{constructor(){this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new t,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=Object.create(this.defaultParams)}getParameter(e){return this.params.hasOwnProperty(e)?this.params[e]:null}canSetParameter(e,t){return!0}setParameter(e,t){return null!=t?this.params[e]=t:delete this.params[e]}}return Object.defineProperty(e.prototype,"parameterNames",{get:function(){return new i(Object.keys(this.defaultParams))}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=class{constructor(){}handleError(e){throw new Error(e)}}}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.arr=e||[]}item(e){return this.arr[e]||null}contains(e){return-1!==this.arr.indexOf(e)}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.arr.length}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.nodes=e}clone(){return this.nodes=null}item(e){return this.nodes[e]||null}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.nodes.length||0}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(this)},function(e,t,n){(function(){var t,i,r,o,a,s,u,l,c,m,d,h,p,f,g,y,v,C,S,b,w,x,M={}.hasOwnProperty;({isObject:w,isFunction:b,isPlainObject:x,getValue:S}=n(28)),t=n(8),h=n(196),p=n(124),o=n(126),a=n(127),g=n(134),C=n(135),f=n(136),m=n(128),d=n(129),s=n(130),l=n(131),u=n(132),c=n(133),r=n(197),v=n(199),y=n(137),i=n(95),e.exports=class{constructor(e,n,i){var r;this.name="?xml",this.type=t.Document,e||(e={}),r={},e.writer?x(e.writer)&&(r=e.writer,e.writer=new y):e.writer=new y,this.options=e,this.writer=e.writer,this.writerOptions=this.writer.filterOptions(r),this.stringify=new v(e),this.onDataCallback=n||function(){},this.onEndCallback=i||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}createChildNode(e){var n,i,r,o,a,s,u,l;switch(e.type){case t.CData:this.cdata(e.value);break;case t.Comment:this.comment(e.value);break;case t.Element:for(i in r={},u=e.attribs)M.call(u,i)&&(n=u[i],r[i]=n.value);this.node(e.name,r);break;case t.Dummy:this.dummy();break;case t.Raw:this.raw(e.value);break;case t.Text:this.text(e.value);break;case t.ProcessingInstruction:this.instruction(e.target,e.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+e.constructor.name)}for(a=0,s=(l=e.children).length;a<s;a++)o=l[a],this.createChildNode(o),o.type===t.Element&&this.up();return this}dummy(){return this}node(e,t,n){if(null==e)throw new Error("Missing node name.");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node. "+this.debugInfo(e));return this.openCurrent(),e=S(e),null==t&&(t={}),t=S(t),w(t)||([n,t]=[t,n]),this.currentNode=new p(this,e,t),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=n&&this.text(n),this}element(e,n,i){var r,o,a,s,u,l;if(this.currentNode&&this.currentNode.type===t.DocType)this.dtdElement(...arguments);else if(Array.isArray(e)||w(e)||b(e))for(s=this.options.noValidation,this.options.noValidation=!0,(l=new h(this.options).element("TEMP_ROOT")).element(e),this.options.noValidation=s,o=0,a=(u=l.children).length;o<a;o++)r=u[o],this.createChildNode(r),r.type===t.Element&&this.up();else this.node(e,n,i);return this}attribute(e,t){var n,i;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(e));if(null!=e&&(e=S(e)),w(e))for(n in e)M.call(e,n)&&(i=e[n],this.attribute(n,i));else b(t)&&(t=t.apply()),this.options.keepNullAttributes&&null==t?this.currentNode.attribs[e]=new r(this,e,""):null!=t&&(this.currentNode.attribs[e]=new r(this,e,t));return this}text(e){var t;return this.openCurrent(),t=new C(this,e),this.onData(this.writer.text(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}cdata(e){var t;return this.openCurrent(),t=new o(this,e),this.onData(this.writer.cdata(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}comment(e){var t;return this.openCurrent(),t=new a(this,e),this.onData(this.writer.comment(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}raw(e){var t;return this.openCurrent(),t=new g(this,e),this.onData(this.writer.raw(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}instruction(e,t){var n,i,r,o,a;if(this.openCurrent(),null!=e&&(e=S(e)),null!=t&&(t=S(t)),Array.isArray(e))for(n=0,o=e.length;n<o;n++)i=e[n],this.instruction(i);else if(w(e))for(i in e)M.call(e,i)&&(r=e[i],this.instruction(i,r));else b(t)&&(t=t.apply()),a=new f(this,e,t),this.onData(this.writer.processingInstruction(a,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this}declaration(e,t,n){var i;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return i=new m(this,e,t,n),this.onData(this.writer.declaration(i,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}doctype(e,t,n){if(this.openCurrent(),null==e)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new d(this,t,n),this.currentNode.rootNodeName=e,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this}dtdElement(e,t){var n;return this.openCurrent(),n=new u(this,e,t),this.onData(this.writer.dtdElement(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}attList(e,t,n,i,r){var o;return this.openCurrent(),o=new s(this,e,t,n,i,r),this.onData(this.writer.dtdAttList(o,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}entity(e,t){var n;return this.openCurrent(),n=new l(this,!1,e,t),this.onData(this.writer.dtdEntity(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}pEntity(e,t){var n;return this.openCurrent(),n=new l(this,!0,e,t),this.onData(this.writer.dtdEntity(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}notation(e,t){var n;return this.openCurrent(),n=new c(this,e,t),this.onData(this.writer.dtdNotation(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}up(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this}end(){for(;this.currentLevel>=0;)this.up();return this.onEnd()}openCurrent(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)}openNode(e){var n,r,o,a;if(!e.isOpen){if(this.root||0!==this.currentLevel||e.type!==t.Element||(this.root=e),r="",e.type===t.Element){for(o in this.writerOptions.state=i.OpenTag,r=this.writer.indent(e,this.writerOptions,this.currentLevel)+"<"+e.name,a=e.attribs)M.call(a,o)&&(n=a[o],r+=this.writer.attribute(n,this.writerOptions,this.currentLevel));r+=(e.children?">":"/>")+this.writer.endline(e,this.writerOptions,this.currentLevel),this.writerOptions.state=i.InsideTag}else this.writerOptions.state=i.OpenTag,r=this.writer.indent(e,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+e.rootNodeName,e.pubID&&e.sysID?r+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(r+=' SYSTEM "'+e.sysID+'"'),e.children?(r+=" [",this.writerOptions.state=i.InsideTag):(this.writerOptions.state=i.CloseTag,r+=">"),r+=this.writer.endline(e,this.writerOptions,this.currentLevel);return this.onData(r,this.currentLevel),e.isOpen=!0}}closeNode(e){var n;if(!e.isClosed)return n="",this.writerOptions.state=i.CloseTag,n=e.type===t.Element?this.writer.indent(e,this.writerOptions,this.currentLevel)+"</"+e.name+">"+this.writer.endline(e,this.writerOptions,this.currentLevel):this.writer.indent(e,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(e,this.writerOptions,this.currentLevel),this.writerOptions.state=i.None,this.onData(n,this.currentLevel),e.isClosed=!0}onData(e,t){return this.documentStarted=!0,this.onDataCallback(e,t+1)}onEnd(){return this.documentCompleted=!0,this.onEndCallback()}debugInfo(e){return null==e?"":"node: <"+e+">"}ele(){return this.element(...arguments)}nod(e,t,n){return this.node(e,t,n)}txt(e){return this.text(e)}dat(e){return this.cdata(e)}com(e){return this.comment(e)}ins(e,t){return this.instruction(e,t)}dec(e,t,n){return this.declaration(e,t,n)}dtd(e,t,n){return this.doctype(e,t,n)}e(e,t,n){return this.element(e,t,n)}n(e,t,n){return this.node(e,t,n)}t(e){return this.text(e)}d(e){return this.cdata(e)}c(e){return this.comment(e)}r(e){return this.raw(e)}i(e,t){return this.instruction(e,t)}att(){return this.currentNode&&this.currentNode.type===t.DocType?this.attList(...arguments):this.attribute(...arguments)}a(){return this.currentNode&&this.currentNode.type===t.DocType?this.attList(...arguments):this.attribute(...arguments)}ent(e,t){return this.entity(e,t)}pent(e,t){return this.pEntity(e,t)}not(e,t){return this.notation(e,t)}}}).call(this)},function(e,t,n){(function(){var t,i,r,o={}.hasOwnProperty;t=n(8),r=n(200),i=n(95),e.exports=class extends r{constructor(e,t){super(t),this.stream=e}endline(e,t,n){return e.isLastRootNode&&t.state===i.CloseTag?"":super.endline(e,t,n)}document(e,t){var n,i,r,o,a,s,u,l,c;for(i=r=0,a=(u=e.children).length;r<a;i=++r)(n=u[i]).isLastRootNode=i===e.children.length-1;for(t=this.filterOptions(t),c=[],o=0,s=(l=e.children).length;o<s;o++)n=l[o],c.push(this.writeChildNode(n,t,0));return c}cdata(e,t,n){return this.stream.write(super.cdata(e,t,n))}comment(e,t,n){return this.stream.write(super.comment(e,t,n))}declaration(e,t,n){return this.stream.write(super.declaration(e,t,n))}docType(e,t,n){var r,o,a,s;if(n||(n=0),this.openNode(e,t,n),t.state=i.OpenTag,this.stream.write(this.indent(e,t,n)),this.stream.write("<!DOCTYPE "+e.root().name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(e,t,n)),t.state=i.InsideTag,o=0,a=(s=e.children).length;o<a;o++)r=s[o],this.writeChildNode(r,t,n+1);t.state=i.CloseTag,this.stream.write("]")}return t.state=i.CloseTag,this.stream.write(t.spaceBeforeSlash+">"),this.stream.write(this.endline(e,t,n)),t.state=i.None,this.closeNode(e,t,n)}element(e,n,r){var a,s,u,l,c,m,d,h,p,f,g,y,v,C;if(r||(r=0),this.openNode(e,n,r),n.state=i.OpenTag,p=this.indent(e,n,r)+"<"+e.name,n.pretty&&n.width>0)for(h in m=p.length,g=e.attribs)o.call(g,h)&&(a=g[h],m+(f=this.attribute(a,n,r)).length>n.width?(C=this.indent(e,n,r+1)+f,p+=this.endline(e,n,r)+C,m=C.length):(p+=C=" "+f,m+=C.length));else for(h in y=e.attribs)o.call(y,h)&&(a=y[h],p+=this.attribute(a,n,r));if(this.stream.write(p),l=0===(u=e.children.length)?null:e.children[0],0===u||e.children.every(function(e){return(e.type===t.Text||e.type===t.Raw)&&""===e.value}))n.allowEmpty?(this.stream.write(">"),n.state=i.CloseTag,this.stream.write("</"+e.name+">")):(n.state=i.CloseTag,this.stream.write(n.spaceBeforeSlash+"/>"));else if(!n.pretty||1!==u||l.type!==t.Text&&l.type!==t.Raw||null==l.value){for(this.stream.write(">"+this.endline(e,n,r)),n.state=i.InsideTag,c=0,d=(v=e.children).length;c<d;c++)s=v[c],this.writeChildNode(s,n,r+1);n.state=i.CloseTag,this.stream.write(this.indent(e,n,r)+"</"+e.name+">")}else this.stream.write(">"),n.state=i.InsideTag,n.suppressPrettyCount++,!0,this.writeChildNode(l,n,r+1),n.suppressPrettyCount--,!1,n.state=i.CloseTag,this.stream.write("</"+e.name+">");return this.stream.write(this.endline(e,n,r)),n.state=i.None,this.closeNode(e,n,r)}processingInstruction(e,t,n){return this.stream.write(super.processingInstruction(e,t,n))}raw(e,t,n){return this.stream.write(super.raw(e,t,n))}text(e,t,n){return this.stream.write(super.text(e,t,n))}dtdAttList(e,t,n){return this.stream.write(super.dtdAttList(e,t,n))}dtdElement(e,t,n){return this.stream.write(super.dtdElement(e,t,n))}dtdEntity(e,t,n){return this.stream.write(super.dtdEntity(e,t,n))}dtdNotation(e,t,n){return this.stream.write(super.dtdNotation(e,t,n))}}}).call(this)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,