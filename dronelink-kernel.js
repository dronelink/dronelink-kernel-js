var Dronelink=function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=242)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.ATL="atl",e.AGL="agl",e.MSL="msl"}(t.AltitudeSystem||(t.AltitudeSystem={})),function(e){e._3="3",e._5="5",e._7="7",e.Unknown="unknown"}(t.CameraAEBCount||(t.CameraAEBCount={})),function(e){e.F1dot6="f/1dot6",e.F1dot7="f/1dot7",e.F1dot8="f/1dot8",e.F2="f/2",e.F2dot2="f/2dot2",e.F2dot4="f/2dot4",e.F2dot5="f/2dot5",e.F2dot6="f/2dot6",e.F2dot8="f/2dot8",e.F3dot2="f/3dot2",e.F3dot4="f/3dot4",e.F3dot5="f/3dot5",e.F4="f/4",e.F4dot5="f/4dot5",e.F4dot8="f/4dot8",e.F5="f/5",e.F5dot6="f/5dot6",e.F6dot3="f/6dot3",e.F6dot8="f/6dot8",e.F7dot1="f/7dot1",e.F8="f/8",e.F9="f/9",e.F9dot5="f/9dot5",e.F9dot6="f/9dot6",e.F10="f/10",e.F11="f/11",e.F13="f/13",e.F14="f/14",e.F16="f/16",e.F18="f/18",e.F19="f/19",e.F20="f/20",e.F22="f/22",e.Unknown="unknown"}(t.CameraAperture||(t.CameraAperture={})),function(e){e.Photos="photos",e.Video="video"}(t.CameraCaptureType||(t.CameraCaptureType={})),function(e){e.None="none",e.Art="art",e.BlackAndWhite="blackAndWhite",e.Bright="bright",e.DCinelike="dCinelike",e.Portrait="portrait",e.M31="m31",e.KDX="kDX",e.Prismo="prismo",e.Jugo="jugo",e.DLog="dLog",e.TrueColor="trueColor",e.Inverse="inverse",e.Reminiscence="reminiscence",e.Solarize="solarize",e.Posterize="posterize",e.Whiteboard="whiteboard",e.Blackboard="blackboard",e.Aqua="aqua",e.Delta="delta",e.DK79="dk79",e.Vision4="vision4",e.Vision6="vision6",e.TrueColorExt="trueColorExt",e.FilmA="filmA",e.FilmB="filmB",e.FilmC="filmC",e.FilmD="filmD",e.FilmE="filmE",e.FilmF="filmF",e.FilmG="filmG",e.FilmH="filmH",e.FilmI="filmI",e.HLG="hlg",e.Unknown="unknown"}(t.CameraColor||(t.CameraColor={})),function(e){e.N50="n50",e.N47="n47",e.N43="n43",e.N40="n40",e.N37="n37",e.N33="n33",e.N30="n30",e.N27="n27",e.N23="n23",e.N20="n20",e.N17="n17",e.N13="n13",e.N10="n10",e.N07="n07",e.N03="n03",e.N00="n00",e.P03="p03",e.P07="p07",e.P10="p10",e.P13="p13",e.P17="p17",e.P20="p20",e.P23="p23",e.P27="p27",e.P30="p30",e.P33="p33",e.P37="p37",e.P40="p40",e.P43="p43",e.P47="p47",e.P50="p50",e.Fixed="fixed",e.Unknown="unknown"}(t.CameraExposureCompensation||(t.CameraExposureCompensation={})),function(e){e.Program="program",e.ShutterPriority="shutterPriority",e.AperturePriority="aperturePriority",e.Manual="manual",e.Unknown="unknown"}(t.CameraExposureMode||(t.CameraExposureMode={})),function(e){e.Reset="reset",e.Sequence="sequence",e.Unknown="unknown"}(t.CameraFileIndexMode||(t.CameraFileIndexMode={})),function(e){e.Manual="manual",e.Auto="auto",e.AutoContinuous="autoContinuous",e.Unknown="unknown"}(t.CameraFocusMode||(t.CameraFocusMode={})),function(e){e.Auto="auto",e._100="100",e._200="200",e._400="400",e._800="800",e._1600="1600",e._3200="3200",e._6400="6400",e._12800="12800",e._25600="25600",e.Fixed="fixed",e.Unknown="unknown"}(t.CameraISO||(t.CameraISO={})),function(e){e.Center="center",e.Average="average",e.Spot="spot",e.Unknown="unknown"}(t.CameraMeteringMode||(t.CameraMeteringMode={})),function(e){e.Photo="photo",e.Video="video",e.Playback="playback",e.Download="download",e.Broadcast="broadcast",e.Unknown="unknown"}(t.CameraMode||(t.CameraMode={})),function(e){e._4_3="4:3",e._16_9="16:9",e._3_2="3:2",e.Unknown="unknown"}(t.CameraPhotoAspectRatio||(t.CameraPhotoAspectRatio={})),function(e){e.RAW="raw",e.JPEG="jpeg",e.RAWAndJPEG="raw+jpeg",e.TIFF14Bit="tiff14bit",e.RadiometricJPEG="radiometricJpeg",e.TIFF14BitLinearLowTempResolution="tiff14bitLinearLowTempResolution",e.TIFF14BitLinearHighTempResolution="tiff14bitLinearHighTempResolution",e.Unknown="unknown"}(t.CameraPhotoFileFormat||(t.CameraPhotoFileFormat={})),function(e){e.Single="single",e.Interval="interval",e.AEB="aeb",e.HDR="hdr",e.EHDR="ehdr",e.Burst="burst",e.RAWBurst="rawBurst",e.ShallowFocus="shallowFocus",e.Panorama="panorama",e.HyperLight="hyperLight",e.TimeLapse="timeLapse",e.Unknown="unknown"}(t.CameraPhotoMode||(t.CameraPhotoMode={})),function(e){e._1_8000="1/8000",e._1_6400="1/6400",e._1_6000="1/6000",e._1_5000="1/5000",e._1_4000="1/4000",e._1_3200="1/3200",e._1_3000="1/3000",e._1_2500="1/2500",e._1_2000="1/2000",e._1_1600="1/1600",e._1_1500="1/1500",e._1_1250="1/1250",e._1_1000="1/1000",e._1_800="1/800",e._1_750="1/750",e._1_725="1/725",e._1_640="1/640",e._1_500="1/500",e._1_400="1/400",e._1_350="1/350",e._1_320="1/320",e._1_250="1/250",e._1_240="1/240",e._1_200="1/200",e._1_180="1/180",e._1_160="1/160",e._1_125="1/125",e._1_120="1/120",e._1_100="1/100",e._1_90="1/90",e._1_80="1/80",e._1_60="1/60",e._1_50="1/50",e._1_45="1/45",e._1_40="1/40",e._1_30="1/30",e._1_25="1/25",e._1_20="1/20",e._1_15="1/15",e._1_12dot5="1/12dot5",e._1_10="1/10",e._1_8="1/8",e._1_6dot25="1/6dot25",e._1_6="1/6",e._1_5="1/5",e._1_4="1/4",e._1_3="1/3",e._1_2dot5="1/2dot5",e._0dot3="0dot3",e._1_2="1/2",e._1_1dot67="1/1dot67",e._1_1dot25="1/1dot25",e._0dot7="0dot7",e._1="1",e._1dot3="1dot3",e._1dot4="1dot4",e._1dot6="1dot6",e._2="2",e._2dot5="2dot5",e._3="3",e._3dot2="3dot2",e._4="4",e._5="5",e._6="6",e._7="7",e._8="8",e._9="9",e._10="10",e._11="11",e._13="13",e._15="15",e._16="16",e._20="20",e._23="23",e._25="25",e._30="30",e.Unknown="unknown"}(t.CameraShutterSpeed||(t.CameraShutterSpeed={})),function(e){e.SDCard="sdCard",e.Internal="internal",e.Unknown="unknown"}(t.CameraStorageLocation||(t.CameraStorageLocation={})),function(e){e.H264="h264",e.H265="h265",e.Unknown="unknown"}(t.CameraVideoFileCompressionStandard||(t.CameraVideoFileCompressionStandard={})),function(e){e.MOV="mov",e.MP4="mp4",e.TIFFSequence="tiffSequence",e.SEQ="seq",e.Unknown="unknown"}(t.CameraVideoFileFormat||(t.CameraVideoFileFormat={})),function(e){e.Default="default",e.Narrow="narrow",e.Wide="wide",e.Unknown="unknown"}(t.CameraVideoFieldOfView||(t.CameraVideoFieldOfView={})),function(e){e._23dot976="23dot976",e._24="24",e._25="25",e._29dot970="29dot970",e._30="30",e._47dot950="47dot950",e._48="48",e._50="50",e._59dot940="59dot940",e._60="60",e._90="90",e._96="96",e._100="100",e._120="120",e._8dot7="8dot7",e.Unknown="unknown"}(t.CameraVideoFrameRate||(t.CameraVideoFrameRate={})),function(e){e._336x256="336x256",e._640x360="640x360",e._640x480="640x480",e._640x512="640x512",e._1280x720="1280x720",e._1920x1080="1920x1080",e._2048x1080="2048x1080",e._2688x1512="2688x1512",e._2704x1520="2704x1520",e._2720x1530="2720x1530",e._3712x2088="3712x2088",e._3840x1572="3840x1572",e._3840x2160="3840x2160",e._3944x2088="3944x2088",e._4096x2160="4096x2160",e._4608x2160="4608x2160",e._4608x2592="4608x2592",e._5280x2160="5280x2160",e._5280x2972="5280x2972",e._5760x3240="5760x3240",e._6016x3200="6016x3200",e.Max="max",e.NoSSDVideo="noSSDVideo",e.Unknown="unknown"}(t.CameraVideoResolution||(t.CameraVideoResolution={})),function(e){e.PAL="pal",e.NTSC="ntsc",e.Unknown="unknown"}(t.CameraVideoStandard||(t.CameraVideoStandard={})),function(e){e.Auto="auto",e.Sunny="sunny",e.Cloudy="cloudy",e.WaterSurface="waterSurface",e.IndoorIncandescent="indoorIncandescent",e.IndoorFluorescent="indoorFluorescent",e.Custom="custom",e.Neutral="neutral",e.Unknown="unknown"}(t.CameraWhiteBalancePreset||(t.CameraWhiteBalancePreset={})),function(e){e.Pending="pending",e.Queued="queued",e.Executing="executing",e.Succeeded="succeeded",e.Failed="failed"}(t.CommandExecutionStatus||(t.CommandExecutionStatus={})),function(e){e.Never="never",e.Approach="approach",e.Destination="destination"}(t.CommandReengagementTiming||(t.CommandReengagementTiming={})),function(e){e.Pending="pending",e.Executing="executing",e.Succeeded="succeeded",e.Failed="failed"}(t.ComponentExecutionStatus||(t.ComponentExecutionStatus={})),function(e){e.Safely="safely",e.PointToPoint="pointToPoint"}(t.DJIWaypointMissionGotoWaypointMode||(t.DJIWaypointMissionGotoWaypointMode={})),function(e){e.Auto="auto",e.UsingInitialDirection="usingInitialDirection",e.ControlledByRemoteController="controlledByRemoteController",e.UsingWaypointHeading="usingWaypointHeading",e.TowardPointOfInterest="towardPointOfInterest"}(t.DJIWaypointMissionHeadingMode||(t.DJIWaypointMissionHeadingMode={})),function(e){e.Normal="normal",e.Curved="curved"}(t.DJIWaypointMissionFlightPathMode||(t.DJIWaypointMissionFlightPathMode={})),function(e){e.Clockwise="clockwise",e.DJIWaypointTurnCounterClockwise="counterClockwise"}(t.DJIWaypointTurnMode||(t.DJIWaypointTurnMode={})),function(e){e.Stay="stay",e.ShootPhoto="shootPhoto",e.StartRecord="startRecord",e.StopRecord="stopRecord",e.RotateAircraft="rotateAircraft",e.RotateGimbalPitch="rotateGimbalPitch"}(t.DJIWaypointMissionComponentWaypointActionType||(t.DJIWaypointMissionComponentWaypointActionType={})),function(e){e.Hover="hover",e.ReturnHome="returnHome",e.AutoLand="autoLand",e.Unknown="unknown"}(t.DroneConnectionFailSafeBehavior||(t.DroneConnectionFailSafeBehavior={})),function(e){e.Auto="auto",e.Manual="manual",e.Unknown="unknown"}(t.DroneLightbridgeChannelSelectionMode||(t.DroneLightbridgeChannelSelectionMode={})),function(e){e._2dot4ghz="2dot4ghz",e._5dot7ghz="5dot7ghz",e._5dot8ghz="5dot8ghz",e.Unknown="unknown"}(t.DroneLightbridgeFrequencyBand||(t.DroneLightbridgeFrequencyBand={})),function(e){e.Auto="auto",e.Manual="manual",e.Unknown="unknown"}(t.DroneOcuSyncChannelSelectionMode||(t.DroneOcuSyncChannelSelectionMode={})),function(e){e._2dot4ghz="2dot4ghz",e._5dot8ghz="5dot8ghz",e.Dual="dual",e.Unknown="unknown"}(t.DroneOcuSyncFrequencyBand||(t.DroneOcuSyncFrequencyBand={})),function(e){e.LineLeft="lineLeft",e.LineRight="lineRight",e.PolygonLeft="polygonLeft",e.PolygonRight="polygonRight",e.CircleClockwise="circleClockwise",e.CircleCounterclockwise="circleCounterclockwise",e.SpiralClockwise="spiralClockwise",e.SpiralCounterclockwise="spiralCounterclockwise"}(t.FacadeBoundaryFace||(t.FacadeBoundaryFace={})),function(e){e.Time="time",e.Distance="distance"}(t.FacadeCapturePriority||(t.FacadeCapturePriority={})),function(e){e.Horizontal="horizontal",e.Vertical="vertical"}(t.FacadePattern||(t.FacadePattern={})),function(e){e.Input="input",e.Plan="plan",e.Device="device",e.Drone="drone"}(t.GeoSpatialSource||(t.GeoSpatialSource={})),function(e){e.Free="free",e.FPV="fpv",e.YawFollow="yawFollow",e.Unknown="unknown"}(t.GimbalMode||(t.GimbalMode={})),function(e){e.None="none",e.Linear="linear",e.Sigmoid="sigmoid"}(t.InterpolationFunction||(t.InterpolationFunction={})),function(e){e.Distance="distance",e.VelocityHorizontal="velocityHorizontal",e.VelocityVertical="velocityVertical",e.VelocityRotational="velocityRotational",e.AccelerationHorizontal="accelerationHorizontal",e.AccelerationVertical="accelerationVertical",e.AccelerationRotational="accelerationRotational",e.Angle="angle",e.AngleMod="angleMod",e.Percent="percent"}(t.MeasurementType||(t.MeasurementType={})),function(e){e.Info="info",e.Warning="warning",e.Danger="danger",e.Error="error"}(t.MessageLevel||(t.MessageLevel={})),function(e){e.Normal="normal",e.Grid="grid"}(t.MapPattern||(t.MapPattern={})),function(e){e.Horizon="horizon",e.Path="path"}(t.OrientationXReference||(t.OrientationXReference={})),function(e){e.North="north",e.Course="course",e.Heading="heading",e.Path="path"}(t.OrientationZReference||(t.OrientationZReference={})),function(e){e.Clockwise="clockwise",e.Counterclockwise="counterclockwise"}(t.OrbitDirection||(t.OrbitDirection={})),function(e){e.Intersect="intersect",e.Rounded="rounded"}(t.PathCornering||(t.PathCornering={})),function(e){e.Absolute="absolute",e.Coordinate="coordinate"}(t.PathMarkerPositioning||(t.PathMarkerPositioning={})),function(e){e.None="none",e.ReturnHome="returnHome",e.AutoLand="autoLand"}(t.PlanCompleteAction||(t.PlanCompleteAction={})),function(e){e.Clockwise="clockwise",e.Counterclockwise="counterclockwise"}(t.RotationDirection||(t.RotationDirection={})),function(e){e.AEBCountCameraCommand="AEBCountCameraCommand",e.Altitude="Altitude",e.AltitudeRange="AltitudeRange",e.ApertureCameraCommand="ApertureCameraCommand",e.ApproachableComponent="ApproachableComponent",e.Asset="Asset",e.AssetManifest="AssetManifest",e.AssetSource="AssetSource",e.AutoExposureLockCameraCommand="AutoExposureLockCameraCommand",e.AutoLockGimbalCameraCommand="AutoLockGimbalCameraCommand",e.Camera="Camera",e.CameraFile="CameraFile",e.CameraImageSpecification="CameraImageSpecification",e.CameraLensSpecification="CameraLensSpecification",e.CameraSensorSpecification="CameraSensorSpecification",e.CameraCommand="CameraCommand",e.CameraSpecification="CameraSpecification",e.CameraCaptureConfiguration="CameraCaptureConfiguration",e.CollisionAvoidanceDroneCommand="CollisionAvoidanceDroneCommand",e.ColorCameraCommand="ColorCameraCommand",e.CommandComponent="CommandComponent",e.CommandExecutionState="CommandExecutionState",e.Component="Component",e.ComponentExecutionState="ComponentExecutionState",e.ComponentSource="ComponentSource",e.ConnectionFailSafeBehaviorDroneCommand="ConnectionFailSafeBehaviorDroneCommand",e.ContrastCameraCommand="ContrastCameraCommand",e.CourseComponent="CourseComponent",e.Datetime="Datetime",e.Descriptors="Descriptors",e.Disengagement="Disengagement",e.DestinationComponent="DestinationComponent",e.DistanceTolerance="DistanceTolerance",e.Device="Device",e.DisengageComponent="DisengageComponent",e.DJIWaypointMissionComponent="DJIWaypointMissionComponent",e.DJIWaypointMissionComponentWaypoint="DJIWaypointMissionComponentWaypoint",e.DJIWaypointMissionComponentWaypointAction="DJIWaypointMissionComponentWaypointAction",e.DJIWaypointMissionComponentWaypointActionType="DJIWaypointMissionComponentWaypointActionType",e.Drone="Drone",e.DroneCommand="DroneCommand",e.DroneMotionComponent="DroneMotionComponent",e.Engagement="Engagement",e.Execution="Execution",e.ExposureCompensationCameraCommand="ExposureCompensationCameraCommand",e.ExposureCompensationStepCameraCommand="ExposureCompensationStepCameraCommand",e.ExposureModeCameraCommand="ExposureModeCameraCommand",e.FacadeComponent="FacadeComponent",e.FacadeComponentBoundaryPoint="FacadeComponentBoundaryPoint",e.FacadeComponentModelSample="FacadeComponentModelSample",e.FocusCameraCommand="FocusCameraCommand",e.FocusModeCameraCommand="FocusModeCameraCommand",e.FieldOfView="FieldOfView",e.FileIndexModeCameraCommand="FileIndexModeCameraCommand",e.Func="Func",e.FuncInput="FuncInput",e.GeoCoordinate="GeoCoordinate",e.GeoLocation="GeoLocation",e.GeoReferencedOffset="GeoReferencedOffset",e.GeoSpatial="GeoSpatial",e.Gimbal="Gimbal",e.GimbalCommand="GimbalCommand",e.HeadingDroneCommand="HeadingDroneCommand",e.HeadingComponent="HeadingComponent",e.Interpolation="Interpolation",e.ISOCameraCommand="ISOCameraCommand",e.LandingGearAutomaticMovementDroneCommand="LandingGearAutomaticMovementDroneCommand",e.LandingGearDeployDroneCommand="LandingGearDeployDroneCommand",e.LandingGearRetractDroneCommand="LandingGearRetractDroneCommand",e.LandingProtectionDroneCommand="LandingProtectionDroneCommand",e.LightbridgeChannelDroneCommand="LightbridgeChannelDroneCommand",e.LightbridgeChannelSelectionModeDroneCommand="LightbridgeChannelSelectionModeDroneCommand",e.LightbridgeFrequencyBandDroneCommand="LightbridgeFrequencyBandDroneCommand",e.Limits="Limits",e.Line2="Line2",e.ListComponent="ListComponent",e.LowBatteryWarningThresholdDroneCommand="LowBatteryWarningThresholdDroneCommand",e.MapComponent="MapComponent",e.MapComponentBoundaryPoint="MapComponentBoundaryPoint",e.MaxAltitudeDroneCommand="MaxAltitudeDroneCommand",e.MaxDistanceDroneCommand="MaxDistanceDroneCommand",e.MaxDistanceLimitationDroneCommand="MaxDistanceLimitationDroneCommand",e.MechanicalShutterCameraCommand="MechanicalShutterCameraCommand",e.Message="Message",e.MessageGroup="MessageGroup",e.MeteringModeCameraCommand="MeteringModeCameraCommand",e.Mission="Mission",e.ModeCameraCommand="ModeCameraCommand",e.ModeGimbalCommand="ModeGimbalCommand",e.MotionLimits="MotionLimits",e.MotionLimitsOptional="MotionLimitsOptional",e.MotionLimits3="MotionLimits3",e.MotionLimits3Optional="MotionLimits3Optional",e.MotionLimits6="MotionLimits6",e.MotionLimits6Optional="MotionLimits6Optional",e.OcuSyncChannelDroneCommand="OcuSyncChannelDroneCommand",e.OcuSyncChannelSelectionModeDroneCommand="OcuSyncChannelSelectionModeDroneCommand",e.OcuSyncFrequencyBandDroneCommand="OcuSyncFrequencyBandDroneCommand",e.OrbitComponent="OrbitComponent",e.Orientation3="Orientation3",e.Orientation3Optional="Orientation3Optional",e.OrientationGimbalCommand="OrientationGimbalCommand",e.PhotoAspectRatioCameraCommand="PhotoAspectRatioCameraCommand",e.PhotoIntervalCameraCommand="PhotoIntervalCameraCommand",e.PhotoModeCameraCommand="PhotoModeCameraCommand",e.PointOfInterest="PointOfInterest",e.Position3="Position3",e.PathComponent="PathComponent",e.PathComponentWaypoint="PathComponentWaypoint",e.PathComponentMarker="PathComponentMarker",e.PathComponentModelSample="PathComponentModelSample",e.PlanComponent="PlanComponent",e.PlanReengagementRules="PlanReengagementRules",e.PlanRestrictionZone="PlanRestrictionZone",e.PhotoFileFormatCameraCommand="PhotoFileFormatCameraCommand",e.Point2="Point2",e.PrecisionLandingDroneCommand="PrecisionLandingDroneCommand",e.ReturnHomeAltitudeDroneCommand="ReturnHomeAltitudeDroneCommand",e.ReturnHomeObstacleAvoidanceDroneCommand="ReturnHomeObstacleAvoidanceDroneCommand",e.ReturnHomeRemoteObstacleAvoidanceDroneCommand="ReturnHomeRemoteObstacleAvoidanceDroneCommand",e.RotationComponent="RotationComponent",e.SaturationCameraCommand="SaturationCameraCommand",e.SeriousLowBatteryWarningThresholdDroneCommand="SeriousLowBatteryWarningThresholdDroneCommand",e.SharpnessCameraCommand="SharpnessCameraCommand",e.ShutterSpeedCameraCommand="ShutterSpeedCameraCommand",e.SmartReturnHomeDroneCommand="SmartReturnHomeDroneCommand",e.SourcedGeoSpatial="SourcedGeoSpatial",e.SpotMeteringTargetCameraCommand="SpotMeteringTargetCameraCommand",e.StorageLocationCameraCommand="StorageLocationCameraCommand",e.StartCaptureCameraCommand="StartCaptureCameraCommand",e.StopCaptureCameraCommand="StopCaptureCameraCommand",e.SubComponent="SubComponent",e.Timeline="Timeline",e.TimelineCameraCapture="TimelineCameraCapture",e.TimelineCommand="TimelineCommand",e.TimelineFrame="TimelineFrame",e.UpwardsAvoidanceDroneCommand="UpwardsAvoidanceDroneCommand",e.User="User",e.Variable="Variable",e.Vector2="Vector2",e.Velocity3="Velocity3",e.Velocity6="Velocity6",e.VelocityDroneCommand="VelocityDroneCommand",e.VelocityGimbalCommand="VelocityGimbalCommand",e.VideoFileCompressionStandardCameraCommand="VideoFileCompressionStandardCameraCommand",e.VideoFileFormatCameraCommand="VideoFileFormatCameraCommand",e.VideoResolutionFrameRateCameraCommand="VideoResolutionFrameRateCameraCommand",e.VideoStandardCameraCommand="VideoStandardCameraCommand",e.VisionAssistedPositioningDroneCommand="VisionAssistedPositioningDroneCommand",e.WaitComponent="WaitComponent",e.WhiteBalancePresetCameraCommand="WhiteBalancePresetCameraCommand",e.WhiteBalanceCustomCameraCommand="WhiteBalanceCustomCameraCommand",e.Zone="Zone",e.ZoneBoundaryPoint="ZoneBoundaryPoint"}(t.TypeName||(t.TypeName={})),function(e){e.Metric="metric",e.Imperial="imperial"}(t.UnitSystem||(t.UnitSystem={})),function(e){e.Null="null",e.Drone="Drone",e.Boolean="boolean",e.Number="number",e.String="string"}(t.VariableValueType||(t.VariableValueType={})),function(e){e.Horizontal="horizontal",e.Vertical="vertical"}(t.ZoneMotionPriority||(t.ZoneMotionPriority={})),function(e){e.Circle="circle",e.Polygon="polygon"}(t.ZoneShape||(t.ZoneShape={}))},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(245)),a=n(2),r=n(3),s=n(84),l=n(165),u=n(166),c=n(167),m=n(168),d=n(169),h=n(170),p=n(171),f=n(172),g=n(173),y=n(174),C=n(175),v=n(176),S=n(177),b=n(178),w=n(179),x=n(180),M=n(181),O=n(182),T=n(183),P=n(184),D=n(185),E=n(186),F=n(187),A=n(44),N=n(188),_=n(189),R=n(190),I=n(191),L=n(192),z=n(193),k=n(194),B=n(195),V=n(196),j=n(118),U=n(197),J=n(119),G=n(198),H=n(199),W=n(200),q=n(201),Z=n(37),$=n(202),K=n(89),X=n(45),Y=n(38),Q=n(203),ee=n(204),te=n(205),ne=n(206),ie=n(31),oe=n(30),ae=n(207),re=n(208),se=n(120),le=n(209),ue=n(210),ce=n(211),me=n(212),de=n(90),he=n(67),pe=n(91),fe=n(92),ge=n(121),ye=n(39),Ce=n(130),ve=n(103),Se=n(222),be=n(223),we=n(76),xe=n(105),Me=n(224),Oe=n(77),Te=n(225),Pe=n(226),De=n(78),Ee=n(79),Fe=n(227),Ae=n(106),Ne=n(135),_e=n(80),Re=n(228),Ie=n(229),Le=n(18),ze=n(132),ke=n(102),Be=n(136),Ve=n(126),je=n(101),Ue=n(70),Je=n(127),Ge=n(114),He=n(115),We=n(116),qe=n(113),Ze=n(13),$e=n(17),Ke=n(230),Xe=n(61),Ye=n(56),Qe=n(48),et=n(137),tt=n(139),nt=n(117),it=n(81),ot=n(81),at=n(24),rt=n(69),st=n(128),lt=n(21),ut=n(54),ct=n(40),mt=n(28),dt=n(41),ht=n(62),pt=n(10),ft=n(154),gt=n(138),yt=n(87),Ct=n(72),vt=n(86),St=n(131),bt=n(85),wt=n(59),xt=n(57),Mt=n(46),Ot=n(20),Tt=n(15),Pt=n(68),Dt=n(0),Et=n(33),Ft=n(33),At=n(33),Nt=n(33),_t=n(55),Rt=n(155),It=n(9),Lt=n(36),zt=n(29),kt=n(104),Bt=n(73),Vt=n(6);class jt{static typeDisplay(e,t="name"){return e?"string"==typeof e?r.Format.string(`${e}.${t}`):jt.typeDisplay(e.type,t):""}static clone(e,t=!1){const n=jt.deserialize(jt.serialize(e));if(t){const e={};a.Common.descendantsMatching(n,e=>e instanceof Vt.Identifiable&&e.resettable).forEach(t=>{const n=a.Common.uuid();e[t.id]=n,t.id=n}),a.Common.descendantsMatching(n,e=>"object"==typeof e).forEach(t=>{Object.keys(t).map(n=>{const i=t[n];"string"==typeof i&&e[i]&&(t[n]=e[i])})})}return n}static plainJSON(e){return JSON.parse(jt.serialize(e))}static write(e){return jt.WriteCompressByDefault?jt.compress(e):jt.serialize(e)}static read(e,t){try{const n=jt.decompress(e);if(n)return n}catch(e){if(t)return t(e),null}try{return jt.deserialize(e)}catch(e){if(t)return t(e),null}}static serialize(e){return JSON.stringify(e,(e,t)=>null===t||""===t||Array.isArray(t)&&0===t.length?void 0:t)}static compress(e){return e?o.default.compress("string"==typeof e?e:jt.serialize(e),{outputEncoding:"StorageBinaryString"}):null}static decompress(e){if(!e)return null;let t=null;try{t=JSON.parse(o.default.decompress(e,{inputEncoding:"StorageBinaryString"}))}catch(e){return null}return t?jt.deserialize(t):null}static deserialize(e,t=null,n=!0){if(!e){if(!n)throw new TypeError("Expected not null but found null");return null}if("string"==typeof e)return jt.deserialize(JSON.parse(e),t,n);const i=jt.deserializeInstance(e);if(t&&!(i instanceof t))throw new TypeError(`Expected ${jt.typeDisplay(new t)} but found ${jt.typeDisplay(i.type)}`);return i}static createInstance(e){switch(e){case Dt.TypeName.AEBCountCameraCommand:return new _.AEBCountCameraCommand;case Dt.TypeName.Altitude:return new Le.Altitude;case Dt.TypeName.AltitudeRange:return new ze.AltitudeRange;case Dt.TypeName.Asset:return new ke.Asset;case Dt.TypeName.AssetManifest:return new Be.AssetManifest;case Dt.TypeName.AssetSource:return new Ve.AssetSource;case Dt.TypeName.ApertureCameraCommand:return new R.ApertureCameraCommand;case Dt.TypeName.AutoExposureLockCameraCommand:return new I.AutoExposureLockCameraCommand;case Dt.TypeName.AutoLockGimbalCameraCommand:return new L.AutoLockGimbalCameraCommand;case Dt.TypeName.Camera:return new je.Camera;case Dt.TypeName.CameraFile:return new Ue.CameraFile;case Dt.TypeName.CameraCaptureConfiguration:return new Je.CameraCaptureConfiguration;case Dt.TypeName.CameraImageSpecification:return new Ge.CameraImageSpecification;case Dt.TypeName.CameraLensSpecification:return new He.CameraLensSpecification;case Dt.TypeName.CameraSensorSpecification:return new We.CameraSensorSpecification;case Dt.TypeName.CameraSpecification:return new qe.CameraSpecification;case Dt.TypeName.CollisionAvoidanceDroneCommand:return new l.CollisionAvoidanceDroneCommand;case Dt.TypeName.ColorCameraCommand:return new z.ColorCameraCommand;case Dt.TypeName.CommandComponent:return new ye.CommandComponent;case Dt.TypeName.CommandExecutionState:return new s.CommandExecutionState;case Dt.TypeName.ComponentExecutionState:return new fe.ComponentExecutionState;case Dt.TypeName.ComponentSource:return new ge.ComponentSource;case Dt.TypeName.ConnectionFailSafeBehaviorDroneCommand:return new u.ConnectionFailSafeBehaviorDroneCommand;case Dt.TypeName.ContrastCameraCommand:return new k.ContrastCameraCommand;case Dt.TypeName.CourseComponent:return new Ce.CourseComponent;case Dt.TypeName.Datetime:return new Ze.Datetime;case Dt.TypeName.Descriptors:return new $e.Descriptors;case Dt.TypeName.Disengagement:return new Ke.Disengagement;case Dt.TypeName.DestinationComponent:return new ve.DestinationComponent;case Dt.TypeName.Device:return new Ye.Device;case Dt.TypeName.DistanceTolerance:return new Xe.DistanceTolerance;case Dt.TypeName.DisengageComponent:return new Se.DisengageComponent;case Dt.TypeName.Drone:return new Qe.Drone;case Dt.TypeName.Engagement:return new et.Engagement;case Dt.TypeName.Execution:return new tt.Execution;case Dt.TypeName.ExposureCompensationCameraCommand:return new B.ExposureCompensationCameraCommand;case Dt.TypeName.ExposureCompensationStepCameraCommand:return new V.ExposureCompensationStepCameraCommand;case Dt.TypeName.ExposureModeCameraCommand:return new j.ExposureModeCameraCommand;case Dt.TypeName.FacadeComponent:return new be.FacadeComponent;case Dt.TypeName.FacadeComponentBoundaryPoint:return new we.FacadeComponentBoundaryPoint;case Dt.TypeName.FieldOfView:return new nt.FieldOfView;case Dt.TypeName.FocusCameraCommand:return new J.FocusCameraCommand;case Dt.TypeName.FocusModeCameraCommand:return new G.FocusModeCameraCommand;case Dt.TypeName.ISOCameraCommand:return new H.ISOCameraCommand;case Dt.TypeName.MechanicalShutterCameraCommand:return new W.MechanicalShutterCameraCommand;case Dt.TypeName.FileIndexModeCameraCommand:return new U.FileIndexModeCameraCommand;case Dt.TypeName.Func:return new it.Func;case Dt.TypeName.FuncInput:return new ot.FuncInput;case Dt.TypeName.GeoCoordinate:return new at.GeoCoordinate;case Dt.TypeName.GeoLocation:return new rt.GeoLocation;case Dt.TypeName.GeoReferencedOffset:return new st.GeoReferencedOffset;case Dt.TypeName.GeoSpatial:return new lt.GeoSpatial;case Dt.TypeName.Gimbal:return new ut.Gimbal;case Dt.TypeName.HeadingComponent:return new xe.HeadingComponent;case Dt.TypeName.Interpolation:return new ct.Interpolation;case Dt.TypeName.LandingGearAutomaticMovementDroneCommand:return new c.LandingGearAutomaticMovementDroneCommand;case Dt.TypeName.LandingGearDeployDroneCommand:return new m.LandingGearDeployDroneCommand;case Dt.TypeName.LandingGearRetractDroneCommand:return new d.LandingGearRetractDroneCommand;case Dt.TypeName.LandingProtectionDroneCommand:return new h.LandingProtectionDroneCommand;case Dt.TypeName.LightbridgeChannelDroneCommand:return new p.LightbridgeChannelDroneCommand;case Dt.TypeName.LightbridgeChannelSelectionModeDroneCommand:return new f.LightbridgeChannelSelectionModeDroneCommand;case Dt.TypeName.LightbridgeFrequencyBandDroneCommand:return new g.LightbridgeFrequencyBandDroneCommand;case Dt.TypeName.Limits:return new mt.Limits;case Dt.TypeName.Line2:return new dt.Line2;case Dt.TypeName.ListComponent:return new ht.ListComponent;case Dt.TypeName.LowBatteryWarningThresholdDroneCommand:return new y.LowBatteryWarningThresholdDroneCommand;case Dt.TypeName.MapComponent:return new Me.MapComponent;case Dt.TypeName.MapComponentBoundaryPoint:return new Oe.MapComponentBoundaryPoint;case Dt.TypeName.MaxAltitudeDroneCommand:return new C.MaxAltitudeDroneCommand;case Dt.TypeName.MaxDistanceDroneCommand:return new v.MaxDistanceDroneCommand;case Dt.TypeName.MaxDistanceLimitationDroneCommand:return new S.MaxDistanceLimitationDroneCommand;case Dt.TypeName.Mission:return new gt.Mission;case Dt.TypeName.Message:return new pt.Message;case Dt.TypeName.MessageGroup:return new ft.MessageGroup;case Dt.TypeName.MeteringModeCameraCommand:return new q.MeteringModeCameraCommand;case Dt.TypeName.ModeCameraCommand:return new Z.ModeCameraCommand;case Dt.TypeName.ModeGimbalCommand:return new de.ModeGimbalCommand;case Dt.TypeName.MotionLimits:return new yt.MotionLimits;case Dt.TypeName.MotionLimitsOptional:return new Ct.MotionLimitsOptional;case Dt.TypeName.MotionLimits3:return new vt.MotionLimits3;case Dt.TypeName.MotionLimits3Optional:return new St.MotionLimits3Optional;case Dt.TypeName.MotionLimits6:return new bt.MotionLimits6;case Dt.TypeName.MotionLimits6Optional:return new wt.MotionLimits6Optional;case Dt.TypeName.PointOfInterest:return new xt.PointOfInterest;case Dt.TypeName.OcuSyncChannelDroneCommand:return new b.OcuSyncChannelDroneCommand;case Dt.TypeName.OcuSyncChannelSelectionModeDroneCommand:return new w.OcuSyncChannelSelectionModeDroneCommand;case Dt.TypeName.OcuSyncFrequencyBandDroneCommand:return new x.OcuSyncFrequencyBandDroneCommand;case Dt.TypeName.OrbitComponent:return new Te.OrbitComponent;case Dt.TypeName.Orientation3:return new Mt.Orientation3;case Dt.TypeName.Orientation3Optional:return new Ot.Orientation3Optional;case Dt.TypeName.OrientationGimbalCommand:return new he.OrientationGimbalCommand;case Dt.TypeName.PhotoAspectRatioCameraCommand:return new $.PhotoAspectRatioCameraCommand;case Dt.TypeName.PhotoFileFormatCameraCommand:return new K.PhotoFileFormatCameraCommand;case Dt.TypeName.PhotoModeCameraCommand:return new Y.PhotoModeCameraCommand;case Dt.TypeName.PhotoIntervalCameraCommand:return new X.PhotoIntervalCameraCommand;case Dt.TypeName.PathComponent:return new Pe.PathComponent;case Dt.TypeName.PathComponentWaypoint:return new De.PathComponentWaypoint;case Dt.TypeName.PathComponentMarker:return new Ee.PathComponentMarker;case Dt.TypeName.PathComponentModelSample:return new Fe.PathComponentModelSample;case Dt.TypeName.PlanComponent:return new Ae.PlanComponent;case Dt.TypeName.PlanReengagementRules:return new Ne.PlanReengagementRules;case Dt.TypeName.PlanRestrictionZone:return new _e.PlanRestrictionZone;case Dt.TypeName.Point2:return new Tt.Point2;case Dt.TypeName.PrecisionLandingDroneCommand:return new M.PrecisionLandingDroneCommand;case Dt.TypeName.ReturnHomeAltitudeDroneCommand:return new O.ReturnHomeAltitudeDroneCommand;case Dt.TypeName.ReturnHomeObstacleAvoidanceDroneCommand:return new T.ReturnHomeObstacleAvoidanceDroneCommand;case Dt.TypeName.ReturnHomeRemoteObstacleAvoidanceDroneCommand:return new P.ReturnHomeRemoteObstacleAvoidanceDroneCommand;case Dt.TypeName.RotationComponent:return new Re.RotationComponent;case Dt.TypeName.SaturationCameraCommand:return new Q.SaturationCameraCommand;case Dt.TypeName.SeriousLowBatteryWarningThresholdDroneCommand:return new D.SeriousLowBatteryWarningThresholdDroneCommand;case Dt.TypeName.SharpnessCameraCommand:return new ee.SharpnessCameraCommand;case Dt.TypeName.ShutterSpeedCameraCommand:return new te.ShutterSpeedCameraCommand;case Dt.TypeName.SmartReturnHomeDroneCommand:return new E.SmartReturnHomeDroneCommand;case Dt.TypeName.SourcedGeoSpatial:return new Pt.SourcedGeoSpatial;case Dt.TypeName.SpotMeteringTargetCameraCommand:return new ne.SpotMeteringTargetCameraCommand;case Dt.TypeName.StartCaptureCameraCommand:return new ie.StartCaptureCameraCommand;case Dt.TypeName.StopCaptureCameraCommand:return new oe.StopCaptureCameraCommand;case Dt.TypeName.StorageLocationCameraCommand:return new ae.StorageLocationCameraCommand;case Dt.TypeName.Timeline:return new Et.Timeline;case Dt.TypeName.TimelineCameraCapture:return new Ft.TimelineCameraCapture;case Dt.TypeName.TimelineCommand:return new At.TimelineCommand;case Dt.TypeName.TimelineFrame:return new Nt.TimelineFrame;case Dt.TypeName.User:return new _t.User;case Dt.TypeName.UpwardsAvoidanceDroneCommand:return new F.UpwardsAvoidanceDroneCommand;case Dt.TypeName.Variable:return new Rt.Variable;case Dt.TypeName.Vector2:return new It.Vector2;case Dt.TypeName.Velocity3:return new Lt.Velocity3;case Dt.TypeName.Velocity6:return new zt.Velocity6;case Dt.TypeName.VelocityDroneCommand:return new A.VelocityDroneCommand;case Dt.TypeName.VelocityGimbalCommand:return new pe.VelocityGimbalCommand;case Dt.TypeName.VideoFileCompressionStandardCameraCommand:return new re.VideoFileCompressionStandardCameraCommand;case Dt.TypeName.VideoFileFormatCameraCommand:return new se.VideoFileFormatCameraCommand;case Dt.TypeName.VideoResolutionFrameRateCameraCommand:return new le.VideoResolutionFrameRateCameraCommand;case Dt.TypeName.VideoStandardCameraCommand:return new ue.VideoStandardCameraCommand;case Dt.TypeName.VisionAssistedPositioningDroneCommand:return new N.VisionAssistedPositioningDroneCommand;case Dt.TypeName.WaitComponent:return new Ie.WaitComponent;case Dt.TypeName.WhiteBalanceCustomCameraCommand:return new ce.WhiteBalanceCustomCameraCommand;case Dt.TypeName.WhiteBalancePresetCameraCommand:return new me.WhiteBalancePresetCameraCommand;case Dt.TypeName.Zone:return new kt.Zone;case Dt.TypeName.ZoneBoundaryPoint:return new Bt.ZoneBoundaryPoint}return null}static deserializeInstance(e){const t=jt.createInstance(e.type);return null!==t&&t.applyJSON(e),t}static generateCode(e,t=0,n="Dronelink"){if(!e||!e.type)return null;const i=e.type.charAt(0).toLowerCase()+e.type.slice(1),o=[];return t>0&&o.push("(() => {"),o.push(`${jt.indent(t+1)}const ${i} = new ${n?n+".":""}${e.type}()`),Object.keys(e).forEach(a=>{if("type"===a)return;if("id"===a&&e.type!==Dt.TypeName.PointOfInterest)return;const r=e[a];e.type===Dt.TypeName.Datetime&&"value"===a?o.push(`${jt.indent(t+1)}${i}.${a} = new Date(${r.getTime()})`):null===r?o.push(`${jt.indent(t+1)}${i}.${a} = null`):Array.isArray(r)?(o.push(`${jt.indent(t+1)}${i}.${a} = [`),r.forEach(e=>{o.push(`${jt.indent(t+2)}${jt.generateCode(e,t+2,n)},`)}),o.push(jt.indent(t+1)+"]")):"object"==typeof r?o.push(`${jt.indent(t+1)}${i}.${a} = ${jt.generateCode(r,t+1,n)}`):"string"==typeof r?o.push(`${jt.indent(t+1)}${i}.${a} = "${r.replace('"','\\"')}"`):"function"==typeof r||o.push(`${jt.indent(t+1)}${i}.${a} = ${r}`)}),t>0&&(o.push(`${jt.indent(t+1)}return ${i}`),o.push(`${jt.indent(t)}})()`)),o.join("\n")}static indent(e){return Array(e).join("    ")}static validateJson(e){if(!e)throw new TypeError("Expected object but found null")}static validateType(e,t){if(!e||!e.type)throw new TypeError(`Expected ${jt.typeDisplay(t)} but found null`);if(e.type!==t)throw new TypeError(`Expected ${jt.typeDisplay(t)} but found ${jt.typeDisplay(e.type)}`)}}t.Serialization=jt,jt.WriteCompressByDefault=!0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4);class o{static sleep(e){return new Promise(t=>setTimeout(t,e))}static uuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}static parseBoolean(e,t=!1){return null==e?t:!0===e}static parseFloat(e,t=0){const n=parseFloat(e);return Number.isNaN(n)?t:n}static parseInt(e,t=0){const n=parseInt(e);return Number.isNaN(n)?t:n}static parseString(e,t=null){return null==e||"string"!=typeof e?t:e}static sigmoidBase(e,t){return 1/(1+Math.exp(-t*e))-.5}static sigmoid(e,t=Math.E){return.5/o.sigmoidBase(1,t)*o.sigmoidBase(2*Math.max(Math.min(e,1),0)-1,t)+.5}static modSafe(e,t){return(e%t+t)%t}static matchSign(e,t){return t<0?-1*e:e}static movingAverage(e,t=1){const n=t/(e.length+1);return e.reduce((e,t)=>t*n+e*(1-n),0)}static debugLog(e){const t=new Date;console.debug(`[${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()} ${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}:${t.getMilliseconds()}] ${e}`)}static last(e){return e[e.length-1]}static lastSafe(e){return e.length>0?o.last(e):null}static remove(e,t){return e.filter(e=>e!==t&&(!t.id||!e.id||t.id!==e.id))}static joinNotEmpty(e,t=i.Strings.Common.delimeter){return e.filter(e=>e).join(t)}static descendantsMatching(e,t){if(!e)return[];const n=[];return t(e)&&n.push(e),Array.isArray(e)?n.push(...o.descendantsMatchingIterable(e,t)):e instanceof Object&&n.push(...o.descendantsMatchingIterable(Object.keys(e).map(t=>e[t]),t)),n}static descendantsMatchingIterable(e,t){if(!e||0===e.length)return[];const n=[];return e.forEach(e=>{n.push(...o.descendantsMatching(e,t))}),n.length>0?n:[]}}t.Common=o},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(4),r=i(n(156)),s=n(19),l=n(2);class u{static string(e){return a.Strings.getString(e,a.Strings.getLanguage(),!0)}static velocityHorizontal(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case o.UnitSystem.Metric:return new c(u.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:a.Strings.Unit.values.kilometersPerHour.name,abbreviation:a.Strings.Unit.values.kilometersPerHour.abbreviation});case o.UnitSystem.Imperial:return new c(u.number(s.Convert.metersPerSecondToMilesPerHour(e)),{name:a.Strings.Unit.values.milesPerHour.name,abbreviation:a.Strings.Unit.values.milesPerHour.abbreviation})}}static velocityVertical(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case o.UnitSystem.Metric:return new c(u.number(e),{name:a.Strings.Unit.values.metersPerSecond.name,abbreviation:a.Strings.Unit.values.metersPerSecond.abbreviation});case o.UnitSystem.Imperial:return new c(u.number(s.Convert.metersToFeet(e)),{name:a.Strings.Unit.values.feetPerSecond.name,abbreviation:a.Strings.Unit.values.feetPerSecond.abbreviation})}}static velocityRotational(e=0){return new c(u.angle(e,!1).value,{name:a.Strings.Unit.values.degreesPerSecond.name,abbreviation:a.Strings.Unit.values.degreesPerSecond.abbreviation})}static accelerationHorizontal(e=0){return new c(u.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:a.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:a.Strings.Unit.values.metersPerSecondSquared.abbreviation})}static accelerationVertical(e=0){return u.accelerationHorizontal(e)}static accelerationRotational(e=0){return new c(u.number(s.Convert.metersPerSecondToKilometersPerHour(e)),{name:a.Strings.Unit.values.degreesPerSecondSquared.name,abbreviation:a.Strings.Unit.values.degreesPerSecondSquared.abbreviation})}static timeElapsed(e=0){if(e>0&&e<1)return r.default(e).format("0.00");const t=u.time(e),n=[];return"0"!==t.hours.value&&n.push(t.hours.value),n.push(t.minutes.value.length<2?"0"+t.minutes.value:t.minutes.value),n.push(t.seconds.value.length<2?"0"+t.seconds.value:t.seconds.value),n.join(":")}static time(e=0){const t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return{hours:new c(String(t),{name:a.Strings.Unit.values.hours.name,abbreviation:a.Strings.Unit.values.hours.abbreviation}),minutes:new c(String(n),{name:a.Strings.Unit.values.minutes.name,abbreviation:a.Strings.Unit.values.minutes.abbreviation}),seconds:new c(String(i),{name:a.Strings.Unit.values.seconds.name,abbreviation:a.Strings.Unit.values.seconds.abbreviation})}}static distance(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case o.UnitSystem.Metric:return e>1e3?new c(u.number(e/1e3),{name:a.Strings.Unit.values.kilometers.name,abbreviation:a.Strings.Unit.values.kilometers.abbreviation}):new c(u.number(e),{name:a.Strings.Unit.values.meters.name,abbreviation:a.Strings.Unit.values.meters.abbreviation});case o.UnitSystem.Imperial:return e>1609.34?new c(u.number(e/1609.34),{name:a.Strings.Unit.values.miles.name,abbreviation:a.Strings.Unit.values.miles.abbreviation}):new c(u.number(s.Convert.metersToFeet(e)),{name:a.Strings.Unit.values.feet.name,abbreviation:a.Strings.Unit.values.feet.abbreviation})}}static altitude(e=0){switch(Math.abs(e)<.1&&(e=0),u.UnitSystem){case o.UnitSystem.Metric:return new c(u.number(e),{name:a.Strings.Unit.values.meters.name,abbreviation:a.Strings.Unit.values.meters.abbreviation});case o.UnitSystem.Imperial:return new c(u.number(s.Convert.metersToFeet(e)),{name:a.Strings.Unit.values.feet.name,abbreviation:a.Strings.Unit.values.feet.abbreviation})}}static angle(e=0,t=!0){if(Math.abs(e)<.01&&(e=0),t){if(e>2*Math.PI)return u.angle(e-2*Math.PI,t);if(e<0)return u.angle(e+2*Math.PI,t)}return new c(r.default(Math.round(s.Convert.radiansToDegrees(e))).format("0,0"),{name:a.Strings.Unit.values.degrees.name,abbreviation:a.Strings.Unit.values.degrees.abbreviation},"")}static area(e=0){switch(u.UnitSystem){case o.UnitSystem.Metric:return new c(r.default(s.Convert.squareMetersToHectares(e)).format("0,0.0"),{name:a.Strings.Unit.values.hectare.name,abbreviation:a.Strings.Unit.values.hectare.abbreviation});case o.UnitSystem.Imperial:return new c(r.default(s.Convert.squareMetersToAcres(e)).format("0,0.0"),{name:a.Strings.Unit.values.acres.name,abbreviation:a.Strings.Unit.values.acres.abbreviation})}}static cameraSpecificationLength(e=0){return new c(r.default(e).format(Math.round(e)===e?"0,0":"0,0.0"),{name:a.Strings.Unit.values.millimeters.name,abbreviation:a.Strings.Unit.values.millimeters.abbreviation})}static cameraSpecificationPixels(e=0){return new c(r.default(Math.round(e)).format("0,0"),{name:a.Strings.Unit.values.pixels.name,abbreviation:a.Strings.Unit.values.pixels.abbreviation})}static groundSampleDistance(e){const t=Math.max(e.width,e.height);switch(u.UnitSystem){case o.UnitSystem.Metric:return new c(r.default(100*t).format("0,0.00"),{name:a.Strings.Unit.values.centimetersPerPixel.name,abbreviation:a.Strings.Unit.values.centimetersPerPixel.abbreviation});case o.UnitSystem.Imperial:return new c(r.default(s.Convert.metersToInches(t)).format("0,0.00"),{name:a.Strings.Unit.values.inchesPerPixel.name,abbreviation:a.Strings.Unit.values.inchesPerPixel.abbreviation})}}static groundSampleDistanceCombined(e){const t=Math.max(e.width,e.height),n=new c(r.default(s.Convert.metersToInches(t)).format("0,0.00"),{name:a.Strings.Unit.values.inchesPerPixel.name,abbreviation:a.Strings.Unit.values.inchesPerPixel.abbreviation}).toString(),i=new c(r.default(100*t).format("0,0.00"),{name:a.Strings.Unit.values.centimetersPerPixel.name,abbreviation:a.Strings.Unit.values.centimetersPerPixel.abbreviation}).toString();switch(u.UnitSystem){case o.UnitSystem.Metric:return l.Common.joinNotEmpty([i,n]);case o.UnitSystem.Imperial:return l.Common.joinNotEmpty([n,i])}}static absoluteTemperature(e=0){return`${u.integer(e)} ${a.Strings.Unit.values.kelvin.abbreviation}`}static percent(e=0){return new c(r.default(100*e).format(e<.01?"0,0.0":"0,0"),{name:a.Strings.Unit.values.percent.name,abbreviation:a.Strings.Unit.values.percent.abbreviation},"")}static number(e){return Math.abs(e)<10?Math.abs(e)<.01?"0":r.default(e).format("0,0.0"):u.integer(e)}static integer(e,t=null){const n=r.default(Math.round(e)).format("0,0");return t?1===Math.abs(e)?`${n} ${t.singular}`:`${n} ${t.plural}`:n}static degreesMinutesAndSeconds(e){const t=Math.abs(e),n=Math.floor(t),i=60*(t-n),o=Math.floor(i),r=Math.floor(60*(i-o));return n+a.Strings.Unit.values.degrees.abbreviation+o+a.Strings.Unit.values.geoMinutes.abbreviation+r+a.Strings.Unit.values.geoSeconds.abbreviation}static geoCoordinate(e){const t=Math.sign(e.latitude)>=0?{name:a.Strings.Unit.values.geoNorth.name,abbreviation:a.Strings.Unit.values.geoNorth.abbreviation}:{name:a.Strings.Unit.values.geoSouth.name,abbreviation:a.Strings.Unit.values.geoSouth.abbreviation},n=Math.sign(e.longitude)>=0?{name:a.Strings.Unit.values.geoEast.name,abbreviation:a.Strings.Unit.values.geoEast.abbreviation}:{name:a.Strings.Unit.values.geoWest.name,abbreviation:a.Strings.Unit.values.geoWest.abbreviation};return{latitude:new c(u.degreesMinutesAndSeconds(e.latitude),t),longitude:new c(u.degreesMinutesAndSeconds(e.longitude),n)}}static enum(e,t,n=!1){return u.string(`${e}.values.${t}.${n?"abbreviation":"name"}`)}static fileSize(e,t=2){if(0===e)return new c("0",a.Strings.Unit.values.bytes);const n=t<0?0:t,i=[a.Strings.Unit.values.bytes,a.Strings.Unit.values.kilobytes,a.Strings.Unit.values.megabytes,a.Strings.Unit.values.gigabytes],o=Math.floor(Math.log(e)/Math.log(1024));return new c(String((e/Math.pow(1024,o)).toFixed(n)),i[o])}static icaoWords(e){const t=[];if(e<0)return t;let n,i=e+1;for(;0!==i;){let e=i-1;i=Math.floor(e/u.icaoAlphabet.length),n=e%u.icaoAlphabet.length,t.push(u.icaoAlphabet[n])}return t.reverse()}static icaoLetters(e){return u.icaoWords(e).map(e=>e.charAt(0)).join("")}}t.Format=u,u.UnitSystem=o.UnitSystem.Imperial,u.icaoAlphabet=["Alfa","Bravo","Charlie","Delta","Echo","Foxtrot","Golf","Hotel","India","Juliett","Kilo","Lima","Mike","November","Oscar","Papa","Quebec","Romeo","Sierra","Tango","Uniform","Victor","Whiskey","Xray","Yankee","Zulu"];class c{constructor(e,t,n=" "){this.toString=(()=>`${this.value}${this.spacer}${this.unit.abbreviation}`),this.value=e,this.unit=t,this.spacer=n}}t.FormattedValue=c},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(243));t.Strings=new o.default({en:{Common:{delimeter:" | ",set:"Set",new:"New",yes:"Yes",no:"No",more:"More",enabled:"Enabled",disabled:"Disabled"},AchievableDroneMotionComponent:{values:{immediateComponent:"Immediate",immediateComponentTooltip:"The immediate component will be executed before this component is achieved.",achievedComponent:"Achieved",achievedComponentTooltip:"The achieved component will be executed after this component is achieved and after the immediate component is finished (if it exists)."},messages:{waiting:{title:"Waiting for Achievement"}}},AEBCountCameraCommand:{name:"Camera AEB Count",values:{aebCount:"AEB Count"}},Altitude:{name:"Altitude",values:{value:"Altitude",system:"Reference"}},AltitudeSystem:{name:"Altitude System",values:{atl:{name:"Takeoff Location",abbreviation:"ATL"},agl:{name:"Ground Level",abbreviation:"AGL"},msl:{name:"Mean Sea Level",abbreviation:"MSL"}}},AltitudeRange:{name:"Altitude Range",values:{altitude:"Target",range:"Range",rangeMin:"Below",rangeMax:"Above"}},ApertureCameraCommand:{name:"Camera Aperture",values:{aperture:"Aperture"}},ApproachableComponent:{name:"Approachable",values:{approachComponent:"Approach"},messages:{aligning:{title:"Aligning..."}}},Asset:{name:"Asset",multiple:"Assets"},AssetManifest:{name:"Asset Manifest"},AssetSource:{name:"Asset Source",values:{key:"Key"}},AutoExposureLockCameraCommand:{name:"Camera Auto Exposure Lock",values:{enabled:"Enabled"}},AutoLockGimbalCameraCommand:{name:"Camera Auto Lock Gimbal",values:{enabled:"Enabled"}},Battery:{name:"Battery",multiple:"Batteries"},Camera:{name:"Camera"},CameraAEBCount:{name:"Camera AEB Count",values:{3:{name:"3"},5:{name:"5"},7:{name:"7"},unknown:{name:"Unknown"}}},CameraAperture:{name:"Camera Aperture",values:{auto:{name:"Auto"},"f/1dot6":{name:"f/1.6"},"f/1dot7":{name:"f/1.7"},"f/1dot8":{name:"f/1.8"},"f/2":{name:"f/2"},"f/2dot2":{name:"f/2.2"},"f/2dot4":{name:"f/2.4"},"f/2dot5":{name:"f/2.5"},"f/2dot6":{name:"f/2.6"},"f/2dot8":{name:"f/2.8"},"f/3dot2":{name:"f/3.2"},"f/3dot4":{name:"f/3.4"},"f/3dot5":{name:"f/3.5"},"f/4":{name:"f/4"},"f/4dot5":{name:"f/4.5"},"f/4dot8":{name:"f/4.8"},"f/5":{name:"f/5"},"f/5dot6":{name:"f/5.6"},"f/6dot3":{name:"f/6.3"},"f/6dot8":{name:"f/6.8"},"f/7dot1":{name:"f/7.1"},"f/8":{name:"f/8"},"f/9":{name:"f/9"},"f/9dot5":{name:"f/9.5"},"f/9dot6":{name:"f/9.6"},"f/10":{name:"f/10"},"f/11":{name:"f/11"},"f/13":{name:"f/13"},"f/14":{name:"f/14"},"f/16":{name:"f/16"},"f/18":{name:"f/18"},"f/19":{name:"f/19"},"f/20":{name:"f/20"},"f/22":{name:"f/22"},unknown:{name:"Unknown"}}},CameraCaptureConfiguration:{name:"Capture Configuration",values:{channel:"Channel",captureType:"Camera Capture"}},CameraColor:{name:"Camera Color",values:{none:{name:"Normal"},art:{name:"Art"},blackAndWhite:{name:"Black and White"},bright:{name:"Bright"},dCinelike:{name:"D-Cinelike"},portrait:{name:"Portrait"},m31:{name:"M31"},kDX:{name:"kDX"},prismo:{name:"Prismo"},jugo:{name:"Jugo"},dLog:{name:"DLog-M"},trueColor:{name:"True Color"},inverse:{name:"Inverse"},reminiscence:{name:"Reminiscence"},solarize:{name:"Solarize"},posterize:{name:"Posterize"},whiteboard:{name:"Whiteboard"},blackboard:{name:"Blackboard"},aqua:{name:"Aqua"},delta:{name:"Delta"},dk79:{name:"DK79"},vision4:{name:"Vision 4"},vision6:{name:"Vision6"},trueColorExt:{name:"True Color Extend"},filmA:{name:"Film A"},filmB:{name:"Film B"},filmC:{name:"Film C"},filmD:{name:"Film D"},filmE:{name:"Film E"},filmF:{name:"Film F"},filmG:{name:"Film G"},filmH:{name:"Film H"},filmI:{name:"Film I"},hlg:{name:"HLG"},unknown:{name:"Unknown"}}},CameraLensSpecification:{name:"Lens",values:{focalLength:"Focal Length"}},CameraCaptureType:{name:"Camera Capture Type",values:{photos:{name:"Photos"},video:{name:"Video"}}},CameraCommand:{name:"Camera Command",description:""},CameraExposureCompensation:{name:"Camera Exposure Compensation",values:{n50:{name:"-5.0ev"},n47:{name:"-4.7ev"},n43:{name:"-4.3ev"},n40:{name:"-4.0ev"},n37:{name:"-3.7ev"},n33:{name:"-3.3ev"},n30:{name:"-3.0ev"},n27:{name:"-2.7ev"},n23:{name:"-2.3ev"},n20:{name:"-2.0ev"},n17:{name:"-1.7ev"},n13:{name:"-1.3ev"},n10:{name:"-1.0ev"},n07:{name:"-0.7ev"},n03:{name:"-0.3ev"},n00:{name:"0.0ev"},p03:{name:"+0.3ev"},p07:{name:"+0.7ev"},p10:{name:"+1.0ev"},p13:{name:"+1.3ev"},p17:{name:"+1.7ev"},p20:{name:"+2.0ev"},p23:{name:"+2.3ev"},p27:{name:"+2.7ev"},p30:{name:"+3.0ev"},p33:{name:"+3.3ev"},p37:{name:"+3.7ev"},p40:{name:"+4.0ev"},p43:{name:"+4.3ev"},p47:{name:"+4.7ev"},p50:{name:"+5.0ev"},fixed:{name:"Fixed"},unknown:{name:"Unknown"}}},CameraExposureMode:{name:"Camera Exposure Mode",values:{program:{name:"Auto"},shutterPriority:{name:"Shutter Priority"},aperturePriority:{name:"Aperture Priority"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},CameraFile:{name:"File",multiple:"Files"},CameraFileIndexMode:{name:"Camera File Index Mode",values:{reset:{name:"Reset"},sequence:{name:"Sequence"},unknown:{name:"Unknown"}}},CameraFocusMode:{name:"Camera Focus Mode",values:{manual:{name:"Manual"},auto:{name:"Auto"},autoContinuous:{name:"Continuous AF"},unknown:{name:"Unknown"}}},CameraISO:{name:"Camera ISO",values:{auto:{name:"Auto"},100:{name:"100"},200:{name:"200"},400:{name:"400"},800:{name:"800"},1600:{name:"1600"},3200:{name:"3200"},6400:{name:"6400"},12800:{name:"12800"},25600:{name:"25600"},fixed:{name:"Fixed"},unknown:{name:"Unknown"}}},CameraMeteringMode:{name:"Camera Metering Mode",values:{center:{name:"Center"},average:{name:"Average"},spot:{name:"Spot"},unknown:{name:"Unknown"}}},CameraMode:{name:"Camera Mode",values:{photo:{name:"Photo"},video:{name:"Video"},playback:{name:"Playback"},download:{name:"Download"},broadcast:{name:"Broadcast"},unknown:{name:"None"}}},CameraPhotoAspectRatio:{name:"Camera Photo Aspect Ratio",values:{"4:3":{name:"4:3"},"16:9":{name:"16:9"},"3:2":{name:"3:2"},unknown:{name:"Unknown"}}},CameraPhotoFileFormat:{name:"Camera Photo File Format",values:{raw:{name:"RAW"},jpeg:{name:"JPEG"},"raw+jpeg":{name:"RAW+JPEG"},tiff14bit:{name:"TIFF (14bit)"},radiometricJpeg:{name:"Radiometric JPEG"},tiff14bitLinearLowTempResolution:{name:"TIFF Linear Low"},tiff14bitLinearHighTempResolution:{name:"TIFF Linear High"},unknown:{name:"Unknown"}}},CameraPhotoMode:{name:"Camera Photo Type",values:{single:{name:"Single"},interval:{name:"Interval"},aeb:{name:"AEB"},hdr:{name:"HDR"},ehdr:{name:"eHDR"},burst:{name:"Burst"},rawBurst:{name:"RAW Burst"},shallowFocus:{name:"Shallow Focus"},panorama:{name:"Panorama"},hyperLight:{name:"Hyper Light"},timeLapse:{name:"Time Lapse"},unknown:{name:"Unknown"}}},CameraImageSpecification:{name:"Image",values:{width:"Width",height:"Height"}},CameraSensorSpecification:{name:"Sensor",values:{width:"Width",height:"Height"}},CameraSpecification:{models:{zenmuseX7:"Zenmuse X7",zenmuseX5S:"Zenmuse X5S",zenmuseX4S:"Zenmuse X4S",zenmuseX5R:"Zenmuse X5R",zenmuseX5:"Zenmuse X5",zenmuseX3:"Zenmuse X3",zenmuseXT:"Zenmuse XT",zenmuseXT2RGB:"Zenmuse XT2 (RGB)",zenmuseXT2Thermal:"Zenmuse XT2 (Thermal)",zenmuseZ30Min:"Zenmuse Z30 (Min)",zenmuseZ30Max:"Zenmuse Z30 (Max)",mavic2Pro:"Mavic 2 - Pro (Full FOV)",mavic2ProHQ:"Mavic 2 - Pro (HQ)",mavic2ZoomMin:"Mavic 2 - Zoom (Min)",mavic2ZoomMax:"Mavic 2 - Zoom (Max)",mavic2EnterpriseMin:"Mavic 2 - Enterprise (Min)",mavic2EnterpriseMax:"Mavic 2 - Enterprise (Max)",mavic2EnterpriseDualRGB:"Mavic 2 - Enterprise Dual (RGB)",mavic2EnterpriseDualThermal:"Mavic 2 - Enterprise Dual (Thermal)",mavicAir:"Mavic - Air",mavicPro:"Mavic - Pro",mavicProPlatinum:"Mavic - Pro Platinum",phantom4Pro2_0:"Phantom 4 - Pro v2.0",phantom4RTK:"Phantom 4 - RTK",phantom4Multispectral:"Phantom 4 - Multispectral",phantom4Pro:"Phantom 4 - Pro",phantom4Advanced:"Phantom 4 - Advanced",phantom4:"Phantom 4",phantom3Pro:"Phantom 3 - Pro",phantom3Advanced:"Phantom 3 - Advanced",phantom3Standard:"Phantom 3 - Standard",spark:"Spark"}},CameraShutterSpeed:{name:"Camera Shutter Speed",values:{"1/8000":{name:"1/8000 s"},"1/6400":{name:"1/6400 s"},"1/6000":{name:"1/6000 s"},"1/5000":{name:"1/5000 s"},"1/4000":{name:"1/4000 s"},"1/3200":{name:"1/3200 s"},"1/3000":{name:"1/3000 s"},"1/2500":{name:"1/2500 s"},"1/2000":{name:"1/2000 s"},"1/1600":{name:"1/1600 s"},"1/1500":{name:"1/1500 s"},"1/1250":{name:"1/1250 s"},"1/1000":{name:"1/1000"},"1/800":{name:"1/800 s"},"1/750":{name:"1/750 s"},"1/725":{name:"1/725 s"},"1/640":{name:"1/640 s"},"1/500":{name:"1/500 s"},"1/400":{name:"1/400 s"},"1/350":{name:"1/350 s"},"1/320":{name:"1/320 s"},"1/250":{name:"1/250 s"},"1/240":{name:"1/240 s"},"1/200":{name:"1/200 s"},"1/180":{name:"1/180 s"},"1/160":{name:"1/160 s"},"1/125":{name:"1/125 s"},"1/120":{name:"1/120 s"},"1/100":{name:"1/100 s"},"1/90":{name:"1/90 s"},"1/80":{name:"1/80 s"},"1/60":{name:"1/60 s"},"1/50":{name:"1/50 s"},"1/45":{name:"1/45 s"},"1/40":{name:"1/40 s"},"1/30":{name:"1/30 s"},"1/25":{name:"1/25 s"},"1/20":{name:"1/20 s"},"1/15":{name:"1/15 s"},"1/12dot5":{name:"1/12.5 s"},"1/10":{name:"1/10 s"},"1/8":{name:"1/8 s"},"1/6dot25":{name:"1/6.25 s"},"1/6":{name:"1/6 s"},"1/5":{name:"1/5 s"},"1/4":{name:"1/4 s"},"1/3":{name:"1/3 s"},"1/2dot5":{name:"1/2.5 s"},"0dot3":{name:"0.3 s"},"1/2":{name:"1/2 s"},"1/1dot67":{name:"1/1.67 s"},"1/1dot25":{name:"1/1.25 s"},"0dot7":{name:"0.7 s"},1:{name:"1.0 s"},"1dot3":{name:"1.3 s"},"1dot4":{name:"1.4 s"},"1dot6":{name:"1.6 s"},2:{name:"2.0 s"},"2dot5":{name:"2.5 s"},3:{name:"3.0 s"},"3dot2":{name:"3.2 s"},4:{name:"4.0 s"},5:{name:"5.0 s"},6:{name:"6.0 s"},7:{name:"7.0 s"},8:{name:"8.0 s"},9:{name:"9.0 s"},10:{name:"10.0 s"},11:{name:"11.0 s"},13:{name:"13.0 s"},15:{name:"15.0 s"},16:{name:"16.0 s"},20:{name:"20.0 s"},23:{name:"23.0 s"},25:{name:"25.0 s"},30:{name:"30.0 s"},unknown:{name:"Unknown"}}},CameraStorageLocation:{name:"Camera Storage Location",values:{sdCard:{name:"SD Card"},internal:{name:"Internal"},unknown:{name:"Unknown"}}},CameraVideoFileCompressionStandard:{name:"Camera Video File Compression Standard",values:{h264:{name:"H.264"},h265:{name:"H.265"},unknown:{name:"Unknown"}}},CameraVideoFileFormat:{name:"Camera Video File Format",values:{mov:{name:"MOV"},mp4:{name:"MP4"},tiffSequence:{name:"TIFF Sequence"},seq:{name:"SEQ"},unknown:{name:"Unknown"}}},CameraVideoFieldOfView:{name:"Camera Video Field of View",values:{default:{name:"Default"},narrow:{name:"HQ (Narrow)"},wide:{name:"Full FOV (Wide)"},unknown:{name:"Unknown"}}},CameraVideoFrameRate:{name:"Camera Video Frame Rate",values:{"23dot976":{name:"23.976fps"},24:{name:"24fps"},25:{name:"25fps"},"29dot970":{name:"29.970fps"},30:{name:"30fps"},"47dot950":{name:"47.950fps"},48:{name:"48fps"},50:{name:"50fps"},"59dot940":{name:"59.940fps"},60:{name:"60fps"},90:{name:"90fps"},96:{name:"96fps"},100:{name:"100fps"},120:{name:"120fps"},"8dot7":{name:"8.7fps"},unknown:{name:"Unknown"}}},CameraVideoResolution:{name:"Camera Video Resolution",values:{"336x256":{name:"336x256"},"640x360":{name:"640x360"},"640x480":{name:"640x480"},"640x512":{name:"640x512"},"1280x720":{name:"1280x720"},"1920x1080":{name:"1920x1080"},"2048x1080":{name:"2048x1080"},"2688x1512":{name:"2688x1512"},"2704x1520":{name:"2704x1520"},"2720x1530":{name:"2720x1530"},"3712x2088":{name:"3712x2088"},"3840x1572":{name:"3840x1572"},"3840x2160":{name:"3840x2160"},"3944x2088":{name:"3944x2088"},"4096x2160":{name:"4096x2160"},"4608x2160":{name:"4608x2160"},"4608x2592":{name:"4608x2592"},"5280x2160":{name:"5280x2160"},"5280x2972":{name:"5280x2972"},"5760x3240":{name:"5760x3240"},"6016x3200":{name:"6016x3200"},max:{name:"Max"},noSSDVideo:{name:"No SSD Video"},unknown:{name:"Unknown"}}},CameraVideoStandard:{name:"Camera Video Standard",values:{pal:{name:"PAL"},ntsc:{name:"NTSC"},unknown:{name:"Unknown"}}},CameraWhiteBalancePreset:{name:"Camera White Balance Preset",values:{auto:{name:"Auto"},sunny:{name:"Sunny"},cloudy:{name:"Cloudy"},waterSurface:{name:"Water Surface"},indoorIncandescent:{name:"Indoor Incandescent"},indoorFluorescent:{name:"Indoor Fluorescent"},custom:{name:"Custom"},neutral:{name:"Neutral"},unknown:{name:"Unknown"}}},CollisionAvoidanceDroneCommand:{name:"Drone Collision Avoidance",values:{enabled:"Enabled"}},ColorCameraCommand:{name:"Camera Color",values:{color:"Color"}},Component:{name:"Component",multiple:"Components",verification:"Verification",values:{coordinate:"Reference",referenceOffsetsHandleCoordinate:"Center",descriptors:"Descriptors",cameraCaptureConfiguration:"Automatic Capture"}},Command:{name:"Command"},CommandComponent:{name:"Command",description:"Perform a drone, camera, or gimbal command."},ComponentEstimate:{name:"Estimate",values:{time:"Total Time",distance:"Total Distance",velocityMax:"Max Speed",altitude:"Altitude",photos:"Photos",videos:"Videos"}},CommandExecutionStatus:{name:"Command Execution Status",values:{pending:{name:"Pending"},queued:{name:"Queued"},executing:{name:"Executing"},succeeded:{name:"Succeeded"},failed:{name:"Failed"}}},ComponentExecutionState:{name:"Component Execution State"},ComponentExecutionStatus:{name:"Component Execution Status",values:{pending:{name:"Pending"},executing:{name:"Executing"},succeeded:{name:"Succeeded"},failed:{name:"Failed"}}},ConnectionFailSafeBehaviorDroneCommand:{name:"Drone Connection Fail-Safe",values:{connectionFailSafeBehavior:"Behavior"}},ContrastCameraCommand:{name:"Camera Contrast",values:{contrast:"Contrast"}},CourseComponent:{name:"Course",description:"Fly the drone along a specific course.",subtitle:"{0} → {1}"},Datetime:{name:"Datetime"},Descriptors:{name:"Descriptors",values:{name:"Name",description:"Description",tags:"Tags"}},DestinationComponent:{name:"Destination",description:"Fly the drone to a specific location.",values:{destinationOffset:"Destination",achievement:"Achievement",achievementTime:"Time",achievementDistance:"Distance",altitudeRange:"Altitude Range",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"},messages:{moving:{title:"Destination",details:{distance:"D {0}",altitude:"A {0}",heading:"H {0}"}}}},Device:{name:"Device",multiple:"Devices"},Disengagement:{name:"Disengagement"},DisengageComponent:{name:"Disengage",description:"Disengage before executing more components.",values:{reason:"Reason"},messages:{default:"Automatically Disengaged"}},DistanceTolerance:{name:"Distance Tolerance",values:{horizontal:"Distance",vertical:"Altitude"}},Drone:{name:"Drone",multiple:"Drones"},DroneCommand:{name:"Drone Command",description:""},DroneConnectionFailSafeBehavior:{name:"Drone Connection Fail-Safe Behavior",values:{hover:{name:"Hover"},returnHome:{name:"Return Home"},autoLand:{name:"Auto Land"},unknown:{name:"Unknown"}}},DroneLightbridgeChannelSelectionMode:{name:"Drone Lightbridge Channel Selection Mode",values:{auto:{name:"Auto"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},DroneLightbridgeFrequencyBand:{name:"Drone Lightbridge Frequency Band",values:{"2dot4ghz":{name:"2.4GHz"},"5dot7ghz":{name:"5.7GHz"},"5dot8ghz":{name:"5.8GHz"},unknown:{name:"Unknown"}}},DroneMotionComponent:{name:"Motion",values:{droneMotionLimits:"Motion Limits",droneMotionLimitsHorizontalVelocityMax:"Speed (max)",droneMotionLimitsHorizontalAccelerationMin:"H. Deceleration",droneMotionLimitsHorizontalAccelerationMax:"H. Acceleration",droneMotionLimitsVerticalVelocityMin:"Descent Rate",droneMotionLimitsVerticalVelocityMax:"Ascent Rate",droneMotionLimitsVerticalAccelerationMin:"V. Deceleration",droneMotionLimitsVerticalAccelerationMax:"V. Acceleration",droneMotionLimitsRotationalVelocityMax:"Rotation Rate",droneMotionLimitsRotationalAccelerationMin:"R. Deceleration",droneMotionLimitsRotationalAccelerationMax:"R. Acceleration",restrictionZonesEnabled:"Respect Restriction Zones"},messages:{disengageErrorTolerance:{title:"Drone Too Far Off Course",details:{distance:"D {0}",altitude:"A {0}"}}}},DroneOcuSyncChannelSelectionMode:{name:"Drone OcuSync Channel Selection Mode",values:{auto:{name:"Auto"},manual:{name:"Manual"},unknown:{name:"Unknown"}}},DroneOcuSyncFrequencyBand:{name:"Drone OcuSync Frequency Band",values:{"2dot4ghz":{name:"2.4GHz"},"5dot8ghz":{name:"5.8GHz"},dual:{name:"Dual"},unknown:{name:"Unknown"}}},Engagement:{name:"Engagement",multiple:"Engagements"},Execution:{name:"Execution"},ExposureCompensationCameraCommand:{name:"Camera Exposure Compensation",values:{exposureCompensation:"Exposure Compensation"}},ExposureCompensationStepCameraCommand:{name:"Camera Exposure Compensation Step",values:{exposureCompensationStep:"Step",exposureCompensationSteps:"Steps"}},ExposureModeCameraCommand:{name:"Camera Exposure Mode",values:{exposureMode:"Exposure Mode"}},FacadeBoundaryFace:{name:"Facade Boundary Face",values:{lineLeft:{name:"Line - Left"},lineRight:{name:"Line - Right"},polygonLeft:{name:"Polygon - Left"},polygonRight:{name:"Polygon - Right"},circleClockwise:{name:"Circle - Clockwise"},circleCounterclockwise:{name:"Circle - Counterclockwise"},spiralClockwise:{name:"Spiral - Clockwise"},spiralCounterclockwise:{name:"Spiral - Counterclockwise"}}},FacadeComponent:{name:"Facade",description:"Fly the drone along a boundary to scan a facade.",values:{approachAltitude:"Approach Alt.",initialAltitude:"Initial Alt.",finalAltitude:"Final Alt.",gimbalOrientations:"Capture Angle",direction:"Direction",cameraMode:"Capture Mode",capturePriority:"Capture Priority",minCaptureInterval:"Min Capture Interval",targetDistance:"Target Distance",pattern:"Pattern",verticalOverlap:"V. Overlap",horizontalOverlap:"H. Overlap",boundaryFace:"Boundary Face",boundaryPoints:"Boundary Points",surfaceSampleDistance:"Sample Distance",sampleDistanceGimbalAngleEnabled:"Gimbal Pitch Affects Sample Distance"},messages:{setup:{title:"Configuring camera..."}}},FacadeComponentBoundaryPoint:{name:"Boundary Point",multiple:"Boundary Points"},FacadeCapturePriority:{name:"Facade Capture Priority",values:{time:{name:"Time"},distance:{name:"Distance"}}},FacadePattern:{name:"Facade Pattern",values:{horizontal:{name:"Horizontal"},vertical:{name:"Vertical"}}},FileIndexModeCameraCommand:{name:"Camera File Index Mode",values:{fileIndexMode:"File Index Mode"}},FocusCameraCommand:{name:"Camera Focus",values:{focusTarget:"Focus Target",focusTargetX:"Horizontal",focusTargetY:"Vertical"}},FocusModeCameraCommand:{name:"Camera Focus Mode",values:{focusMode:"Focus Mode"}},Gimbal:{name:"Gimbal"},GimbalMode:{name:"Gimbal Mode",values:{free:{name:"Free"},fpv:{name:"FPV"},yawFollow:{name:"Yaw Follow"},unknown:{name:"Unknown"}}},Func:{name:"Function",multiple:"Functions",values:{coordinate:"Location",components:"Components",inputs:"Inputs",dynamicInputs:"Dynamic Inputs",executable:"Code"}},FuncInput:{name:"Input",multiple:"Inputs",values:{imageUrl:"Image URL",optional:"Optional",enumValues:"Enumeration"}},GeoCoordinate:{name:"Geo Coordinate",multiple:"Geo Coordinates",values:{latitude:"Latitude",longitude:"Longitude"}},GeoLocation:{name:"Geo Location"},GeoReferencedOffset:{name:"Geo Referenced Offset",values:{altitudeOffset:"Altitude Offset"}},GeoSpatial:{name:"Geo Spatial"},GeoSpatialSource:{name:"Geo Spatial Source",values:{input:{name:"Input"},plan:{name:"Plan"},user:{name:"User"},drone:{name:"Drone"}}},GimbalCommand:{name:"Gimbal Command",description:""},GroundSampleDistance:{name:"Ground Sample Distance"},HeadingDroneCommand:{name:"Heading"},HeadingComponent:{name:"Heading",description:"Point the drone in a specific direction.",subtitle:"{0} ±{1}",values:{heading:"Heading",achievement:"Achievement",achievementTime:"Time",achievementDistance:"Distance"},messages:{rotating:{title:"Rotating"},waiting:{title:"Waiting"}}},InterpolationFunction:{name:"Interpolation",values:{none:{name:"None"},linear:{name:"Linear"},sigmoid:{name:"Curved"}}},ISOCameraCommand:{name:"Camera ISO",values:{iso:"ISO"}},MechanicalShutterCameraCommand:{name:"Camera Mechanical Shutter",values:{enabled:"Enabled"}},LandingGearAutomaticMovementDroneCommand:{name:"Landing Gear Automatic Movement",values:{enabled:"Enabled"}},LandingGearDeployDroneCommand:{name:"Landing Gear Deploy"},LandingGearRetractDroneCommand:{name:"Landing Gear Retract"},LandingProtectionDroneCommand:{name:"Drone Landing Protection",values:{enabled:"Enabled"}},LightbridgeChannelDroneCommand:{name:"Drone Lightbridge Channel",values:{lightbridgeChannel:"Channel"}},LightbridgeChannelSelectionModeDroneCommand:{name:"Drone Lightbridge Channel Selection Mode",values:{lightbridgeChannelSelectionMode:"Channel Selection Mode"}},LightbridgeFrequencyBandDroneCommand:{name:"Drone Lightbridge Frequency Band",values:{lightbridgeFrequencyBand:"Frequency Band"}},Limits:{name:"Limits",toString:{same:"±{0}",different:"{0}, +{1}"},values:{min:"Min",max:"Max"}},Line2:{name:"Line"},ListComponent:{name:"List",description:"Group components and create component hierarchies.",messages:{running:{title:{single:"Component {0} of {1}",multiple:"{0} of {1} Components Complete"}}}},LowBatteryWarningThresholdDroneCommand:{name:"Drone Low Battery Warning",values:{lowBatteryWarningThreshold:"Threshold"}},MapComponent:{name:"Map",description:"Fly the drone inside a boundary to create an orthomosaic or point cloud.",values:{pattern:"Pattern",direction:"Direction",cameraMode:"Capture Mode",boundaryPoints:"Boundary Points",frontOverlap:"Front Overlap",sideOverlap:"Side Overlap",minCaptureInterval:"Min Capture Interval",targetDistance:"Target Distance",droneOrientation:"Drone Heading",gimbalOrientation:"Capture Angle"}},MapComponentBoundaryPoint:{name:"Boundary Point",multiple:"Boundary Points"},MapPattern:{name:"Map Pattern",values:{normal:{name:"Normal"},grid:{name:"Grid"}}},MaxAltitudeDroneCommand:{name:"Drone Max Altitude",values:{maxAltitude:"Altitude"}},MaxDistanceDroneCommand:{name:"Drone Max Distance",values:{maxDistance:"Distance"}},MaxDistanceLimitationDroneCommand:{name:"Drone Max Distance Limitation",values:{enabled:"Enabled"}},MeasurementType:{name:"Measurement",values:{distance:{name:"Distance"},velocityHorizontal:{name:"Velocity - Horizontal"},velocityVertical:{name:"Velocity - Vertical"},velocityRotational:{name:"Velocity - Rotational"},accelerationHorizontal:{name:"Acceleration Horizontal"},accelerationVertical:{name:"Acceleration - Vertical"},accelerationRotational:{name:"Acceleration - Rotational"},angle:{name:"Angle"},angleMod:{name:"Angle (360)"},percent:{name:"Percent"}}},Mission:{name:"Mission",multiple:"Missions",messages:{reengaging:"Resuming",reengagementFailed:"Unable to Resume",reengagementUserID:"User Changed",reengagementDeviceID:"Device Changed",reengagementDroneID:"Drone Changed",succeeded:"Mission Accomplished",failed:"Mission Failed",complete:"Mission Complete",engageDisallowed:{complete:"Mission Already Complete",requiredTakeoffInvalid:{title:"Invalid Drone Takeoff Location",details:"Drone takeoff location is {0} outside the required takeoff area."}}},values:{reengagement:"Resuming Mission"}},MissionIssue:{name:"Issue",multiple:"Issues",messages:{elevation:{requiredTakeoff:{title:"Ground elevations used without a takeoff takeoff restriction. Taking off from a different location could result in an unsafe altitude offset.",details:"Recommendation: Set the Plan Takeoff Restriction to a specific area."}},cameraCommand:{requiredNotCapturingUnknown:{title:"{0} attempted before camera stop capture.",details:"Recommendation: Add a camera stop capture command before this command."},requiredNotCapturingInvalid:{title:"{0} attempted while camera capturing. This command will always fail.",details:"Recommendation: Add a camera stop capture command before this command."},requiredModeUnknown:{title:"{0} attempted while camera in unknown mode.",details:"Recommendation: Add a camera mode command before this command."},requiredModeInvalid:{title:"{0} attempted while camera in {1} mode. This command will always fail.",details:"Recommendation: Add a camera mode command before this command."}},photoIntervalCommand:{beforePhotoFileFormat:{title:"Camera photo interval at or below two seconds attempted before setting camera photo file format to JPEG.",details:"Recommendation: Add a camera photo file format command set to JPEG before this command."},fastPhotoInterval:{title:"Camera photo interval at or below two seconds attempted while camera photo file format not set to JPEG.",details:"Recommendation: Add a camera photo file format command set to JPEG before this command."}},stopCaptureCameraCommand:{stoppedAlready:{title:"Camera stop capture attempted while camera already stopped.",details:"Recommendation: Remove this command."}},startCaptureCameraCommand:{beforeStopped:{title:"Camera start capture attempted before camera stop capture.",details:"Recommendation: Add a camera stop capture command before this command in case the camera is already capturing before the Mission starts."},startedAlready:{title:"Camera start capture attempted while camera already capturing.",details:"Recommendation: Remove this command."},beforeMode:{title:"Camera start capture attempted before setting camera mode.",details:"Recommendation: Add a camera mode command before this command."},invalidMode:{title:"Camera start capture attempted while camera in {0} mode. This command will always fail.",details:"Recommendation: Add a camera mode command before this command."},beforePhotoMode:{title:"Camera start capture in {0} mode attempted before setting camera photo type.",details:"Recommendation: Add a camera photo type command before this command."},beforePhotoInterval:{title:"Camera start capture in {0} {1} mode attempted before setting camera photo interval time.",details:"Recommendation: Add a camera photo interval command before this command."},videoNotStopped:{title:"Camera start capture in {0} mode never stopped.",details:"Add a camera stop capture command before the end of the mission."}}}},Message:{name:"Message",values:{title:"Title",details:"Details",level:"Level"}},MessageLevel:{name:"Message Level",values:{info:{name:"Info"},warning:{name:"Warning"},danger:{name:"Danger"},error:{name:"Error"}}},MeteringModeCameraCommand:{name:"Camera Metering Mode",values:{meteringMode:"Metering Mode"}},ModeCameraCommand:{name:"Camera Mode",values:{mode:"Mode"}},ModeGimbalCommand:{name:"Gimbal Mode",values:{mode:"Mode"}},MotionLimits:{name:"Motion Limits",values:{velocity:"Speed",acceleration:"Acceleration"}},MotionLimits6:{name:"Motion Limits (6D)",values:{horizontal:"Horizontal",vertical:"Vertical",rotational:"Rotational"}},OcuSyncChannelDroneCommand:{name:"Drone OcuSync Channel",values:{ocuSyncChannel:"Channel"}},OcuSyncChannelSelectionModeDroneCommand:{name:"Drone OcuSync Channel Selection Mode",values:{ocuSyncChannelSelectionMode:"Channel Selection Mode"}},OcuSyncFrequencyBandDroneCommand:{name:"Drone OcuSync Frequency Band",values:{ocuSyncFrequencyBand:"Frequency Band"}},OrbitComponent:{name:"Orbit",description:"Fly the drone in a circle around a point of interest.",subtitle:"{0} {1} → {2}",values:{centerOffset:"Orbit Center",radius:"Radius",finalRadius:"Final Radius",direction:"Direction",circumference:"Circumference",rotations:"Rotations",finalAltitude:"Final Altitude",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"}},OrbitDirection:{name:"Orbit Direction",values:{clockwise:{name:"Clockwise"},counterclockwise:{name:"Counterclockwise"}}},Orientation3:{name:"Orientation",values:{x:"Pitch",xReference:"Reference",y:"Roll",z:"Heading",zReference:"Reference"}},OrientationGimbalCommand:{name:"Gimbal Attitude"},OrientationXReference:{name:"Pitch Reference",values:{horizon:{name:"Horizon"},path:{name:"Path"}}},OrientationZReference:{name:"Heading Reference",values:{north:{name:"North"},course:{name:"Course"},heading:{name:"Heading"},path:{name:"Path"}}},PathMarkerPositioning:{name:"Marker Positioning",values:{absolute:{name:"Distance from Start"},coordinate:{name:"Nearest Coordinate"}}},PayloadCommand:{name:"Payload Command",values:{channel:"Channel"}},PlanCompleteAction:{name:"Plan Complete Action",values:{none:{name:"None"},returnHome:{name:"Return Home"},autoLand:{name:"Auto Land"}}},PhotoAspectRatioCameraCommand:{name:"Camera Photo Aspect Ratio",values:{photoAspectRatio:"Photo Aspect Ratio"}},PhotoFileFormatCameraCommand:{name:"Camera Photo File Format",values:{photoFileFormat:"Photo File Format"}},PhotoIntervalCameraCommand:{name:"Camera Photo Interval",values:{photoInterval:"Photo Interval"}},PhotoModeCameraCommand:{name:"Camera Photo Type",values:{photoMode:"Photo Type"}},PathComponent:{name:"Path",description:"Fly the drone along a path defined by a series of waypoints.",values:{cornering:"Pathing",cornerRadius:"Corner Radius",waypoints:"Waypoints",markers:"Markers"}},PathComponentMarker:{name:"Marker",multiple:"Markers",values:{positioning:"Positioning",interpolation:"Interpolation",component:"Component",altitude:"Altitude",pointOfInterestID:"Point of Interest",droneMotionLimits:"Drone Motion Limits",droneOrientation:"Drone Heading",gimbalOrientations:"Gimbal Orientation"}},PathComponentWaypoint:{name:"Waypoint",multiple:"Waypoints"},PathCornering:{name:"Path Cornering",values:{intersect:{name:"Curved"},rounded:{name:"Straight"}}},PlanComponent:{name:"Plan",multiple:"Plans",values:{completeAction:"Action on Finish",droneMotionLimits:"Motion Limits",droneMotionErrorTolerance:"Motion Error Tolerance",rootComponent:"Root",restrictionZones:"Restriction Zones",takeoffOffset:"Restricted Takeoff"}},PlanRestrictionZone:{name:"Restriction Zone",multiple:"Restriction Zones",values:{droneMotionLimits:"Motion Limits",droneMotionErrorTolerance:"Motion Error Tolerance"}},Point2:{name:"Point"},PointOfInterest:{name:"Point of Interest",multiple:"Points of Interest"},PrecisionLandingDroneCommand:{name:"Drone Precision Landing",values:{enabled:"Enabled"}},ReturnHomeAltitudeDroneCommand:{name:"Drone Return Home Altitude",values:{returnHomeAltitude:"Altitude"}},ReturnHomeObstacleAvoidanceDroneCommand:{name:"Drone Return Home Obstacle Avoidance",values:{enabled:"Enabled"}},ReturnHomeRemoteObstacleAvoidanceDroneCommand:{name:"Drone Return Home Remote Obstacle Avoidance",values:{enabled:"Enabled"}},RotationComponent:{name:"Rotation",description:"Rotate the drone for specific amount of time or degrees.",values:{direction:"Direction",limit:"Limit",time:"Time",distance:"Distance"}},RotationDirection:{name:"Rotation Direction",values:{clockwise:{name:"Clockwise"},counterclockwise:{name:"Counterclockwise"}}},SaturationCameraCommand:{name:"Camera Saturation",values:{saturation:"Saturation"}},SeriousLowBatteryWarningThresholdDroneCommand:{name:"Drone Serious Low Battery Warning Threshold",values:{seriousLowBatteryWarningThreshold:"Threshold"}},SharpnessCameraCommand:{name:"Camera Sharpness",values:{sharpness:"Sharpness"}},ShutterSpeedCameraCommand:{name:"Camera Shutter Speed",values:{shutterSpeed:"Shutter Speed"}},Simulation:{name:"Simulation",messages:{disengageStop:"Simulation Stopped"}},SmartReturnHomeDroneCommand:{name:"Drone Smart Return Home",values:{enabled:"Enabled"}},SourcedGeoSpatial:{name:"Sourced Geo Spatial"},SpotMeteringTargetCameraCommand:{name:"Camera Spot Metering Target",values:{spotMeteringTarget:"Target",spotMeteringTargetX:"Horizontal",spotMeteringTargetY:"Vertical"}},StartCaptureCameraCommand:{name:"Camera Start Capture"},StopCaptureCameraCommand:{name:"Camera Stop Capture"},StorageLocationCameraCommand:{name:"Camera Storage Location",values:{storageLocation:"Storage Location"}},SubComponent:{name:"Component",multiple:"Components",values:{required:"Required",exclusive:"Exclusive",pointsOfInterest:"Points of Interest"},messages:{failedElevationsPending:{title:"Ground Elevations Unavailable"}}},Unit:{name:"Unit",values:{kilometersPerHour:{name:"Kilometers per Hour",abbreviation:"km/h"},milesPerHour:{name:"Miles per Hour",abbreviation:"mph"},metersPerSecond:{name:"Meters per Second",abbreviation:"m/s"},metersPerSecondSquared:{name:"Meters per Second Squared",abbreviation:"m/s²"},feetPerSecond:{name:"Feet per Second",abbreviation:"fps"},feetPerSecondSquared:{name:"Feet per Second Squared",abbreviation:"ft/s²"},kilometers:{name:"Kilometers",abbreviation:"km"},miles:{name:"Miles",abbreviation:"mi"},meters:{name:"Meters",abbreviation:"m"},millimeters:{name:"Millimeters",abbreviation:"mm"},feet:{name:"Feet",abbreviation:"ft"},acres:{name:"Acres",abbreviation:"ac"},hectare:{name:"Hectare",abbreviation:"ha"},degrees:{name:"Degrees",abbreviation:"°"},degreesPerSecond:{name:"Degrees per Second",abbreviation:"°/s"},degreesPerSecondSquared:{name:"Degrees per Second Squared",abbreviation:"°/s²"},radians:{name:"Radians",abbreviation:"c"},radiansPerSecond:{name:"Radians per Second",abbreviation:"c/s"},radiansPerSecondSquared:{name:"Radians per Second Squared",abbreviation:"c/s²"},geoMinutes:{name:"Minutes",abbreviation:"'"},geoSeconds:{name:"Seconds",abbreviation:'"'},geoNorth:{name:"North",abbreviation:"N"},geoSouth:{name:"South",abbreviation:"S"},geoEast:{name:"East",abbreviation:"E"},geoWest:{name:"West",abbreviation:"W"},hours:{name:"Hours",abbreviation:"h"},minutes:{name:"Minutes",abbreviation:"m"},seconds:{name:"Seconds",abbreviation:"s"},percent:{name:"Percent",abbreviation:"%"},kelvin:{name:"Kelvin",abbreviation:"K"},pixels:{name:"Pixels",abbreviation:"px"},centimetersPerPixel:{name:"Centimeters per Pixel",abbreviation:"cm/px"},inchesPerPixel:{name:"Inches per Pixel",abbreviation:"in/px"},bytes:{name:"Bytes",abbreviation:"B"},kilobytes:{name:"Kilobytes",abbreviation:"KB"},megabytes:{name:"Megabytes",abbreviation:"MB"},gigabytes:{name:"Gigabytes",abbreviation:"GB"}}},UnitSystem:{name:"Unit System",values:{metric:{name:"Metric"},imperial:{name:"Imperial"}}},UpwardsAvoidanceDroneCommand:{name:"Drone Upwards Avoidance",values:{enabled:"Enabled"}},User:{name:"User",multiple:"Users"},Variable:{name:"Variable",multiple:"Variables",nullValue:"No Input",values:{variableType:"Variable Type",valueArray:"Array",value:"Value",values:"Values"}},VariableValueType:{name:"Value Type",values:{null:{name:"Null"},boolean:{name:"Boolean"},number:{name:"Number"},string:{name:"String"},Drone:{name:"Drone"}}},Vector2:{name:"Vector"},Velocity3:{name:"Velocity"},Velocity6:{name:"Velocity",toString:{horizontal:"H/S {0} → {1}",vertical:"V/S {0}",rotational:"R/S {0}"}},VelocityDroneCommand:{name:"Drone Motion",messages:{controls:{title:"Drone",details:{horizontal:"H {0} → {1}",vertical:"V {0}",rotational:"R {0}",heading:"Y {0}"}}}},VelocityGimbalCommand:{name:"Gimbal Motion",messages:{controls:{title:"Gimbal",details:{pitch:"P {0}",roll:"R {0}",yaw:"Y {0}"}}}},VideoFileCompressionStandardCameraCommand:{name:"Camera Video File Compression Standard",values:{videoFileCompressionStandard:"Video File Compression Standard"}},VideoFileFormatCameraCommand:{name:"Camera Video File Format",values:{videoFileFormat:"Video File Format"}},VideoResolutionFrameRateCameraCommand:{name:"Camera Video Resolution & Frame Rate",values:{videoResolution:"Video Resolution",videoFrameRate:"Video Frame Rate",videoFieldOfView:"Video Field of View"}},VideoStandardCameraCommand:{name:"Camera Video Standard",values:{videoStandard:"Video Standard"}},VisionAssistedPositioningDroneCommand:{name:"Drone Vision Assisted Positioning",values:{enabled:"Enabled"}},WaitComponent:{name:"Wait",description:"Wait for a specified time before executing more components.",values:{time:"Time"},messages:{waiting:{title:"Waiting"}}},WhiteBalanceCustomCameraCommand:{name:"Camera White Balance Custom",values:{whiteBalanceCustom:"Temperature"}},WhiteBalancePresetCameraCommand:{name:"Camera White Balance Preset",values:{whiteBalancePreset:"White Balance Preset"}},Zone:{name:"Zone",values:{shape:"Shape",motionPriority:"Motion Priority",minAltitude:"Min Altitude",maxAltitude:"Max Altitude",minHorizontalExitAltitude:"Min Exit Alt.",boundaryPoints:"Boundary Points"}},ZoneBoundaryPoint:{name:"Boundary Point",multiple:"Boundary Points"},ZoneMotionPriority:{name:"Zone Motion Priority",values:{horizontal:{name:"Horizontal"},vertical:{name:"Vertical"}}},ZoneShape:{name:"Zone Shape",values:{circle:{name:"Circle"},polygon:{name:"Polygon"}}}}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(65);t.CameraCommand=class extends i.PayloadCommand{get requiredMode(){return null}get requiredCapturing(){return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2),o=n(1);t.Identifiable=class{constructor(e=null){this.id=e||i.Common.uuid()}applyJSON(e){o.Serialization.validateJson(e),this.id=i.Common.parseString(e.id,i.Common.uuid())}get resettable(){return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(35);t.DroneCommand=class extends i.Command{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(19),o=n(85),a=n(28),r=n(113),s=n(4),l=n(86),u=n(87),c=n(0),m=n(20),d=n(259);class h{}t.Constants=h,h.Version=d.version,h.MissionExecuteIntervalTarget=.05,h.MissionExecuteIntervalMax=.5,h.SimulationUpdateInterval=.1,h.DroneConnectionLatency=.1,h.DroneMotionLimits={Generic:()=>{const e=new o.MotionLimits6;return e.horizontal.velocity.max=15,e.horizontal.acceleration.max=3,e.horizontal.acceleration.min=-e.horizontal.acceleration.max,e.vertical.velocity.max=4,e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=2,e.vertical.acceleration.min=-e.vertical.acceleration.max,e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(45),e.rotational.acceleration.min=-e.rotational.acceleration.max,e},Conservative:()=>{const e=new o.MotionLimits6;return e.horizontal.velocity.max=i.Convert.milesPerHourToMetersPerSecond(10),e.horizontal.acceleration.max=i.Convert.feetToMeters(6),e.horizontal.acceleration.min=i.Convert.feetToMeters(-2),e.vertical.velocity.max=i.Convert.feetToMeters(10),e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=i.Convert.feetToMeters(6),e.vertical.acceleration.min=i.Convert.feetToMeters(-3),e.rotational.velocity.max=i.Convert.degreesToRadians(45),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(10),e.rotational.acceleration.min=-e.rotational.acceleration.max,e},Max:()=>{const e=new o.MotionLimits6;return e.horizontal.velocity.max=15,e.horizontal.acceleration.max=4,e.horizontal.acceleration.min=-e.horizontal.acceleration.max,e.vertical.velocity.max=4,e.vertical.velocity.min=-e.vertical.velocity.max,e.vertical.acceleration.max=4,e.vertical.acceleration.min=-e.vertical.acceleration.max,e.rotational.velocity.max=i.Convert.degreesToRadians(90),e.rotational.velocity.min=-e.rotational.velocity.max,e.rotational.acceleration.max=i.Convert.degreesToRadians(45),e.rotational.acceleration.min=-e.rotational.acceleration.max,e}},h.DroneOrientationLimits={Yaw:new a.Limits(i.Convert.degreesToRadians(359),0)},h.GimbalLimits={Pitch:new a.Limits(i.Convert.degreesToRadians(30),i.Convert.degreesToRadians(-90)),Roll:new a.Limits(i.Convert.degreesToRadians(15),i.Convert.degreesToRadians(-15)),Yaw:new a.Limits(i.Convert.degreesToRadians(359),0)},h.GimbalMotionLimits=new l.MotionLimits3(new u.MotionLimits(new a.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new a.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90))),new u.MotionLimits(new a.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new a.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90))),new u.MotionLimits(new a.Limits(i.Convert.degreesToRadians(180),i.Convert.degreesToRadians(-180)),new a.Limits(i.Convert.degreesToRadians(90),i.Convert.degreesToRadians(-90)))),h.CameraSpecifications=[new r.CameraSpecification("default","Default",8.8,12.8,9.6,5472,3648),new r.CameraSpecification("zenmuseX7",s.Strings.CameraSpecification.models.zenmuseX7,25,23.5,15.7,6016,4008),new r.CameraSpecification("zenmuseX5S",s.Strings.CameraSpecification.models.zenmuseX5S,15,17.3,13,5820,3956),new r.CameraSpecification("zenmuseX4S",s.Strings.CameraSpecification.models.zenmuseX4S,8.8,12.8,9.6,5472,3648),new r.CameraSpecification("zenmuseX5R",s.Strings.CameraSpecification.models.zenmuseX5R,15,17.3,13,4608,3456),new r.CameraSpecification("zenmuseX5",s.Strings.CameraSpecification.models.zenmuseX5,15,17.3,13,4608,3456),new r.CameraSpecification("zenmuseX3",s.Strings.CameraSpecification.models.zenmuseX3,3.61,6.17,4.65,4e3,3e3),new r.CameraSpecification("zenmuseXT",s.Strings.CameraSpecification.models.zenmuseXT,13,10.88,8.704,640,512),new r.CameraSpecification("zenmuseXT2RGB",s.Strings.CameraSpecification.models.zenmuseXT2RGB,8,7.4,5.55,4e3,3e3),new r.CameraSpecification("zenmuseXT2Thermal",s.Strings.CameraSpecification.models.zenmuseXT2Thermal,13,10.88,8.704,640,512),new r.CameraSpecification("zenmuseZ30Min",s.Strings.CameraSpecification.models.zenmuseZ30Min,4.3,4.71,3.54,1920,1080),new r.CameraSpecification("zenmuseZ30Max",s.Strings.CameraSpecification.models.zenmuseZ30Max,129,4.71,3.54,1920,1080),new r.CameraSpecification("mavic2Pro",s.Strings.CameraSpecification.models.mavic2Pro,10.27,13.2,8.2,5472,3648),new r.CameraSpecification("mavic2ProHQ",s.Strings.CameraSpecification.models.mavic2ProHQ,10.27,9.4,5.9,5472,3648),new r.CameraSpecification("mavic2ZoomMin",s.Strings.CameraSpecification.models.mavic2ZoomMin,8.8,6.17,4.65,4e3,3e3),new r.CameraSpecification("mavic2ZoomMax",s.Strings.CameraSpecification.models.mavic2ZoomMax,17.6,6.17,4.65,4e3,3e3),new r.CameraSpecification("mavic2EnterpriseMin",s.Strings.CameraSpecification.models.mavic2EnterpriseMin,4.36,6.16,4.62,4e3,3e3),new r.CameraSpecification("mavic2EnterpriseMax",s.Strings.CameraSpecification.models.mavic2EnterpriseMax,8.65,6.16,4.62,4e3,3e3),new r.CameraSpecification("mavic2EnterpriseDualRGB",s.Strings.CameraSpecification.models.mavic2EnterpriseDualRGB,4.3,6.2,4.65,4056,3040),new r.CameraSpecification("mavic2EnterpriseDualThermal",s.Strings.CameraSpecification.models.mavic2EnterpriseDualThermal,4.3,7.68,5.67,640,480),new r.CameraSpecification("mavicAir",s.Strings.CameraSpecification.models.mavicAir,4,6.17,4.65,4056,3040),new r.CameraSpecification("mavicPro",s.Strings.CameraSpecification.models.mavicPro,5,6.17,4.65,4e3,3e3),new r.CameraSpecification("mavicProPlatinum",s.Strings.CameraSpecification.models.mavicProPlatinum,5,6.17,4.65,4e3,3e3),new r.CameraSpecification("phantom4Pro2_0",s.Strings.CameraSpecification.models.phantom4Pro2_0,8.8,12.8,9.6,5472,3648),new r.CameraSpecification("phantom4RTK",s.Strings.CameraSpecification.models.phantom4RTK,8.8,12.8,9.6,5472,3648),new r.CameraSpecification("phantom4Multispectral",s.Strings.CameraSpecification.models.phantom4Multispectral,5.74,4.98,4.74,1600,1300),new r.CameraSpecification("phantom4Pro",s.Strings.CameraSpecification.models.phantom4Pro,8.8,12.8,9.6,5472,3648),new r.CameraSpecification("phantom4Advanced",s.Strings.CameraSpecification.models.phantom4Advanced,8.8,12.8,9.6,5472,3648),new r.CameraSpecification("phantom4",s.Strings.CameraSpecification.models.phantom4,3.61,6.17,4.65,4e3,3e3),new r.CameraSpecification("phantom3Pro",s.Strings.CameraSpecification.models.phantom3Pro,3.61,6.17,4.65,4e3,3e3),new r.CameraSpecification("phantom3Advanced",s.Strings.CameraSpecification.models.phantom3Advanced,3.61,6.17,4.65,4e3,3e3),new r.CameraSpecification("phantom3Standard",s.Strings.CameraSpecification.models.phantom3Standard,3.61,6.17,4.65,4e3,3e3),new r.CameraSpecification("spark",s.Strings.CameraSpecification.models.spark,4,6.17,4.65,3968,2976)],h.CameraSpecification=(e=>{const t={};return h.CameraSpecifications.forEach(e=>{t[e.id]=e}),e&&t[e]?t[e]:t.default}),h.MissionReengagementAltitudeRange=i.Convert.feetToMeters(5),h.MissionReengagementMinAltitude=i.Convert.feetToMeters(5),h.MissionReengagementMinRampVelocity=i.Convert.milesPerHourToMetersPerSecond(2),h.ComponentElevationTolerance=1,h.PlanComponentTakeoffDistanceHorizontal=i.Convert.feetToMeters(20),h.DroneMotionComponentGimbalOrientation=new m.Orientation3Optional(i.Convert.degreesToRadians(-12),c.OrientationXReference.Horizon,0,0,c.OrientationZReference.Path),h.DroneMotionComponentModelSampleTimeMax=2,h.DroneMotionComponentRotationalSmoothingTolerance=i.Convert.degreesToRadians(1),h.DroneMotionComponentErrorK=2*Math.E,h.DroneMotionErrorToleranceHorizontal=i.Convert.feetToMeters(75),h.DroneMotionErrorToleranceVertical=i.Convert.feetToMeters(25),h.DestinationComponentHeadingAchievement=i.Convert.degreesToRadians(45),h.DestinationComponentEstimateSampleDistance=1,h.DestinationComponentAchievementTime=4,h.DestinationComponentAchievementDistanceHorizontal=i.Convert.feetToMeters(5),h.DestinationComponentAchievementDistanceVertical=i.Convert.feetToMeters(5),h.DestinationComponentAltitude=i.Convert.feetToMeters(100),h.DestinationComponentAltitudeRange=i.Convert.feetToMeters(15),h.DestinationComponentRestrictionZoneCornerRadius=i.Convert.feetToMeters(2),h.DestinationComponentSampleDistance=.3,h.DestinationComponentRestrictionZoneExitMinAltitude=i.Convert.feetToMeters(25),h.CourseComponentAchievementDistance=i.Convert.feetToMeters(10),h.FacadeComponentDistance=i.Convert.feetToMeters(30),h.FacadeComponentMinCaptureInterval=2,h.FacadeComponentFrontOverlap=.5,h.FacadeComponentSideOverlap=.5,h.FacadeComponentGimbalPitch=i.Convert.degreesToRadians(0),h.FacadeComponentInitialAltitude=i.Convert.feetToMeters(100),h.FacadeComponentFinalAltitude=i.Convert.feetToMeters(300),h.FacadeComponentCornerRadius=i.Convert.feetToMeters(20),h.FacadeComponentOrbitSteps=360,h.FacadeComponentSampleDistanceMax=.3,h.FacadeComponentSampleDistanceMin=.1,h.FacadeGimbalPitchLimits=new a.Limits(i.Convert.degreesToRadians(30),i.Convert.degreesToRadians(-90)),h.HeadingComponentAchievementTime=1,h.HeadingComponentAchievementDistance=i.Convert.degreesToRadians(5),h.MapComponentMaxHorizontalVelocity=i.Convert.milesPerHourToMetersPerSecond(26),h.MapComponentMinCaptureInterval=2,h.MapComponentFrontOverlap=.8,h.MapComponentSideOverlap=.7,h.MapComponentGimbalPitch=i.Convert.degreesToRadians(-90),h.MapComponentBaseAccelerationMultiplier=.5,h.MapComponentBaseDistanceMin=i.Convert.feetToMeters(10),h.MapComponentSampleDistance=.3,h.MapComponentMinimumTargetDistance=i.Convert.feetToMeters(5),h.MapComponentTerrainFollowGranularity=30,h.MapCameraSpecification=new r.CameraSpecification("phantom4Pro2_0",s.Strings.CameraSpecification.models.phantom4Pro2_0,8.8,12.8,9.6,5472,3648),h.MapGimbalPitchLimits=new a.Limits(i.Convert.degreesToRadians(-35),i.Convert.degreesToRadians(-90)),h.OrbitComponentEstimateSampleDistance=1,h.OrbitComponentSampleDistance=.3,h.PathComponentCornerRadius=i.Convert.feetToMeters(20),h.PathComponentModelSampleDistance=.3,h.PathComponentModelSampleDistancePosition=1,h.PlanRestrictionZoneMinApplicableProximityHorizontal=i.Convert.feetToMeters(5),h.PlanRestrictionZoneMinApplicableProximityVertical=i.Convert.feetToMeters(5),h.RotationComponentVelocity=i.Convert.degreesToRadians(45),h.RotationComponentDistance=2*Math.PI,h.RotationAchievementDistance=i.Convert.degreesToRadians(1),h.WaitComponentTime=1,h.VelocityHorizontalDampenThreshold=2,h.VelocityVerticalDampenThreshold=2,h.VelocityRotationalDampenThreshold=i.Convert.degreesToRadians(5),h.LowBatteryWarningThresholdDroneCommandValue=.2,h.SeriousLowBatteryWarningThresholdDroneCommand=.1,h.ReturnHomeAltitudeDroneCommandValue=i.Convert.feetToMeters(100),h.MaxAltitudeDroneCommandValue=i.Convert.feetToMeters(400),h.MaxDistanceDroneCommandValue=i.Convert.feetToMeters(1e4),h.PhotoIntervalCommandValue=2,h.ZoneMaxAltitude=i.Convert.feetToMeters(100),h.ZoneEdgeBufferDistance=.1},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(15),o=n(0),a=n(2),r=n(1);class s{constructor(e=0,t=0){this.type=o.TypeName.Vector2,this.direction=e,this.magnitude=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.direction=a.Common.parseFloat(e.direction,this.direction),this.magnitude=a.Common.parseFloat(e.magnitude,this.magnitude)}copy(){return new s(this.direction,this.magnitude)}get x(){return this.magnitude*Math.cos(this.direction)}get y(){return this.magnitude*Math.sin(this.direction)}toPoint2(){return new i.Point2(this.x,this.y)}inverse(){return new s(this.direction+Math.PI,this.magnitude)}add(e){return new i.Point2(this.x+e.x,this.y+e.y).toVector2()}addToSelf(e){const t=this.add(e);this.direction=t.direction,this.magnitude=t.magnitude}subtract(e){return new i.Point2(this.x-e.x,this.y-e.y).toVector2()}subtractFromSelf(e){const t=this.subtract(e);this.direction=t.direction,this.magnitude=t.magnitude}static center(e){return i.Point2.center(e.map(e=>e.toPoint2())).toVector2()}}t.Vector2=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(1);t.Message=class{constructor(e="",t=null,n=i.MessageLevel.Info){this.type=i.TypeName.Message,this.toString=(()=>this.details?`${this.title}: ${this.details}`:this.title),this.title=e,this.details=t,this.level=n}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.title=o.Common.parseString(e.title,this.title),this.details=o.Common.parseString(e.details),this.level=o.Common.parseString(e.level,this.level)}select(e){if(null===e)return this;switch(e.level){case i.MessageLevel.Info:switch(this.level){case i.MessageLevel.Warning:case i.MessageLevel.Danger:case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Warning:switch(this.level){case i.MessageLevel.Danger:case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Danger:switch(this.level){case i.MessageLevel.Error:return this;default:return e}case i.MessageLevel.Error:return e}}}},function(e,t){(function(){e.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(this)},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(15),a=n(41),r=i(n(292)),s=n(2),l=n(296);class u{static angleDifferenceSigned(e,t){return Math.atan2(Math.sin(e-t),Math.cos(e-t))}static roundedCorners(e,t,n=!1){if(e.length<2)return[e];if(e.length<3)return[[e[0],e[1]]];n&&e.push(e[0]);const i=[[e[0]]];for(let n=1;n<e.length-1;n++){const a=e[n-1],s=e[n],l=e[n+1],u=new o.Point2(a.x-s.x,a.y-s.y).toVector2(),c=s.toVector2(),m=new o.Point2(l.x-s.x,l.y-s.y).toVector2();let d=10;t&&(d=Array.isArray(t)?t[n]:t),u.magnitude=Math.min(u.magnitude/2,d),m.magnitude=Math.min(m.magnitude/2,d);const h=new r.default(c.add(u).toPoint2(),s,c.add(m).toPoint2());let p=Math.max(10,Math.floor(2*h.length()));p%2==1&&p++,h.getLUT(p).forEach((e,t)=>{t===p/2&&i.push([]),i[i.length-1].push(new o.Point2(e.x,e.y))})}if(n){const n=e[e.length-2],a=e[0],s=e[1],l=new o.Point2(n.x-a.x,n.y-a.y).toVector2(),u=a.toVector2(),c=new o.Point2(s.x-a.x,s.y-a.y).toVector2();let m=10;t&&(m=Array.isArray(t)?t[0]:t),l.magnitude=Math.min(l.magnitude/2,m),c.magnitude=Math.min(c.magnitude/2,m);const d=new r.default(u.add(l).toPoint2(),a,u.add(c).toPoint2());let h=Math.max(10,Math.floor(2*d.length()));h%2==1&&h++;const p=d.getLUT(h).map(e=>new o.Point2(e.x,e.y));i[i.length-1].push(...p.filter((e,t)=>t<=h/2)),i[0].splice(0,1,...p.filter((e,t)=>t>=h/2))}else i[i.length-1].push(s.Common.last(e));return i}static cardinalSplinePoint2(e,t=!1,n=.5,i=100){if(e.length<2)return[e];if(e.length<3)return[[e[0],e[1]]];const a=[];e.forEach(e=>{a.push(e.x),a.push(e.y)});const r=[[]],s=u.cardinalSpline(a,n,i,t);let l=0;for(let e=0;e<s.length;e+=2)1===r.length?r[l].length===i+1&&(r[++l]=[]):r[l].length===i&&e<s.length-2&&(r[++l]=[]),r[l].push(new o.Point2(s[e],s[e+1]));return r}static cardinalSpline(e,t=.5,n=100,i=!1){let o,a=1,r=e.length,s=0,l=new Float32Array((r-2)*n+2+(i?2*n:0)),u=new Float32Array(4*(n+2)),c=4;for(o=e.slice(0),i?(o.unshift(e[r-1]),o.unshift(e[r-2]),o.push(e[0],e[1])):(o.unshift(e[1]),o.unshift(e[0]),o.push(e[r-2],e[r-1])),u[0]=1;a<n;a++){let e=a/n,t=e*e,i=t*e,o=2*i,r=3*t;u[c++]=o-r+1,u[c++]=r-o,u[c++]=i-2*t+e,u[c++]=i-t}u[++c]=1;const m=(e,i,o)=>{for(let a,r=2;r<o;r+=2){let o=e[r],u=e[r+1],c=e[r+2],m=e[r+3],d=(c-e[r-2])*t,h=(m-e[r-1])*t,p=(e[r+4]-o)*t,f=(e[r+5]-u)*t;for(a=0;a<n;a++){let e=a<<2,t=i[e],n=i[e+1],r=i[e+2],g=i[e+3];l[s++]=t*o+n*c+r*d+g*p,l[s++]=t*u+n*m+r*h+g*f}}};return m(o,u,r),i&&((o=[]).push(e[r-4],e[r-3],e[r-2],e[r-1]),o.push(e[0],e[1],e[2],e[3]),m(o,u,4)),r=i?0:e.length-2,l[s++]=e[r],l[s]=e[r+1],l}static polygonSegements(e){return e.length<2?[]:e.map((t,n)=>new a.Line2(t,e[s.Common.modSafe(n+1,e.length)]))}static polygonArea(e){let t=0,n=e.length-1;for(let i=0;i<e.length;i++)t+=(e[n].x+e[i].x)*(e[n].y-e[i].y),n=i;return Math.abs(t/2)}static polygonPointInside(e,t){const{x:n,y:i}=e;let o=!1;for(let e=0,a=t.length-1;e<t.length;a=e++){let r=t[e].x,s=t[e].y,l=t[a].x,u=t[a].y;s>i!=u>i&&n<(l-r)*(i-s)/(u-s)+r&&(o=!o)}return o}static circlePointInside(e,t){return t.distance(e.center)<e.radius}static lineClosestPoint(e,t=new o.Point2){var n=e.b.x-e.a.x,i=e.b.y-e.a.y,a=n*n+i*i,r=(t.x-e.a.x)*n+(t.y-e.a.y)*i,s=Math.min(1,Math.max(0,0===a?0:r/a));return r=(e.b.x-e.a.x)*(t.y-e.a.y)-(e.b.y-e.a.y)*(t.x-e.a.x),new o.Point2(e.a.x+n*s,e.a.y+i*s)}static polygonClosestPoint(e,t){const n=[];return u.polygonSegements(e).forEach((e,i)=>{const o=u.lineClosestPoint(e,t);o&&n.push({point:o,segmentIndex:i})}),0===n.length?{point:t,segmentIndex:0}:(n.sort((e,n)=>t.distance(e.point)-t.distance(n.point)),n[0])}static lineIntersectionLine(e,t){if(e.a.x===e.b.x&&e.a.y===e.b.y||t.a.x===t.b.x&&t.a.y===t.b.y)return null;const n=(t.b.y-t.a.y)*(e.b.x-e.a.x)-(t.b.x-t.a.x)*(e.b.y-e.a.y);if(0===n)return null;let i=((t.b.x-t.a.x)*(e.a.y-t.a.y)-(t.b.y-t.a.y)*(e.a.x-t.a.x))/n,a=((e.b.x-e.a.x)*(e.a.y-t.a.y)-(e.b.y-e.a.y)*(e.a.x-t.a.x))/n;return i<0||i>1||a<0||a>1?null:new o.Point2(e.a.x+i*(e.b.x-e.a.x),e.a.y+i*(e.b.y-e.a.y))}static lineIntersectionsCircle(e,t){var n,i,a,r,s,l,u;if(u={x:0,y:0},(l={x:0,y:0}).x=e.b.x-e.a.x,l.y=e.b.y-e.a.y,u.x=e.a.x-t.center.x,u.y=e.a.y-t.center.y,n=l.x*u.x+l.y*u.y,i=2*(l.x*l.x+l.y*l.y),n*=-2,a=Math.sqrt(n*n-2*i*(u.x*u.x+u.y*u.y-t.radius*t.radius)),isNaN(a))return null;r=(n-a)/i,s=(n+a)/i;const c=new o.Point2,m=new o.Point2,d=[];return r<=1&&r>=0&&(c.x=e.a.x+l.x*r,c.y=e.a.y+l.y*r,d[0]=c),s<=1&&s>=0&&(m.x=e.a.x+l.x*s,m.y=e.a.y+l.y*s,d[d.length]=m),d.length>0?d:null}static lineIntersectionsPolygon(e,t){const n=[];return u.polygonSegements(t).forEach((t,i)=>{const o=u.lineIntersectionLine(e,t);o&&n.push({point:o,segmentIndex:i})}),n.sort((t,n)=>e.a.distance(t.point)-e.a.distance(n.point)),n.length>0?n:null}static convexHull(e){return l(e).map(e=>new o.Point2(e.x,e.y)).reverse()}}t.Geometry=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(1);class r{constructor(e=new Date){this.type=i.TypeName.Datetime,this.value=e}toJSON(){return{type:this.type,value:this.value.getTime()}}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type);const t=o.Common.parseInt(e.value,null);this.value=null===t?new Date:new Date(t)}interpolate(e,t){return new r(new Date(t(this.value.getTime(),e.value.getTime())))}elapsedTime(e){return(this.value.getTime()-e.value.getTime())/1e3}increment(e){this.value=new Date(this.value.getTime()+1e3*e)}}t.Datetime=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.areaConversion=t.timeConversion=t.distanceConversion=t.altitudeKeys=t.latitudeKeys=t.longitudeKeys=t.MAXLON=t.MINLON=t.MAXLAT=t.MINLAT=t.earthRadius=t.sexagesimalPattern=void 0;t.sexagesimalPattern=/^([0-9]{1,3})°\s*([0-9]{1,3}(?:\.(?:[0-9]{1,}))?)['′]\s*(([0-9]{1,3}(\.([0-9]{1,}))?)["″]\s*)?([NEOSW]?)$/;t.earthRadius=6378137;t.MINLAT=-90;t.MAXLAT=90;t.MINLON=-180;t.MAXLON=180;t.longitudeKeys=["lng","lon","longitude",0];t.latitudeKeys=["lat","latitude",1];t.altitudeKeys=["alt","altitude","elevation","elev",2];t.distanceConversion={m:1,km:.001,cm:100,mm:1e3,mi:1/1609.344,sm:1/1852.216,ft:100/30.48,in:100/2.54,yd:1/.9144};t.timeConversion={m:60,h:3600,d:86400};var i={m2:1,km2:1e-6,ha:1e-4,a:.01,ft2:10.763911,yd2:1.19599,in2:1550.0031};t.areaConversion=i,i.sqm=i.m2,i.sqkm=i.km2,i.sqft=i.ft2,i.sqyd=i.yd2,i.sqin=i.in2},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(9),o=n(0),a=n(2),r=n(1);class s{constructor(e=0,t=0){this.type=o.TypeName.Point2,this.x=e,this.y=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.x=a.Common.parseFloat(e.x,this.x),this.y=a.Common.parseFloat(e.y,this.y)}get direction(){return Math.atan2(this.y,this.x)}get magnitude(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}toVector2(){return new i.Vector2(this.direction,this.magnitude)}distance(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))}midPoint(e){return this.interpolate(e,.5)}interpolateDistance(e,t){return 0===this.distance(e)?this:this.interpolate(e,Math.min(Math.max(t/this.distance(e),0),1))}interpolate(e,t){return new s(this.x+(e.x-this.x)*t,this.y+(e.y-this.y)*t)}static center(e){const t=new s;return e.forEach(n=>{t.x+=n.x/e.length,t.y+=n.y/e.length}),t}static boundingBox(e,t=0,n=1){const i=s.center(e).toVector2(),o=e.map(e=>{const n=e.toVector2().subtract(i);return n.direction-=t,n.toPoint2()});let a=new s,r=new s;o.forEach((e,t)=>{(0===t||e.x<a.x)&&(a.x=e.x),(0===t||e.y<a.y)&&(a.y=e.y),(0===t||e.x>r.x)&&(r.x=e.x),(0===t||e.y>r.y)&&(r.y=e.y)});const l={topLeft:new s(r.x,a.y).toVector2(),topRight:r.toVector2(),bottomLeft:a.toVector2(),bottomRight:new s(a.x,r.y).toVector2()};return l.topLeft.direction+=t,l.topLeft.magnitude=l.topLeft.magnitude*=n,l.topRight.direction+=t,l.topRight.magnitude=l.topRight.magnitude*=n,l.bottomLeft.direction+=t,l.bottomLeft.magnitude=l.bottomLeft.magnitude*=n,l.bottomRight.direction+=t,l.bottomRight.magnitude=l.bottomRight.magnitude*=n,{topLeft:i.add(l.topLeft).toPoint2(),topRight:i.add(l.topRight).toPoint2(),bottomLeft:i.add(l.bottomLeft).toPoint2(),bottomRight:i.add(l.bottomRight).toPoint2()}}static compare(e,t){return e.x<t.x?-1:e.x>t.x?1:e.y<t.y?-1:e.y>t.y?1:0}}t.Point2=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{static t1(e,t){return 0===e?0:t/e}static t2(e,t,n){if(0===t)return 0;const i=e+2*t*n;return i<=0?0:(-e+Math.sqrt(i))/t}static d1(e,t){return e*t}static d2(e,t,n){return(e+t)/2*n}static d3(e,t,n){return e*n+.5*t*Math.pow(n,2)}static d4(e,t,n){return(Math.pow(t,2)-Math.pow(e,2))/(2*n)}static v1(e,t){return i.v2(0,e,t)}static v2(e,t,n){return e+t*n}static v3(e,t,n){return Math.sqrt(Math.pow(e,2)+2*t*n)}static v4(e,t){return 0===t?0:e/t}static tLine(e,t,n,o,a=0){if(o<=0)return 0;(a<=0||a>o)&&(a=o);const r=i.d4(0,e,n),s=i.d4(0,e,-t),l=o-r-s;if(l>0){const u=i.t2(0,n,r),c=i.t1(e,l),m=i.t2(0,-t,s);return a===o?u+c+m:a>r+l?u+c+(m-i.t2(0,-t,s-(a-l-r))):a>r?u+i.t1(e,a-r):i.t2(0,n,a)}const u=o*(r/(r+s)),c=o-u,m=i.t2(0,n,u),d=i.t2(0,-t,c);if(a===o)return m+d;if(a>u){return m+(d-i.t2(0,-t,c-(a-u)))}return i.t2(0,n,a)}static vLine(e,t,n,o,a){return a<=0||a>=o?0:a<i.d4(0,e,n)?i.v3(0,n,a):o-a<i.d4(0,e,-t)?i.v3(0,-t,o-a):e}static dampen(e,t,n=2){return Math.abs(e)<t?t*Math.pow(Math.abs(e)/t,n):e}}t.Kinematic=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(1);t.Descriptors=class{constructor(e="",t="",n=[]){this.type=i.TypeName.Descriptors,this.name=e,this.description=t,this.tags=n}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.name=o.Common.parseString(e.name,this.name),this.description=o.Common.parseString(e.description,this.description),this.tags=e.tags||this.tags}toString(){return o.Common.joinNotEmpty([this.name,this.description])}merge(e){this.name=this.name||e.name,this.description=this.description||e.description,this.mergeTags(e.tags)}mergeTags(e){this.tags=Array.from(new Set([...this.tags,...e]))}mergeTag(e){this.tags=Array.from(new Set([...this.tags,e]))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(3),r=n(1);class s{constructor(e=0,t=i.AltitudeSystem.ATL){this.type=i.TypeName.Altitude,this.system=i.AltitudeSystem.ATL,this.value=e,this.system=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.system=o.Common.parseString(e.system,this.system),this.value=o.Common.parseFloat(e.value)}interpolate(e,t){return this.system===e.system?new s(t(this.value,e.value),this.system):this}toString(){return`${a.Format.altitude(this.value).toString()} ${a.Format.string(`AltitudeSystem.values.${this.system}.abbreviation`)}`}}t.Altitude=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(4),a=n(3);class r{static feetToMeters(e){return.3048*e}static metersToFeet(e){return 3.28084*e}static metersToInches(e){return 39.3701*e}static milesPerHourToMetersPerSecond(e){return.44704*e}static metersPerSecondToMilesPerHour(e){return 2.23694*e}static metersPerSecondToKilometersPerHour(e){return 3.6*e}static kilometersPerHourToMetersPerSecond(e){return.277778*e}static squareMetersToAcres(e){return 247105e-9*e}static squareMetersToHectares(e){return 1e-4*e}static radiansToDegrees(e,t=!1){if(t){if(e>2*Math.PI)return r.radiansToDegrees(e-2*Math.PI,t);if(e<0)return r.radiansToDegrees(e+2*Math.PI,t)}return 57.2958*e}static degreesToRadians(e,t=!1){if(t){if(e>360)return r.degreesToRadians(e-360,t);if(e<0)return r.degreesToRadians(e+360,t)}return.0174533*e}static distance(){switch(a.Format.UnitSystem){case i.UnitSystem.Metric:return new l(a.Format.distance,new s({name:o.Strings.Unit.values.meters.name,abbreviation:o.Strings.Unit.values.meters.abbreviation},1));case i.UnitSystem.Imperial:return new l(a.Format.distance,new s({name:o.Strings.Unit.values.feet.name,abbreviation:o.Strings.Unit.values.feet.abbreviation},0,r.metersToFeet),new s({name:o.Strings.Unit.values.meters.name,abbreviation:o.Strings.Unit.values.meters.abbreviation},1,r.feetToMeters))}}static angle(e=!1){return new l(t=>a.Format.angle(t,e),new s({name:o.Strings.Unit.values.degrees.name,abbreviation:o.Strings.Unit.values.degrees.abbreviation},0,t=>r.radiansToDegrees(t,e)),new s({name:o.Strings.Unit.values.radians.name,abbreviation:o.Strings.Unit.values.radians.abbreviation},0,t=>r.degreesToRadians(t,e)))}static percent(){return new l(a.Format.percent,new s({name:o.Strings.Unit.values.percent.name,abbreviation:o.Strings.Unit.values.percent.abbreviation},0,e=>100*e),new s({name:o.Strings.Unit.values.percent.name,abbreviation:o.Strings.Unit.values.percent.abbreviation},2,e=>e/100))}static velocityHorizontal(){switch(a.Format.UnitSystem){case i.UnitSystem.Metric:return new l(a.Format.velocityHorizontal,new s({name:o.Strings.Unit.values.kilometersPerHour.name,abbreviation:o.Strings.Unit.values.kilometersPerHour.abbreviation},1,r.metersPerSecondToKilometersPerHour),new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1,r.kilometersPerHourToMetersPerSecond));case i.UnitSystem.Imperial:return new l(a.Format.velocityHorizontal,new s({name:o.Strings.Unit.values.milesPerHour.name,abbreviation:o.Strings.Unit.values.milesPerHour.abbreviation},1,r.metersPerSecondToMilesPerHour),new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1,r.milesPerHourToMetersPerSecond))}}static velocityVertical(){switch(a.Format.UnitSystem){case i.UnitSystem.Metric:return new l(a.Format.velocityVertical,new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1));case i.UnitSystem.Imperial:return new l(a.Format.velocityVertical,new s({name:o.Strings.Unit.values.feetPerSecond.name,abbreviation:o.Strings.Unit.values.feetPerSecond.abbreviation},1,r.metersToFeet),new s({name:o.Strings.Unit.values.metersPerSecond.name,abbreviation:o.Strings.Unit.values.metersPerSecond.abbreviation},1,r.feetToMeters))}}static velocityRotational(){return new l(a.Format.velocityRotational,new s({name:o.Strings.Unit.values.degreesPerSecond.name,abbreviation:o.Strings.Unit.values.degreesPerSecond.abbreviation},1,r.radiansToDegrees),new s({name:o.Strings.Unit.values.radiansPerSecond.name,abbreviation:o.Strings.Unit.values.radiansPerSecond.abbreviation},1,r.degreesToRadians))}static accelerationHorizontal(){switch(a.Format.UnitSystem){case i.UnitSystem.Metric:return new l(a.Format.accelerationHorizontal,new s({name:o.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:o.Strings.Unit.values.metersPerSecondSquared.abbreviation},1));case i.UnitSystem.Imperial:return new l(a.Format.accelerationHorizontal,new s({name:o.Strings.Unit.values.feetPerSecondSquared.name,abbreviation:o.Strings.Unit.values.feetPerSecondSquared.abbreviation},1,r.metersToFeet),new s({name:o.Strings.Unit.values.metersPerSecondSquared.name,abbreviation:o.Strings.Unit.values.metersPerSecondSquared.abbreviation},1,r.feetToMeters))}}static accelerationVertical(){return r.accelerationHorizontal()}static accelerationRotational(){return new l(a.Format.accelerationRotational,new s({name:o.Strings.Unit.values.degreesPerSecondSquared.name,abbreviation:o.Strings.Unit.values.degreesPerSecondSquared.abbreviation},1,r.radiansToDegrees),new s({name:o.Strings.Unit.values.radiansPerSecondSquared.name,abbreviation:o.Strings.Unit.values.radiansPerSecondSquared.abbreviation},1,r.degreesToRadians))}static converters(e){switch(e){case i.MeasurementType.Distance:return r.distance();case i.MeasurementType.VelocityHorizontal:return r.velocityHorizontal();case i.MeasurementType.VelocityVertical:return r.velocityVertical();case i.MeasurementType.VelocityRotational:return r.velocityRotational();case i.MeasurementType.AccelerationHorizontal:return r.accelerationHorizontal();case i.MeasurementType.AccelerationVertical:return r.accelerationVertical();case i.MeasurementType.AccelerationRotational:return r.accelerationRotational();case i.MeasurementType.Angle:return r.angle();case i.MeasurementType.AngleMod:return r.angle(!0);case i.MeasurementType.Percent:return r.percent()}}}t.Convert=r;class s{constructor(e,t,n=null){this.unit=e,this.precision=t,this.convert=n||(e=>e)}get increment(){return 1/Math.pow(10,this.precision)}get incrementConverted(){return this.convert(this.increment)}display(e){return this.convert(e).toFixed(this.precision)}}t.Converter=s;class l{constructor(e,t,n=null){this.format=e,this.modelToUser=t,this.userToModel=n||t}}t.Converters=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(4),a=n(3),r=n(2),s=n(12),l=n(36),u=n(16),c=n(88),m=n(1);class d{constructor(e=null,t=i.OrientationXReference.Horizon,n=null,r=null,s=i.OrientationZReference.North){this.type=i.TypeName.Orientation3Optional,this.toString=(()=>{let e=[];return null!==this.x&&(this.xReference===i.OrientationXReference.Horizon?e.push(`${o.Strings.Orientation3.values.x} ${a.Format.angle(this.x,!1)}`):e.push(`${o.Strings.Orientation3.values.x} ${a.Format.angle(this.x,!1)} ∠ ${a.Format.enum("OrientationXReference",this.xReference)}`)),null!==this.y&&e.push(`${o.Strings.Orientation3.values.y} ${a.Format.angle(this.y,!1)}`),null!==this.z&&(this.zReference===i.OrientationZReference.North?e.push(`${o.Strings.Orientation3.values.z} ${a.Format.angle(this.z,!0)}`):e.push(`${o.Strings.Orientation3.values.z} ${a.Format.angle(this.z,!0)} ∠ ${a.Format.enum("OrientationZReference",this.zReference)}`)),e.join(o.Strings.Common.delimeter)}),this.x=e,this.xReference=t,this.y=n,this.z=r,this.zReference=s}applyJSON(e){m.Serialization.validateJson(e),m.Serialization.validateType(e,this.type),this.x=r.Common.parseFloat(e.x,null),this.xReference=r.Common.parseString(e.xReference,this.xReference),this.y=r.Common.parseFloat(e.y,null),this.z=r.Common.parseFloat(e.z,null),this.zReference=r.Common.parseString(e.zReference,this.zReference)}interpolate(e,t,n,o){let a=this.x,r=this.xReference;if(null!==this.x&&null!==e.x){let n=this.x,l=e.x;e.xReference!==this.xReference&&(n=t.x.value(this.xReference)+this.x,l=t.x.value(e.xReference)+e.x,r=i.OrientationXReference.Horizon),a=n-o(0,s.Geometry.angleDifferenceSigned(n,l))}let l=this.z,u=this.zReference;if(null!==this.z&&null!==e.z){let n=this.z,a=e.z;e.zReference!==this.zReference&&(n=t.z.value(this.zReference)+this.z,a=t.z.value(e.zReference)+e.z,u=i.OrientationZReference.North),l=n-o(0,s.Geometry.angleDifferenceSigned(n,a))}const c=new d(a,r,null===this.y?null:null===e.y?this.y:o(this.y,e.y),l,u);return c.convertReferences(t,n),c}convertReferences(e,t=new c.OrientationReferenceTargets){this.xReference!==t.x&&(null!==this.x&&(this.x=e.x.value(this.xReference)+this.x-e.x.value(t.x)),this.xReference=t.x),this.zReference!==t.z&&(null!==this.z&&(this.z=e.z.value(this.zReference)+this.z-e.z.value(t.z)),this.zReference=t.z)}velocity(e,t){const n=new l.Velocity3;return null!==this.x&&null!==e.x&&this.xReference===e.xReference&&(n.x=u.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.x,e.x),t)),null!==this.y&&null!==e.y&&(n.y=u.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.y,e.y),t)),null!==this.z&&null!==e.z&&this.zReference===e.zReference&&(n.z=u.Kinematic.v4(s.Geometry.angleDifferenceSigned(this.z,e.z),t)),n}get pitch(){return this.x}set pitch(e){this.x=e}get pitchReference(){return this.xReference}set pitchReference(e){this.xReference=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get yawReference(){return this.zReference}set yawReference(e){this.zReference=e}apply(e){return this.x=e.x,this.xReference=e.xReference,this.y=e.y,this.z=e.z,this.zReference=e.zReference,this}}t.Orientation3Optional=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(18),o=n(46),a=n(24),r=n(16),s=n(9),l=n(0),u=n(13),c=n(29),m=n(12),d=n(19),h=n(15),p=n(1);t.GeoSpatial=class{constructor(){this.type=l.TypeName.GeoSpatial,this.updated=new u.Datetime,this.coordinate=new a.GeoCoordinate,this.altitude=new i.Altitude,this.orientation=new o.Orientation3,this.velocity=new c.Velocity6}applyJSON(e){p.Serialization.validateJson(e),p.Serialization.validateType(e,this.type),this.updated.applyJSON(e.updated),this.coordinate.applyJSON(e.coordinate),this.altitude.applyJSON(e.altitude),this.orientation.applyJSON(e.orientation),this.velocity.applyJSON(e.velocity)}applyVelocity(e){this.coordinate=this.coordinate.geoCoordinate(new s.Vector2(this.velocity.horizontal.direction,r.Kinematic.d1(e,this.velocity.horizontal.magnitude))),this.altitude.value+=r.Kinematic.d1(this.velocity.vertical,e),this.orientation.applyVelocity(this.velocity.orientation,e)}interpolate(e,t,n,i){const o=this.coordinate.interpolate(e.coordinate,e=>i(0,e)).toGeoSpatial();return o.updated=this.updated.interpolate(e.updated,i),o.altitude=this.altitude.interpolate(e.altitude,i),o.orientation=this.orientation.interpolate(e.orientation,t,n,i),o.velocity=this.velocity.interpolate(e.velocity,i),o}projectCoordinate(e){return this.coordinate.geoCoordinate(new s.Vector2(this.velocity.horizontal.direction,r.Kinematic.d1(this.velocity.horizontal.magnitude,e)))}projectAltitude(e){return new i.Altitude(this.altitude.value+r.Kinematic.d1(this.velocity.vertical,e),this.altitude.system)}projectOrientation(e){return new o.Orientation3(this.orientation.x+r.Kinematic.d1(this.velocity.orientation.x,e),this.orientation.xReference,this.orientation.y+r.Kinematic.d1(this.velocity.orientation.y,e),this.orientation.z+r.Kinematic.d1(this.velocity.orientation.z,e),this.orientation.zReference)}distance(e){const t=new h.Point2(this.coordinate.distance(e.coordinate),0);return this.altitude.system===e.altitude.system&&(t.y=Math.abs(this.altitude.value-e.altitude.value)),t.toVector2().magnitude}groundCoordinate(e,t=0,n=d.Convert.degreesToRadians(-5)){e=Math.min(e,n);const i=m.Geometry.angleDifferenceSigned(e,-Math.PI/2);return 0===i?this.coordinate:this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+t,Math.tan(i)*Math.abs(this.altitude.value)))}groundCoordinates(e,t,n=d.Convert.degreesToRadians(-5)){if(t<-d.Convert.degreesToRadians(35)||t>d.Convert.degreesToRadians(15)){const i=t+e.vertical/2;if(i>n)return this.groundCoordinates(e,n-e.vertical/2-.01,n);const o=this.groundCoordinate(t),a=this.groundCoordinate(t-e.vertical/2),r=o.distance(a),l=this.groundCoordinate(i),u=o.distance(l),c=Math.atan2(e.horizontal,e.vertical),m=[];if(m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw+Math.PI+c,r*Math.tan(c)))),Math.abs(i-n)<.01){const e=25;for(let t=0;t<=e;t++)m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw-c+t/e*2*c,u*Math.tan(c))))}else m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw-c,u*Math.tan(c)))),m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw+c,u*Math.tan(c))));return m.push(o.geoCoordinate(new s.Vector2(this.orientation.yaw+Math.PI-c,r*Math.tan(c)))),m}const i=Math.min(t+e.vertical/2,n),o=t-e.vertical/2;if(o>=i)return[];const a=this.groundCoordinate(o),r=this.coordinate.distance(a);if(o<-Math.PI/2||r>1e3)return[];const l=this.groundCoordinate(i),u=this.coordinate.distance(l),c=e.horizontal/2,m=[];if(m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c,r))),i>=n){const e=25;for(let t=0;t<=e;t++)m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c+t/e*2*c,u)))}else m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw-c,u))),m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+c,u)));return m.push(this.coordinate.geoCoordinate(new s.Vector2(this.orientation.yaw+e.horizontal/2,r))),m}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(68),o=n(97),a=n(57),r=n(1),s=n(9),l=n(2),u=n(0),c=n(4);t.SubComponent=class extends o.Component{constructor(){super(...arguments),this.required=!0,this.exclusive=!1,this.reference=new i.SourcedGeoSpatial,this.pointsOfInterest=[]}applyJSON(e){if(super.applyJSON(e),this.descriptors.applyJSON(e.descriptors),this.coordinate.applyJSON(e.coordinate),this.required=l.Common.parseBoolean(e.required,this.required),this.exclusive=l.Common.parseBoolean(e.exclusive,this.exclusive),this.reference.applyJSON(e.reference),this.pointsOfInterest=[],Array.isArray(e.pointsOfInterest))for(let t of e.pointsOfInterest)this.pointsOfInterest.push(r.Serialization.deserialize(t,a.PointOfInterest,!1))}get pointsOfInterestEnabled(){return!1}get pointsOfInterestReferences(){return[]}get exclusiveReadonly(){return!1}get exclusiveExecution(){return this.exclusive}get repositionIfIncluded(){return!1}reposition(e,t){const n=this.node().referenceOffsets;if(n.length>0){const i=t?this.referenceCoordinate(t,null).offset(e).subtract(n[0]):new s.Vector2;n.forEach(e=>{e.addToSelf(i)})}}get referenceOffsets(){return this.pointsOfInterestEnabled?super.referenceOffsets.concat(this.pointsOfInterest.map(e=>e.referencedOffset.coordinateOffset)):super.referenceOffsets}referenceSpatial(e){return this.reference.value(e.spatialSources)}referenceCoordinate(e,t=null){return this.referenceSpatial(e).coordinate.geoCoordinate(t||new s.Vector2)}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.pointsOfInterest.forEach(n=>{const i=n.referenceSpatial(e.spatialSources,this.reference);i.altitude.system===u.AltitudeSystem.AGL&&t.push(i.coordinate)}),t}pointOfInterestCoordinate(e,t){return this.pointsOfInterest[t].referenceCoordinate(e.spatialSources,this.reference)}pointsOfInterestCoordinates(e){return this.pointsOfInterest.map(t=>t.referenceCoordinate(e.spatialSources,this.reference))}pointOfInterestByID(e){return this.pointsOfInterest.find(t=>t.id===e)}pointOfInterestCoordinateByID(e,t){const n=this.pointOfInterestByID(t);return n?n.referenceCoordinate(e.spatialSources,this.reference):null}pointOfInterestReferencedAltitudeByID(e,t){const n=this.pointOfInterestByID(t);if(!n)return null;const i=n.referenceSpatial(e.spatialSources,this.reference);return this.referencedAltitude(e,i.altitude,i.coordinate)}node(e=null){const t=super.node(e);return this.pointsOfInterestEnabled&&t.children.push(new a.PointsOfInterestNode(t,()=>this.pointsOfInterest)),t}engaging(e,t){super.engaging(e,t),this.elevationsPending(e)&&this.failed(e,c.Strings.SubComponent.messages.failedElevationsPending.title)}}},function(e,t,n){(function(){var t,i,o,a,r,s,l,u,c,m,d,h,p,f,g,y,C={}.hasOwnProperty,v=[].splice;({isObject:y,isFunction:g,isEmpty:f,getValue:p}=n(34)),u=null,o=null,a=null,r=null,s=null,d=null,h=null,m=null,l=null,i=null,c=null,t=null,e.exports=function(){class e{constructor(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,u||(u=n(140),o=n(142),a=n(143),r=n(144),s=n(145),d=n(150),h=n(151),m=n(152),l=n(236),i=n(11),c=n(288),n(141),t=n(289))}setParent(e){var t,n,i,o,a;for(this.parent=e,e&&(this.options=e.options,this.stringify=e.stringify),a=[],n=0,i=(o=this.children).length;n<i;n++)t=o[n],a.push(t.setParent(this));return a}element(e,t,n){var i,o,a,r,s,l,u,c,m;if(l=null,null===t&&null==n&&([t,n]=[{},null]),null==t&&(t={}),t=p(t),y(t)||([n,t]=[t,n]),null!=e&&(e=p(e)),Array.isArray(e))for(a=0,u=e.length;a<u;a++)o=e[a],l=this.element(o);else if(g(e))l=this.element(e.apply());else if(y(e)){for(s in e)if(C.call(e,s))if(m=e[s],g(m)&&(m=m.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===s.indexOf(this.stringify.convertAttKey))l=this.attribute(s.substr(this.stringify.convertAttKey.length),m);else if(!this.options.separateArrayItems&&Array.isArray(m)&&f(m))l=this.dummy();else if(y(m)&&f(m))l=this.element(s);else if(this.options.keepNullNodes||null!=m)if(!this.options.separateArrayItems&&Array.isArray(m))for(r=0,c=m.length;r<c;r++)o=m[r],(i={})[s]=o,l=this.element(i);else y(m)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===s.indexOf(this.stringify.convertTextKey)?l=this.element(m):(l=this.element(s)).element(m):l=this.element(s,m);else l=this.dummy()}else l=this.options.keepNullNodes||null!==n?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===e.indexOf(this.stringify.convertTextKey)?this.text(n):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===e.indexOf(this.stringify.convertCDataKey)?this.cdata(n):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===e.indexOf(this.stringify.convertCommentKey)?this.comment(n):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===e.indexOf(this.stringify.convertRawKey)?this.raw(n):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===e.indexOf(this.stringify.convertPIKey)?this.instruction(e.substr(this.stringify.convertPIKey.length),n):this.node(e,t,n):this.dummy();if(null==l)throw new Error("Could not create any elements with: "+e+". "+this.debugInfo());return l}insertBefore(e,t,n){var i,o,a,r,s;if(null!=e?e.type:void 0)return r=t,(a=e).setParent(this),r?(o=children.indexOf(r),s=children.splice(o),children.push(a),Array.prototype.push.apply(children,s)):children.push(a),a;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return o=this.parent.children.indexOf(this),s=this.parent.children.splice(o),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,s),i}insertAfter(e,t,n){var i,o,a;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(e));return o=this.parent.children.indexOf(this),a=this.parent.children.splice(o+1),i=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,a),i}remove(){var e;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return e=this.parent.children.indexOf(this),v.apply(this.parent.children,[e,e-e+1].concat([])),this.parent}node(e,t,n){var i;return null!=e&&(e=p(e)),t||(t={}),t=p(t),y(t)||([n,t]=[t,n]),i=new u(this,e,t),null!=n&&i.text(n),this.children.push(i),i}text(e){var t;return y(e)&&this.element(e),t=new h(this,e),this.children.push(t),this}cdata(e){var t;return t=new o(this,e),this.children.push(t),this}comment(e){var t;return t=new a(this,e),this.children.push(t),this}commentBefore(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this}commentAfter(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t+1),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this}raw(e){var t;return t=new d(this,e),this.children.push(t),this}dummy(){return new l(this)}instruction(e,t){var n,i,o,a,r;if(null!=e&&(e=p(e)),null!=t&&(t=p(t)),Array.isArray(e))for(a=0,r=e.length;a<r;a++)n=e[a],this.instruction(n);else if(y(e))for(n in e)C.call(e,n)&&(i=e[n],this.instruction(n,i));else g(t)&&(t=t.apply()),o=new m(this,e,t),this.children.push(o);return this}instructionBefore(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this}instructionAfter(e,t){var n,i;return n=this.parent.children.indexOf(this),i=this.parent.children.splice(n+1),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,i),this}declaration(e,t,n){var o,a;return o=this.document(),a=new r(o,e,t,n),0===o.children.length?o.children.unshift(a):o.children[0].type===i.Declaration?o.children[0]=a:o.children.unshift(a),o.root()||o}dtd(e,t){var n,o,a,r,l,u,c,m,d;for(n=this.document(),o=new s(n,e,t),a=r=0,u=(m=n.children).length;r<u;a=++r)if(m[a].type===i.DocType)return n.children[a]=o,o;for(a=l=0,c=(d=n.children).length;l<c;a=++l)if(d[a].isRoot)return n.children.splice(a,0,o),o;return n.children.push(o),o}up(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent}root(){var e;for(e=this;e;){if(e.type===i.Document)return e.rootObject;if(e.isRoot)return e;e=e.parent}}document(){var e;for(e=this;e;){if(e.type===i.Document)return e;e=e.parent}}end(e){return this.document().end(e)}prev(){var e;if((e=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[e-1]}next(){var e;if(-1===(e=this.parent.children.indexOf(this))||e===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[e+1]}importDocument(e){var t,n,o,a,r;if((n=e.root().clone()).parent=this,n.isRoot=!1,this.children.push(n),this.type===i.Document&&(n.isRoot=!0,n.documentObject=this,this.rootObject=n,this.children))for(o=0,a=(r=this.children).length;o<a;o++)if((t=r[o]).type===i.DocType){t.name=n.name;break}return this}debugInfo(e){var t,n;return null!=(e=e||this.name)||(null!=(t=this.parent)?t.name:void 0)?null==e?"parent: <"+this.parent.name+">":(null!=(n=this.parent)?n.name:void 0)?"node: <"+e+">, parent: <"+this.parent.name+">":"node: <"+e+">":""}ele(e,t,n){return this.element(e,t,n)}nod(e,t,n){return this.node(e,t,n)}txt(e){return this.text(e)}dat(e){return this.cdata(e)}com(e){return this.comment(e)}ins(e,t){return this.instruction(e,t)}doc(){return this.document()}dec(e,t,n){return this.declaration(e,t,n)}e(e,t,n){return this.element(e,t,n)}n(e,t,n){return this.node(e,t,n)}t(e){return this.text(e)}d(e){return this.cdata(e)}c(e){return this.comment(e)}r(e){return this.raw(e)}i(e,t){return this.instruction(e,t)}u(){return this.up()}importXMLBuilder(e){return this.importDocument(e)}attribute(e,t){throw new Error("attribute() applies to element nodes only.")}att(e,t){return this.attribute(e,t)}a(e,t){return this.attribute(e,t)}removeAttribute(e){throw new Error("attribute() applies to element nodes only.")}replaceChild(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeChild(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}appendChild(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}hasChildNodes(){return 0!==this.children.length}cloneNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}normalize(){throw new Error("This DOM method is not implemented."+this.debugInfo())}isSupported(e,t){return!0}hasAttributes(){return 0!==this.attribs.length}compareDocumentPosition(e){var n;return this,this===e?0:this.document()!==e.document()?(n=t.Disconnected|t.ImplementationSpecific,Math.random()<.5?n|=t.Preceding:n|=t.Following,n):this.isAncestor(e)?t.Contains|t.Preceding:this.isDescendant(e)?t.Contains|t.Following:this.isPreceding(e)?t.Preceding:t.Following}isSameNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}lookupPrefix(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isDefaultNamespace(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}lookupNamespaceURI(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){var t,n,i;if(e.nodeType!==this.nodeType)return!1;if(e.children.length!==this.children.length)return!1;for(t=n=0,i=this.children.length-1;0<=i?n<=i:n>=i;t=0<=i?++n:--n)if(!this.children[t].isEqualNode(e.children[t]))return!1;return!0}getFeature(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setUserData(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}getUserData(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}contains(e){return!!e&&(e===this||this.isDescendant(e))}isDescendant(e){var t,n,i,o;for(n=0,i=(o=this.children).length;n<i;n++){if(e===(t=o[n]))return!0;if(t.isDescendant(e))return!0}return!1}isAncestor(e){return e.isDescendant(this)}isPreceding(e){var t,n;return t=this.treePosition(e),n=this.treePosition(this),-1!==t&&-1!==n&&t<n}isFollowing(e){var t,n;return t=this.treePosition(e),n=this.treePosition(this),-1!==t&&-1!==n&&t>n}treePosition(e){var t,n;return n=0,t=!1,this.foreachTreeNode(this.document(),function(i){if(n++,!t&&i===e)return t=!0}),t?n:-1}foreachTreeNode(e,t){var n,i,o,a,r;for(e||(e=this.document()),i=0,o=(a=e.children).length;i<o;i++){if(r=t(n=a[i]))return r;if(r=this.foreachTreeNode(n,t))return r}}}return Object.defineProperty(e.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.childNodeList&&this.childNodeList.nodes||(this.childNodeList=new c(this.children)),this.childNodeList}}),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){var e;return e=this.parent.children.indexOf(this),this.parent.children[e-1]||null}}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){var e;return e=this.parent.children.indexOf(this),this.parent.children[e+1]||null}}),Object.defineProperty(e.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(e.prototype,"textContent",{get:function(){var e,t,n,o,a;if(this.nodeType===i.Element||this.nodeType===i.DocumentFragment){for(a="",t=0,n=(o=this.children).length;t<n;t++)(e=o[t]).textContent&&(a+=e.textContent);return a}return null},set:function(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e}.call(this)}).call(this)},function(e,t,n){"use strict";var i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(260)),a=n(19),r=n(9),s=n(0),l=n(3),u=n(2),c=n(21),m=n(12),d=n(1);class h{constructor(e=0,t=0){this.type=s.TypeName.GeoCoordinate,this.latitude=e,this.longitude=t}applyJSON(e){d.Serialization.validateJson(e),d.Serialization.validateType(e,this.type),this.latitude=u.Common.parseFloat(e.latitude,this.latitude),this.longitude=u.Common.parseFloat(e.longitude,this.longitude)}get valid(){return Math.abs(this.latitude)>1e-6&&Math.abs(this.longitude)>1e-6}distance(e){const t=a.Convert.degreesToRadians(e.latitude-this.latitude),n=a.Convert.degreesToRadians(e.longitude-this.longitude),i=Math.sin(t/2)*Math.sin(t/2)+Math.cos(a.Convert.degreesToRadians(this.latitude))*Math.cos(a.Convert.degreesToRadians(e.latitude))*Math.sin(n/2)*Math.sin(n/2),o=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i));return h.GeoRadius*o}bearing(e){return a.Convert.degreesToRadians(o.getGreatCircleBearing(this,e))}geoCoordinate(e=null){if(e){const t=o.computeDestinationPoint(this,e.magnitude,a.Convert.radiansToDegrees(e.direction),h.GeoRadius);return new h(t.latitude,t.longitude)}return new h(this.latitude,this.longitude)}geoCoordinates(e){return e.map(e=>this.geoCoordinate(e))}offset(e){return new r.Vector2(this.bearing(e),this.distance(e))}offsets(e){return e.map(e=>this.offset(e))}interpolate(e,t){const n=this.offset(e);return this.geoCoordinate(new r.Vector2(n.direction,t(n.magnitude)))}toRadians(){return new h(a.Convert.degreesToRadians(this.latitude),a.Convert.degreesToRadians(this.longitude))}toLngLat(){return[this.longitude,this.latitude]}toGeoSpatial(){const e=new c.GeoSpatial;return e.coordinate=this,e}toString(){const e=l.Format.geoCoordinate(this);return`${e.latitude.toString()} ${e.longitude.toString()}`}closest(e){let t=null,n=null;return e.forEach(e=>{if(t&&null!==n){const i=e.distance(this);i<n&&(t=e,n=i)}else t=e}),t||this}static convexHull(e){if(e.length<3)return null;const t=e[0];return m.Geometry.convexHull(t.offsets(e).map(e=>e.toPoint2())).map(e=>t.geoCoordinate(e.toVector2()))}static totalDistance(e){let t=0;for(var n=1;n<e.length;n++)t+=e[n-1].distance(e[n]);return t}}t.GeoCoordinate=h,h.GeoRadius=6378137},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=r(n(93)),a=r(n(122));function r(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=(0,o.default)(e,i.latitudeKeys);if(null!=n){var r=e[n];return!0===t?r:(0,a.default)(r)}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=r(n(93)),a=r(n(122));function r(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=(0,o.default)(e,i.longitudeKeys);if(null!=n){var r=e[n];return!0===t?r:(0,a.default)(r)}};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(44),a=n(0),r=n(59),s=n(29),l=n(21),u=n(20),c=n(60),m=n(40),d=n(1),h=n(36),p=n(2),f=n(9),g=n(16),y=n(15),C=n(8),v=n(99),S=n(49),b=n(88),w=n(4),x=n(10),M=n(3),O=n(12),T=n(61);class P extends i.SubComponent{constructor(){super(...arguments),this.droneMotionLimits=new r.MotionLimits6Optional,this.droneMotionErrorTolerance=null,this.restrictionZonesEnabled=!0}applyJSON(e){super.applyJSON(e),this.droneMotionErrorTolerance=d.Serialization.deserialize(e.droneMotionErrorTolerance,T.DistanceTolerance),this.restrictionZonesEnabled=p.Common.parseBoolean(e.restrictionZonesEnabled,this.restrictionZonesEnabled),this.droneMotionLimits.applyJSON(e.droneMotionLimits)}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!0}get repositionIfIncluded(){return!0}descendantAllowed(e){return!!super.descendantAllowed(e)&&(!(e instanceof P)&&0===e.node().descendants.filter(e=>e instanceof v.ComponentNode&&e.component instanceof P).length)}resolveDroneMotionLimits(e,t=null){return e.plan.droneMotionLimits.resolve(t||this.droneMotionLimits)}resolveDroneMotionErrorTolerance(e,t=null){return t||e.plan.droneMotionErrorTolerance}addVelocityCommandsFromModel(e,t,n){const i=t.sampleInterpolated,{drone:a,execution:r}=e,l=this.referenceSpatial(e),u=a.projectSpatial(e.engagement.currentDatetime),c=d.Serialization.clone(i.droneSpatial.velocity),m=new s.Velocity6,h=u.coordinate.offset(i.droneSpatial.coordinate);o.VelocityDroneCommand.updateBoundedVelocityHorizontal(m,h.direction,h.magnitude,i.droneMotionLimits,l.velocity.horizontal);const f=i.droneSpatial.altitude.value-u.altitude.value;o.VelocityDroneCommand.updateBoundedVelocityVertical(m,f,i.droneMotionLimits,l.velocity.vertical);const g=[],y=this.resolveDroneMotionErrorTolerance(e,i.droneMotionErrorTolerance||this.droneMotionErrorTolerance);if(y.validHorizontal(h.magnitude)||g.push(w.Strings.formatString(w.Strings.DroneMotionComponent.messages.disengageErrorTolerance.details.distance,M.Format.distance(h.magnitude).toString())),y.validVertical(f)||g.push(w.Strings.formatString(w.Strings.DroneMotionComponent.messages.disengageErrorTolerance.details.altitude,M.Format.altitude(f).toString())),g.length>0)return void e.engagement.disengage(e.drone,new x.Message(w.Strings.DroneMotionComponent.messages.disengageErrorTolerance.title,p.Common.joinNotEmpty(g)));const C=O.Geometry.angleDifferenceSigned(i.droneSpatial.orientation.yaw,u.orientation.yaw);o.VelocityDroneCommand.updateBoundedVelocityRotational(m,C,i.droneMotionLimits,l.velocity.rotational),c.horizontal=c.horizontal.add(m.horizontal),c.vertical+=m.vertical,c.rotational+=m.rotational;const v=new o.VelocityDroneCommand;v.velocity=c,n?(v.velocity.rotational=0,v.heading=i.droneSpatial.orientation.yaw):null===n&&(v.velocity.rotational=0);const S=v.toMessage();S.details&&r.getComponentState(this).messages.push(S),a.addStatelessCommand(v);for(const t of Object.keys(i.gimbalOrientations))this.addGimbalVelocityCommand(e,parseInt(t),i.gimbalOrientations[t],{x:0,z:0},i.gimbalVelocities[t])}addDroneVelocityCommand(e,t,n=null){const i=e.execution.getComponentState(this),r=i.cachedData(a.TypeName.DroneMotionComponent,()=>new D),s=this.resolveDroneMotionLimits(e),l=new o.VelocityDroneCommand;return l.velocity=o.VelocityDroneCommand.boundedVelocity(r.previousVelocity,t,e.engagement.timeSinceLastExecution,s),l.heading=n,l.toMessage().details&&i.messages.push(l.toMessage()),e.drone.addStatelessCommand(l),r.previousVelocity=l.velocity,l}reengagementDroneSpatial(e){return null}engaging(e,t){super.engaging(e,t),e.execution.getComponentState(this).clearCachedData(a.TypeName.DroneMotionComponent)}}t.DroneMotionComponent=P;class D{constructor(){this.previousVelocity=new s.Velocity6}}t.DroneMotionComponentModelData=class{constructor(e){this.currentTime=0,this._sample=e.first,this.totalTime=e.last.current.time}updateProgress(e){this.updateTime(Math.max(0,Math.min(1,e))*this.totalTime)}updateTime(e){for(e<this.currentTime&&(this._sample=this._sample.first),this.currentTime=e;this._sample.next&&this._sample.next.current.time<this.currentTime;)this._sample=this._sample.next}incrementTime(e){this.updateTime(this.currentTime+e)}get sampleLinked(){return this._sample}get sampleInterpolated(){if(!this._sample.next)return this._sample.current;const e=this._sample.next.current.time-this._sample.current.time;if(0===e)return this._sample.current.interpolate(this._sample.next.current,0);const t=(this.currentTime-this._sample.current.time)/e;return this._sample.current.interpolate(this._sample.next.current,t)}get progress(){return Math.min(1,this.currentTime/this.totalTime)}};class E{constructor(e){this.firstSample=e.first,this.samples=this.firstSample.list}addToEstimate(e){var t;if(this.samples.length>0){let n=(null===(t=e.lastDroneSpatial)||void 0===t?void 0:t.updated.value)||new Date;this.samples.forEach(t=>{const i=t.current.droneSpatial;i.updated.value=new Date(n.getTime()+1e3*t.current.time),e.droneSpatials.push(i)}),e.time+=p.Common.last(this.samples).current.time}}static updateSamplesContrainVelocities(e,t){E.updateSamplesContrainHorizontalVelocitiesByAcceleration(e),E.updateSamplesContrainVerticalVelocitiesByAcceleration(e,t),E.updateSamplesTime(e),E.updateSamplesContrainHorizontalVelocitiesByTime(e),E.updateSamplesContrainHorizontalVelocitiesByAcceleration(e),E.updateSamplesTime(e),E.updateSamplesContrainVerticalVelocitiesByTime(e),E.updateSamplesContrainVerticalVelocitiesByAcceleration(e,t),E.updateSamplesTime(e),E.updateSamplesContrainVerticalVelocitiesByTime(e),E.updateSamplesContrainHorizontalVelocitiesByTime(e),E.updateSamplesOrientationVelocities(e)}static updateSamplesContrainHorizontalVelocitiesByAcceleration(e){const t=(e,t,n)=>{const i=t.droneSpatial.coordinate.offset(e.droneSpatial.coordinate);if(0===i.magnitude)return void(e.droneSpatial.velocity.horizontal=new f.Vector2);const o=e.droneSpatial.velocity.horizontal,a=t.droneSpatial.velocity.horizontal,r=0===a.magnitude?o.direction:a.direction;if(o.direction-=r,a.direction=0,o.x<=0)return void(e.droneSpatial.velocity.horizontal=new f.Vector2);const s=new f.Vector2(o.direction,i.magnitude),l=new y.Point2(Math.min(o.x,g.Kinematic.v3(a.x,n,s.x)),g.Kinematic.v3(0,n,Math.abs(s.y)));o.x>l.x&&(o.magnitude*=l.x/o.x),Math.abs(o.y)>l.y&&(o.magnitude*=l.y/Math.abs(o.y)),o.direction+=r,e.droneSpatial.velocity.horizontal=o};let n=e.first;for(n.current.droneSpatial.velocity.horizontal=new f.Vector2;n.next;)(n=n.next).next&&n.previous&&t(n.current,n.previous.current,n.current.droneMotionLimits.horizontal.acceleration.max);for((n=e.last).current.droneSpatial.velocity.horizontal=new f.Vector2;n.previous;)(n=n.previous).next&&n.previous&&t(n.current,n.next.current,-n.current.droneMotionLimits.horizontal.acceleration.min);for((n=e.first).current.droneSpatial.velocity.horizontal=new f.Vector2;n.next;)(n=n.next).next&&n.previous&&t(n.current,n.previous.current,n.current.droneMotionLimits.horizontal.acceleration.max)}static updateSamplesContrainVerticalVelocitiesByAcceleration(e,t){let n=e.first;for(;n.next;)if((n=n.next).next&&n.previous){let e=0;const i=n.current.droneSpatial.altitude.value-n.previous.current.droneSpatial.altitude.value;if(Math.abs(i)>.01*t){const t=n.previous.current.droneSpatial.velocity.vertical;i>0&&t>0?e=t:i<0&&t<0&&(e=Math.abs(t)),e=g.Kinematic.v3(e,n.current.droneMotionLimits.vertical.acceleration.max,Math.abs(i))}n.current.droneSpatial.velocity.vertical=n.current.droneMotionLimits.vertical.velocity.bound((i<0?-1:1)*e)}for((n=e.last).current.droneSpatial.velocity.vertical=0;n.previous;)if((n=n.previous).next&&n.previous&&0!==n.current.droneSpatial.velocity.vertical){let e=0;n.current.droneSpatial.velocity.vertical>0&&n.next.current.droneSpatial.velocity.vertical>0?e=n.next.current.droneSpatial.velocity.vertical:n.current.droneSpatial.velocity.vertical<0&&n.next.current.droneSpatial.velocity.vertical<0&&(e=Math.abs(n.next.current.droneSpatial.velocity.vertical));const t=n.current.droneSpatial.altitude.value-n.next.current.droneSpatial.altitude.value;e=g.Kinematic.v3(e,-n.current.droneMotionLimits.vertical.acceleration.min,Math.abs(t)),n.current.droneSpatial.velocity.vertical<0?(e=-e,n.current.droneSpatial.velocity.vertical<e&&(n.current.droneSpatial.velocity.vertical=e)):n.current.droneSpatial.velocity.vertical>e&&(n.current.droneSpatial.velocity.vertical=e)}}static updateSamplesContrainHorizontalVelocitiesByTime(e){let t=e.first;for(;t.next;)if((t=t.next).next&&t.previous){const e=t.current.droneSpatial.velocity.horizontal;e.magnitude=Math.min(e.magnitude,g.Kinematic.v4(t.current.droneSpatial.coordinate.distance(t.previous.current.droneSpatial.coordinate),t.current.time-t.previous.current.time)),t.current.droneSpatial.velocity.horizontal=e}}static updateSamplesContrainVerticalVelocitiesByTime(e){let t=e.first;for(;t.next;)if((t=t.next).next&&t.previous){const e=g.Kinematic.v4(Math.abs(t.current.droneSpatial.altitude.value-t.previous.current.droneSpatial.altitude.value),t.current.time-t.previous.current.time);t.current.droneSpatial.velocity.vertical=(t.current.droneSpatial.velocity.vertical<0?-1:1)*Math.min(Math.abs(t.current.droneSpatial.velocity.vertical),e)}}static updateSamplesTime(e){let t=e.first;for(;t.next;)if((t=t.next).previous){let e=0;const n=(null===t.next?t.previous:t).current.droneSpatial.velocity.horizontal.magnitude,i=Math.abs((null===t.next?t.previous:t).current.droneSpatial.velocity.vertical);if(n>0){const i=t.previous.current.droneSpatial.coordinate.distance(t.current.droneSpatial.coordinate);e=g.Kinematic.t1(n,i)}if(i>0&&(0===n||i>.1*n)){const n=Math.abs(t.current.droneSpatial.altitude.value-t.previous.current.droneSpatial.altitude.value);e=Math.max(g.Kinematic.t1(i,n),e)}e=Math.min(C.Constants.DroneMotionComponentModelSampleTimeMax,e),t.current.time=t.previous.current.time+e}}static updateSamplesOrientationVelocities(e){let t=e.first;for(;t.next;){const e=t.next.current.time-t.current.time,n=O.Geometry.angleDifferenceSigned(t.next.current.droneSpatial.orientation.yaw,t.current.droneSpatial.orientation.yaw);t.current.droneSpatial.velocity.rotational=g.Kinematic.v4(n,e);for(const n of Object.keys(t.current.gimbalOrientations)){const i=t.current.gimbalOrientations[n],o=t.next.current.gimbalOrientations[n];o&&(t.current.gimbalVelocities[n]=o.velocity(i,e))}t=t.next}for(t=e.first;t.next;)t.previous&&Math.abs(t.previous.current.droneSpatial.velocity.rotational-t.next.current.droneSpatial.velocity.rotational)<C.Constants.DroneMotionComponentRotationalSmoothingTolerance&&Math.abs(t.current.droneSpatial.velocity.rotational-t.previous.current.droneSpatial.velocity.rotational)>C.Constants.DroneMotionComponentRotationalSmoothingTolerance&&(t.current.droneSpatial.velocity.rotational=(t.previous.current.droneSpatial.velocity.rotational+t.next.current.droneSpatial.velocity.rotational)/2),t=t.next}}t.DroneMotionComponentModel=E;t.DroneMotionComponentModelSampleLinked=class extends c.LinkedValue{};class F{constructor(e,t,n,i){this.time=0,this.droneSpatial=new l.GeoSpatial,this.droneMotionErrorTolerance=null,this.droneSpatial=e,this.droneMotionLimits=t,this.gimbalOrientations=n,this.gimbalVelocities=i}applyJSON(e){if(this.time=p.Common.parseFloat(e.time,this.time),this.droneSpatial.applyJSON(e.droneSpatial),this.droneMotionLimits.applyJSON(e.droneMotionLimits),this.gimbalOrientations={},e.gimbalOrientations)for(let t of Object.keys(e.gimbalOrientations)){const n=new u.Orientation3Optional;n.applyJSON(e.gimbalOrientations[t]),this.gimbalOrientations[t]=n}if(this.gimbalVelocities={},e.gimbalVelocities)for(let t of Object.keys(e.gimbalVelocities)){const n=new h.Velocity3;n.applyJSON(e.gimbalVelocities[t]),this.gimbalVelocities[t]=n}}interpolate(e,t,n=new S.OrientationReferenceSources){const i=(e,n)=>m.Interpolation.linear(e,n,t),o={};for(const t of Object.keys(this.gimbalOrientations))e.gimbalOrientations[t]?o[t]=this.gimbalOrientations[t].interpolate(e.gimbalOrientations[t],n,new b.OrientationReferenceTargets,i):o[t]=d.Serialization.clone(this.gimbalOrientations[t]);const a={};for(const t of Object.keys(this.gimbalVelocities))e.gimbalVelocities[t]?a[t]=this.gimbalVelocities[t].interpolate(e.gimbalVelocities[t],i):a[t]=d.Serialization.clone(this.gimbalVelocities[t]);const r=new F(this.droneSpatial.interpolate(e.droneSpatial,n,new b.OrientationReferenceTargets,i),this.droneMotionLimits.interpolate(e.droneMotionLimits,i),o,a);return r.time=i(this.time,e.time),r}}t.DroneMotionComponentModelSample=F},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(4),r=n(3),s=n(1);class l{constructor(e=0,t){this.type=i.TypeName.Limits,this.max=e,this.min=void 0===t?0===e?0:-e:t}applyJSON(e){s.Serialization.validateJson(e),s.Serialization.validateType(e,this.type),this.max=o.Common.parseFloat(e.max,this.max),this.min=o.Common.parseFloat(e.min,this.min)}bound(e){return Math.max(Math.min(e,this.max),this.min)}valid(e){return e<=this.max&&e>=this.min}interpolate(e,t){return new l(t(this.max,e.max),t(this.min,e.min))}toString(e=null,t={min:!0,max:!0}){return t.min||t.max?(e||(e=r.Format.distance),t.min&&!t.max?e(this.min).toString():!t.min&&t.max?e(this.max).toString():this.max>0&&this.min<0&&Math.abs(this.max+this.min)<.01*Math.abs(this.max)?a.Strings.formatString(a.Strings.Limits.toString.same,e(this.max).toString()):a.Strings.formatString(a.Strings.Limits.toString.different,e(this.min).toString(),e(this.max).toString())):""}}t.Limits=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(36),a=n(2),r=n(4),s=n(3),l=n(1);class u{constructor(e=new o.Velocity3,t=new o.Velocity3){this.type=i.TypeName.Velocity6,this.toString=(()=>a.Common.joinNotEmpty([0===this.horizontal.magnitude?"":r.Strings.formatString(r.Strings.Velocity6.toString.horizontal,s.Format.velocityHorizontal(this.horizontal.magnitude).toString(),s.Format.angle(this.horizontal.direction).toString()),0===this.vertical?"":r.Strings.formatString(r.Strings.Velocity6.toString.vertical,s.Format.velocityVertical(this.vertical).toString()),0===this.rotational?"":r.Strings.formatString(r.Strings.Velocity6.toString.rotational,s.Format.velocityRotational(this.rotational).toString())])),this.position=e,this.orientation=t}applyJSON(e){l.Serialization.validateJson(e),l.Serialization.validateType(e,this.type),this.position.applyJSON(e.position),this.orientation.applyJSON(e.orientation)}interpolate(e,t){return new u(this.position.interpolate(e.position,t),this.orientation.interpolate(e.orientation,t))}get horizontal(){return this.position.horizontal}set horizontal(e){this.position.horizontal=e}get vertical(){return this.position.vertical}set vertical(e){this.position.vertical=e}get rotational(){return this.orientation.z}set rotational(e){this.orientation.z=e}}t.Velocity6=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(1);t.StopCaptureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.StopCaptureCameraCommand}applyJSON(e){super.applyJSON(e),a.Serialization.validateType(e,this.type)}get estimatedTime(){return 1}get verifiable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(1);t.StartCaptureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.StartCaptureCameraCommand}applyJSON(e){super.applyJSON(e),a.Serialization.validateType(e,this.type)}static possible(e){return e===o.CameraMode.Photo||e===o.CameraMode.Video}static continuous(e,t){return e===o.CameraMode.Video||e===o.CameraMode.Photo&&t===o.CameraPhotoMode.Interval}get estimatedTime(){return 1}get verifiable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return e*Math.PI/180};t.default=i},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2),a=n(0),r=n(1),s=n(35),l=n(84),u=n(13),c=n(56),m=n(48),d=n(92),h=n(129),p=n(4),f=i(n(284)),g=n(19),y=n(70);t.Timeline=class{constructor(){this.type=a.TypeName.Timeline,this.frames=[],this.commands={},this.captures=[]}applyJSON(e){if(r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.frames=[],Array.isArray(e.frames))for(let t of e.frames)this.frames.push(r.Serialization.deserialize(t,C,!1))}addFrame(e,t){const n=new C(t);n.device=r.Serialization.clone(e.device),n.drone=r.Serialization.clone(e.drone);for(const t in e.execution.componentStates){const i=e.execution.componentStates[t];i.status===a.ComponentExecutionStatus.Executing&&(n.executingComponentStates[t]=r.Serialization.clone(i))}let i=this.lastFrame;return null===i?(n.datetime=r.Serialization.clone(e.engagement.engaged),this.frames.push(n),n):(n.distanceTravelledHorizontal=i.distanceTravelledHorizontal+n.drone.spatial.coordinate.distance(i.drone.spatial.coordinate),n.datetime=r.Serialization.clone(e.engagement.currentDatetime),this.frames.push(n),n)}get firstFrame(){return this.frames.length>0?this.frames[0]:null}get lastFrame(){return this.frames.length>0?o.Common.last(this.frames):null}getFrame(e){const t=this.getFrameIndex(e);return t?this.frames[t]:null}getFrameIndex(e){if(this.lastFrame){const t=this.lastFrame.elapsedTime;for(let n=0;n<this.frames.length;n++)if(this.frames[n].elapsedTime/t>=e)return n}return null}addCapture(e,t,n=0){let i=0;for(let e=this.frames.length-1;e>0;e--)if(this.frames[e].datetime.value.getTime()<=t.created.value.getTime()){i=e;break}const o=new S(i,e.channel,e.settings.mode,e.settings.photoMode,t.created,new u.Datetime(new Date(t.created.value.getTime()+1e3*n)),t);return this.captures.push(o),o}updateCommandExecutionState(e,t){let n=this.commands[e.id];return n||(n=new v(e,t),this.commands[e.id]=n),n.executionState=t,n}toKML(e,t=0){const n=e=>[`${e.drone.spatial.coordinate.longitude}`,`${e.drone.spatial.coordinate.latitude}`,`${t+e.drone.spatial.altitude.value}`].join(","),i=f.default.begin().e("kml",{xmlns:"http://www.opengis.net/kml/2.2","xmlns:gx":"http://www.google.com/kml/ext/2.2"}),o=i.e("Document");o.e("name",e.name),o.e("description",e.description);const a=o.e("Style",{id:"dronePath"}),r=a.e("LineStyle");r.e("color","ffffe500"),r.e("width","4");const s=a.e("PolyStyle");s.e("color","ffffe500"),s.e("width","4");const l=o.e("Placemark");l.e("name","Flight Path"),l.e("styleUrl","#dronePath");const u=l.e("LineString");u.e("altitudeMode","absolute"),u.e("coordinates",this.frames.map(e=>n(e)).join("\n"));const c=o.e("gx:Tour");c.e("name","Flight Motion");const m=c.e("gx:Playlist");let d=null;if(this.frames.forEach(e=>{const n=m.e("gx:FlyTo");n.e("gx:duration",d?e.elapsedTime-d.elapsedTime:.1),n.e("gx:flyToMode","smooth");const i=n.e("Camera");i.e("longitude",`${e.drone.spatial.coordinate.longitude}`),i.e("latitude",`${e.drone.spatial.coordinate.latitude}`),i.e("altitude",`${t+e.drone.spatial.altitude.value}`),i.e("altitudeMode","absolute"),i.e("heading",`${g.Convert.radiansToDegrees(e.drone.spatial.orientation.yaw,!0)}`),i.e("tilt",`${g.Convert.radiansToDegrees(e.drone.gimbal().orientation.pitch)+90}`),d=e}),this.captures.length>0){o.e("Style",{id:"capture"}).e("IconStyle").e("Icon").e("href","http://maps.google.com/mapfiles/kml/shapes/placemark_circle_highlight.png");const e=o.e("Folder");e.e("name","Captures"),this.captures.forEach((t,i)=>{const o=this.frames[t.frameIndex],a=e.e("Placemark");a.e("name",`${i+1}`),a.e("description",t.title),a.e("styleUrl","#capture");const r=a.e("Point");r.e("altitudeMode","absolute"),r.e("coordinates",n(o))})}return i.end({pretty:!0})}};class C{constructor(e=0,t=0,n=new u.Datetime,i=new c.Device,o=new m.Drone,r={}){this.type=a.TypeName.TimelineFrame,this.elapsedTime=e,this.distanceTravelledHorizontal=t,this.datetime=n,this.device=i,this.drone=o,this.executingComponentStates=r}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.elapsedTime=o.Common.parseFloat(e.elapsedTime,this.elapsedTime),this.distanceTravelledHorizontal=o.Common.parseFloat(e.distanceTravelledHorizontal,this.distanceTravelledHorizontal),this.datetime.applyJSON(e.datetime),this.device.applyJSON(e.device),this.drone.applyJSON(e.drone),this.executingComponentStates={};for(let t of Object.keys(e.executingComponentStates)){const n=new d.ComponentExecutionState(t);n.applyJSON(e.executingComponentStates[t]),this.executingComponentStates[t]=n}}}t.TimelineFrame=C;class v{constructor(e=new h.DefaultCommand,t=new l.CommandExecutionState){this.type=a.TypeName.TimelineFrame,this.command=e,this.executionState=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.command=r.Serialization.deserialize(e.command,s.Command,!1),this.executionState.applyJSON(e.executionState)}}t.TimelineCommand=v;class S{constructor(e=0,t=0,n=a.CameraMode.Photo,i=a.CameraPhotoMode.Single,o=new u.Datetime,r=null,s=new y.CameraFile){this.type=a.TypeName.TimelineCameraCapture,this.frameIndex=e,this.channel=t,this.mode=n,this.photoMode=i,this.started=o,this.finished=r,this.file=s}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.frameIndex=o.Common.parseInt(e.frameIndex,this.frameIndex),this.channel=o.Common.parseInt(e.channel,this.channel),this.mode=o.Common.parseString(e.mode,this.mode),this.photoMode=o.Common.parseString(e.photoMode,this.photoMode),this.started.applyJSON(e.started),this.finished=r.Serialization.deserialize(e.finished,u.Datetime),this.file.applyJSON(e.file)}get title(){let e=p.Strings.CameraMode.values[this.mode].name;return this.mode===a.CameraMode.Photo&&(e=`${p.Strings.CameraPhotoMode.values[this.photoMode].name} ${e}`),e}get subtitle(){return this.file.name}}t.TimelineCameraCapture=S},function(e,t){(function(){var t,n,i,o,a,r,s,l={}.hasOwnProperty;t=function(e,...t){var n,i,o,r;if(a(Object.assign))Object.assign.apply(null,arguments);else for(n=0,o=t.length;n<o;n++)if(null!=(r=t[n]))for(i in r)l.call(r,i)&&(e[i]=r[i]);return e},a=function(e){return!!e&&"[object Function]"===Object.prototype.toString.call(e)},r=function(e){var t;return!!e&&("function"==(t=typeof e)||"object"===t)},i=function(e){return a(Array.isArray)?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},o=function(e){var t;if(i(e))return!e.length;for(t in e)if(l.call(e,t))return!1;return!0},s=function(e){var t,n;return r(e)&&(n=Object.getPrototypeOf(e))&&(t=n.constructor)&&"function"==typeof t&&t instanceof t&&Function.prototype.toString.call(t)===Function.prototype.toString.call(Object)},n=function(e){return a(e.valueOf)?e.valueOf():e},e.exports.assign=t,e.exports.isFunction=a,e.exports.isObject=r,e.exports.isArray=i,e.exports.isEmpty=o,e.exports.isPlainObject=s,e.exports.getValue=n}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(1),a=n(0);t.Command=class extends i.Identifiable{get title(){return o.Serialization.typeDisplay(this)}get subtitle(){return""}get estimatedTime(){return.3}get verifiable(){return!0}get reengagementTiming(){return a.CommandReengagementTiming.Never}get reengagementReplaceable(){return!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(15),a=n(2),r=n(1);class s{constructor(e=0,t=0,n=0){this.type=i.TypeName.Velocity3,this.x=e,this.y=t,this.z=n}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.x=a.Common.parseFloat(e.x,this.x),this.y=a.Common.parseFloat(e.y,this.y),this.z=a.Common.parseFloat(e.z,this.z)}interpolate(e,t){return new s(t(this.x,e.x),t(this.y,e.y),t(this.z,e.z))}get horizontal(){return new o.Point2(this.x,this.y).toVector2()}set horizontal(e){this.x=e.x,this.y=e.y}get vertical(){return this.z}set vertical(e){this.z=e}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}}t.Velocity3=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.ModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ModeCameraCommand,this.mode=o.CameraMode.Photo}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.mode=s.Common.parseString(e.mode,this.mode)}get subtitle(){return a.Format.enum("CameraMode",this.mode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get reengagementReplaceable(){return!1}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.PhotoModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoModeCameraCommand,this.photoMode=o.CameraPhotoMode.Single}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.photoMode=s.Common.parseString(e.photoMode,this.photoMode)}get subtitle(){return a.Format.enum("CameraPhotoMode",this.photoMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}get reengagementReplaceable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(0),a=n(35),r=n(1),s=n(129),l=n(10),u=n(3),c=n(2),m=n(31),d=n(37),h=n(30),p=n(45),f=n(38),g=n(5);t.CommandComponent=class extends i.SubComponent{constructor(e=new s.DefaultCommand){super(),this.type=o.TypeName.CommandComponent,this.command=e}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.command=r.Serialization.deserialize(e.command,a.Command,!1)}get title(){return this.command.title}get subtitle(){return this.command.subtitle}verification(e){return this.command.verifiable?r.Serialization.clone(this,!0):null}cameraCaptureConfigurationsEnabled(e=null){return!1}estimate(e,t){const n=super.estimate(e,t);if(e.timeRequired&&(n.time=this.command.estimatedTime),this.command instanceof g.CameraCommand){const i=e.camera(this.command.channel);if(this.command instanceof d.ModeCameraCommand)i.settings.mode=this.command.mode;else if(this.command instanceof f.PhotoModeCameraCommand)i.settings.photoMode=this.command.photoMode;else if(this.command instanceof p.PhotoIntervalCameraCommand)i.settings.photoInterval=this.command.photoInterval;else if(this.command instanceof m.StartCaptureCameraCommand){if(!i.capturing)switch(i.settings.mode){case o.CameraMode.Photo:i.updated=t.updated,i.settings.photoMode===o.CameraPhotoMode.Interval?i.capturing=!0:n.cameraCapture(this.command.channel).photos+=1;break;case o.CameraMode.Video:i.updated=t.updated,i.capturing=!0}}else if(this.command instanceof h.StopCaptureCameraCommand&&i.capturing){i.capturing=!1;const e=n.cameraCapture(this.command.channel);switch(i.settings.mode){case o.CameraMode.Photo:i.settings.photoMode===o.CameraPhotoMode.Interval&&(e.photos+=Math.floor(t.updated.elapsedTime(i.updated)/i.settings.photoInterval));break;case o.CameraMode.Video:e.videos+=1}}}return n}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,i=n.commandExecutionState(this.command.id);if(i)switch(i.status){case o.CommandExecutionStatus.Pending:case o.CommandExecutionStatus.Queued:case o.CommandExecutionStatus.Executing:return t.messages.push(new l.Message(u.Format.enum("CommandExecutionStatus",i.status))),t;case o.CommandExecutionStatus.Failed:return n.removeStatefulCommand(this.command),this.failed(e,i.error?c.Common.joinNotEmpty([this.command.title,this.command.subtitle,i.error]):null);case o.CommandExecutionStatus.Succeeded:return n.removeStatefulCommand(this.command),this.succeeded(e)}else n.addStatefulCommand(this.command);return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(1);class r{constructor(){this.type=i.TypeName.Interpolation,this.f=i.InterpolationFunction.Linear,this.sigmoidK=Math.E}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.f=o.Common.parseString(e.f,this.f),this.sigmoidK=o.Common.parseFloat(e.sigmoidK,this.sigmoidK)}interpolate(e,t,n){switch(this.f){case i.InterpolationFunction.None:return e;case i.InterpolationFunction.Linear:return r.linear(e,t,n);case i.InterpolationFunction.Sigmoid:return r.sigmoid(e,t,n,this.sigmoidK)}}static linear(e,t,n){return e+(t-e)*Math.max(Math.min(1,n),0)}static sigmoid(e,t,n,i){return e+(t-e)*o.Common.sigmoid(Math.max(Math.min(1,n),0),i)}}t.Interpolation=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(15),a=n(9),r=n(1);class s{constructor(e=new o.Point2,t=new o.Point2){this.type=i.TypeName.Point2,this.a=e,this.b=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.a.applyJSON(e.a),this.b.applyJSON(e.b)}get length(){return this.a.distance(this.b)}get direction(){return this.b.toVector2().subtract(this.a.toVector2()).direction}add(e){return new s(this.a.toVector2().add(e).toPoint2(),this.b.toVector2().add(e).toPoint2())}lengthen(e,t=null){return new s(this.a.toVector2().add(new a.Vector2(this.direction+Math.PI,e)).toPoint2(),this.b.toVector2().add(new a.Vector2(this.direction,t||e)).toPoint2())}interpolate(e){return this.a.interpolate(this.b,e<0?0:Math.min(1,e/this.a.distance(this.b)))}}t.Line2=s},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var i=n(82),o=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=m;var a=n(64);a.inherits=n(51);var r=n(160),s=n(112);a.inherits(m,r);for(var l=o(s.prototype),u=0;u<l.length;u++){var c=l[u];m.prototype[c]||(m.prototype[c]=s.prototype[c])}function m(e){if(!(this instanceof m))return new m(e);r.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||i.nextTick(h,this)}function h(e){e.end()}Object.defineProperty(m.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),m.prototype._destroy=function(e,t){this.push(null),this.end(),i.nextTick(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),o=n(10),a=n(3),r=n(7),s=n(29),l=n(9),u=n(8),c=n(16),m=n(0),d=n(2),h=n(1);t.VelocityDroneCommand=class extends r.DroneCommand{constructor(){super(m.TypeName.VelocityDroneCommand),this.type=m.TypeName.VelocityDroneCommand,this.velocity=new s.Velocity6,this.heading=null}applyJSON(e){super.applyJSON(e),h.Serialization.validateType(e,this.type),this.heading=d.Common.parseFloat(e.heading,null),this.velocity.applyJSON(e.velocity)}get verifiable(){return!1}toMessage(){return new o.Message(i.Strings.VelocityDroneCommand.messages.controls.title,d.Common.joinNotEmpty([this.velocity.horizontal.magnitude<.1?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.horizontal,a.Format.velocityHorizontal(this.velocity.horizontal.magnitude).toString(),a.Format.angle(this.velocity.horizontal.direction).toString()),Math.abs(this.velocity.vertical)<.1?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.vertical,a.Format.velocityVertical(this.velocity.vertical).toString()),null===this.heading?Math.abs(this.velocity.rotational)<.01?"":i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.rotational,a.Format.velocityRotational(this.velocity.rotational).toString()):i.Strings.formatString(i.Strings.VelocityDroneCommand.messages.controls.details.heading,a.Format.angle(this.heading).toString())]))}static boundedVelocity(e,t,n,i){const o=new s.Velocity6,a=t.horizontal.subtract(e.horizontal);return o.horizontal=e.horizontal.add(new l.Vector2(a.direction,i.horizontal.currentVelocityLimits(0,n).bound(a.magnitude))),o.vertical=i.vertical.currentVelocityLimits(e.vertical,n).bound(t.vertical),o.rotational=i.rotational.currentVelocityLimits(e.rotational,n).bound(t.rotational),o}static updateBoundedVelocityHorizontal(e,t,n,i,o=new l.Vector2){const a=c.Kinematic.dampen(c.Kinematic.v3(0,-i.horizontal.acceleration.min,n),u.Constants.VelocityHorizontalDampenThreshold);e.horizontal=o.add(new l.Vector2(t,i.horizontal.velocity.bound(a)))}static updateBoundedVelocityVertical(e,t,n,i=0){const o=c.Kinematic.dampen(c.Kinematic.v3(0,-n.vertical.acceleration.min,Math.abs(t)),u.Constants.VelocityVerticalDampenThreshold);e.vertical=i+(t<0?-1:1)*n.vertical.velocity.bound(o)}static updateBoundedVelocityRotational(e,t,n,i=0){const o=Math.min(Math.abs(t),c.Kinematic.v3(0,-n.rotational.acceleration.min,Math.abs(t)));e.rotational=i+(t<0?-1:1)*n.rotational.velocity.bound(o)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(8),r=n(2),s=n(4),l=n(1);t.PhotoIntervalCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoIntervalCameraCommand,this.photoInterval=a.Constants.PhotoIntervalCommandValue}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.photoInterval=r.Common.parseInt(e.photoInterval,this.photoInterval)}get subtitle(){return`${this.photoInterval} ${s.Strings.Unit.values.seconds.name}`}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(4),a=n(3),r=n(2),s=n(20),l=n(12),u=n(16),c=n(88),m=n(1);class d{constructor(e=0,t=i.OrientationXReference.Horizon,n=0,r=0,s=i.OrientationZReference.North){this.type=i.TypeName.Orientation3,this.toString=(()=>{const e=[];return this.xReference===i.OrientationXReference.Horizon?e.push(`${o.Strings.Orientation3.values.x} ${a.Format.angle(this.x,!1)}`):e.push(`${o.Strings.Orientation3.values.x} ${a.Format.angle(this.x,!1)} ∠ ${a.Format.enum("OrientationXReference",this.xReference)}`),this.zReference===i.OrientationZReference.North?e.push(`${o.Strings.Orientation3.values.z} ${a.Format.angle(this.z,!0)}`):e.push(`${o.Strings.Orientation3.values.z} ${a.Format.angle(this.z,!0)} ∠ ${a.Format.enum("OrientationZReference",this.zReference)}`),0!==this.y&&e.push(`${o.Strings.Orientation3.values.y} ${a.Format.angle(this.y,!1)}`),e.join(o.Strings.Common.delimeter)}),this.x=e,this.xReference=t,this.y=n,this.z=r,this.zReference=s}applyJSON(e){m.Serialization.validateJson(e),m.Serialization.validateType(e,this.type),this.x=r.Common.parseFloat(e.x,this.x),this.xReference=r.Common.parseString(e.xReference,this.xReference),this.y=r.Common.parseFloat(e.y,this.y),this.z=r.Common.parseFloat(e.z,this.z),this.zReference=r.Common.parseString(e.zReference,this.zReference)}applyVelocity(e,t){this.x+=u.Kinematic.d1(e.x,t),this.y+=u.Kinematic.d1(e.y,t),this.z+=u.Kinematic.d1(e.z,t)}interpolate(e,t,n,o){let a=this.x,r=this.xReference,s=this.x,u=e.x;e.xReference!==this.xReference&&(s=t.x.value(this.xReference)+this.x,u=t.x.value(e.xReference)+e.x,r=i.OrientationXReference.Horizon),a=s-o(0,l.Geometry.angleDifferenceSigned(s,u));let c=this.z,m=this.zReference,h=this.z,p=e.z;e.zReference!==this.zReference&&(h=t.z.value(this.zReference)+this.z,p=t.z.value(e.zReference)+e.z,m=i.OrientationZReference.North),c=h-o(0,l.Geometry.angleDifferenceSigned(h,p));const f=new d(a,r,o(this.y,e.y),c,m);return f.convertReferences(t,n),f}convertReferences(e,t=new c.OrientationReferenceTargets){this.xReference!==t.x&&(this.x=e.x.value(this.xReference)+this.x-e.x.value(t.x),this.xReference=t.x),this.zReference!==t.z&&(this.z=e.z.value(this.zReference)+this.z-e.z.value(t.z),this.zReference=t.z)}apply(e){return null!==e.x&&(this.x=e.x),e.xReference&&(this.xReference=e.xReference),null!==e.y&&(this.y=e.y),null!==e.z&&(this.z=e.z),e.zReference&&(this.zReference=e.zReference),this}get pitch(){return this.x}set pitch(e){this.x=e}get pitchReference(){return this.xReference}set pitchReference(e){this.xReference=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get yawReference(){return this.zReference}set yawReference(e){this.zReference=e}asOptional(){const e=new s.Orientation3Optional;return e.apply(this),e}}t.Orientation3=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(25)),o=s(n(26)),a=s(n(32)),r=n(14);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;n=void 0===n||isNaN(n)?1:n;var s,l=(0,i.default)(e),u=(0,o.default)(e),c=(0,i.default)(t),m=(0,o.default)(t),d=Math.acos((s=Math.sin((0,a.default)(c))*Math.sin((0,a.default)(l))+Math.cos((0,a.default)(c))*Math.cos((0,a.default)(l))*Math.cos((0,a.default)(u)-(0,a.default)(m)))>1?1:s<-1?-1:s)*r.earthRadius;return Math.round(d/n)*n};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),o=n(24),a=n(6),r=n(21),s=n(35),l=n(84),u=n(0),c=n(54),m=n(101),d=n(13),h=n(124),p=n(8),f=n(125),g=n(49),y=n(69),C=n(18),v=n(2),S=n(70);t.Drone=class extends a.Identifiable{constructor(){super(...arguments),this.type=u.TypeName.Drone,this.model=null,this.serialNumber=null,this.takeoffCoordinate=new o.GeoCoordinate,this.takeoffAltitude=null,this.spatial=new r.GeoSpatial,this.obstacleDistance=null,this.cameras={},this.gimbals={},this.statelessCommands=[],this.statefulCommands=[],this.commandExecutionStates={}}applyJSON(e){super.applyJSON(e),i.Serialization.validateType(e,this.type),this.model=v.Common.parseString(e.model),this.serialNumber=v.Common.parseString(e.serialNumber),this.takeoffCoordinate.applyJSON(e.takeoffCoordinate),this.spatial.applyJSON(e.spatial),this.takeoffAltitude=i.Serialization.deserialize(e.takeoffAltitude,C.Altitude),this.obstacleDistance=v.Common.parseFloat(e.obstacleDistance,null),this.cameras={};for(let t of Object.keys(e.cameras)){const n=new m.Camera(parseInt(t));n.applyJSON(e.cameras[t]),this.cameras[t]=n}this.gimbals={};for(let t of Object.keys(e.gimbals)){const n=new c.Gimbal(parseInt(t));n.applyJSON(e.gimbals[t]),this.gimbals[t]=n}if(this.statelessCommands=[],Array.isArray(e.statelessCommands))for(let t of e.statelessCommands)this.statelessCommands.push(i.Serialization.deserialize(t,s.Command,!1));if(this.statefulCommands=[],Array.isArray(e.statefulCommands))for(let t of e.statefulCommands)this.statefulCommands.push(i.Serialization.deserialize(t,s.Command,!1));this.commandExecutionStates={};for(let t of Object.keys(e.commandExecutionStates)){const n=new l.CommandExecutionState(t);n.applyJSON(e.commandExecutionStates[t]),this.commandExecutionStates[t]=n}}referenceSources(e){return new g.OrientationReferenceSources(new f.OrientationXReferenceSources(e.x),new h.OrientationZReferenceSources(this.spatial.velocity.horizontal.direction,this.spatial.orientation.yaw,e.z))}projectSpatial(e){const t=new r.GeoSpatial;t.updated=new d.Datetime(new Date(e.value.getTime()+2*p.Constants.DroneConnectionLatency));const n=t.updated.elapsedTime(this.spatial.updated);return t.coordinate=this.spatial.projectCoordinate(n),t.altitude=this.spatial.projectAltitude(n),t.orientation=this.spatial.projectOrientation(n),t.velocity=this.spatial.velocity,t}projectGimbalOrientation(e,t){const n=new d.Datetime(new Date(t.value.getTime()+2*p.Constants.DroneConnectionLatency)).elapsedTime(this.spatial.updated);return this.gimbal(e).projectOrientation(n)}camera(e=0){return this.cameras[e]||(this.cameras[e]=new m.Camera(e)),this.cameras[e]}gimbal(e=0){return this.gimbals[e]||(this.gimbals[e]=new c.Gimbal(e)),this.gimbals[e]}createCameraFile(e,t,n,o){const a=i.Serialization.clone(this.spatial.orientation),r=this.gimbal(e);return a.x=r.orientation.x,a.xReference=r.orientation.xReference,a.y=r.orientation.y,new S.CameraFile(t,n,o,null,i.Serialization.clone(this.spatial.coordinate),i.Serialization.clone(this.spatial.altitude),a)}addStatelessCommand(e){this.statelessCommands.push(e)}addStatefulCommand(e){this.statefulCommands.push(e),this.commandExecutionStates[e.id]=new l.CommandExecutionState(e.id)}removeStatefulCommand(e){this.statefulCommands=this.statefulCommands.filter(t=>t.id!==e.id),delete this.commandExecutionStates[e.id]}removeAllStatefulCommands(){this.statefulCommands=[],this.commandExecutionStates={}}commandExecutionState(e){return this.commandExecutionStates[e]}updateCommandExecutionState(e,t,n=null,i=null){const o=this.commandExecutionState(e);o&&o.update(t,n,i)}statefulCommandsWhereStatus(e){return this.statefulCommands.filter(t=>{const n=this.commandExecutionState(t.id);return n&&n.status===e})}get takeoffLocation(){return this.takeoffAltitude?new y.GeoLocation(this.takeoffCoordinate,this.takeoffAltitude):null}get groundCoordinateInView(){return this.spatial.groundCoordinate(this.gimbal().orientation.pitch)}groundCoordinatesInView(e){return this.spatial.groundCoordinates(e,this.gimbal().orientation.pitch)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(124),o=n(125);class a{constructor(e=new o.OrientationXReferenceSources,t=new i.OrientationZReferenceSources){this.x=e,this.z=t}static fromZ(e){return new a(new o.OrientationXReferenceSources,new i.OrientationZReferenceSources(e,e,e))}}t.OrientationReferenceSources=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(100),o=n(3);t.ListNode=class extends i.Node{constructor(e,t){super(`${e.id}-${t}`,e)}get subtitle(){return this.children.length>0?o.Format.integer(this.children.length):""}}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return 180*e/Math.PI};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(48),o=n(55),a=n(221),r=n(56),s=n(8),l=n(281);t.Context=class{constructor(e){this.user=new o.User,this.device=new r.Device,this.drone=new i.Drone,this.preview=!1,this.plan=e,this.device.spatial.coordinate=this.plan.takeoffCoordinate,this.drone.takeoffCoordinate=this.plan.takeoffCoordinate,this.drone.spatial.coordinate=this.plan.takeoffCoordinate}get spatialSources(){return new a.GeoSpatialSources(this.plan.coordinate.toGeoSpatial(),this.drone.spatial,this.device.spatial)}referencedAltitude(e,t=null,n=s.Constants.ComponentElevationTolerance){return new l.ReferencedAltitude(e,this.drone.takeoffLocation||this.plan.elevation(this.plan.takeoffCoordinate,n),t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(220),o=n(0),a=n(36),r=n(46),s=n(13),l=n(16),u=n(1),c=n(2);t.Gimbal=class extends i.Payload{constructor(){super(...arguments),this.type=o.TypeName.Gimbal,this.updated=new s.Datetime,this.settings={mode:o.GimbalMode.YawFollow},this.orientation=new r.Orientation3,this.velocity=new a.Velocity3}applyJSON(e){super.applyJSON(e),u.Serialization.validateType(e,this.type),this.settings.mode=c.Common.parseString(e.settings.mode,this.settings.mode),this.updated.applyJSON(e.updated),this.orientation.applyJSON(e.orientation),this.velocity.applyJSON(e.velocity)}projectOrientation(e){return new r.Orientation3(this.orientation.x+l.Kinematic.d1(this.velocity.x,e),this.orientation.xReference,this.orientation.y+l.Kinematic.d1(this.velocity.y,e),this.orientation.z+l.Kinematic.d1(this.velocity.z,e),this.orientation.zReference)}static pitch(e,t){return 0===t?0:t<0?Math.PI/2-Math.atan(e/-t):Math.atan(e/t)-Math.PI/2}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0),a=n(1);t.User=class extends i.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.User}applyJSON(e){super.applyJSON(e),a.Serialization.validateType(e,this.type)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(21),a=n(0),r=n(1),s=n(2);t.Device=class extends i.Identifiable{constructor(){super(...arguments),this.type=a.TypeName.Device,this.spatial=new o.GeoSpatial,this.os=null}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.spatial.applyJSON(e.spatial),this.os=s.Common.parseString(e.os,null)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0),a=n(17),r=n(128),s=n(3),l=n(58),u=n(1),c=n(50),m=n(4);class d extends i.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.PointOfInterest,this.referencedOffset=new r.GeoReferencedOffset,this.descriptors=new a.Descriptors}applyJSON(e){super.applyJSON(e),u.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.referencedOffset.applyJSON(e.referencedOffset)}node(e,t){return new h(e,t,this)}referenceSpatial(e,t){return this.referencedOffset.value(e,t)}referenceCoordinate(e,t){return this.referenceSpatial(e,t).coordinate}title(e){return s.Format.icaoWords(e).join(" ")}abbreviation(e){return s.Format.icaoLetters(e)}}t.PointOfInterest=d;t.PointsOfInterestNode=class extends c.ListNode{constructor(e,t){super(e,"points-of-interest"),this.listAccessor=t,this.list.forEach((e,t)=>{this.children.push(new h(this,t,e))}),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0,this.appends.push({title:`${m.Strings.Common.new} ${m.Strings.PointOfInterest.name}`,tooltip:null,execute:e=>{e instanceof d&&this.list.push(e)}})}get title(){return m.Strings.PointOfInterest.multiple}get list(){return this.listAccessor()}};class h extends l.ListElementNode{constructor(e,t,n){super(n.id,e,t,u.Serialization.typeDisplay(n),!0),this.pointOfInterest=n}get subtitle(){return this.pointOfInterest.descriptors.description}}t.PointOfInterestNode=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(100),o=n(3),a=n(4);t.ListElementNode=class extends i.Node{constructor(e,t,n,i,o){super(e,t),this.index=n,this.typeName=i,this.icaoIndex=o}get title(){return`${this.typeName} ${this.icaoIndex?a.Strings.Common.delimeter+o.Format.icaoWords(this.index):o.Format.integer(this.index+1)}`}get abbreviation(){return this.icaoIndex?o.Format.icaoLetters(this.index):o.Format.integer(this.index+1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(131),a=n(2),r=n(3),s=n(1);t.MotionLimits6Optional=class{constructor(e=null,t=null){this.type=i.TypeName.MotionLimits6Optional,this.toString=((e={position:{x:{velocity:r.Format.velocityHorizontal,acceleration:r.Format.accelerationHorizontal},y:{velocity:r.Format.velocityHorizontal,acceleration:r.Format.accelerationHorizontal},z:{velocity:r.Format.velocityVertical,acceleration:r.Format.accelerationVertical}},orientation:{x:{velocity:r.Format.velocityRotational,acceleration:r.Format.accelerationRotational},y:{velocity:r.Format.velocityRotational,acceleration:r.Format.accelerationRotational},z:{velocity:r.Format.velocityRotational,acceleration:r.Format.accelerationRotational}}})=>a.Common.joinNotEmpty([this.position?this.position.toString(e.position):"",this.orientation?this.orientation.toString(e.orientation):""])),this.position=e,this.orientation=t}applyJSON(e){if(!e)return this.position=null,void(this.orientation=null);s.Serialization.validateType(e,this.type),this.position=s.Serialization.deserialize(e.position,o.MotionLimits3Optional),this.orientation=s.Serialization.deserialize(e.orientation,o.MotionLimits3Optional)}get horizontal(){return this.position?this.position.forwardBackward:null}set horizontal(e){this.position||(this.position=new o.MotionLimits3Optional(e)),this.position.forwardBackward=e}get vertical(){return this.position?this.position.upDown:null}set vertical(e){this.position||(this.position=new o.MotionLimits3Optional),this.position.upDown=e}get rotational(){return this.orientation?this.orientation.yaw:null}set rotational(e){this.orientation||(this.orientation=new o.MotionLimits3Optional),this.orientation.yaw=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e,t=null){this._previous=null,this._next=null,this.current=e,this.previous=t}insertBefore(e){const t=new i(e);return t._next=this,this._previous&&(t._previous=this._previous,this._previous._next=t),this._previous=t,t}insertAfter(e){const t=new i(e);return t._previous=this,this._next&&(t._next=this._next,this._next._previous=t),this._next=t,t}get list(){const e=[];let t=this.first;for(;t;)e.push(t),t=t.next;return e}get valueList(){return this.list.map(e=>e.current)}get previous(){return this._previous}set previous(e){this._previous=e,e&&(e._next=this)}get next(){return this._next}set next(e){this._next=e,e&&(e._previous=this)}get first(){let e=this;for(;e._previous;)e=e._previous;return e}get last(){let e=this;for(;e._next;)e=e._next;return e}}t.LinkedValue=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(1);t.DistanceTolerance=class{constructor(e=0,t=0){this.type=i.TypeName.DistanceTolerance,this.horizontal=e,this.vertical=t}valid(e,t){return this.validHorizontal(e)&&this.validVertical(t)}validHorizontal(e){return e<=this.horizontal}validVertical(e){return Math.abs(e)<=this.vertical}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.horizontal=o.Common.parseFloat(e.horizontal,this.horizontal),this.vertical=o.Common.parseFloat(e.vertical,this.vertical)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),a=n(2),r=n(22),s=n(4),l=n(9),u=n(10),c=n(3);t.ListComponent=class extends r.SubComponent{constructor(){super(...arguments),this.type=i.TypeName.ListComponent,this.childComponents=[],this.toString=(()=>a.Common.joinNotEmpty(this.childComponents.map(e=>e.toString()))||this.title)}applyJSON(e){if(super.applyJSON(e),o.Serialization.validateType(e,this.type),this.childComponents=[],Array.isArray(e.childComponents))for(let t of e.childComponents)this.childComponents.push(o.Serialization.deserialize(t,r.SubComponent,!1))}get subtitle(){return this.childComponents.length>0?a.Common.joinNotEmpty(this.childComponents.filter((e,t)=>t<5).map(e=>e.title),", "):super.subtitle}verification(e){const t=this.childComponents.map(t=>t.verification(e)).filter(e=>null!=e);if(t.length>0){const e=o.Serialization.clone(this,!0);return e.childComponents=t,e}return null}get exclusiveReadonly(){for(let e of this.childComponents)if(e.exclusiveReadonly)return!0;return!1}get exclusiveExecution(){if(super.exclusiveExecution)return!0;for(let e of this.childComponents)if(e.exclusiveExecution)return!0;return!1}get repositionIfIncluded(){for(let e of this.childComponents)if(e.repositionIfIncluded)return!0;return!1}referenceOffsetsHandleCoordinate(e){const t=[];if(this.childComponents.forEach(n=>{t.push(...n.referenceOffsets.map(t=>n.referenceCoordinate(e,t)))}),t.length<=1)return null;const n=[new l.Vector2];for(let e=1;e<t.length;e++)n.push(t[0].offset(t[e]));return t[0].geoCoordinate(l.Vector2.center(n))}node(e=null){const t=super.node(e);t.emptyChildrenNavigationEnabled=!0,this.childComponents.forEach(e=>{t.addChild(e).remove=(()=>{this.childComponents=a.Common.remove(this.childComponents,e)})});for(const e of t.children)if(null!==e.ordinal){t.ordinal=t.nextOrdinal();break}return t.appends.push({title:`${s.Strings.Common.new} ${s.Strings.Component.name}`,tooltip:null,execute:e=>{e instanceof r.SubComponent&&this.childComponents.push(e)}}),t}estimate(e,t){const n=super.estimate(e,t);return this.childComponents.forEach(i=>{const a=i.estimate(e,t);n.children.push(a);const r=n.lastDroneSpatial;r?t=r:(t=o.Serialization.clone(t)).updated.increment(a.time)}),n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;let n=0,o=0,a=[];for(let t of this.childComponents){const r=t.execute(e);if(r.status===i.ComponentExecutionStatus.Pending){if(t.exclusiveExecution)break}else if(r.status===i.ComponentExecutionStatus.Executing){if(a.push(n),t.exclusiveExecution)break}else if(r.status===i.ComponentExecutionStatus.Succeeded)o++;else if(r.status===i.ComponentExecutionStatus.Failed&&(o++,t.required))return this.failed(e,r.error);n++}return t.progress=Math.min(1,(o+1)/this.childComponents.length),o===this.childComponents.length?this.succeeded(e):(a.length>0&&t.messages.push(new u.Message(1===a.length?s.Strings.formatString(s.Strings.ListComponent.messages.running.title.single,c.Format.integer(a[0]+1),c.Format.integer(this.childComponents.length)):s.Strings.formatString(s.Strings.ListComponent.messages.running.title.multiple,c.Format.integer(this.childComponents.length-a.length),c.Format.integer(this.childComponents.length)))),t)}}},function(e,t){var n,i,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(e){i=r}}();var l,u=[],c=!1,m=-1;function d(){c&&l&&(c=!1,l.length?u=l.concat(u):m=-1,u.length&&h())}function h(){if(!c){var e=s(d);c=!0;for(var t=u.length;t;){for(l=u,u=[];++m<t;)l&&l[m].run();m=-1,t=u.length}l=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=f,o.addListener=f,o.once=f,o.off=f,o.removeListener=f,o.removeAllListeners=f,o.emit=f,o.prependListener=f,o.prependOnceListener=f,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(109).Buffer)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(35),o=n(2);t.PayloadCommand=class extends i.Command{constructor(){super(...arguments),this.channel=0}applyJSON(e){super.applyJSON(e),this.channel=o.Common.parseInt(e.channel,this.channel)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(65);t.GimbalCommand=class extends i.PayloadCommand{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(66),o=n(0),a=n(20),r=n(1);t.OrientationGimbalCommand=class extends i.GimbalCommand{constructor(){super(...arguments),this.type=o.TypeName.OrientationGimbalCommand,this.orientation=new a.Orientation3Optional}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.orientation.applyJSON(e.orientation)}get subtitle(){return this.orientation.toString()}get verifiable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(21),a=n(6),r=n(1);t.SourcedGeoSpatial=class extends a.Identifiable{constructor(){super(...arguments),this.type=i.TypeName.SourcedGeoSpatial,this.source=i.GeoSpatialSource.Plan,this.input=null}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.source=e.source,this.source===i.GeoSpatialSource.Input?this.input=r.Serialization.deserialize(e.input,o.GeoSpatial,!1):this.input=null}value(e){return e.value(this.source,this.input)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(18),o=n(24),a=n(0),r=n(21),s=n(1);t.GeoLocation=class{constructor(e=new o.GeoCoordinate,t=new i.Altitude){this.type=a.TypeName.GeoLocation,this.altitude=new i.Altitude,this.coordinate=e,this.altitude=t}applyJSON(e){s.Serialization.validateJson(e),s.Serialization.validateType(e,this.type),this.coordinate.applyJSON(e.coordinate),this.altitude.applyJSON(e.altitude)}toGeoSpatial(){const e=new r.GeoSpatial;return e.coordinate=this.coordinate,e.altitude=this.altitude,e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(13),a=n(2),r=n(6),s=n(24),l=n(18),u=n(46),c=n(1);t.CameraFile=class extends r.Identifiable{constructor(e="",t=0,n=new o.Datetime,a=null,r=null,s=null,l=null){super(),this.type=i.TypeName.CameraFile,this.name=e,this.size=t,this.created=n,this.metadata=a,this.coordinate=r,this.altitude=s,this.orientation=l}applyJSON(e){c.Serialization.validateJson(e),c.Serialization.validateType(e,this.type),this.name=a.Common.parseString(e.name,this.name),this.size=a.Common.parseInt(e.size,this.size),this.created.applyJSON(e.created),this.metadata=a.Common.parseString(e.metadata),this.coordinate=c.Serialization.deserialize(e.coordinate,s.GeoCoordinate),this.altitude=c.Serialization.deserialize(e.altitude,l.Altitude),this.orientation=c.Serialization.deserialize(e.orientation,u.Orientation3)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(22),a=n(4),r=n(1),s=n(27);t.AchievableDroneMotionComponent=class extends s.DroneMotionComponent{constructor(){super(...arguments),this.immediateComponent=null,this.achievedComponent=null}applyJSON(e){super.applyJSON(e),this.immediateComponent=r.Serialization.deserialize(e.immediateComponent,o.SubComponent),this.achievedComponent=r.Serialization.deserialize(e.achievedComponent,o.SubComponent)}verification(e){const t=r.Serialization.clone(this,!0);return t.pointsOfInterest=[],t.immediateComponent=this.immediateComponent?this.immediateComponent.verification(e):null,t.achievedComponent=this.achievedComponent?this.achievedComponent.verification(e):null,t}node(e=null){const t=super.node(e);if(t.emptyChildrenNavigationEnabled=!0,this.immediateComponent){const e=t.addChild(this.immediateComponent);e.label=a.Strings.AchievableDroneMotionComponent.values.immediateComponent,e.remove=(()=>{this.immediateComponent=null})}else t.inserts.push({title:`${a.Strings.Common.set} ${a.Strings.AchievableDroneMotionComponent.values.immediateComponent} ${a.Strings.Component.name}`,tooltip:a.Strings.AchievableDroneMotionComponent.values.immediateComponentTooltip,execute:e=>{e instanceof o.SubComponent&&(this.immediateComponent=e)}});if(this.achievedComponent){const e=t.addChild(this.achievedComponent);e.label=a.Strings.AchievableDroneMotionComponent.values.achievedComponent,e.remove=(()=>{this.achievedComponent=null})}else t.appends.push({title:`${a.Strings.Common.set} ${a.Strings.AchievableDroneMotionComponent.values.achievedComponent} ${a.Strings.Component.name}`,tooltip:a.Strings.AchievableDroneMotionComponent.values.achievedComponentTooltip,execute:e=>{e instanceof o.SubComponent&&(this.achievedComponent=e)}});return t}achieved(e){return!1}estimate(e,t){const n=super.estimate(e,t);if(this.immediateComponent){const i=this.immediateComponent.estimate(e,t);i.timeConcurrent=!0,n.children.push(i)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;let n=!0;if(this.immediateComponent){const t=this.immediateComponent.execute(e);switch(t.status){case i.ComponentExecutionStatus.Pending:case i.ComponentExecutionStatus.Executing:n=!1;break;case i.ComponentExecutionStatus.Failed:if(this.immediateComponent.required)return this.failed(e,t.error);break;case i.ComponentExecutionStatus.Succeeded:}}if(n&&this.achieved(e)){if(!this.achievedComponent)return this.succeeded(e);if(n){const t=this.achievedComponent.execute(e);switch(t.status){case i.ComponentExecutionStatus.Pending:case i.ComponentExecutionStatus.Executing:break;case i.ComponentExecutionStatus.Failed:if(this.achievedComponent.required)return this.failed(e,t.error);break;case i.ComponentExecutionStatus.Succeeded:return this.succeeded(e)}}}return t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(28),o=n(0),a=n(2),r=n(1);t.MotionLimitsOptional=class{constructor(e=null,t=null){this.type=o.TypeName.MotionLimitsOptional,this.toString=(e=>a.Common.joinNotEmpty([this.velocity?this.velocity.toString(e.velocity):"",this.acceleration?this.acceleration.toString(e.acceleration):""])),this.velocity=e,this.acceleration=t}applyJSON(e){if(!e)return this.velocity=null,void(this.acceleration=null);r.Serialization.validateType(e,this.type),this.velocity=r.Serialization.deserialize(e.velocity,i.Limits),this.acceleration=r.Serialization.deserialize(e.acceleration,i.Limits)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(9),o=n(0),a=n(6),r=n(4),s=n(3),l=n(58),u=n(1);t.ZoneBoundaryPoint=class extends a.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.ZoneBoundaryPoint,this.offset=new i.Vector2}applyJSON(e){super.applyJSON(e),u.Serialization.validateType(e,this.type),this.offset.applyJSON(e.offset)}title(e){return s.Format.icaoWords(e).join(" ")}abbreviation(e){return s.Format.icaoLetters(e)}};t.ZoneBoundaryPointNode=class extends l.ListElementNode{constructor(e,t,n,i){super(i.id,e,n,r.Strings.ZoneBoundaryPoint.name,!0),this.zone=t,this.boundaryPoint=i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(15),o=n(2),a=n(9),r=n(41),s=n(12);t.Path=class{constructor(e){let t=0,n=-1,i=0,o=null;this.segments=e.map(e=>{n++;let a=0;return e.map((e,r)=>{if(o){const t=e.distance(o);if(t<.001)return null;i+=t,r>0&&(a+=t)}return o=e,new l(e,t++,i,n,r,a)}).filter(e=>e)}),this.distance=i}get points(){const e=[];return this.segments.forEach(t=>{e.push(...t)}),e}get coordinates(){return this.points.map(e=>e.coordinate)}get segmentEndPoints(){return this.segments.map(e=>o.Common.last(e))}get segmentCenterCoordinates(){return this.segments.map(e=>{if(e.length>1){const t=o.Common.last(e).segmentDistance/2;for(const n of e)if(n.segmentDistance>=t){if(n.segmentIndex>0)return n.coordinate.geoCoordinate(new a.Vector2(n.coordinate.bearing(e[n.segmentIndex-1].coordinate),n.segmentDistance-t));break}}return e[0].coordinate})}nextCoordinate(e=null,t=5){return null===e&&(e=this.distance),this.sampleForDistance(e+t,!1).coordinate}nearestDistance(e){const t=this.points;if(t.length<2)return 0;const n=t.map(n=>{if(0===n.index)return{point:n,intersect:n.coordinate,distance:e.distance(n.coordinate)};const o=t[n.index-1],a=o.coordinate.geoCoordinate(s.Geometry.lineClosestPoint(new r.Line2(new i.Point2,o.coordinate.offset(n.coordinate).toPoint2()),o.coordinate.offset(e).toPoint2()).toVector2());return{point:o,intersect:a,distance:e.distance(a)}}).sort((e,t)=>e.distance-t.distance)[0];return n.point.distance+n.intersect.distance(n.point.coordinate)}sampleForDistance(e,t=!0){return this.samplesForDistances([e],t)[0]}samplesForMaxDistance(e,t=!0){const n=Math.ceil(this.distance/e),i=this.distance/n,o=[];for(let e=0;e<this.distance;e+=i)o.push(e);return o.push(this.distance),this.samplesForDistances(o,t)}samplesForDistances(e,t=!0){if(0===e.length)return[];const n=this.points;if(0===n.length)return[];if(1===n.length)return e.map(e=>new u(n[0].coordinate,0,0));const i=e.map((e,t)=>({index:t,distance:e,coordinate:n[0].coordinate,direction:n[0].coordinate.bearing(n[1].coordinate)})).sort((e,t)=>e.distance-t.distance);let o=0;for(const e of n){for(;o<i.length;){const r=i[o],s=e.index===n.length-1;if(!(e.distance>=r.distance||s))break;s&&t&&r.distance>e.distance?(e.index>0?r.direction=n[e.index-1].coordinate.bearing(e.coordinate):e.index+1<n.length&&(r.direction=e.coordinate.bearing(n[e.index+1].coordinate)),r.coordinate=e.coordinate):e.index>0?(r.direction=n[e.index-1].coordinate.bearing(e.coordinate),r.coordinate=e.coordinate.geoCoordinate(new a.Vector2(r.direction+Math.PI,e.distance-r.distance))):(r.direction=e.coordinate.bearing(n[e.index+1].coordinate),r.coordinate=e.coordinate),o++}if(o===i.length)break}return i.sort((e,t)=>e.index-t.index).map(e=>new u(e.coordinate,e.direction,e.distance))}};class l{constructor(e,t,n,i,o,a){this.coordinate=e,this.index=t,this.distance=n,this.segment=i,this.segmentIndex=o,this.segmentDistance=a}}t.PathPoint=l;class u{constructor(e,t,n){this.coordinate=e,this.direction=t,this.distance=n}}t.PathSample=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(103),o=n(1),a=n(0),r=n(4),s=n(27),l=n(105),u=n(67),c=n(39),m=n(10),d=n(62);t.ApproachableComponent=class extends s.DroneMotionComponent{constructor(){super(...arguments),this.approachComponent=new i.DestinationComponent}applyJSON(e){super.applyJSON(e),this.approachComponent=o.Serialization.deserialize(e.approachComponent,i.DestinationComponent,!1)}get subtitle(){return this.approachComponent.subtitle}verification(e){const t=this.approachComponent.verification(e);if(!t)return null;const n=o.Serialization.clone(this,!0);return n.pointsOfInterest=[],n.approachComponent=t,n}cameraCaptureConfigurationsEnabled(e=null){return!e||e.execution.getComponentState(this.approachComponent).status===a.ComponentExecutionStatus.Succeeded}approachCoordinate(e){return this.approachComponent.destinationCoordinate(e)}alignment(e){return null}node(e=null){const t=super.node(e);t.emptyChildrenNavigationEnabled=!0,t.ordinal=t.nextOrdinal();const n=t.addChild(this.approachComponent,!0);return n.ordinal=t.ordinal,n.label=r.Strings.ApproachableComponent.values.approachComponent,t}estimate(e,t){const n=super.estimate(e,t);n.children.push(this.approachComponent.estimate(e,t));let i=0;const a=o.Serialization.clone(n.lastDroneSpatial||t),r=this.alignment(e);if(r){if(r.droneOrientation){const t=new l.HeadingComponent;t.heading=r.droneOrientation.yaw||0;const n=t.estimate(e,a);a.orientation.apply(r.droneOrientation),i=Math.max(i,n.totalTime)}r.gimbalOrientations&&(i=Math.max(i,(new u.OrientationGimbalCommand).estimatedTime))}return i&&(n.time+=i,a.updated.increment(i),n.droneSpatials.push(a)),n}aligned(e){const t=e.execution.getComponentState(this).cachedData(a.TypeName.ApproachableComponent);if(t&&t.alignmentComponent)switch(e.execution.getComponentState(t.alignmentComponent).status){case a.ComponentExecutionStatus.Pending:case a.ComponentExecutionStatus.Executing:return!1}return!0}execute(e){const t=super.execute(e);if(t.status!==a.ComponentExecutionStatus.Executing)return t;const n=this.approachComponent.execute(e);switch(n.status){case a.ComponentExecutionStatus.Pending:case a.ComponentExecutionStatus.Executing:return t.cachedData(a.TypeName.ApproachableComponent,()=>{let t=null,n=null;const i=this.alignment(e);if(i&&(i.droneOrientation&&null!==i.droneOrientation.yaw&&((n=new l.HeadingComponent).heading=i.droneOrientation.yaw,t=n),i.gimbalOrientations)){const e=new d.ListComponent;if(Object.keys(i.gimbalOrientations).forEach(t=>{if(i.gimbalOrientations){const n=new u.OrientationGimbalCommand;n.channel=parseInt(t),n.orientation=i.gimbalOrientations[t],e.childComponents.push(new c.CommandComponent(n))}}),e.childComponents.length>0){const i=1===e.childComponents.length?e.childComponents[0]:e;n?n.immediateComponent=i:t=i}}return new h(t)}),t;case a.ComponentExecutionStatus.Failed:return this.failed(e,n.error);case a.ComponentExecutionStatus.Succeeded:const i=t.cachedData(a.TypeName.ApproachableComponent);i&&i.alignmentComponent&&i.alignmentComponent.execute(e).status===a.ComponentExecutionStatus.Executing&&t.messages.push(new m.Message(r.Strings.ApproachableComponent.messages.aligning.title))}return t}};class h{constructor(e=null){this.alignmentComponent=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(50),o=n(9),a=n(0),r=n(6),s=n(4),l=n(3),u=n(282),c=n(1);t.FacadeComponentBoundaryPoint=class extends r.Identifiable{constructor(){super(...arguments),this.type=a.TypeName.FacadeComponentBoundaryPoint,this.offset=new o.Vector2}applyJSON(e){super.applyJSON(e),c.Serialization.validateType(e,this.type),this.offset.applyJSON(e.offset)}node(e,t){return new m(e,t,this)}title(e){return l.Format.icaoWords(e).join(" ")}abbreviation(e){return l.Format.icaoLetters(e)}};t.FacadeComponentBoundaryPointsNode=class extends i.ListNode{constructor(e){super(e,"boundaryPoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return s.Strings.FacadeComponent.values.boundaryPoints}};class m extends u.FacadeComponentElementNode{constructor(e,t,n){super(n.id,e,t,s.Strings.FacadeComponentBoundaryPoint.name,!0),this.boundaryPoint=n}}t.FacadeComponentBoundaryPointNode=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(50),o=n(9),a=n(0),r=n(6),s=n(4),l=n(3),u=n(283),c=n(1);t.MapComponentBoundaryPoint=class extends r.Identifiable{constructor(){super(...arguments),this.type=a.TypeName.MapComponentBoundaryPoint,this.offset=new o.Vector2}applyJSON(e){super.applyJSON(e),c.Serialization.validateType(e,this.type),this.offset.applyJSON(e.offset)}node(e,t){return new m(e,t,this)}title(e){return l.Format.icaoWords(e).join(" ")}abbreviation(e){return l.Format.icaoLetters(e)}};t.MapComponentBoundaryPointsNode=class extends i.ListNode{constructor(e){super(e,"boundaryPoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return s.Strings.MapComponent.values.boundaryPoints}};class m extends u.MapComponentElementNode{constructor(e,t,n){super(n.id,e,t,s.Strings.MapComponentBoundaryPoint.name,!0),this.boundaryPoint=n}}t.MapComponentBoundaryPointNode=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(50),o=n(9),a=n(0),r=n(2),s=n(17),l=n(6),u=n(4),c=n(3),m=n(134),d=n(1);t.PathComponentWaypoint=class extends l.Identifiable{constructor(){super(...arguments),this.type=a.TypeName.PathComponentWaypoint,this.offset=new o.Vector2,this.cornerRadius=null,this.descriptors=new s.Descriptors}applyJSON(e){super.applyJSON(e),d.Serialization.validateType(e,this.type),this.cornerRadius=r.Common.parseFloat(e.cornerRadius,null),this.descriptors.applyJSON(e.descriptors),this.offset.applyJSON(e.offset)}node(e,t){return new h(e,t,this)}title(e){return c.Format.icaoWords(e).join(" ")}abbreviation(e){return c.Format.icaoLetters(e)}};t.PathComponentWaypointsNode=class extends i.ListNode{constructor(e){super(e,"waypoints"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return u.Strings.PathComponent.values.waypoints}};class h extends m.PathComponentElementNode{constructor(e,t,n){super(n.id,e,t,u.Strings.PathComponentWaypoint.name,!0),this.waypoint=n}get subtitle(){return this.waypoint.descriptors.description}}t.PathComponentWaypointNode=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(6),r=n(18),s=n(59),l=n(20),u=n(1),c=n(22),m=n(4),d=n(3),h=n(50),p=n(134),f=n(40);t.PathComponentMarker=class extends a.Identifiable{constructor(e=0){super(),this.type=i.TypeName.PathComponentMarker,this.positioning=i.PathMarkerPositioning.Coordinate,this.interpolation=new f.Interpolation,this.component=null,this.altitude=null,this.pointOfInterestID=null,this.droneMotionLimits=null,this.droneOrientation=null,this.gimbalOrientations=null,this.toString=((e={horizontal:d.Format.velocityHorizontal,vertical:d.Format.velocityVertical,rotational:d.Format.velocityRotational})=>{const t=[this.altitude?this.altitude.toString():"",this.pointOfInterestID?m.Strings.PathComponentMarker.values.pointOfInterestID:"",this.droneMotionLimits&&this.droneMotionLimits.horizontal&&this.droneMotionLimits.horizontal.velocity?this.droneMotionLimits.horizontal.velocity.toString(e.horizontal,{min:!1,max:!0}):"",this.droneMotionLimits&&this.droneMotionLimits.vertical&&this.droneMotionLimits.vertical.velocity?this.droneMotionLimits.vertical.velocity.toString(e.vertical):"",this.droneMotionLimits&&this.droneMotionLimits.rotational&&this.droneMotionLimits.rotational.velocity?this.droneMotionLimits.rotational.velocity.toString(e.rotational):"",this.droneOrientation?this.droneOrientation.toString():""];if(this.gimbalOrientations)for(const e of Object.keys(this.gimbalOrientations)){const n=this.gimbalOrientations[e].toString();n&&("0"!==e||Object.keys(this.gimbalOrientations).length>1?t.push(...[`${m.Strings.Gimbal.name} ${e}`,n]):t.push(...[m.Strings.Gimbal.name,n]))}return this.component&&t.push(this.component.toString()),o.Common.joinNotEmpty(t)}),this.distance=e}applyJSON(e){if(super.applyJSON(e),u.Serialization.validateType(e,this.type),this.distance=o.Common.parseFloat(e.distance,this.distance),this.positioning=o.Common.parseString(e.positioning,this.positioning),this.interpolation.applyJSON(e.interpolation),this.component=u.Serialization.deserialize(e.component,c.SubComponent),this.altitude=u.Serialization.deserialize(e.altitude,r.Altitude),this.pointOfInterestID=o.Common.parseString(e.pointOfInterestID,this.pointOfInterestID),this.droneMotionLimits=u.Serialization.deserialize(e.droneMotionLimits,s.MotionLimits6Optional),this.droneOrientation=u.Serialization.deserialize(e.droneOrientation,l.Orientation3Optional),e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new l.Orientation3Optional;n.applyJSON(e.gimbalOrientations[t]),this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null}node(e,t){const n=new g(e,t,this);if(this.component){const e=this.component.node(n);e.remove=(()=>{this.component=null}),n.children.push(e)}return n}get interpolationPossible(){return Boolean(this.altitude||this.pointOfInterestID||this.droneMotionLimits||this.droneOrientation||this.gimbalOrientations)}get interpolationPreferred(){return this.interpolationPossible&&null===this.pointOfInterestID}};t.PathComponentMarkersNode=class extends h.ListNode{constructor(e){super(e,"markers"),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0}get title(){return m.Strings.PathComponent.values.markers}};class g extends p.PathComponentElementNode{constructor(e,t,n){super(n.id,e,t,m.Strings.PathComponentMarker.name,!1),this.marker=n,n.component||this.appends.push({title:`${m.Strings.Common.set} ${m.Strings.Component.name}`,tooltip:null,execute:e=>{e instanceof c.SubComponent&&(this.marker.component=e)}})}get subtitle(){return this.marker.toString()}}t.PathComponentMarkerNode=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(104),o=n(6),a=n(0),r=n(17),s=n(59),l=n(61),u=n(1),c=n(4),m=n(50),d=n(73),h=n(3),p=n(8);class f extends o.Identifiable{constructor(){super(...arguments),this.type=a.TypeName.PlanRestrictionZone,this.descriptors=new r.Descriptors,this.zone=new i.Zone,this.minApplicableProximity=new l.DistanceTolerance(p.Constants.PlanRestrictionZoneMinApplicableProximityHorizontal,p.Constants.PlanRestrictionZoneMinApplicableProximityVertical),this.droneMotionLimits=new s.MotionLimits6Optional,this.droneMotionErrorTolerance=null}applyJSON(e){super.applyJSON(e),u.Serialization.validateType(e,this.type),this.droneMotionErrorTolerance=u.Serialization.deserialize(e.droneMotionErrorTolerance,l.DistanceTolerance),this.descriptors.applyJSON(e.descriptors),this.zone.applyJSON(e.zone),this.minApplicableProximity.applyJSON(e.minApplicableProximity),this.droneMotionLimits.applyJSON(e.droneMotionLimits)}}t.PlanRestrictionZone=f;t.PlanRestrictionZonesNode=class extends m.ListNode{constructor(e,t){super(e,"plan-restriction-zones"),this.listAccessor=t,this.list.forEach((e,t)=>{this.children.push(new g(this,t,e))}),this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!0,this.appends.push({title:`${c.Strings.Common.new} ${c.Strings.PlanRestrictionZone.name}`,tooltip:null,execute:e=>{e instanceof f&&this.list.push(e)}})}get title(){return c.Strings.PlanRestrictionZone.multiple}get list(){return this.listAccessor()}};class g extends m.ListNode{constructor(e,t,n){super(e,""),this.id=n.id,this.planRestrictionZone=n,this.index=t,this.emptyChildrenNavigationEnabled=!0,this.propertiesEditorDisabled=!1,n.zone.boundaryPoints.forEach((e,t)=>{this.children.push(new d.ZoneBoundaryPointNode(this,n.zone,t,e))})}get title(){return`${u.Serialization.typeDisplay(this.planRestrictionZone)} ${h.Format.integer(this.index+1)}`}get subtitle(){return this.planRestrictionZone.descriptors.description}}t.PlanRestrictionZoneNode=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(106),a=n(6),r=n(155),s=n(17),l=n(24),u=n(1),c=n(3),m=n(4),d=n(53),h=n(2),p=n(22);t.Func=class extends a.Identifiable{constructor(){super(...arguments),this.type=i.TypeName.Func,this.coordinate=new l.GeoCoordinate,this.descriptors=new s.Descriptors,this.components=[],this.inputs=[],this.dynamicInputs=null,this.executable=""}applyJSON(e){if(super.applyJSON(e),u.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.coordinate.applyJSON(e.coordinate),this.components=[],Array.isArray(e.components))for(let t of e.components)this.components.push(u.Serialization.deserialize(t,p.SubComponent,!1));if(this.inputs=[],Array.isArray(e.inputs))for(let t of e.inputs)this.inputs.push(u.Serialization.deserialize(t,f,!1));this.dynamicInputs=h.Common.parseString(e.dynamicInputs,null),this.executable=h.Common.parseString(e.executable,this.executable)}get title(){return this.descriptors.name||u.Serialization.typeDisplay(this)}get subtitle(){return c.Format.integer(this.inputs.length,{singular:m.Strings.FuncInput.name,plural:m.Strings.FuncInput.multiple}).toString()}evaluate(e=null,t=!1,n,i=null,a=null,r=new o.PlanComponent){const s=new d.Context(r);s.drone=u.Serialization.clone(i||s.drone),i||(s.drone.takeoffCoordinate=u.Serialization.clone(this.coordinate),s.drone.spatial.coordinate=u.Serialization.clone(this.coordinate)),s.device=u.Serialization.clone(a||s.device),a||(s.device.spatial.coordinate=u.Serialization.clone(this.coordinate)),r.coordinate=u.Serialization.clone(s.drone.takeoffCoordinate),r.descriptors.name=this.descriptors.name,r.descriptors.tags=this.descriptors.tags;const l={};this.components.forEach((e,t)=>{const n=u.Serialization.clone(e);n.descriptors.name&&(l[n.descriptors.name]=n),l[t]=n});const c={};this.inputs.forEach((e,t)=>{const n=u.Serialization.clone(e.variable);c[t]=n.value,n.descriptors.name&&(c[n.descriptors.name]=n.value)});const m=["syntaxValidation","plan","context","components","inputs","variables"];e&&m.push("Dronelink"),m.push(n);const h=[t,r,s,l,this.inputs,c];e&&h.push(e);try{return Function(...m)(...h)}catch(e){throw"string"==typeof e?new Error(e):e}}validateSyntax(e=null,t=null){const n=u.Serialization.clone(this);if(n.dynamicInputs)try{for(;n.addNextDynamicInput(e,t,null,!0)&&n.inputs.length<100;);}catch(e){throw h.Common.joinNotEmpty([m.Strings.Func.values.dynamicInputs,e])}n.inputs.forEach(e=>{e.optional||null!==e.variable.value||(e.enumValues&&e.enumValues.length>0?e.variable.value=e.enumValues[0]:e.variable.value=e.variable.defaultValue(t))});try{n.evaluate(e,!0,n.executable)}catch(e){if(!n.dynamicInputs)throw e;throw h.Common.joinNotEmpty([m.Strings.Func.values.executable,e])}}nextDynamicInput(e=null,t=null,n=null,i=!1){if(!this.dynamicInputs)return null;const o=this.evaluate(e,i,this.dynamicInputs,t,n);return o&&o instanceof f?(o.dynamic=!0,o):null}addNextDynamicInput(e=null,t=null,n=null,i=!1){const o=this.nextDynamicInput(e,t,n,i);return o?(this.inputs.push(o),o):null}removeLastDynamicInput(){const e=h.Common.lastSafe(this.inputs);return!(!e||!e.dynamic||(this.inputs.pop(),0))}execute(e=null,t=null,n=null){const i=new o.PlanComponent;return this.evaluate(e,!1,this.executable,t,n,i),i}};class f{constructor(){this.type=i.TypeName.FuncInput,this.descriptors=new s.Descriptors,this.imageUrl=null,this.variable=new r.Variable,this.optional=!1,this.enumValues=null,this.dynamic=!1}applyJSON(e){u.Serialization.validateJson(e),u.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.imageUrl=h.Common.parseString(e.imageUrl),this.variable.applyJSON(e.variable),this.optional=h.Common.parseBoolean(e.optional,this.optional),e.enumValues?this.enumValues=e.enumValues.map(e=>u.Serialization.read(e)||e):this.enumValues=null,this.dynamic=h.Common.parseBoolean(e.dynamic,this.dynamic)}get title(){return this.descriptors.name}get subtitle(){return this.descriptors.description}}t.FuncInput=f},function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,i,o){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var a,r,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,i)});case 4:return t.nextTick(function(){e.call(null,n,i,o)});default:for(a=new Array(s-1),r=0;r<a.length;)a[r++]=arguments[r];return t.nextTick(function(){e.apply(null,a)})}}}:e.exports=t}).call(this,n(63))},function(e,t,n){var i=n(109),o=i.Buffer;function a(e,t){for(var n in e)t[n]=e[n]}function r(e,t,n){return o(e,t,n)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=i:(a(i,t),t.Buffer=r),a(o,r),r.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return o(e,t,n)},r.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=o(e);return void 0!==t?"string"==typeof n?i.fill(t,n):i.fill(t):i.fill(0),i},r.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o(e)},r.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(6),a=n(13),r=n(2),s=n(1);t.CommandExecutionState=class extends o.Identifiable{constructor(e=null){super(e),this.type=i.TypeName.CommandExecutionState,this.status=i.CommandExecutionStatus.Pending,this.started=null,this.finished=null,this.error=null}applyJSON(e){return super.applyJSON(e),s.Serialization.validateType(e,this.type),this.status=r.Common.parseString(e.status,this.status),this.started=s.Serialization.deserialize(e.started,a.Datetime),this.finished=s.Serialization.deserialize(e.finished,a.Datetime),this.error=r.Common.parseString(e.error),!0}update(e,t=null,n=null){switch(e){case i.CommandExecutionStatus.Pending:break;case i.CommandExecutionStatus.Queued:this.status===i.CommandExecutionStatus.Pending&&(this.status=e);break;case i.CommandExecutionStatus.Executing:this.status!==i.CommandExecutionStatus.Pending&&this.status!==i.CommandExecutionStatus.Queued||(this.status=e,this.started=n||new a.Datetime);break;case i.CommandExecutionStatus.Succeeded:case i.CommandExecutionStatus.Failed:this.status!==i.CommandExecutionStatus.Queued&&this.status!==i.CommandExecutionStatus.Executing||(this.status=e,this.finished=n||new a.Datetime,this.error=t)}return this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(86),a=n(2),r=n(3),s=n(16),l=n(1);class u{constructor(e=new o.MotionLimits3,t=new o.MotionLimits3){this.type=i.TypeName.MotionLimits6,this.toString=((e={position:{x:{velocity:r.Format.velocityHorizontal,acceleration:r.Format.accelerationHorizontal},y:{velocity:r.Format.velocityHorizontal,acceleration:r.Format.accelerationHorizontal},z:{velocity:r.Format.velocityVertical,acceleration:r.Format.accelerationVertical}},orientation:{x:{velocity:r.Format.velocityRotational,acceleration:r.Format.accelerationRotational},y:{velocity:r.Format.velocityRotational,acceleration:r.Format.accelerationRotational},z:{velocity:r.Format.velocityRotational,acceleration:r.Format.accelerationRotational}}})=>a.Common.joinNotEmpty([this.position.toString(e.position),this.orientation.toString(e.orientation)])),this.position=e,this.orientation=t}applyJSON(e){l.Serialization.validateJson(e),l.Serialization.validateType(e,this.type),this.position.applyJSON(e.position),this.orientation.applyJSON(e.orientation)}resolve(e){return new u(this.position.resolve(e.position),this.orientation.resolve(e.orientation))}interpolate(e,t){return new u(this.position.interpolate(e.position,t),this.orientation.interpolate(e.orientation,t))}get horizontal(){return this.position.forwardBackward}set horizontal(e){this.position.forwardBackward=e}get vertical(){return this.position.upDown}set vertical(e){this.position.upDown=e}get rotational(){return this.orientation.yaw}set rotational(e){this.orientation.yaw=e}timeLineHorizontal(e,t=null){return s.Kinematic.tLine(this.horizontal.velocity.max,this.horizontal.acceleration.min,this.horizontal.acceleration.max,e,t||e)}timeLineVertical(e,t=null){return s.Kinematic.tLine(e<0?Math.abs(this.vertical.velocity.min):this.vertical.velocity.max,e<0?-this.vertical.acceleration.max:this.vertical.acceleration.min,e<0?-this.vertical.acceleration.min:this.vertical.acceleration.max,Math.abs(e),t||Math.abs(e))}timeLineRotational(e,t=null){return s.Kinematic.tLine(this.rotational.velocity.max,this.rotational.acceleration.min,this.rotational.acceleration.max,Math.abs(e),t||Math.abs(e))}}t.MotionLimits6=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(87),a=n(2),r=n(1);class s{constructor(e=new o.MotionLimits,t=new o.MotionLimits,n=new o.MotionLimits){this.type=i.TypeName.MotionLimits3,this.toString=(e=>a.Common.joinNotEmpty([this.x.toString(e.x),this.y.toString(e.y),this.z.toString(e.z)])),this.x=e,this.y=t,this.z=n}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.x.applyJSON(e.x),this.y.applyJSON(e.y),this.z.applyJSON(e.z)}resolve(e){return new s(this.x.resolve(e?e.x:null),this.y.resolve(e?e.y:null),this.z.resolve(e?e.z:null))}interpolate(e,t){return new s(this.x.interpolate(e.x,t),this.y.interpolate(e.y,t),this.z.interpolate(e.z,t))}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get forwardBackward(){return this.x}set forwardBackward(e){this.x=e}get leftRight(){return this.y}set leftRight(e){this.y=e}get upDown(){return this.z}set upDown(e){this.z=e}}t.MotionLimits3=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(16),o=n(28),a=n(0),r=n(2),s=n(1);class l{constructor(e=new o.Limits,t=new o.Limits){this.type=a.TypeName.MotionLimits,this.toString=(e=>r.Common.joinNotEmpty([this.velocity.toString(e.velocity),this.acceleration.toString(e.acceleration)])),this.velocity=e,this.acceleration=t}applyJSON(e){s.Serialization.validateJson(e),s.Serialization.validateType(e,this.type),this.velocity.applyJSON(e.velocity),this.acceleration.applyJSON(e.acceleration)}currentVelocityLimits(e,t){return new o.Limits(Math.min(this.velocity.max,i.Kinematic.v2(e,this.acceleration.max,t)),Math.max(this.velocity.min,i.Kinematic.v2(e,this.acceleration.min,t)))}resolve(e){return new l(e&&e.velocity?e.velocity:this.velocity,e&&e.acceleration?e.acceleration:this.acceleration)}interpolate(e,t){return new l(this.velocity.interpolate(e.velocity,t),this.acceleration.interpolate(e.acceleration,t))}}t.MotionLimits=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationReferenceTargets=class{constructor(e=i.OrientationXReference.Horizon,t=i.OrientationZReference.North){this.x=e,this.z=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.PhotoFileFormatCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoFileFormatCameraCommand,this.photoFileFormat=o.CameraPhotoFileFormat.JPEG}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.photoFileFormat=s.Common.parseString(e.photoFileFormat,this.photoFileFormat)}get subtitle(){return a.Format.enum("CameraPhotoFileFormat",this.photoFileFormat)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(66),o=n(0),a=n(3),r=n(1),s=n(2);t.ModeGimbalCommand=class extends i.GimbalCommand{constructor(){super(...arguments),this.type=o.TypeName.ModeGimbalCommand,this.mode=o.GimbalMode.YawFollow}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.mode=s.Common.parseString(e.mode,this.mode)}get subtitle(){return a.Format.enum("GimbalMode",this.mode)}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4),o=n(10),a=n(3),r=n(0),s=n(66),l=n(36),u=n(2),c=n(1);t.VelocityGimbalCommand=class extends s.GimbalCommand{constructor(){super(r.TypeName.VelocityGimbalCommand),this.type=r.TypeName.VelocityGimbalCommand,this.velocity=new l.Velocity3}applyJSON(e){super.applyJSON(e),c.Serialization.validateType(e,this.type),this.velocity.applyJSON(e.velocity)}get verifiable(){return!1}toMessage(){return new o.Message(i.Strings.VelocityGimbalCommand.messages.controls.title,u.Common.joinNotEmpty([Math.abs(this.velocity.x)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.pitch,a.Format.velocityRotational(this.velocity.x).toString()),Math.abs(this.velocity.y)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.roll,a.Format.velocityRotational(this.velocity.y).toString()),Math.abs(this.velocity.z)<.01?"":i.Strings.formatString(i.Strings.VelocityGimbalCommand.messages.controls.details.yaw,a.Format.velocityRotational(this.velocity.z).toString())]))}static boundedVelocity(e,t,n,i){const o=new l.Velocity3;return o.x=i.x.currentVelocityLimits(e.x,n).bound(t.x),o.y=i.y.currentVelocityLimits(e.y,n).bound(t.y),o.z=i.z.currentVelocityLimits(e.z,n).bound(t.z),o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(13),a=n(10),r=n(6),s=n(2),l=n(1);t.ComponentExecutionState=class extends r.Identifiable{constructor(e=null){super(e),this.type=i.TypeName.ComponentExecutionState,this.status=i.ComponentExecutionStatus.Pending,this.progress=0,this.duration=0,this.started=null,this.finished=null,this.error=null,this.messages=[],this.cache={}}toJSON(){return{id:this.id,type:this.type,status:this.status,progress:this.progress,duration:this.duration,started:this.started,finished:this.finished,error:this.error,messages:this.messages}}applyJSON(e){if(super.applyJSON(e),l.Serialization.validateType(e,this.type),this.status=s.Common.parseString(e.status,this.status),this.progress=s.Common.parseFloat(e.progress,this.progress),this.duration=s.Common.parseFloat(e.duration,this.duration),this.started=l.Serialization.deserialize(e.started,o.Datetime),this.finished=l.Serialization.deserialize(e.finished,o.Datetime),this.error=s.Common.parseString(e.error),this.messages=[],Array.isArray(e.messages))for(let t of e.messages)this.messages.push(l.Serialization.deserialize(t,a.Message,!1));this.cache={}}cachedData(e,t=null){if(!this.cache[e]&&t){const n=t();n&&(this.cache[e]=n)}return this.cache[e]}clearCachedData(e){delete this.cache[e]}update(e,t=null,n=null,a=0){switch(this.messages=[],e){case i.ComponentExecutionStatus.Pending:break;case i.ComponentExecutionStatus.Executing:this.status===i.ComponentExecutionStatus.Pending&&(this.status=e,this.progress=0,this.duration=0,this.started=n||new o.Datetime),this.status===i.ComponentExecutionStatus.Executing&&(this.duration+=a);break;case i.ComponentExecutionStatus.Succeeded:case i.ComponentExecutionStatus.Failed:this.status===i.ComponentExecutionStatus.Executing&&(this.status=e,this.progress=1,this.duration+=a,this.cache={},this.finished=n||new o.Datetime,this.error=t)}return this}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e,t){return t.reduce(function(t,n){if(null==e)throw new Error("'".concat(e,"' is no valid coordinate."));return e.hasOwnProperty(n)&&void 0!==n&&void 0===t?(t=n,n):t},void 0)};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){var t=e.toString().trim();return!isNaN(parseFloat(t))&&parseFloat(t)===Number(t)};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=function(e){return i.sexagesimalPattern.test(e.toString().trim())};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=function(e){var t=new RegExp(i.sexagesimalPattern).exec(e);if(null==t)throw new Error("Given value is not in sexagesimal format");var n=Number(t[2])/60||0,o=Number(t[4])/3600||0,a=parseFloat(t[1])+n+o;return["S","W"].includes(t[7])?-a:a};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(98),o=n(99),a=n(17),r=n(24),s=n(6),l=n(1),u=n(2),c=n(36),m=n(91),d=n(12),h=n(0),p=n(121),f=n(126),g=n(69),y=n(8),C=n(127),v=n(30);t.Component=class extends s.Identifiable{constructor(){super(...arguments),this.coordinate=new r.GeoCoordinate,this.descriptors=new a.Descriptors,this.cameraCaptureConfigurations=null,this.source=null,this.assetSource=null,this.elevations=null,this.toString=(()=>this.title)}applyJSON(e){if(super.applyJSON(e),this.descriptors.applyJSON(e.descriptors),this.coordinate.applyJSON(e.coordinate),this.source=l.Serialization.deserialize(e.source,p.ComponentSource),this.assetSource=l.Serialization.deserialize(e.assetSource,f.AssetSource),Array.isArray(e.elevations)){this.elevations=[];for(let t of e.elevations)this.elevations.push(l.Serialization.deserialize(t,g.GeoLocation,!1))}else this.elevations=null;if(Array.isArray(e.cameraCaptureConfigurations)){this.cameraCaptureConfigurations=[];for(let t of e.cameraCaptureConfigurations)this.cameraCaptureConfigurations.push(l.Serialization.deserialize(t,C.CameraCaptureConfiguration,!1))}else this.cameraCaptureConfigurations=null}get title(){return this.descriptors.name||l.Serialization.typeDisplay(this)}get subtitle(){return this.descriptors.name?u.Common.joinNotEmpty([l.Serialization.typeDisplay(this),this.descriptors.description]):this.descriptors.description}verification(e){return null}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!1}cameraCaptureConfigurationsEnabled(e=null){return!0}get referenceOffsets(){return[]}referenceOffsetsHandleCoordinate(e){return null}elevationCoordinates(e){return[]}elevationsPending(e){const t=this.elevationCoordinates(e);return 0!==t.length&&(!this.elevations||this.elevations.length!==t.length||t.filter((e,t)=>!this.elevations||e.distance(this.elevations[t].coordinate)>y.Constants.ComponentElevationTolerance).length>0)}referencedAltitude(e,t,n,i=y.Constants.ComponentElevationTolerance){return e.referencedAltitude(t,this.elevation(n,i),i)}elevation(e,t=y.Constants.ComponentElevationTolerance){let n=null;return this.elevations&&this.elevations.forEach(i=>{const o=i.coordinate.distance(e);(null===t||o<=t)&&(!n||n.coordinate.distance(e)>o)&&(n=i)}),n}node(e=null){return new o.ComponentNode(e,this)}descendantAllowed(e){return!0}estimate(e,t){return new i.ComponentEstimate(this)}engaging(e,t){}execute(e){const t=e.execution.getComponentState(this),n=t.cachedData(h.TypeName.Component,()=>{const e=new S;return t.status===h.ComponentExecutionStatus.Pending&&(e.cameraCaptureComponents=[]),e});if(!n)return t;if(n.cameraCaptureComponents&&0===n.cameraCaptureComponents.length&&this.cameraCaptureConfigurationsEnabled(e)&&this.cameraCaptureConfigurations&&this.cameraCaptureConfigurations.forEach(e=>{n.cameraCaptureComponents.push(...e.commandComponents)}),this.executing(e),n.cameraCaptureComponents)for(const t of n.cameraCaptureComponents){const n=t.execute(e);if(n.status===h.ComponentExecutionStatus.Failed&&t.required)return this.failed(e,n.error)}return t}executing(e){return e.execution.getComponentState(this).update(h.ComponentExecutionStatus.Executing,null,e.engagement.currentDatetime,e.engagement.timeSinceLastExecution)}succeeded(e){const t=e.execution.getComponentState(this);return t.status!==h.ComponentExecutionStatus.Succeeded&&this.finished(e),t.update(h.ComponentExecutionStatus.Succeeded,null,e.engagement.currentDatetime)}failed(e,t=null){const n=e.execution.getComponentState(this);return n.status!==h.ComponentExecutionStatus.Failed&&this.finished(e),n.update(h.ComponentExecutionStatus.Failed,t,e.engagement.currentDatetime)}finished(e){if(this.cameraCaptureConfigurations){const t=e.execution.getComponentState(this).cachedData(h.TypeName.Component);t&&t.cameraCaptureComponents&&t.cameraCaptureComponents.length>0&&this.cameraCaptureConfigurations.forEach(t=>{const n=new v.StopCaptureCameraCommand;n.channel=t.channel,e.drone.addStatefulCommand(n)})}}addGimbalVelocityCommand(e,t,n,i,o){const a=new m.VelocityGimbalCommand;a.channel=t;const r=e.drone.projectGimbalOrientation(t,e.engagement.currentDatetime),s=o?l.Serialization.clone(o):new c.Velocity3;null!==n.x&&(s.x+=d.Geometry.angleDifferenceSigned(n.x,r.x)),null!==n.y&&(s.y+=d.Geometry.angleDifferenceSigned(n.y,r.y)),n.convertReferences(e.drone.referenceSources(i)),null!==n.z&&e.drone.gimbal(t).settings.mode===h.GimbalMode.Free&&(s.z+=d.Geometry.angleDifferenceSigned(n.z,r.z)),a.velocity=s,e.drone.addStatelessCommand(a);const u=a.toMessage();return u.details&&e.execution.getComponentState(this).messages.push(u),a}};class S{constructor(){this.cameraCaptureComponents=null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(28),a=n(2);class r{constructor(e=0,t=0,n=0){this.channel=e,this.photos=t,this.videos=t}}t.ComponentEstimateCameraCapture=r;t.ComponentEstimate=class extends i.Identifiable{constructor(e,t=[],n=0){super(e.id),this.timeConcurrent=!1,this.cameraCaptures={},this.level=0,this.children=[],this.component=e,this.droneSpatials=t,this.time=n}get list(){const e=[];return this.children.forEach(t=>{e.push(...t.list)}),e.push(this),e}get firstDroneSpatial(){for(let e of this.children){let t=e.firstDroneSpatial;if(t)return t}return this.droneSpatials.length>0?this.droneSpatials[0]:null}get lastDroneSpatial(){if(this.droneSpatials.length>0)return a.Common.lastSafe(this.droneSpatials);for(var e=this.children.length-1;e>=0;e--){const t=this.children[e].lastDroneSpatial;if(t)return t}return null}get allDroneSpatials(){const e=[];return this.list.forEach(t=>{e.push(...t.droneSpatials)}),e}segments(e){return this.list.filter(t=>t.droneSpatials.length>0&&(!e||e(t)))}segmentSpatials(e=null){return this.segments(t=>null==e||t.level===e).map(e=>e.droneSpatials)}segmentCoordinates(e=null){return this.segments(t=>null==e||t.level===e).map(e=>e.droneSpatials.map(e=>e.coordinate))}cameraCapture(e=0){return this.cameraCaptures[e]||(this.cameraCaptures[e]=new r(e)),this.cameraCaptures[e]}get totalTime(){let e=this.time;return this.children.forEach(t=>{t.timeConcurrent||(e+=t.totalTime)}),e}get totalPhotos(){let e=0;for(let t of Object.keys(this.cameraCaptures))e+=this.cameraCaptures[t].photos;return this.children.forEach(t=>{e+=t.totalPhotos}),e}get totalVideos(){let e=0;for(let t of Object.keys(this.cameraCaptures))e+=this.cameraCaptures[t].videos;return this.children.forEach(t=>{e+=t.totalVideos}),e}get summary(){const e={time:this.totalTime,distance:0,altitude:new o.Limits,horizontalVelocityMax:0,verticalVelocity:new o.Limits,photos:this.totalPhotos,videos:this.totalVideos};let t;return this.allDroneSpatials.forEach(n=>{t&&(e.distance+=n.coordinate.distance(t.coordinate)),e.altitude.max=Math.max(e.altitude.max,n.altitude.value),e.altitude.min=Math.min(e.altitude.min,n.altitude.value),e.horizontalVelocityMax=Math.max(e.horizontalVelocityMax,n.velocity.horizontal.magnitude),e.verticalVelocity.max=Math.max(e.verticalVelocity.max,n.velocity.vertical),e.verticalVelocity.min=Math.min(e.verticalVelocity.min,n.velocity.vertical),t=n}),e}findDescendant(e){if(this.id===e)return this;for(let t=0;t<this.children.length;t++){const n=this.children[t].findDescendant(e);if(n)return n}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(100),o=n(97),a=n(2),r=n(22),s=n(5),l=n(3),u=n(37),c=n(38),m=n(0),d=n(10),h=n(31),p=n(30),f=n(4),g=n(39),y=n(45),C=n(89),v=n(53);class S extends i.Node{constructor(e,t){super(t.id,e),this.label="",this.component=t}get name(){return a.Common.joinNotEmpty([this.component.title]," - ")}get title(){return this.label||this.name}get subtitle(){return this.label?a.Common.joinNotEmpty([this.ordinalDisplay?this.name:this.component.title,this.component.subtitle]):this.component.subtitle}get subComponentCount(){return this.descendantComponentCount(e=>e instanceof r.SubComponent)}descendantComponentCount(e){return this.descendants.filter(t=>t instanceof S&&e(t.component)).length}descendantAllowed(e){return!(e instanceof o.Component&&!this.component.descendantAllowed(e))&&super.descendantAllowed(e)}elevationsRequired(e){for(const t of this.descendants)if(t instanceof S&&t.component.elevationCoordinates(e).length>0)return!0;return!1}addChild(e,t=!1){const n=e.node(this);return t?this.children.splice(0,0,n):this.children.push(n),n}get referenceOffsets(){const e=[];return this.children.forEach(t=>{t instanceof S&&e.push(...t.referenceOffsets)}),e.push(...this.component.referenceOffsets),e}get issues(){const e=[],t=this.descendants,n=this.component;if(n.hasOwnProperty("takeoffOffset")&&null===n.takeoffOffset){const t=new v.Context(n);this.elevationsRequired(t)&&e.push({message:new d.Message(f.Strings.MissionIssue.messages.elevation.requiredTakeoff.title,f.Strings.MissionIssue.messages.elevation.requiredTakeoff.details,m.MessageLevel.Danger),node:this})}const i=new Set;return t.forEach(e=>{e instanceof S&&e.component instanceof g.CommandComponent&&e.component.command instanceof s.CameraCommand&&i.add(e.component.command.channel)}),i.forEach(n=>{let i=null,o=null,a=null,r=null,v=null,b=null;t.filter(e=>e instanceof S).forEach(t=>{if(t.component.type===m.TypeName.MapComponent&&0===n)switch(t.component.cameraMode){case m.CameraMode.Photo:i=t.component.cameraMode,o=m.CameraPhotoMode.Interval,v=!1;break;case m.CameraMode.Video:i=t.component.cameraMode,v=!1}else if(t.component.type===m.TypeName.FacadeComponent){if(t.component.gimbalOrientations[n])switch(t.component.cameraMode){case m.CameraMode.Photo:i=t.component.cameraMode,o=t.component.capturePriority===m.FacadeCapturePriority.Distance?m.CameraPhotoMode.Single:m.CameraPhotoMode.Interval,v=!1;break;case m.CameraMode.Video:i=t.component.cameraMode,v=!1}}else if(t.component instanceof g.CommandComponent&&t.component.command instanceof s.CameraCommand&&t.component.command.channel===n){const n=t.component.command,g=[];n instanceof s.CameraCommand&&(null===n.requiredCapturing||n.requiredCapturing||(null===v?g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingUnknown.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingUnknown.details,m.MessageLevel.Warning)):v&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingInvalid.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredNotCapturingInvalid.details,m.MessageLevel.Error))),n.requiredMode&&(null===i?g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredModeUnknown.title,n.title),f.Strings.MissionIssue.messages.cameraCommand.requiredModeUnknown.details,m.MessageLevel.Warning)):n.requiredMode!==i&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.cameraCommand.requiredModeInvalid.title,n.title,l.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.cameraCommand.requiredModeInvalid.details,m.MessageLevel.Error)))),n instanceof p.StopCaptureCameraCommand&&(v=!1),n instanceof h.StartCaptureCameraCommand&&(b=t,i&&!h.StartCaptureCameraCommand.possible(i)&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.invalidMode.title,l.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.invalidMode.details,m.MessageLevel.Error)),null===i?g.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeMode.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeMode.details,m.MessageLevel.Warning)):i===m.CameraMode.Photo&&(null===o?g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoMode.title,l.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoMode.details,m.MessageLevel.Info)):o===m.CameraPhotoMode.Interval&&null===r&&g.push(new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoInterval.title,l.Format.enum("CameraMode",i),l.Format.enum("CameraPhotoMode",o)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforePhotoInterval.details,m.MessageLevel.Warning))),null===v?g.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeStopped.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.beforeStopped.details,m.MessageLevel.Info)):v&&g.push(new d.Message(f.Strings.MissionIssue.messages.startCaptureCameraCommand.startedAlready.title,f.Strings.MissionIssue.messages.startCaptureCameraCommand.startedAlready.details,m.MessageLevel.Info)),v=h.StartCaptureCameraCommand.continuous(i||m.CameraMode.Photo,o||m.CameraPhotoMode.Single)),n instanceof u.ModeCameraCommand&&(i=n.mode),n instanceof c.PhotoModeCameraCommand&&(o=n.photoMode),n instanceof C.PhotoFileFormatCameraCommand&&(a=n.photoFileFormat),n instanceof y.PhotoIntervalCameraCommand&&(r=n.photoInterval)<=2&&(null===a?g.push(new d.Message(f.Strings.MissionIssue.messages.photoIntervalCommand.beforePhotoFileFormat.title,f.Strings.MissionIssue.messages.photoIntervalCommand.beforePhotoFileFormat.details,m.MessageLevel.Warning)):a!==m.CameraPhotoFileFormat.JPEG&&g.push(new d.Message(f.Strings.MissionIssue.messages.photoIntervalCommand.fastPhotoInterval.title,f.Strings.MissionIssue.messages.photoIntervalCommand.fastPhotoInterval.details,m.MessageLevel.Warning))),g.forEach(n=>{e.push({message:n,node:t})})}}),v&&b&&i===m.CameraMode.Video&&e.push({message:new d.Message(f.Strings.formatString(f.Strings.MissionIssue.messages.startCaptureCameraCommand.videoNotStopped.title,l.Format.enum("CameraMode",i)),f.Strings.MissionIssue.messages.startCaptureCameraCommand.videoNotStopped.details,m.MessageLevel.Warning),node:b})}),e}}t.ComponentNode=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6);t.Node=class extends i.Identifiable{constructor(e,t){super(e),this.children=[],this.ordinal=null,this.remove=null,this.inserts=[],this.appends=[],this.emptyChildrenNavigationEnabled=!1,this.propertiesEditorDisabled=!1,this.parent=t;let n=0;this.nextOrdinal=t?t.nextOrdinal:()=>n++}get ordinalDisplay(){return null===this.ordinal?"":`${this.ordinal+1}`}get title(){return this.ordinalDisplay||this.id}get subtitle(){return""}get depth(){return null===this.parent?0:this.parent.depth+1}get root(){return null===this.parent?this:this.parent.root}get ancestors(){const e=[];return this.parent&&(e.push(this.parent),e.push(...this.parent.ancestors)),e}get descendants(){const e=[];return this.children.forEach(t=>{e.push(t),e.push(...t.descendants)}),e}find(e){return this.root.findDescendant(e)}findDescendant(e){if(this.id===e)return this;for(let t=0;t<this.children.length;t++){const n=this.children[t].findDescendant(e);if(n)return n}return null}descendantAllowed(e){return!(this.parent&&!this.parent.descendantAllowed(e))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(220),o=n(0),a=n(13),r=n(2),s=n(8),l=n(1);t.Camera=class extends i.Payload{constructor(){super(...arguments),this.type=o.TypeName.Camera,this.model=null,this.updated=new a.Datetime,this.capturing=!1,this.settings={mode:o.CameraMode.Photo,photoMode:o.CameraPhotoMode.Single,photoFileFormat:o.CameraPhotoFileFormat.JPEG,photoInterval:2,videoFileFormat:o.CameraVideoFileFormat.MP4}}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.model=r.Common.parseString(e.model),this.capturing=r.Common.parseBoolean(e.capturing,this.capturing),this.settings.mode=r.Common.parseString(e.settings.mode,this.settings.mode),this.settings.photoMode=r.Common.parseString(e.settings.photoMode,this.settings.photoMode),this.settings.photoFileFormat=r.Common.parseString(e.settings.photoFileFormat,this.settings.photoFileFormat),this.settings.photoInterval=r.Common.parseInt(e.settings.photoInterval,this.settings.photoInterval),this.settings.videoFileFormat=r.Common.parseString(e.settings.videoFileFormat,this.settings.videoFileFormat)}get specification(){switch(this.model){case"Phantom 3 Standard Camera":return s.Constants.CameraSpecification("phantom3Standard");case"Phantom 3 Advanced Camera":return s.Constants.CameraSpecification("phantom3Advanced");case"Phantom 3 Professional Camera":return s.Constants.CameraSpecification("phantom3Pro");case"Zenmuse X3":return s.Constants.CameraSpecification("zenmuseX3");case"Zenmuse X5":return s.Constants.CameraSpecification("zenmuseX5");case"Zenmuse X5R":return s.Constants.CameraSpecification("zenmuseX5R");case"Phantom 4 Camera":return s.Constants.CameraSpecification("phantom4");case"Phantom 4 Pro Camera":return s.Constants.CameraSpecification("phantom4Pro");case"Mavic Pro Camera":return s.Constants.CameraSpecification("mavicPro");case"Zenmuse Z30":return s.Constants.CameraSpecification("zenmuseZ30Max");case"Zenmuse X4S":return s.Constants.CameraSpecification("zenmuseX4S");case"Zenmuse X5S":return s.Constants.CameraSpecification("zenmuseX5S");case"Phantom 4 Advanced Camera":return s.Constants.CameraSpecification("phantom4Advanced");case"Spark Camera":return s.Constants.CameraSpecification("spark");case"Phantom 4 Pro V2 Camera":case"Phantom 4 Pro V2.0 Camera":return s.Constants.CameraSpecification("phantom4Pro2_0");case"Phantom 4 RTK Camera":return s.Constants.CameraSpecification("phantom4RTK");case"Zenmuse X7":return s.Constants.CameraSpecification("zenmuseX7");case"Mavic Air Camera":return s.Constants.CameraSpecification("mavicAir");case"Mavic 2 Zoom Camera":return s.Constants.CameraSpecification("mavic2ZoomMax");case"Mavic 2 Pro Camera":return s.Constants.CameraSpecification("mavic2Pro");case"Mavic 2 Enterprise Camera":return s.Constants.CameraSpecification("mavic2EnterpriseMax");case"Mavic 2 Enterprise Dual-Thermal":return s.Constants.CameraSpecification("mavic2EnterpriseDualThermal");case"Mavic 2 Enterprise Dual-Visual":return s.Constants.CameraSpecification("mavic2EnterpriseDualRGB");case"Zenmuse XT":return s.Constants.CameraSpecification("zenmuseXT");case"Zenmuse XT2-Thermal":return s.Constants.CameraSpecification("zenmuseXT2");case"Zenmuse XT2-Visual":return s.Constants.CameraSpecification("zenmuseXT2RGB");case"Zenmuse Z3":default:return s.Constants.CameraSpecification(this.model)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),a=n(2),r=n(1);t.Asset=class{constructor(e=null,t=new o.Descriptors){this.type=i.TypeName.Asset,this.cameraFiles=[],this.key=e||a.Common.uuid(),this.descriptors=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.key=a.Common.parseString(e.key,a.Common.uuid()),this.descriptors.applyJSON(e.descriptors)}merge(e){this.key=this.key||e.key,this.descriptors.merge(e.descriptors),this.cameraFiles=Array.from(new Set([...this.cameraFiles,...e.cameraFiles]))}get size(){return this.cameraFiles.reduce((e,t)=>e+t.size,0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(9),a=n(12),r=n(132),s=n(28),l=n(8),u=n(61),c=n(4),m=n(10),d=n(3),h=n(44),p=n(29),f=n(2),g=n(71),y=n(18),C=n(27),v=n(27),S=n(21),b=n(1),w=n(15),x=n(133),M=n(41),O=n(20),T=n(54),P=n(104),D=n(60),E=n(74),F=n(19),A=n(49),N=n(46);t.DestinationComponent=class extends g.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.DestinationComponent,this.destinationOffset=new o.Vector2,this.altitudeRange=new r.AltitudeRange(new y.Altitude(l.Constants.DestinationComponentAltitude),new s.Limits(l.Constants.DestinationComponentAltitudeRange)),this.achievementTime=l.Constants.DestinationComponentAchievementTime,this.achievementDistance=new u.DistanceTolerance(l.Constants.DestinationComponentAchievementDistanceHorizontal,l.Constants.DestinationComponentAchievementDistanceVertical),this.droneOrientation=null,this.gimbalOrientations=null}applyJSON(e){if(super.applyJSON(e),b.Serialization.validateType(e,this.type),this.achievementTime=f.Common.parseFloat(e.achievementTime,this.achievementTime),this.destinationOffset.applyJSON(e.destinationOffset),this.altitudeRange.applyJSON(e.altitudeRange),this.achievementDistance.applyJSON(e.achievementDistance),this.droneOrientation=b.Serialization.deserialize(e.droneOrientation,O.Orientation3Optional),e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new O.Orientation3Optional;n.applyJSON(e.gimbalOrientations[t]),this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null}get subtitle(){return f.Common.joinNotEmpty([super.subtitle,this.altitudeRange.toString()])}get referenceOffsets(){return[this.destinationOffset].concat(super.referenceOffsets)}verification(e){const t=super.verification(e);if(!t)return null;const n=t;return n.gimbalOrientations=null,n.droneOrientation=new O.Orientation3Optional,n.droneOrientation.z=0,n.droneOrientation.zReference=i.OrientationZReference.Path,t}get pointsOfInterestEnabled(){return!0}node(e=null){const t=super.node(e);return null===t.ordinal&&0===t.ancestors.filter(e=>e.component instanceof C.DroneMotionComponent).length&&(t.ordinal=t.nextOrdinal()),t}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.altitudeRange.altitude.system===i.AltitudeSystem.AGL&&t.push(this.destinationCoordinate(e)),t}destinationCoordinate(e){return this.referenceCoordinate(e,this.destinationOffset)}destinationReferencedAltitude(e){return this.referencedAltitude(e,this.altitudeRange.altitude,this.destinationCoordinate(e))}destinationSpatial(e){const t=this.destinationCoordinate(e).toGeoSpatial(),n=this.destinationReferencedAltitude(e).toSystem(i.AltitudeSystem.ATL);return t.altitude.value=null===n?0:n.value,t}orientationSpatial(e){if(this.pointsOfInterest.length>0){const t=this.pointOfInterestCoordinateByID(e,this.pointsOfInterest[0].id),n=this.pointOfInterestReferencedAltitudeByID(e,this.pointsOfInterest[0].id),o=n?n.toSystem(i.AltitudeSystem.ATL):null;if(t&&o){const e=new S.GeoSpatial;return e.coordinate=t,e.altitude=o,e}}return this.destinationSpatial(e)}estimate(e,t){const n=super.estimate(e,t);n.level=1,n.droneSpatials.push(t);const i=this.destinationSpatial(e);i.updated=b.Serialization.clone(t.updated);let o=0;if(e.pathRequired||e.timeRequired){const r=this.model(e,t);if(r){r.addToEstimate(n);const e=r.firstSample.last;let t=e;for(;t;){if(this.achievementDistance.horizontal>=e.current.distance-t.current.distance){o=t.current.time;break}t=t.previous}}else{const r=t.coordinate.bearing(i.coordinate);if(this.droneOrientation){const e=new N.Orientation3;e.apply(this.droneOrientation),e.convertReferences(A.OrientationReferenceSources.fromZ(r)),i.orientation.yaw=e.yaw}else i.orientation.yaw=i.coordinate.bearing(this.orientationSpatial(e).coordinate);if(e.altitudeRequired||e.timeRequired){const r=i.altitude.value-t.altitude.value;if(e.altitudeRequired&&!this.altitudeRange.range.valid(-r)){const e=b.Serialization.clone(t);e.altitude.value=i.altitude.value+this.altitudeRange.range.bound(-r),n.droneSpatials.push(e)}if(e.timeRequired){const s=this.resolveDroneMotionLimits(e),u=t.coordinate.distance(i.coordinate),c=u-this.achievementDistance.horizontal>0?s.timeLineHorizontal(u,u-this.achievementDistance.horizontal):0,m=a.Geometry.angleDifferenceSigned(i.orientation.yaw,t.orientation.yaw),d=s.timeLineRotational(m),h=m-l.Constants.DestinationComponentHeadingAchievement>0?s.timeLineRotational(m,m-l.Constants.DestinationComponentHeadingAchievement):0,p=Math.abs(r)-this.achievementDistance.vertical>0?s.timeLineVertical(r,Math.abs(r)-this.achievementDistance.vertical):0,f=this.altitudeRange.range.valid(-r)?0:s.timeLineVertical(r,Math.abs(r)-Math.abs(this.altitudeRange.range.bound(-r))),g=c+Math.max(f,h),y=n.time;n.time+=Math.max(d,p,g)+this.achievementTime,o=n.time-y;const C=n.children.find(e=>e.component===this.immediateComponent);C&&C.totalTime>n.time&&(n.time+=C.totalTime-n.time,o=C.totalTime),i.updated.increment(n.time-y)}}n.droneSpatials.push(i)}}else n.droneSpatials.push(i);if(this.achievedComponent){const a=b.Serialization.clone(i);a.updated.value=new Date(t.updated.value.getTime()+1e3*o);const r=this.achievedComponent.estimate(e,a);n.children.push(r)}return n}achieved(e){const t=this.cachedData(e);if(t&&t.achievementDistanceValidSince){const{drone:n}=e,i=n.projectSpatial(e.engagement.currentDatetime),o=this.destinationSpatial(e),a=i.coordinate.distance(o.coordinate),r=o.altitude.value-i.altitude.value;if(this.achievementDistance.valid(a,r)&&e.elapsedTime(t.achievementDistanceValidSince)>=this.achievementTime)return!0}return!1}cachedData(e,t=null){return e.execution.getComponentState(this).cachedData(i.TypeName.DestinationComponent,()=>{const n=this.destinationCoordinate(e),i=(t||e.drone.spatial).coordinate.geoCoordinate(),o=new _(i,i.distance(n)),a=this.model(e,t||e.drone.spatial);return a&&(o.model=new v.DroneMotionComponentModelData(a.firstSample)),o})}engaging(e,t){var n;super.engaging(e,t);const o=null===(n=t.findDescendant(this.id))||void 0===n?void 0:n.firstDroneSpatial;o?this.cachedData(e,o):e.execution.getComponentState(this).clearCachedData(i.TypeName.DestinationComponent)}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,o=this.referenceSpatial(e),r=n.projectSpatial(e.engagement.currentDatetime),s=this.destinationSpatial(e),u=r.coordinate.distance(s.coordinate),g=s.altitude.value-r.altitude.value,y=this.cachedData(e);if(!y)return t;if(y.model){const{engagement:n}=e;y.model.incrementTime(n.timeSinceLastExecution);const i=this.achievementDistance.valid(u,g);if(y.model.sampleLinked.next&&this.addVelocityCommandsFromModel(e,y.model,!i||null),i){y.achievementDistanceValidSince||(y.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(y.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new m.Message(c.Strings.AchievableDroneMotionComponent.messages.waiting.title,d.Format.number(this.achievementTime-n)))}else y.achievementDistanceValidSince=null;return t.progress=y.model.progress,t}const C=new p.Velocity6,v=r.coordinate.bearing(s.coordinate),S=this.orientationSpatial(e);let x=r.coordinate.bearing(S.coordinate);if(this.droneOrientation){const e=new N.Orientation3;e.apply(this.droneOrientation),e.convertReferences(A.OrientationReferenceSources.fromZ(v)),x=e.yaw}const O=this.achievementDistance.validHorizontal(u)?0:a.Geometry.angleDifferenceSigned(x,r.orientation.yaw),P=this.resolveDroneMotionLimits(e);if(this.altitudeRange.range.valid(-g)&&(this.achievementDistance.validHorizontal(u)||Math.abs(O)<l.Constants.DestinationComponentHeadingAchievement)){h.VelocityDroneCommand.updateBoundedVelocityHorizontal(C,v,u,P,o.velocity.horizontal);const e=y.startCoordinate,t=e.geoCoordinate(a.Geometry.lineClosestPoint(new M.Line2(new w.Point2,e.offset(s.coordinate).toPoint2()),e.offset(r.coordinate).toPoint2()).toVector2()),n=r.coordinate.offset(t),i=new p.Velocity6;h.VelocityDroneCommand.updateBoundedVelocityHorizontal(i,n.direction,n.magnitude,P),C.horizontal=C.horizontal.add(i.horizontal)}if(h.VelocityDroneCommand.updateBoundedVelocityVertical(C,g,P,o.velocity.vertical),this.achievementDistance.valid(u,g)){y.achievementDistanceValidSince||(y.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(y.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new m.Message(c.Strings.AchievableDroneMotionComponent.messages.waiting.title,d.Format.number(this.achievementTime-n)))}else{y.achievementDistanceValidSince=null;const n=new m.Message(c.Strings.DestinationComponent.messages.moving.title,f.Common.joinNotEmpty([u<.1?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.distance,d.Format.distance(u).toString()),Math.abs(g)<.1?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.altitude,d.Format.altitude(g).toString()),Math.abs(O)<.01?"":c.Strings.formatString(c.Strings.DestinationComponent.messages.moving.details.heading,d.Format.angle(O,!1).toString())]));if(n.details&&t.messages.push(n),this.gimbalOrientations)for(const t of Object.keys(this.gimbalOrientations))this.addGimbalVelocityCommand(e,0,this.gimbalOrientations[t],{x:0,z:x||0});else{const t=b.Serialization.clone(l.Constants.DroneMotionComponentGimbalOrientation),n=S.altitude.value,i=r.coordinate.distance(S.coordinate),o=r.altitude.value-n;t.pitch=this.achievementDistance.valid(i,o)?0:Math.min(F.Convert.degreesToRadians(30),T.Gimbal.pitch(Math.max(this.achievementDistance.horizontal,i),o)),this.addGimbalVelocityCommand(e,0,t,{x:0,z:x||0})}}return this.addDroneVelocityCommand(e,C,0===O?null:x),t.progress=y.progress(r.coordinate.distance(s.coordinate)),t}model(e,t){const n=this.restrictionZonePath(e,t);if(!n)return null;const r=this.referenceCoordinate(e),s=n.segments.map(e=>new E.Path(a.Geometry.roundedCorners(e.points.map(e=>r.offset(e.coordinate).toPoint2()),l.Constants.DestinationComponentRestrictionZoneCornerRadius).map(e=>e.map(e=>r.geoCoordinate(e.toVector2()))))),u={};e.plan.restrictionZones.forEach(e=>{u[e.zone.id]=e});const c=this.orientationSpatial(e),m=this.resolveDroneMotionLimits(e);let d=0,h=null;return s.forEach((e,t)=>{const a=e.samplesForMaxDistance(l.Constants.DestinationComponentSampleDistance);if(!a||0===a.length)return;if(1===a.length&&s.length>t+1){const e=s[t+1];if(e.coordinates.length>0&&e.coordinates[0].distance(a[0].coordinate)<.1)return}const r=n.segments[t],p=r.points.map(t=>({distance:e.nearestDistance(t.coordinate),zone:t.zone}));d=a[0].direction;for(const e of a){for(;p.length>1&&e.distance>=p[1].distance;)p.shift();const t=0===p.length||e.distance<p[0].distance?null:p[0].zone,n=t?u[t.id]:null,a=n?m.resolve(n.droneMotionLimits):m,s=n?n.droneMotionErrorTolerance:null,l=new S.GeoSpatial;l.coordinate=e.coordinate,l.altitude.value=r.altitude.value,l.velocity.horizontal=new o.Vector2(e.direction,a.horizontal.velocity.max);const d=A.OrientationReferenceSources.fromZ(e.direction);this.droneOrientation?(l.orientation.apply(this.droneOrientation),l.orientation.convertReferences(d)):(l.orientation.yaw=l.coordinate.bearing(c.coordinate),l.orientation.yawReference=i.OrientationZReference.North);const f={};if(this.gimbalOrientations)for(const e of Object.keys(this.gimbalOrientations))f[e]=b.Serialization.clone(this.gimbalOrientations[e]),f[e].convertReferences(d);else{const e=c.altitude.value,t=l.coordinate.distance(c.coordinate),n=l.altitude.value-e;f[0]=new O.Orientation3Optional,f[0].pitch=this.achievementDistance.valid(t,n)?0:Math.min(F.Convert.degreesToRadians(30),T.Gimbal.pitch(Math.max(this.achievementDistance.horizontal,t),n))}(h=new D.LinkedValue(new R(l,b.Serialization.clone(a),f,e.distance),h)).current.droneMotionErrorTolerance=s}}),(h=h?h.first:null)?(e instanceof x.ComponentEstimateContext&&!e.timeRequired||(this.insertSamplesAltitudeChanges(h,t.altitude.value,l.Constants.DestinationComponentSampleDistance,c,A.OrientationReferenceSources.fromZ(d)),C.DroneMotionComponentModel.updateSamplesContrainVelocities(h,l.Constants.DestinationComponentSampleDistance)),new C.DroneMotionComponentModel(h)):null}insertSamplesAltitudeChanges(e,t,n,i,o){let a=e.first;for(;a.next;){const e=a.next.current.droneSpatial.altitude.value-a.current.droneSpatial.altitude.value;if(Math.abs(e)>n){const t=Math.ceil(Math.abs(e)/n),i=a,o=a.next;for(let e=1;e<t;e++)a=a.insertAfter(i.current.interpolate(o.current,e/t));a=o}else a=a.next}const r=((a=e.first).current.droneSpatial.altitude.value<t?1:-1)*n;for(;Math.abs(a.current.droneSpatial.altitude.value-t)>n;){const e=b.Serialization.clone(a.current.droneSpatial);e.altitude.value+=r;const t={};if(this.gimbalOrientations)for(const e of Object.keys(this.gimbalOrientations))t[e]=b.Serialization.clone(this.gimbalOrientations[e]),t[e].convertReferences(o);else{const n=i.altitude.value,o=e.coordinate.distance(i.coordinate),a=e.altitude.value-n;t[0]=new O.Orientation3Optional,t[0].pitch=this.achievementDistance.valid(o,a)?0:Math.min(F.Convert.degreesToRadians(30),T.Gimbal.pitch(Math.max(this.achievementDistance.horizontal,o),a))}a=a.insertBefore(new R(e,b.Serialization.clone(a.current.droneMotionLimits),t,0))}}restrictionZonePath(e,t){if(!this.restrictionZonesEnabled)return null;const n=this.destinationSpatial(e);return P.Zone.path(e.plan.restrictionZones.filter(e=>{const i=t.coordinate.distance(n.coordinate),o=t.altitude.value-n.altitude.value;return!e.minApplicableProximity.valid(i,o)}).map(e=>e.zone),e,t,n)}};class _{constructor(e,t){this.achievementDistanceValidSince=null,this.model=null,this.startCoordinate=e,this.totalDistance=t}progress(e){return e>this.totalDistance?0:(this.totalDistance-e)/this.totalDistance}}class R extends C.DroneMotionComponentModelSample{constructor(e,t,n,i){super(e,t,n,{}),this.distance=i}}t.DestinationComponentModelSample=R},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0),a=n(18),r=n(1),s=n(24),l=n(68),u=n(41),c=n(9),m=n(73),d=n(21),h=n(2),p=n(12),f=n(8),g=n(28),y=n(19),C=n(15);t.Zone=class extends i.Identifiable{constructor(){super(...arguments),this.type=o.TypeName.Zone,this.reference=new l.SourcedGeoSpatial,this.shape=o.ZoneShape.Circle,this.motionPriority=o.ZoneMotionPriority.Horizontal,this.minAltitude=new a.Altitude,this.maxAltitude=new a.Altitude(f.Constants.ZoneMaxAltitude),this.minHorizontalExitAltitude=new a.Altitude((this.maxAltitude.value+this.minAltitude.value)/2),this.boundaryPoints=[]}applyJSON(e){if(super.applyJSON(e),r.Serialization.validateType(e,this.type),this.reference.applyJSON(e.reference),this.shape=h.Common.parseString(e.shape,this.shape),this.motionPriority=h.Common.parseString(e.motionPriority,this.motionPriority),this.minAltitude.applyJSON(e.minAltitude),this.maxAltitude.applyJSON(e.maxAltitude),this.minHorizontalExitAltitude=r.Serialization.deserialize(e.minHorizontalExitAltitude,a.Altitude),this.boundaryPoints=[],Array.isArray(e.boundaryPoints))for(let t of e.boundaryPoints)this.boundaryPoints.push(r.Serialization.deserialize(t,m.ZoneBoundaryPoint,!1))}referenceSpatial(e){return this.reference.value(e.spatialSources)}referenceCoordinate(e,t=null){return this.referenceSpatial(e).coordinate.geoCoordinate(t||new c.Vector2)}get boundaryPointOffsets(){return this.boundaryPoints.map(e=>e.offset)}get boundarySegments(){return this.shape===o.ZoneShape.Polygon?p.Geometry.polygonSegements(this.boundaryPoints.map(e=>e.offset.toPoint2())):[]}addBoundaryPoint(e,t=null,n=null){return null===n?this.boundaryPoints.push(e):this.boundaryPoints.splice(n,0,e),e}updateBoundaryPointCoordinate(e,t,n){const i=this.boundaryPoints[e].offset,o=this.referenceCoordinate(n).offset(t);this.boundaryPoints[e].offset=o;let a=this.boundarySegments,r=e,s=0;for(const t of a){if(s!==r&&s!==h.Common.modSafe(r+1,a.length)&&s!==h.Common.modSafe(r-1,a.length)&&null!==p.Geometry.lineIntersectionLine(a[r],t))return void(this.boundaryPoints[e].offset=i);s++}r=h.Common.modSafe(e-1,a.length),s=0;for(const t of a){if(s!==r&&s!==h.Common.modSafe(r+1,a.length)&&s!==h.Common.modSafe(r-1,a.length)&&null!==p.Geometry.lineIntersectionLine(a[r],t))return void(this.boundaryPoints[e].offset=i);s++}}removeBoundaryPoint(e,t){return this.boundaryPoints=this.boundaryPoints.filter(t=>t!==e),e}boundaryPointCoordinates(e){return this.boundaryPointOffsets.map(t=>this.referenceCoordinate(e,t))}boundaryPointCoordinate(e,t){return this.referenceCoordinate(e,this.boundaryPoints[t].offset)}updateShape(e,t,n,i){this.shape=t,this.boundaryPoints=[];let a=this.referenceCoordinate(e).offset(n),r=new m.ZoneBoundaryPoint;switch(t){case o.ZoneShape.Circle:r.offset=a,this.addBoundaryPoint(r,e),(r=new m.ZoneBoundaryPoint).offset=a.add(new c.Vector2(0,i)),this.addBoundaryPoint(r,e);break;case o.ZoneShape.Polygon:r.offset=a.add(new c.Vector2(-Math.PI/4,i)),this.addBoundaryPoint(r,e),(r=new m.ZoneBoundaryPoint).offset=a.add(new c.Vector2(Math.PI/4,i)),this.addBoundaryPoint(r,e),(r=new m.ZoneBoundaryPoint).offset=a.add(new c.Vector2(3*Math.PI/4,i)),this.addBoundaryPoint(r,e),(r=new m.ZoneBoundaryPoint).offset=a.add(new c.Vector2(-3*Math.PI/4,i)),this.addBoundaryPoint(r,e)}}centerCoordinate(e){switch(this.shape){case o.ZoneShape.Circle:return this.boundaryPointCoordinate(e,0);case o.ZoneShape.Polygon:const t=C.Point2.boundingBox(this.boundaryPointOffsets.map(e=>e.toPoint2()));return this.referenceCoordinate(e,t.topLeft.midPoint(t.bottomRight).toVector2())}}get radius(){switch(this.shape){case o.ZoneShape.Circle:return this.boundaryPoints.length<2?0:this.boundaryPoints[0].offset.toPoint2().distance(this.boundaryPoints[1].offset.toPoint2());case o.ZoneShape.Polygon:const e=C.Point2.boundingBox(this.boundaryPointOffsets.map(e=>e.toPoint2()));return e.topLeft.distance(e.bottomRight)/2}}altitudeInRange(e){return!!new g.Limits(this.maxAltitude.value,this.minAltitude.value).valid(e)}altitudesInRange(e){const t=new g.Limits(Math.max(e.start,e.end),Math.min(e.start,e.end)),n=new g.Limits(this.maxAltitude.value,this.minAltitude.value);return!(!n.valid(e.start)&&!n.valid(e.end))||t.min<=this.minAltitude.value&&t.max>=this.maxAltitude.value}edgeSpatial(e,t,n,i){if(n){if(!this.altitudesInRange({start:t.altitude.value,end:n.altitude.value}))return null}else if(!this.altitudeInRange(t.altitude.value))return null;const a=this.boundaryPointOffsets.map(e=>e.toPoint2());if(a.length<2)return null;const s=e=>{switch(this.motionPriority){case o.ZoneMotionPriority.Horizontal:const n=e.toGeoSpatial();return n.altitude=r.Serialization.clone(t.altitude),i&&this.minHorizontalExitAltitude&&(n.altitude.value=Math.max(n.altitude.value,this.minHorizontalExitAltitude.value)),n;case o.ZoneMotionPriority.Vertical:const a=e.toGeoSpatial();return a.altitude=r.Serialization.clone(this.maxAltitude),a}},l=this.referenceSpatial(e).coordinate,u=l.offset(t.coordinate).toPoint2();switch(this.shape){case o.ZoneShape.Circle:const e={center:a[0],radius:this.radius};if(p.Geometry.circlePointInside(e,u)){const n=l.geoCoordinate(a[0].toVector2());return s(n.geoCoordinate(new c.Vector2(n.bearing(t.coordinate),e.radius+f.Constants.ZoneEdgeBufferDistance)))}break;case o.ZoneShape.Polygon:if(p.Geometry.polygonPointInside(u,a)){const e=p.Geometry.polygonClosestPoint(a,u).point.toVector2().subtract(u.toVector2());return e.magnitude+=f.Constants.ZoneEdgeBufferDistance,s(l.geoCoordinate(u.toVector2().add(e)))}}return null}intersections(e,t,n){var i,a;if(!this.altitudesInRange({start:t.altitude.value,end:n.altitude.value}))return null;const r=this.boundaryPointOffsets.map(e=>e.toPoint2());if(r.length<2)return null;const s=this.referenceSpatial(e).coordinate,l=new u.Line2(s.offset(t.coordinate).toPoint2(),s.offset(n.coordinate).toPoint2()),c=[];switch(this.shape){case o.ZoneShape.Circle:null===(i=p.Geometry.lineIntersectionsCircle(l,{center:r[0],radius:this.radius}))||void 0===i||i.forEach(e=>{c.push({coordinate:s.geoCoordinate(e.toVector2()),segmentIndex:0})});break;case o.ZoneShape.Polygon:null===(a=p.Geometry.lineIntersectionsPolygon(l,r))||void 0===a||a.forEach(e=>{c.push({coordinate:s.geoCoordinate(e.point.toVector2()),segmentIndex:e.segmentIndex})})}return c&&c.length>0?c:null}static path(e,t,n,i){var a,l,u,m,f;if(0===e.length)return null;const g=(n,i)=>{const o=new v,a=()=>o.currentSpatial||n;let s=e.slice();for(;s.length>0;){let e=s.map(e=>({zone:e,spatial:e.edgeSpatial(t,a(),null,null!==i)})).filter(e=>e.spatial);if(0===e.length&&i&&!o.currentAltitudeEquivalent(i)){const n=r.Serialization.clone(a());n.altitude=i,e=s.map(e=>{const i=e.edgeSpatial(t,a(),n,!0);return i&&(i.altitude.value=a().altitude.value<=e.minAltitude.value?e.minAltitude.value:e.maxAltitude.value),{zone:e,spatial:i}}).filter(e=>e.spatial)}if(0===e.length)break;const n=e.sort((e,t)=>a().distance(e.spatial)-a().distance(t.spatial))[0];o.currentSegment||o.add(a(),n.zone),o.add(n.spatial,n.zone),s=s.filter(e=>e!==n.zone)}return o};let C=!1;const S=g(i,null),b=g(n,(null===(a=S.currentSegment)||void 0===a?void 0:a.altitude)||i.altitude);S.currentSpatial?C=!0:S.add(i,null),b.currentSpatial?C=!0:b.add(n,null);const w=(null===(l=S.currentSpatial)||void 0===l?void 0:l.altitude)||i.altitude;if(!b.currentAltitudeEquivalent(w)){const e=r.Serialization.clone(b.currentSpatial);e.altitude=w,b.add(e,(null===(m=null===(u=b.currentPoint)||void 0===u?void 0:u.zone)||void 0===m?void 0:m.altitudeInRange(w.value))&&(null===(f=b.currentPoint)||void 0===f?void 0:f.zone)||null)}let x=!1,M=e.slice();for(;M.length>0;){let e=M.map(e=>{var n;const i=e.intersections(t,b.currentSpatial,S.currentSpatial);if(i){const t=i[0].coordinate.distance(null===(n=b.currentSpatial)||void 0===n?void 0:n.coordinate);return{zone:e,intersections:i,distance:t}}return{zone:e,intersections:i,distance:0}}).filter(e=>e.intersections);if(0===e.length)break;x=!0;const n=e.sort((e,t)=>e.distance-t.distance)[0],a=n.zone,r=n.intersections;if(1===r.length){const e=r[0].coordinate.toGeoSpatial();e.altitude=w,b.add(e,null)}else switch(a.shape){case o.ZoneShape.Circle:const e=a.centerCoordinate(t),n=a.radius,l=e.bearing(r[0].coordinate),u=e.bearing(r[1].coordinate),m=p.Geometry.angleDifferenceSigned(l,u),d=Math.ceil(Math.abs(m)/y.Convert.degreesToRadians(5));for(var O=0;O<=d;O++){let t=l-O/d*m;const i=e.geoCoordinate(new c.Vector2(t,n)).toGeoSpatial();i.altitude=w,b.add(i,O===d?null:a)}break;case o.ZoneShape.Polygon:const f=a.boundaryPoints.map(e=>e.offset.toPoint2()),g=y.Convert.feetToMeters(5),C=p.Geometry.polygonSegements(f),v=r[0].segmentIndex,S=e=>{const n=[],i=h.Common.last(r).segmentIndex;if(v===i)return[];n.push(a.referenceCoordinate(t).offset(r[0].coordinate).toPoint2());for(var o=1;o<f.length;o++){const s=h.Common.modSafe((e?o:-o)+v,f.length),l=C[s];if(n.push(e?l.a:l.b),s===i){n.push(a.referenceCoordinate(t).offset(h.Common.last(r).coordinate).toPoint2());break}l.length>3*g&&(n.push(l.interpolate(e?g:l.length-g)),n.push(l.interpolate(e?l.length-g:g)))}return n.map(e=>a.referenceCoordinate(t,e.toVector2()))},x=S(!0),M=S(!1),T=s.GeoCoordinate.totalDistance(x)<=s.GeoCoordinate.totalDistance(M)?x:M;T.forEach((e,t)=>{const n=e.toGeoSpatial();n.altitude=i.altitude,b.add(n,t<T.length-1?a:null)})}M=M.filter(e=>e!==a)}return C||x?(S.segments.reverse().forEach(e=>{e.points.reverse().forEach(t=>{const n=new d.GeoSpatial;n.coordinate=t.coordinate,n.altitude=e.altitude,b.add(n,t.zone)})}),b):null}};class v{constructor(){this.segments=[]}get currentSegment(){return h.Common.lastSafe(this.segments)}get currentPoint(){var e;return(null===(e=this.currentSegment)||void 0===e?void 0:e.currentPoint)||null}get currentSpatial(){const e=this.currentSegment;return e?e.currentSpatial:null}get spatials(){return this.segments.map(e=>e.spatials)}currentAltitudeEquivalent(e){return!!this.currentSegment&&Math.abs(this.currentSegment.altitude.value-e.value)<.01}add(e,t){var n;if(!this.currentSegment)return this.segments.push(new S([new b(e.coordinate,t)],e.altitude)),this;if(!this.currentAltitudeEquivalent(e.altitude)){const t=this.currentPoint;t&&this.segments.push(new S([new b(t.coordinate,t.zone)],e.altitude))}return null===(n=this.currentSegment)||void 0===n||n.points.push(new b(e.coordinate,t)),this}}t.ZonePath=v;class S{constructor(e,t){this.points=e,this.altitude=t}get currentPoint(){return h.Common.lastSafe(this.points)}get currentSpatial(){const e=h.Common.lastSafe(this.points);if(!e)return null;const t=new d.GeoSpatial;return t.coordinate=e.coordinate,t.altitude=this.altitude,t}get spatials(){return this.points.map(e=>{const t=new d.GeoSpatial;return t.coordinate=e.coordinate,t.altitude=r.Serialization.clone(this.altitude),t})}}t.ZonePathSegment=S;class b{constructor(e,t=null){this.coordinate=e,this.zone=t}}t.ZonePathPoint=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(12),a=n(8),r=n(4),s=n(10),l=n(3),u=n(44),c=n(29),m=n(2),d=n(71),h=n(1);t.HeadingComponent=class extends d.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.HeadingComponent,this.heading=0,this.achievementTime=a.Constants.HeadingComponentAchievementTime,this.achievementDistance=a.Constants.HeadingComponentAchievementDistance}applyJSON(e){super.applyJSON(e),h.Serialization.validateType(e,this.type),this.heading=m.Common.parseFloat(e.heading,this.heading),this.achievementTime=m.Common.parseFloat(e.achievementTime,this.achievementTime),this.achievementDistance=m.Common.parseFloat(e.achievementDistance,this.achievementDistance)}get subtitle(){const e=l.Format.angle(this.heading).toString();return this.achievementDistance>0?r.Strings.formatString(r.Strings.HeadingComponent.subtitle,e,l.Format.angle(this.achievementDistance).toString()):e}get repositionIfIncluded(){return!1}achieved(e){const t=e.execution.getComponentState(this).cachedData(i.TypeName.HeadingComponent);if(t&&t.achievementDistanceValidSince){const n=o.Geometry.angleDifferenceSigned(this.heading,e.drone.projectSpatial(e.engagement.currentDatetime).orientation.yaw);if(Math.abs(n)<=this.achievementDistance&&e.elapsedTime(t.achievementDistanceValidSince)>=this.achievementTime)return!0}return!1}estimate(e,t){const n=super.estimate(e,t),i=h.Serialization.clone(t);i.orientation.yaw=this.heading,n.droneSpatials.push(i);let r=0;if(e.timeRequired){const e=a.Constants.DroneMotionLimits.Max(),s=n.time,l=Math.abs(o.Geometry.angleDifferenceSigned(this.heading,t.orientation.yaw));l-this.achievementDistance>0&&(r=(l-this.achievementDistance)/e.rotational.velocity.max,n.time+=r),n.time+=this.achievementTime;const u=n.children.find(e=>e.component===this.immediateComponent);u&&u.totalTime>n.time&&(n.time+=u.totalTime-n.time,r=u.totalTime),i.updated.increment(n.time-s)}if(this.achievedComponent){const o=h.Serialization.clone(i);o.updated.value=new Date(t.updated.value.getTime()+1e3*r);const a=this.achievedComponent.estimate(e,o);n.children.push(a)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n}=e,a=n.projectSpatial(e.engagement.currentDatetime),m=o.Geometry.angleDifferenceSigned(this.heading,a.orientation.yaw),d=this.resolveDroneMotionLimits(e),h=t.cachedData(i.TypeName.HeadingComponent,()=>new p(n.spatial.coordinate.geoCoordinate(),Math.abs(m))),f=new c.Velocity6;u.VelocityDroneCommand.updateBoundedVelocityRotational(f,m,d,this.referenceSpatial(e).velocity.rotational);const g=h.startCoordinate,y=a.coordinate.offset(g),C=new c.Velocity6;if(u.VelocityDroneCommand.updateBoundedVelocityHorizontal(C,y.direction,y.magnitude,d),f.horizontal=f.horizontal.add(C.horizontal),Math.abs(m)<=this.achievementDistance){h.achievementDistanceValidSince||(h.achievementDistanceValidSince=e.engagement.currentDatetime);const n=e.elapsedTime(h.achievementDistanceValidSince);n<this.achievementTime&&t.messages.push(new s.Message(r.Strings.AchievableDroneMotionComponent.messages.waiting.title,l.Format.number(this.achievementTime-n)))}else h.achievementDistanceValidSince=null,Math.abs(m)>.01&&t.messages.push(new s.Message(r.Strings.HeadingComponent.messages.rotating.title,l.Format.angle(m,!1).toString()));return this.addDroneVelocityCommand(e,f,this.heading),t.progress=h.progress(Math.abs(m)),t}};class p{constructor(e,t){this.achievementDistanceValidSince=null,this.startCoordinate=e,this.totalDistance=t}progress(e){return e>this.totalDistance?0:(this.totalDistance-e)/this.totalDistance}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(97),o=n(1),a=n(22),r=n(0),s=n(9),l=n(61),u=n(8),c=n(62),m=n(53),d=n(80),h=n(135),p=n(2);t.PlanComponent=class extends i.Component{constructor(){super(...arguments),this.type=r.TypeName.PlanComponent,this.takeoffOffset=null,this.takeoffDistance=new l.DistanceTolerance(u.Constants.PlanComponentTakeoffDistanceHorizontal),this.droneMotionLimits=u.Constants.DroneMotionLimits.Conservative(),this.droneMotionErrorTolerance=new l.DistanceTolerance(u.Constants.DroneMotionErrorToleranceHorizontal,u.Constants.DroneMotionErrorToleranceVertical),this.rootComponent=new c.ListComponent,this.restrictionZones=[],this.reengagementRules=new h.PlanReengagementRules,this.completeAction=r.PlanCompleteAction.None}applyJSON(e){if(super.applyJSON(e),o.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.coordinate.applyJSON(e.coordinate),this.droneMotionLimits.applyJSON(e.droneMotionLimits),this.takeoffDistance.applyJSON(e.takeoffDistance),this.takeoffOffset=o.Serialization.deserialize(e.takeoffOffset,s.Vector2),e.droneMotionErrorTolerance&&this.droneMotionErrorTolerance.applyJSON(e.droneMotionErrorTolerance),this.rootComponent=o.Serialization.deserialize(e.rootComponent,a.SubComponent,!1),this.restrictionZones=[],Array.isArray(e.restrictionZones))for(let t of e.restrictionZones)this.restrictionZones.push(o.Serialization.deserialize(t,d.PlanRestrictionZone,!1));e.reengagementRules?this.reengagementRules.applyJSON(e.reengagementRules):this.reengagementRules=new h.PlanReengagementRules,this.completeAction=p.Common.parseString(e.completeAction,this.completeAction)}verification(e){const t=this.rootComponent.verification(e);if(!t)return null;const n=o.Serialization.clone(this,!0);return n.rootComponent=t,n}get referenceOffsets(){const e=super.referenceOffsets;return this.restrictionZones.forEach(t=>{e.push(...t.zone.boundaryPoints.map(e=>e.offset))}),e}get requiredTakeoffCoordinate(){return this.takeoffOffset?this.coordinate.geoCoordinate(this.takeoffOffset):null}get takeoffCoordinate(){return this.requiredTakeoffCoordinate||this.coordinate}elevationCoordinates(e){const t=super.elevationCoordinates(e);return t.push(this.takeoffCoordinate),t}get context(){return new m.Context(this)}node(e=null){const t=super.node(e);return t.addChild(this.rootComponent,!1),t.children.push(new d.PlanRestrictionZonesNode(t,()=>this.restrictionZones)),t}estimate(e,t){return this.restrictionZones.length>0&&(e.altitudeRequired=!0),this.rootComponent.estimate(e,t)}execute(e){const t=super.execute(e);if(t.status!==r.ComponentExecutionStatus.Executing)return t;const n=this.rootComponent.execute(e);switch(n.status){case r.ComponentExecutionStatus.Pending:case r.ComponentExecutionStatus.Executing:return t;case r.ComponentExecutionStatus.Succeeded:case r.ComponentExecutionStatus.Failed:if(n.status===r.ComponentExecutionStatus.Failed&&this.rootComponent.required)return this.failed(e,n.error)}return this.succeeded(e)}}},function(e,t,n){(function(){var t;t=n(23),e.exports=function(){class e extends t{constructor(e){super(e),this.value=""}clone(){return Object.create(this)}substringData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}appendData(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}insertData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}deleteData(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}replaceData(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){return!!super.isEqualNode(e)&&e.data===this.data}}return Object.defineProperty(e.prototype,"data",{get:function(){return this.value},set:function(e){return this.value=e||""}}),Object.defineProperty(e.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(e){return this.value=e||""}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(this)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var i=n(247),o=n(248),a=n(157);function r(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(r()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return m(this,e)}return u(this,e,t,n)}function u(e,t,n,i){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,i){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(i||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===i?new Uint8Array(t):void 0===i?new Uint8Array(t,n):new Uint8Array(t,n,i);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=d(e,t);return e}(e,t,n,i):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var i=0|p(t,n),o=(e=s(e,i)).write(t,n);o!==i&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|h(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(i=t.length)!=i?s(e,0):d(e,t);if("Buffer"===t.type&&a(t.data))return d(e,t.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function m(e,t){if(c(t),e=s(e,t<0?0:0|h(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|h(t.length);e=s(e,n);for(var i=0;i<n;i+=1)e[i]=255&t[i];return e}function h(e){if(e>=r())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r().toString(16)+" bytes");return 0|e}function p(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return j(e).length;default:if(i)return V(e).length;t=(""+t).toLowerCase(),i=!0}}function f(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function g(e,t,n,i,o){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=l.from(t,i)),l.isBuffer(t))return 0===t.length?-1:y(e,t,n,i,o);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,i,o);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,i,o){var a,r=1,s=e.length,l=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;r=2,s/=2,l/=2,n/=2}function u(e,t){return 1===r?e[t]:e.readUInt16BE(t*r)}if(o){var c=-1;for(a=n;a<s;a++)if(u(e,a)===u(t,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===l)return c*r}else-1!==c&&(a-=a-c),c=-1}else for(n+l>s&&(n=s-l),a=n;a>=0;a--){for(var m=!0,d=0;d<l;d++)if(u(e,a+d)!==u(t,d)){m=!1;break}if(m)return a}return-1}function C(e,t,n,i){n=Number(n)||0;var o=e.length-n;i?(i=Number(i))>o&&(i=o):i=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");i>a/2&&(i=a/2);for(var r=0;r<i;++r){var s=parseInt(t.substr(2*r,2),16);if(isNaN(s))return r;e[n+r]=s}return r}function v(e,t,n,i){return U(V(t,e.length-n),e,n,i)}function S(e,t,n,i){return U(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,i)}function b(e,t,n,i){return S(e,t,n,i)}function w(e,t,n,i){return U(j(t),e,n,i)}function x(e,t,n,i){return U(function(e,t){for(var n,i,o,a=[],r=0;r<e.length&&!((t-=2)<0);++r)n=e.charCodeAt(r),i=n>>8,o=n%256,a.push(o),a.push(i);return a}(t,e.length-n),e,n,i)}function M(e,t,n){return 0===t&&n===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,n))}function O(e,t,n){n=Math.min(e.length,n);for(var i=[],o=t;o<n;){var a,r,s,l,u=e[o],c=null,m=u>239?4:u>223?3:u>191?2:1;if(o+m<=n)switch(m){case 1:u<128&&(c=u);break;case 2:128==(192&(a=e[o+1]))&&(l=(31&u)<<6|63&a)>127&&(c=l);break;case 3:a=e[o+1],r=e[o+2],128==(192&a)&&128==(192&r)&&(l=(15&u)<<12|(63&a)<<6|63&r)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:a=e[o+1],r=e[o+2],s=e[o+3],128==(192&a)&&128==(192&r)&&128==(192&s)&&(l=(15&u)<<18|(63&a)<<12|(63&r)<<6|63&s)>65535&&l<1114112&&(c=l)}null===c?(c=65533,m=1):c>65535&&(c-=65536,i.push(c>>>10&1023|55296),c=56320|1023&c),i.push(c),o+=m}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",i=0;for(;i<t;)n+=String.fromCharCode.apply(String,e.slice(i,i+=T));return n}(i)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=r(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return u(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,i){return c(t),t<=0?s(e,t):void 0!==n?"string"==typeof i?s(e,t).fill(n,i):s(e,t).fill(n):s(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return m(null,e)},l.allocUnsafeSlow=function(e){return m(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,i=t.length,o=0,a=Math.min(n,i);o<a;++o)if(e[o]!==t[o]){n=e[o],i=t[o];break}return n<i?-1:i<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var i=l.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var r=e[n];if(!l.isBuffer(r))throw new TypeError('"list" argument must be an Array of Buffers');r.copy(i,o),o+=r.length}return i},l.byteLength=p,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)f(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)f(this,t,t+3),f(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)f(this,t,t+7),f(this,t+1,t+6),f(this,t+2,t+5),f(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?O(this,0,e):function(e,t,n){var i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return E(this,t,n);case"utf8":case"utf-8":return O(this,t,n);case"ascii":return P(this,t,n);case"latin1":case"binary":return D(this,t,n);case"base64":return M(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,n);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,i,o){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),t<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&t>=n)return 0;if(i>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(i>>>=0),r=(n>>>=0)-(t>>>=0),s=Math.min(a,r),u=this.slice(i,o),c=e.slice(t,n),m=0;m<s;++m)if(u[m]!==c[m]){a=u[m],r=c[m];break}return a<r?-1:r<a?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return g(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return g(this,e,t,n,!1)},l.prototype.write=function(e,t,n,i){if(void 0===t)i="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)i=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var a=!1;;)switch(i){case"hex":return C(this,e,t,n);case"utf8":case"utf-8":return v(this,e,t,n);case"ascii":return S(this,e,t,n);case"latin1":case"binary":return b(this,e,t,n);case"base64":return w(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),a=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function P(e,t,n){var i="";n=Math.min(e.length,n);for(var o=t;o<n;++o)i+=String.fromCharCode(127&e[o]);return i}function D(e,t,n){var i="";n=Math.min(e.length,n);for(var o=t;o<n;++o)i+=String.fromCharCode(e[o]);return i}function E(e,t,n){var i=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>i)&&(n=i);for(var o="",a=t;a<n;++a)o+=B(e[a]);return o}function F(e,t,n){for(var i=e.slice(t,n),o="",a=0;a<i.length;a+=2)o+=String.fromCharCode(i[a]+256*i[a+1]);return o}function A(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,i,o,a){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function _(e,t,n,i){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-n,2);o<a;++o)e[n+o]=(t&255<<8*(i?o:1-o))>>>8*(i?o:1-o)}function R(e,t,n,i){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-n,4);o<a;++o)e[n+o]=t>>>8*(i?o:3-o)&255}function I(e,t,n,i,o,a){if(n+i>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(e,t,n,i,a){return a||I(e,0,n,4),o.write(e,t,n,i,23,4),n+4}function z(e,t,n,i,a){return a||I(e,0,n,8),o.write(e,t,n,i,52,8),n+8}l.prototype.slice=function(e,t){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(t=void 0===t?i:~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var o=t-e;n=new l(o,void 0);for(var a=0;a<o;++a)n[a]=this[a+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=this[e],o=1,a=0;++a<t&&(o*=256);)i+=this[e+a]*o;return i},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=this[e+--t],o=1;t>0&&(o*=256);)i+=this[e+--t]*o;return i},l.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=this[e],o=1,a=0;++a<t&&(o*=256);)i+=this[e+a]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||A(e,t,this.length);for(var i=t,o=1,a=this[e+--i];i>0&&(o*=256);)a+=this[e+--i]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},l.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),o.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),o.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),o.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),o.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,a=0;for(this[t]=255&e;++a<n&&(o*=256);)this[t+a]=e/o&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,i){(e=+e,t|=0,n|=0,i)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):_(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):_(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):R(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,i){if(e=+e,t|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var a=0,r=1,s=0;for(this[t]=255&e;++a<n&&(r*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/r>>0)-s&255;return t+n},l.prototype.writeIntBE=function(e,t,n,i){if(e=+e,t|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var a=n-1,r=1,s=0;for(this[t+a]=255&e;--a>=0&&(r*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/r>>0)-s&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):_(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):_(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):R(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return L(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return L(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return z(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return z(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,i){if(n||(n=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-t+n);var o,a=i-n;if(this===e&&n<t&&t<i)for(o=a-1;o>=0;--o)e[o+t]=this[o+n];else if(a<1e3||!l.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+a),t);return a},l.prototype.fill=function(e,t,n,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!l.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var a;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{var r=l.isBuffer(e)?e:V(new l(e,i).toString()),s=r.length;for(a=0;a<n-t;++a)this[a+t]=r[a%s]}return this};var k=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function V(e,t){var n;t=t||1/0;for(var i=e.length,o=null,a=[],r=0;r<i;++r){if((n=e.charCodeAt(r))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(r+1===i){(t-=3)>-1&&a.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function j(e){return i.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(k,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,n,i){for(var o=0;o<i&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(42))},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return"function"==typeof e}function o(e){return"object"==typeof e&&null!==e}function a(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,r,s,l,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||o(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(a(n=this._events[e]))return!1;if(i(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(o(n))for(s=Array.prototype.slice.call(arguments,1),r=(u=n.slice()).length,l=0;l<r;l++)u[l].apply(this,s);return!0},n.prototype.addListener=function(e,t){var r;if(!i(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,i(t.listener)?t.listener:t),this._events[e]?o(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,o(this._events[e])&&!this._events[e].warned&&(r=a(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!i(t))throw TypeError("listener must be a function");var n=!1;function o(){this.removeListener(e,o),n||(n=!0,t.apply(this,arguments))}return o.listener=t,this.on(e,o),this},n.prototype.removeListener=function(e,t){var n,a,r,s;if(!i(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=(n=this._events[e]).length,a=-1,n===t||i(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(o(n)){for(s=r;s-- >0;)if(n[s]===t||n[s].listener&&n[s].listener===t){a=s;break}if(a<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(a,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(i(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){(t=e.exports=n(160)).Stream=t,t.Readable=t,t.Writable=n(112),t.Duplex=n(43),t.Transform=n(164),t.PassThrough=n(254)},function(e,t,n){"use strict";(function(t,i,o){var a=n(82);function r(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var i=e.entry;e.entry=null;for(;i;){var o=i.callback;t.pendingcb--,o(n),i=i.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=C;var s,l=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?i:a.nextTick;C.WritableState=y;var u=n(64);u.inherits=n(51);var c={deprecate:n(253)},m=n(161),d=n(83).Buffer,h=o.Uint8Array||function(){};var p,f=n(162);function g(){}function y(e,t){s=s||n(43),e=e||{};var i=t instanceof s;this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var o=e.highWaterMark,u=e.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:i&&(u||0===u)?u:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var m=!1===e.decodeStrings;this.decodeStrings=!m,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,i=n.sync,o=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,i,o){--t.pendingcb,n?(a.nextTick(o,i),a.nextTick(M,e,t),e._writableState.errorEmitted=!0,e.emit("error",i)):(o(i),e._writableState.errorEmitted=!0,e.emit("error",i),M(e,t))}(e,n,i,t,o);else{var r=w(n);r||n.corked||n.bufferProcessing||!n.bufferedRequest||b(e,n),i?l(S,e,n,r,o):S(e,n,r,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function C(e){if(s=s||n(43),!(p.call(C,this)||this instanceof s))return new C(e);this._writableState=new y(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),m.call(this)}function v(e,t,n,i,o,a,r){t.writelen=i,t.writecb=r,t.writing=!0,t.sync=!0,n?e._writev(o,t.onwrite):e._write(o,a,t.onwrite),t.sync=!1}function S(e,t,n,i){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,i(),M(e,t)}function b(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var i=t.bufferedRequestCount,o=new Array(i),a=t.corkedRequestsFree;a.entry=n;for(var s=0,l=!0;n;)o[s]=n,n.isBuf||(l=!1),n=n.next,s+=1;o.allBuffers=l,v(e,t,!0,t.length,o,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new r(t),t.bufferedRequestCount=0}else{for(;n;){var u=n.chunk,c=n.encoding,m=n.callback;if(v(e,t,!1,t.objectMode?1:u.length,u,c,m),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function w(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function x(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),M(e,t)})}function M(e,t){var n=w(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,a.nextTick(x,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}u.inherits(C,m),y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(y.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(C,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===C&&(e&&e._writableState instanceof y)}})):p=function(e){return e instanceof this},C.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},C.prototype.write=function(e,t,n){var i,o=this._writableState,r=!1,s=!o.objectMode&&(i=e,d.isBuffer(i)||i instanceof h);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof n&&(n=g),o.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),a.nextTick(t,n)}(this,n):(s||function(e,t,n,i){var o=!0,r=!1;return null===n?r=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r&&(e.emit("error",r),a.nextTick(i,r),o=!1),o}(this,o,e,n))&&(o.pendingcb++,r=function(e,t,n,i,o,a){if(!n){var r=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n));return t}(t,i,o);i!==r&&(n=!0,o="buffer",i=r)}var s=t.objectMode?1:i.length;t.length+=s;var l=t.length<t.highWaterMark;l||(t.needDrain=!0);if(t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:i,encoding:o,isBuf:n,callback:a,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,s,i,o,a);return l}(this,o,s,e,t,n)),r},C.prototype.cork=function(){this._writableState.corked++},C.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||b(this,e))},C.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(C.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),C.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},C.prototype._writev=null,C.prototype.end=function(e,t,n){var i=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||function(e,t,n){t.ending=!0,M(e,t),n&&(t.finished?a.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,i,n)},Object.defineProperty(C.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),C.prototype.destroy=f.destroy,C.prototype._undestroy=f.undestroy,C.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(63),n(158).setImmediate,n(42))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),a=n(114),r=n(115),s=n(116),l=n(117),u=n(6),c=n(2),m=n(1);t.CameraSpecification=class extends u.Identifiable{constructor(e=null,t="",n=9,l=12.8,u=9.6,m=5472,d=3648){super(e),this.type=i.TypeName.CameraSpecification,this.toString=((e=!1)=>c.Common.joinNotEmpty([this.lens.toString(),this.sensor.toString(),e?this.image.toString():""])),this.descriptors=new o.Descriptors(t),this.lens=new r.CameraLensSpecification(n),this.sensor=new s.CameraSensorSpecification(l,u),this.image=new a.CameraImageSpecification(m,d)}applyJSON(e){super.applyJSON(e),m.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.lens.applyJSON(e.lens),this.sensor.applyJSON(e.sensor),this.image.applyJSON(e.image)}get resettable(){return!1}get fieldOfView(){return new l.FieldOfView(2*Math.atan(this.sensor.width/(2*this.lens.focalLength)),2*Math.atan(this.sensor.height/(2*this.lens.focalLength)),2*Math.atan(Math.sqrt(Math.pow(this.sensor.width,2)+Math.pow(this.sensor.height,2))/(2*this.lens.focalLength)))}groundSampleDistance(e){const t=this.sensor.width/1e3,n=this.sensor.height/1e3,i=this.lens.focalLength/1e3;return{width:e*t/(i*this.image.width),height:e*n/(i*this.image.height)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(4),r=n(3),s=n(1);t.CameraImageSpecification=class{constructor(e=1,t=1){this.type=i.TypeName.CameraImageSpecification,this.toString=(()=>`${a.Strings.CameraImageSpecification.name}: ${r.Format.cameraSpecificationPixels(this.width).toString()} x ${r.Format.cameraSpecificationPixels(this.height).toString()}`),this.width=e,this.height=t}applyJSON(e){s.Serialization.validateJson(e),s.Serialization.validateType(e,this.type),this.width=o.Common.parseFloat(e.width,this.width),this.height=o.Common.parseFloat(e.height,this.height)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(4),r=n(3),s=n(1);t.CameraLensSpecification=class{constructor(e=1){this.type=i.TypeName.CameraLensSpecification,this.toString=(()=>`${a.Strings.CameraLensSpecification.name}: ${r.Format.cameraSpecificationLength(this.focalLength).toString()}`),this.focalLength=e}applyJSON(e){s.Serialization.validateJson(e),s.Serialization.validateType(e,this.type),this.focalLength=o.Common.parseFloat(e.focalLength,this.focalLength)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(4),r=n(3),s=n(1);t.CameraSensorSpecification=class{constructor(e=1,t=1){this.type=i.TypeName.CameraSensorSpecification,this.toString=(()=>`${a.Strings.CameraSensorSpecification.name}: ${r.Format.cameraSpecificationLength(this.width).toString()} x ${r.Format.cameraSpecificationLength(this.height).toString()}`),this.width=e,this.height=t}applyJSON(e){s.Serialization.validateJson(e),s.Serialization.validateType(e,this.type),this.width=o.Common.parseFloat(e.width,this.width),this.height=o.Common.parseFloat(e.height,this.height)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(2),a=n(1);t.FieldOfView=class{constructor(e=0,t=0,n=0){this.type=i.TypeName.FieldOfView,this.horizontal=e,this.vertical=t,this.diagonal=n}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.horizontal=o.Common.parseFloat(e.horizontal,this.horizontal),this.vertical=o.Common.parseFloat(e.vertical,this.vertical),this.diagonal=o.Common.parseFloat(e.diagonal,this.diagonal)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.ExposureModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ExposureModeCameraCommand,this.exposureMode=o.CameraExposureMode.Program}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.exposureMode=s.Common.parseString(e.exposureMode,this.exposureMode)}get subtitle(){return a.Format.enum("CameraExposureMode",this.exposureMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get reengagementReplaceable(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(15),s=n(2),l=n(1);t.FocusCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.FocusCameraCommand,this.focusTarget=new r.Point2(.5,.5)}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.focusTarget.applyJSON(e.focusTarget)}get subtitle(){return s.Common.joinNotEmpty([a.Format.percent(this.focusTarget.x).toString(),a.Format.percent(this.focusTarget.y).toString()])}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.VideoFileFormatCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoFileFormatCameraCommand,this.videoFileFormat=o.CameraVideoFileFormat.MP4}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.videoFileFormat=s.Common.parseString(e.videoFileFormat,this.videoFileFormat)}get subtitle(){return a.Format.enum("CameraVideoFileFormat",this.videoFileFormat)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(13),a=n(2),r=n(1);t.ComponentSource=class{constructor(e="",t=new o.Datetime){this.type=i.TypeName.ComponentSource,this.path=e,this.updated=t}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.updated.applyJSON(e.updated),this.path=a.Common.parseString(e.path,this.path)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=l(n(94)),o=l(n(95)),a=l(n(96)),r=l(n(213)),s=l(n(123));function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function e(t){if((0,i.default)(t))return Number(t);if((0,o.default)(t))return(0,a.default)(t);if((0,r.default)(t)){var n=(0,s.default)(t);return Array.isArray(t)?t.map(function(t,n){return[0,1].includes(n)?e(t):t}):function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){u(e,t,n[t])})}return e}({},t,n.latitude&&u({},n.latitude,e(t[n.latitude])),n.longitude&&u({},n.longitude,e(t[n.longitude])))}return Array.isArray(t)?t.map(function(t){return(0,r.default)(t)?e(t):t}):t};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=n(14),a=(i=n(93))&&i.__esModule?i:{default:i};function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(e){var t=(0,a.default)(e,o.longitudeKeys),n=(0,a.default)(e,o.latitudeKeys),i=(0,a.default)(e,o.altitudeKeys);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){r(e,t,n[t])})}return e}({latitude:n,longitude:t},i?{altitude:i}:{})};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationZReferenceSources=class{constructor(e=0,t=0,n=0){this.course=e,this.heading=t,this.path=n}value(e){switch(e){case i.OrientationZReference.North:return 0;case i.OrientationZReference.Course:return this.course;case i.OrientationZReference.Heading:return this.heading;case i.OrientationZReference.Path:return this.path}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.OrientationXReferenceSources=class{constructor(e=0){this.path=e}value(e){switch(e){case i.OrientationXReference.Horizon:return 0;case i.OrientationXReference.Path:return this.path}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),a=n(102),r=n(1),s=n(2);t.AssetSource=class{constructor(e=""){this.type=i.TypeName.AssetSource,this.descriptors=new o.Descriptors,this.key=e}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.key=s.Common.parseString(e.key,this.key),this.descriptors.applyJSON(e.descriptors)}toAsset(e=null){return new a.Asset(this.key||e,r.Serialization.clone(this.descriptors))}get title(){return s.Common.joinNotEmpty([this.key,this.descriptors.name,this.descriptors.description])}get subtitle(){return s.Common.joinNotEmpty(this.descriptors.tags)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(1),a=n(2),r=n(39),s=n(30),l=n(37),u=n(38),c=n(31);t.CameraCaptureConfiguration=class{constructor(){this.type=i.TypeName.CameraCaptureConfiguration,this.channel=0,this.captureType=i.CameraCaptureType.Photos}applyJSON(e){o.Serialization.validateJson(e),o.Serialization.validateType(e,this.type),this.channel=a.Common.parseInt(e.channel,this.channel),this.captureType=a.Common.parseString(e.captureType,this.captureType)}get commandComponents(){const e=[new r.CommandComponent((()=>{const e=new s.StopCaptureCameraCommand;return e.channel=this.channel,e})()),new r.CommandComponent((()=>{const e=new l.ModeCameraCommand;switch(this.captureType){case i.CameraCaptureType.Photos:e.mode=i.CameraMode.Photo;break;case i.CameraCaptureType.Video:e.mode=i.CameraMode.Video}return e.channel=this.channel,e})())];return this.captureType===i.CameraCaptureType.Photos&&e.push(new r.CommandComponent((()=>{const e=new u.PhotoModeCameraCommand;return e.photoMode=i.CameraPhotoMode.Interval,e.channel=this.channel,e})())),e.push(new r.CommandComponent(new c.StartCaptureCameraCommand)),e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(9),a=n(68),r=n(2),s=n(0),l=n(1);t.GeoReferencedOffset=class extends i.Identifiable{constructor(){super(...arguments),this.type=s.TypeName.GeoReferencedOffset,this.reference=null,this.coordinateOffset=new o.Vector2,this.altitudeOffset=0}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.reference=l.Serialization.deserialize(e.reference,a.SourcedGeoSpatial),this.altitudeOffset=r.Common.parseFloat(e.altitudeOffset,this.altitudeOffset),this.coordinateOffset.applyJSON(e.coordinateOffset)}value(e,t){const n=l.Serialization.clone((this.reference||t).value(e));return n.coordinate=n.coordinate.geoCoordinate(this.coordinateOffset),n.altitude.value+=this.altitudeOffset,n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(35);t.DefaultCommand=class extends i.Command{}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(8),a=n(4),r=n(10),s=n(3),l=n(29),u=n(2),c=n(71),m=n(9),d=n(1),h=n(16);t.CourseComponent=class extends c.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.CourseComponent,this.course=0,this.distance=o.Constants.CourseComponentAchievementDistance}applyJSON(e){super.applyJSON(e),d.Serialization.validateType(e,this.type),this.course=u.Common.parseFloat(e.course,this.course),this.distance=u.Common.parseFloat(e.achievementDistance,this.distance)}get subtitle(){return a.Strings.formatString(a.Strings.CourseComponent.subtitle,s.Format.angle(this.course).toString(),s.Format.distance(this.distance).toString()).toString()}achieved(e){return 1===e.execution.getComponentState(this).progress}estimate(e,t){const n=super.estimate(e,t),i=this.resolveDroneMotionLimits(e),o=t.coordinate.geoCoordinate(new m.Vector2(this.course,this.distance)).toGeoSpatial();let a=0;if(e.timeRequired){a=i.timeLineHorizontal(this.distance);const e=n.children.find(e=>e.component===this.immediateComponent);e&&e.totalTime>n.time&&(n.time+=e.totalTime-n.time,a=e.totalTime)}if(this.achievedComponent){const i=d.Serialization.clone(o);i.updated.value=new Date(t.updated.value.getTime()+1e3*a);const r=this.achievedComponent.estimate(e,i);n.children.push(r)}return n.droneSpatials.push(o),n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const n=t.cachedData(i.TypeName.CourseComponent,()=>new p);t.progress+=h.Kinematic.d1(n.velocityPrevious,e.engagement.timeSinceLastExecution)/this.distance,t.progress>.999&&(t.progress=1),t.progress=Math.min(1,t.progress),t.messages.push(new r.Message(s.Format.distance(this.distance*(1-t.progress)).toString()));const o=new l.Velocity6;return o.horizontal=new m.Vector2(this.course,this.resolveDroneMotionLimits(e).horizontal.velocity.max),n.velocityPrevious=this.addDroneVelocityCommand(e,o).velocity.horizontal.magnitude,t}};class p{constructor(){this.velocityPrevious=0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(72),a=n(2),r=n(1);t.MotionLimits3Optional=class{constructor(e=null,t=null,n=null){this.type=i.TypeName.MotionLimits3Optional,this.toString=(e=>a.Common.joinNotEmpty([this.x?this.x.toString(e.x):"",this.y?this.y.toString(e.y):"",this.z?this.z.toString(e.z):""])),this.x=e,this.y=t,this.z=n}applyJSON(e){e||(this.x=null,this.z=null,this.z=null),r.Serialization.validateType(e,this.type),this.x=r.Serialization.deserialize(e.x,o.MotionLimitsOptional),this.y=r.Serialization.deserialize(e.y,o.MotionLimitsOptional),this.z=r.Serialization.deserialize(e.z,o.MotionLimitsOptional)}get pitch(){return this.x}set pitch(e){this.x=e}get roll(){return this.y}set roll(e){this.y=e}get yaw(){return this.z}set yaw(e){this.z=e}get forwardBackward(){return this.x}set forwardBackward(e){this.x=e}get leftRight(){return this.y}set leftRight(e){this.y=e}get upDown(){return this.z}set upDown(e){this.z=e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(28),a=n(18),r=n(4),s=n(3),l=n(1);t.AltitudeRange=class{constructor(e=new a.Altitude,t=new o.Limits){this.type=i.TypeName.AltitudeRange,this.altitude=new a.Altitude,this.altitude=e,this.range=t}applyJSON(e){l.Serialization.validateJson(e),l.Serialization.validateType(e,this.type),this.altitude.applyJSON(e.altitude),this.range.applyJSON(e.range)}toString(){return[this.altitude.toString(),this.range.toString(s.Format.altitude)].join(r.Strings.Common.delimeter)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(53),o=n(101);t.ComponentEstimateContext=class extends i.Context{constructor(){super(...arguments),this.pathRequired=!0,this.altitudeRequired=!1,this.timeRequired=!1,this.cameras={}}camera(e=0){return this.cameras[e]||(this.cameras[e]=new o.Camera(e)),this.cameras[e]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(58);t.PathComponentElementNode=class extends i.ListElementNode{get pathComponentNode(){return this.parent.parent}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(57),a=n(1);t.PlanReengagementRules=class{constructor(){this.type=i.TypeName.PlanReengagementRules,this.pointOfInterest=null}applyJSON(e){a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.pointOfInterest=a.Serialization.deserialize(e.pointOfInterest,o.PointOfInterest)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(102),a=n(1),r=n(17),s=n(6),l=n(24);t.AssetManifest=class extends s.Identifiable{constructor(e=null,t=new r.Descriptors,n=[]){super(e),this.type=i.TypeName.AssetManifest,this.coordinate=null,this.assets=[],this.descriptors=t,this.assets=n}applyJSON(e){if(super.applyJSON(e),a.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.coordinate=a.Serialization.deserialize(e.coordinate,l.GeoCoordinate),this.assets=[],Array.isArray(e.assets))for(let t of e.assets)this.assets.push(a.Serialization.deserialize(t,o.Asset,!1))}add(e){const t=this.assets.find(t=>t.key===e.key);t?t.merge(e):this.assets.push(e)}get size(){return this.assets.reduce((e,t)=>e+t.size,0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(2),a=n(0),r=n(13),s=n(48),l=n(1),u=n(138),c=n(230),m=n(55),d=n(56);t.Engagement=class extends i.Identifiable{constructor(e=null,t=new m.User,n=new d.Device,i=new s.Drone,o=null){super(),this.type=a.TypeName.Engagement,this.reengagement=null,this.lastExecuted=null,this.timeSinceLastExecution=0,this.totalExecutes=0,this.disengagement=null,this.engaged=e||new r.Datetime,this.reengagement=o,this.lastUserSnapshot=l.Serialization.clone(t),this.startDeviceSpatial=l.Serialization.clone(n.spatial),this.lastDeviceSnapshot=l.Serialization.clone(n),this.startDroneSpatial=l.Serialization.clone(i.spatial),this.lastDroneSnapshot=l.Serialization.clone(i)}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.engaged.applyJSON(e.engaged),this.reengagement=l.Serialization.deserialize(e.reengagement,u.Mission),this.lastUserSnapshot.applyJSON(e.lastUserSnapshot),this.startDeviceSpatial.applyJSON(e.startDeviceSpatial),this.lastDeviceSnapshot.applyJSON(e.lastDeviceSnapshot),this.startDroneSpatial.applyJSON(e.startDroneSpatial),this.lastDroneSnapshot.applyJSON(e.lastDroneSnapshot),this.lastExecuted=l.Serialization.deserialize(e.lastExecuted,r.Datetime),this.timeSinceLastExecution=o.Common.parseFloat(e.timeSinceLastExecution,this.timeSinceLastExecution),this.totalExecutes=o.Common.parseInt(e.totalExecutes,this.totalExecutes),this.disengagement=l.Serialization.deserialize(e.disengagement,c.Disengagement)}execute(e,t,n=new d.Device,i){this.lastExecuted&&(this.timeSinceLastExecution=e.elapsedTime(this.lastExecuted)),this.lastUserSnapshot=l.Serialization.clone(t),this.lastDeviceSnapshot=l.Serialization.clone(n),this.lastDroneSnapshot=l.Serialization.clone(i),this.lastExecuted=e,this.totalExecutes++}disengage(e,t){this.disengagement||(e.removeAllStatefulCommands(),this.disengagement=new c.Disengagement(t))}get currentDatetime(){return this.lastExecuted||this.engaged}get timeElapsed(){return(this.currentDatetime.value.getTime()-this.engaged.value.getTime())/1e3}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(106),o=n(137),a=n(139),r=n(2),s=n(17),l=n(6),u=n(55),c=n(0),m=n(22),d=n(13),h=n(231),p=n(232),f=n(1),g=n(8),y=n(99),C=n(133),v=n(10),S=n(33),b=n(4),w=n(239),x=n(62),M=n(103),O=n(105),T=n(39),P=n(67),D=n(90),E=n(30),F=n(28),A=n(31),N=n(154),_=n(9),R=n(16),I=n(130),L=n(72),z=n(3),k=n(27),B=n(136),V=n(81);class j extends l.Identifiable{constructor(){super(...arguments),this.type=c.TypeName.Mission,this.descriptors=null,this.func=null,this.plan=new i.PlanComponent,this.execution=new a.Execution,this.engagements=[]}applyJSON(e){if(super.applyJSON(e),f.Serialization.validateType(e,this.type),this.descriptors=f.Serialization.deserialize(e.descriptors,s.Descriptors),this.plan.applyJSON(e.plan),this.execution.applyJSON(e.execution),this.func=f.Serialization.deserialize(e.func,V.Func),this.engagements=[],Array.isArray(e.engagements))for(let t of e.engagements)this.engagements.push(f.Serialization.deserialize(t,o.Engagement,!1))}static createFromComponent(e){const t=new j;return e instanceof i.PlanComponent?t.plan=e:e instanceof m.SubComponent&&(Object.assign(t.plan.coordinate,e.coordinate),t.plan.descriptors.name=e.descriptors.name,t.plan.rootComponent=e,t.plan.elevations=e.elevations?e.elevations.filter(t=>t.coordinate.distance(e.coordinate)<=g.Constants.ComponentElevationTolerance):null),t.descriptors=f.Serialization.clone(t.plan.descriptors),t}get verification(){const e=new j,t=this.plan.verification(this.context);return t&&(e.plan=t),e.descriptors=f.Serialization.clone(this.descriptors||this.plan.descriptors),e}get complete(){switch(this.execution.getComponentState(this.plan).status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:return!1;case c.ComponentExecutionStatus.Succeeded:case c.ComponentExecutionStatus.Failed:return!0}return!1}get state(){return this.execution.getComponentState(this.plan.rootComponent)}get componentNodeExecutionStates(){const e=this.plan.node(),t=[new w.ComponentNodeExecutionState(e,this.execution.getComponentState(this.plan))];return e.descendants.forEach(e=>{e instanceof y.ComponentNode&&t.push(new w.ComponentNodeExecutionState(e,this.execution.getComponentState(e.component)))}),t}get executingMessageGroups(){const e=[];if(!this.engaged)return e;if(this.reengaging){const t=r.Common.lastSafe(this.engagements);if(t&&t.reengagement){const n=new N.MessageGroup;return n.descriptors.name=b.Strings.Mission.values.reengagement,e.push(n),e.concat(t.reengagement.executingMessageGroups)}}return this.componentNodeExecutionStates.forEach(t=>{if(t.state.status===c.ComponentExecutionStatus.Executing){if(t.node.component instanceof i.PlanComponent)return;if(t.node.parent&&t.node.parent instanceof y.ComponentNode&&t.node.parent.component instanceof i.PlanComponent)return;const n=new N.MessageGroup;n.descriptors.name=r.Common.joinNotEmpty([t.node.title,t.state.progress>0?z.Format.percent(t.state.progress).toString():""]),n.descriptors.description=t.node.subtitle,n.messages.push(...t.state.messages),e.push(n)}}),e}get engagementsTimeElapsed(){let e=0;return this.engagements.forEach(t=>{e+=t.timeElapsed}),e}get droneMotionComponentCount(){return this.plan.node().descendantComponentCount(e=>e instanceof k.DroneMotionComponent)}get elevationsRequired(){return this.plan.node().elevationsRequired(this.context)}get engaged(){const e=r.Common.lastSafe(this.engagements);return!!e&&!e.disengagement}get reengaging(){if(this.engaged){const e=r.Common.lastSafe(this.engagements);if(e&&e.reengagement)return!e.reengagement.complete}return!1}get context(){return this.plan.context}componentExecuteContext(e,t,n){const i=new p.ComponentExecuteContext(this.plan,this.execution,n);return i.user=e,i.drone=t,i}componentEstimateParams(e=!0,t=!1,n=!1,i=null){const o=new C.ComponentEstimateContext(this.plan);return i&&(o.drone=i),o.drone.spatial.coordinate.valid||(o.drone.spatial.coordinate=f.Serialization.clone(this.plan.takeoffCoordinate)),o.pathRequired=e,o.altitudeRequired=t,o.timeRequired=n,{context:o,start:f.Serialization.clone(this.engagements.length>0?this.engagements[0].startDroneSpatial:o.drone.spatial)}}estimate(e=!1,t=!1,n=null){const i=this.componentEstimateParams(!0,e,t,n);return this.plan.estimate(i.context,i.start)}engageDisallowedReasons(e,t,n){if(this.complete)return[new v.Message(b.Strings.Mission.messages.engageDisallowed.complete)];const i=[],o=this.plan.requiredTakeoffCoordinate;return o&&n.takeoffCoordinate.distance(o)>this.plan.takeoffDistance.horizontal&&i.push(new v.Message(b.Strings.Mission.messages.engageDisallowed.requiredTakeoffInvalid.title,b.Strings.formatString(b.Strings.Mission.messages.engageDisallowed.requiredTakeoffInvalid.details,z.Format.distance(n.takeoffCoordinate.distance(o)-this.plan.takeoffDistance.horizontal).toString()))),i}engage(e,t,n,i=null){if(this.complete)return r.Common.last(this.engagements);let a=r.Common.lastSafe(this.engagements);a&&this.disengage(n,new v.Message(b.Strings.Mission.messages.reengaging)),a=new o.Engagement(i,e,t,n,this.reengagement(n)),this.engagements.push(a);const s=this.componentExecuteContext(e,n,a),l=this.componentEstimateParams(!1,!0,!1,n),u=this.plan.estimate(l.context,l.start);return this.plan.node().descendants.forEach(e=>{e instanceof y.ComponentNode&&e.component.engaging(s,u)}),a.reengagement&&a.reengagement.engage(e,t,n,i),a}execute(e,t,n,i=null,o=null,a=!1){let s=this.state;switch(s.status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:o=o||new d.Datetime;let l=r.Common.lastSafe(this.engagements);if(l&&(l.disengagement?l=null:l.lastUserSnapshot.id!==e.id?(this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementUserID)),l=null):l.lastDeviceSnapshot.id!==t.id?(this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementDeviceID)),l=null):l.lastDroneSnapshot.id!==n.id&&(this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementDroneID)),l=null)),!l)return s;let u=!0;if(l.reengagement&&l.reengagement.engaged)switch(l.reengagement.state.status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:u=!1,l.reengagement.execute(e,t,n,null,o);break;case c.ComponentExecutionStatus.Failed:this.disengage(n,new v.Message(b.Strings.Mission.messages.reengagementFailed,l.reengagement.state.error)),u=!1;break;case c.ComponentExecutionStatus.Succeeded:}if(u){l.execute(o,e,t,n),n.statefulCommands.forEach(e=>{n.commandExecutionState(e.id).status===c.CommandExecutionStatus.Succeeded&&this.execution.addReengagementCommand(e)});const r=this.componentExecuteContext(e,n,l);if(r.preview=a,s=this.plan.execute(r),this.complete)switch(s.status){case c.ComponentExecutionStatus.Failed:this.disengage(n,new v.Message(b.Strings.Mission.messages.failed,s.error));break;case c.ComponentExecutionStatus.Succeeded:this.disengage(n,new v.Message(b.Strings.Mission.messages.succeeded))}i&&i.addFrame(r,s.duration)}return s;default:return s}}disengage(e,t){const n=r.Common.lastSafe(this.engagements);n&&n.disengage(e,t)}get disengagement(){const e=r.Common.lastSafe(this.engagements);return e?e.disengagement:null}reengagement(e){if(this.complete||!e.spatial.coordinate.valid)return null;const t=r.Common.lastSafe(this.engagements.filter(e=>!e.reengagement||e.reengagement.state.status===c.ComponentExecutionStatus.Succeeded));if(!t)return null;const n=this.componentExecuteContext(new u.User,e,t),i=new j;i.plan.descriptors=this.plan.descriptors,i.plan.droneMotionLimits=this.plan.droneMotionLimits,i.plan.coordinate=this.plan.coordinate,i.plan.restrictionZones=this.plan.restrictionZones.map(e=>f.Serialization.clone(e,!0));const o=new x.ListComponent;i.plan.rootComponent=o;let a=null;for(const e of this.componentNodeExecutionStates)e.state.status===c.ComponentExecutionStatus.Executing&&e.node.component instanceof k.DroneMotionComponent&&(a=e.node.component.reengagementDroneSpatial(n));let s=a;s||((s=f.Serialization.clone(t.lastDroneSnapshot.spatial)).velocity.horizontal=new _.Vector2,0===s.altitude.value&&(0===e.spatial.altitude.value?s.altitude.value=g.Constants.MissionReengagementMinAltitude:s.altitude.value=e.spatial.altitude.value));const l=new M.DestinationComponent;this.plan.reengagementRules.pointOfInterest&&l.pointsOfInterest.push(this.plan.reengagementRules.pointOfInterest),l.destinationOffset=i.plan.coordinate.offset(s.coordinate),l.altitudeRange.altitude.value=s.altitude.value,l.altitudeRange.range=new F.Limits(g.Constants.MissionReengagementAltitudeRange);let m=0;s.velocity.horizontal.magnitude>g.Constants.MissionReengagementMinRampVelocity&&(m=R.Kinematic.d4(0,s.velocity.horizontal.magnitude,i.plan.droneMotionLimits.horizontal.acceleration.max)),m>0&&l.destinationOffset.addToSelf(new _.Vector2(s.velocity.horizontal.direction+Math.PI,m)),o.childComponents.push(l);const d=e=>this.execution.reengagementCommands.filter(t=>t.reengagementTiming===e).map(e=>f.Serialization.clone(e,!0));l.immediateComponent=(()=>{const e=new x.ListComponent;for(const n of Object.keys(t.lastDroneSnapshot.cameras)){const t=new E.StopCaptureCameraCommand;t.channel=parseInt(n),e.childComponents.push(new T.CommandComponent(t))}for(const n of Object.keys(t.lastDroneSnapshot.gimbals)){const t=new D.ModeGimbalCommand;t.channel=parseInt(n),t.mode=c.GimbalMode.YawFollow,e.childComponents.push(new T.CommandComponent(t))}return d(c.CommandReengagementTiming.Approach).forEach(t=>{e.childComponents.push(new T.CommandComponent(t))}),e.childComponents.length>0?e:null})();const h=new O.HeadingComponent;return h.heading=s.orientation.yaw,h.immediateComponent=(()=>{const e=new x.ListComponent;d(c.CommandReengagementTiming.Destination).forEach(t=>{e.childComponents.push(new T.CommandComponent(t))});for(const n of Object.keys(t.lastDroneSnapshot.gimbals)){const i=new P.OrientationGimbalCommand;i.channel=parseInt(n),i.orientation.apply(t.lastDroneSnapshot.gimbal(i.channel).orientation),e.childComponents.push(new T.CommandComponent(i))}return e.childComponents.length>0?e:null})(),h.achievedComponent=(()=>{const e=new x.ListComponent;for(const n of Object.keys(t.lastDroneSnapshot.cameras)){if(t.lastDroneSnapshot.camera(parseInt(n)).capturing){const t=new A.StartCaptureCameraCommand;t.channel=parseInt(n),e.childComponents.push(new T.CommandComponent(t))}}return e.childComponents.length>0?e:null})(),o.childComponents.push(h),m>0&&o.childComponents.push((()=>{const e=new I.CourseComponent;return e.course=s.velocity.horizontal.direction,e.droneMotionLimits.horizontal=new L.MotionLimitsOptional(new F.Limits(s.velocity.horizontal.magnitude,0)),e.distance=m,e})()),i}get assetManifest(){const e=new B.AssetManifest(this.id);e.coordinate=f.Serialization.clone(this.plan.takeoffCoordinate),e.descriptors.mergeTags([`dronelink.mission:${this.id}`,`dronelink.plan:${this.plan.id}`]),e.descriptors.mergeTags(this.plan.descriptors.tags),this.descriptors&&e.descriptors.mergeTags(this.descriptors.tags),this.func&&e.descriptors.mergeTags(this.func.descriptors.tags);const t=this.execution.allCameraFiles;return this.componentNodeExecutionStates.forEach(n=>{if(n.node.component.assetSource){const i=n.node.component.assetSource.toAsset(n.node.id),o=n.node.component;if(o.type&&i.descriptors.mergeTag(`dronelink.component.type:${o.type}`),i.descriptors.mergeTags(n.node.component.descriptors.tags),!n.state.started)return void e.add(i);const a=n.state.started.value.getTime();let r=n.state.finished?n.state.finished.value.getTime():null;i.cameraFiles=t.filter(e=>!(e.created.value.getTime()<a)&&!(null!=r&&e.created.value.getTime()>r)),e.add(i)}}),e}simulate(e){const t=f.Serialization.clone(this),n=new S.Timeline;let i=!1;const o=new h.Simulation(t.plan.takeoffCoordinate,o=>{if(i&&!o.engaged)return o.stop(),void e(t,n);switch(t.state.status){case c.ComponentExecutionStatus.Pending:break;case c.ComponentExecutionStatus.Executing:const i=n.lastFrame;i&&(e&&!1===e(t,n)&&o.stop(),i.elapsedTime>18e3&&(o.disengage(new v.Message("timeout")),e(t,n)));break;case c.ComponentExecutionStatus.Failed:case c.ComponentExecutionStatus.Succeeded:o.stop(),e(t,n)}});o.missionExecuteIntervalTarget=g.Constants.SimulationUpdateInterval,o.preview=!0,o.engage(t,n),i=!0,o.rate=null}}t.Mission=j},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(92),o=n(0),a=n(35),r=n(1),s=n(70),l=n(65);t.Execution=class{constructor(){this.type=o.TypeName.Execution,this.componentStates={},this.reengagementCommands=[],this.cameraFiles={}}applyJSON(e){r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.componentStates={};for(let t of Object.keys(e.componentStates)){const n=new i.ComponentExecutionState(t);n.applyJSON(e.componentStates[t]),this.componentStates[t]=n}if(this.reengagementCommands=[],Array.isArray(e.reengagementCommands))for(let t of e.reengagementCommands)this.reengagementCommands.push(r.Serialization.deserialize(t,a.Command,!1));if(this.cameraFiles={},e.cameraFiles)for(let t of Object.keys(e.cameraFiles)){const n=e.cameraFiles[t];if(!Array.isArray(n))continue;const i=[];for(let e of n)i.push(r.Serialization.deserialize(e,s.CameraFile,!1));this.cameraFiles[parseInt(t)]=i}}getComponentStateByID(e){let t=this.componentStates[e];return t||(t=new i.ComponentExecutionState(e),this.componentStates[e]=t),t}getComponentState(e){return this.getComponentStateByID(e.id)}addReengagementCommand(e){if(-1===this.reengagementCommands.indexOf(e))if(e.reengagementReplaceable){for(var t=0;t<this.reengagementCommands.length;t++){const n=this.reengagementCommands[t];if(n.type===e.type&&!(n instanceof l.PayloadCommand&&e instanceof l.PayloadCommand&&n.channel!==e.channel)){this.reengagementCommands.splice(t,1);break}}this.reengagementCommands.push(e)}else this.reengagementCommands.push(e)}addCameraFile(e,t){const n=this.cameraFiles[e]||[];n.push(t),this.cameraFiles[e]=n}get allCameraFiles(){const e=[];for(let t of Object.values(this.cameraFiles))e.push(...t);return e}}},function(e,t,n){(function(){var t,i,o,a,r,s,l,u={}.hasOwnProperty;({isObject:l,isFunction:s,getValue:r}=n(34)),a=n(23),t=n(11),i=n(235),o=n(141),e.exports=function(){class e extends a{constructor(e,n,i){var o,a,r,s;if(super(e),null==n)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(n),this.type=t.Element,this.attribs={},this.schemaTypeInfo=null,null!=i&&this.attribute(i),e.type===t.Document&&(this.isRoot=!0,this.documentObject=e,e.rootObject=this,e.children))for(a=0,r=(s=e.children).length;a<r;a++)if((o=s[a]).type===t.DocType){o.name=this.name;break}}clone(){var e,t,n,i;for(t in(n=Object.create(this)).isRoot&&(n.documentObject=null),n.attribs={},i=this.attribs)u.call(i,t)&&(e=i[t],n.attribs[t]=e.clone());return n.children=[],this.children.forEach(function(e){var t;return(t=e.clone()).parent=n,n.children.push(t)}),n}attribute(e,t){var n,o;if(null!=e&&(e=r(e)),l(e))for(n in e)u.call(e,n)&&(o=e[n],this.attribute(n,o));else s(t)&&(t=t.apply()),this.options.keepNullAttributes&&null==t?this.attribs[e]=new i(this,e,""):null!=t&&(this.attribs[e]=new i(this,e,t));return this}removeAttribute(e){var t,n,i;if(null==e)throw new Error("Missing attribute name. "+this.debugInfo());if(e=r(e),Array.isArray(e))for(n=0,i=e.length;n<i;n++)t=e[n],delete this.attribs[t];else delete this.attribs[e];return this}toString(e){return this.options.writer.element(this,this.options.writer.filterOptions(e))}att(e,t){return this.attribute(e,t)}a(e,t){return this.attribute(e,t)}getAttribute(e){return this.attribs.hasOwnProperty(e)?this.attribs[e].value:null}setAttribute(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNode(e){return this.attribs.hasOwnProperty(e)?this.attribs[e]:null}setAttributeNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeAttributeNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setAttributeNS(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}removeAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getAttributeNodeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setAttributeNodeNS(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}hasAttribute(e){return this.attribs.hasOwnProperty(e)}hasAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}setIdAttribute(e,t){return this.attribs.hasOwnProperty(e)?this.attribs[e].isId:t}setIdAttributeNS(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}setIdAttributeNode(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByClassName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}isEqualNode(e){var t,n,i;if(!super.isEqualNode(e))return!1;if(e.namespaceURI!==this.namespaceURI)return!1;if(e.prefix!==this.prefix)return!1;if(e.localName!==this.localName)return!1;if(e.attribs.length!==this.attribs.length)return!1;for(t=n=0,i=this.attribs.length-1;0<=i?n<=i:n>=i;t=0<=i?++n:--n)if(!this.attribs[t].isEqualNode(e.attribs[t]))return!1;return!0}}return Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.attributeMap&&this.attributeMap.nodes||(this.attributeMap=new o(this.attribs)),this.attributeMap}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.nodes=e}clone(){return this.nodes=null}getNamedItem(e){return this.nodes[e]}setNamedItem(e){var t;return t=this.nodes[e.nodeName],this.nodes[e.nodeName]=e,t||null}removeNamedItem(e){var t;return t=this.nodes[e],delete this.nodes[e],t||null}item(e){return this.nodes[Object.keys(this.nodes)[e]]||null}getNamedItemNS(e,t){throw new Error("This DOM method is not implemented.")}setNamedItemNS(e){throw new Error("This DOM method is not implemented.")}removeNamedItemNS(e,t){throw new Error("This DOM method is not implemented.")}}return Object.defineProperty(e.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(11),i=n(107),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=t.CData,this.value=this.stringify.cdata(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.cdata(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;t=n(11),i=n(107),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=t.Comment,this.value=this.stringify.comment(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.comment(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,o;({isObject:o}=n(34)),i=n(23),t=n(11),e.exports=class extends i{constructor(e,n,i,a){super(e),o(n)&&({version:n,encoding:i,standalone:a}=n),n||(n="1.0"),this.type=t.Declaration,this.version=this.stringify.xmlVersion(n),null!=i&&(this.encoding=this.stringify.xmlEncoding(i)),null!=a&&(this.standalone=this.stringify.xmlStandalone(a))}toString(e){return this.options.writer.declaration(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,o,a,r,s,l,u;({isObject:u}=n(34)),l=n(23),t=n(11),i=n(146),a=n(147),o=n(148),r=n(149),s=n(141),e.exports=function(){class e extends l{constructor(e,n,i){var o,a,r,s;if(super(e),this.type=t.DocType,e.children)for(a=0,r=(s=e.children).length;a<r;a++)if((o=s[a]).type===t.Element){this.name=o.name;break}this.documentObject=e,u(n)&&({pubID:n,sysID:i}=n),null==i&&([i,n]=[n,i]),null!=n&&(this.pubID=this.stringify.dtdPubID(n)),null!=i&&(this.sysID=this.stringify.dtdSysID(i))}element(e,t){var n;return n=new o(this,e,t),this.children.push(n),this}attList(e,t,n,o,a){var r;return r=new i(this,e,t,n,o,a),this.children.push(r),this}entity(e,t){var n;return n=new a(this,!1,e,t),this.children.push(n),this}pEntity(e,t){var n;return n=new a(this,!0,e,t),this.children.push(n),this}notation(e,t){var n;return n=new r(this,e,t),this.children.push(n),this}toString(e){return this.options.writer.docType(this,this.options.writer.filterOptions(e))}ele(e,t){return this.element(e,t)}att(e,t,n,i,o){return this.attList(e,t,n,i,o)}ent(e,t){return this.entity(e,t)}pent(e,t){return this.pEntity(e,t)}not(e,t){return this.notation(e,t)}up(){return this.root()||this.documentObject}isEqualNode(e){return!!super.isEqualNode(e)&&(e.name===this.name&&(e.publicId===this.publicId&&e.systemId===this.systemId))}}return Object.defineProperty(e.prototype,"entities",{get:function(){var e,n,i,o,a;for(o={},n=0,i=(a=this.children).length;n<i;n++)(e=a[n]).type!==t.EntityDeclaration||e.pe||(o[e.name]=e);return new s(o)}}),Object.defineProperty(e.prototype,"notations",{get:function(){var e,n,i,o,a;for(o={},n=0,i=(a=this.children).length;n<i;n++)(e=a[n]).type===t.NotationDeclaration&&(o[e.name]=e);return new s(o)}}),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(23),t=n(11),e.exports=class extends i{constructor(e,n,i,o,a,r){if(super(e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());if(null==i)throw new Error("Missing DTD attribute name. "+this.debugInfo(n));if(!o)throw new Error("Missing DTD attribute type. "+this.debugInfo(n));if(!a)throw new Error("Missing DTD attribute default. "+this.debugInfo(n));if(0!==a.indexOf("#")&&(a="#"+a),!a.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(n));if(r&&!a.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(n));this.elementName=this.stringify.name(n),this.type=t.AttributeDeclaration,this.attributeName=this.stringify.name(i),this.attributeType=this.stringify.dtdAttType(o),r&&(this.defaultValue=this.stringify.dtdAttDefault(r)),this.defaultValueType=a}toString(e){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i,o;({isObject:o}=n(34)),i=n(23),t=n(11),e.exports=function(){class e extends i{constructor(e,n,i,a){if(super(e),null==i)throw new Error("Missing DTD entity name. "+this.debugInfo(i));if(null==a)throw new Error("Missing DTD entity value. "+this.debugInfo(i));if(this.pe=!!n,this.name=this.stringify.name(i),this.type=t.EntityDeclaration,o(a)){if(!a.pubID&&!a.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(i));if(a.pubID&&!a.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(i));if(this.internal=!1,null!=a.pubID&&(this.pubID=this.stringify.dtdPubID(a.pubID)),null!=a.sysID&&(this.sysID=this.stringify.dtdSysID(a.sysID)),null!=a.nData&&(this.nData=this.stringify.dtdNData(a.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(i))}else this.value=this.stringify.dtdEntityValue(a),this.internal=!0}toString(e){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(e))}}return Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return null}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(23),t=n(11),e.exports=class extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());i||(i="(#PCDATA)"),Array.isArray(i)&&(i="("+i.join(",")+")"),this.name=this.stringify.name(n),this.type=t.ElementDeclaration,this.value=this.stringify.dtdElementValue(i)}toString(e){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;i=n(23),t=n(11),e.exports=function(){class e extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing DTD notation name. "+this.debugInfo(n));if(!i.pubID&&!i.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(n));this.name=this.stringify.name(n),this.type=t.NotationDeclaration,null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID))}toString(e){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(e))}}return Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(11),i=n(23),e.exports=class extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing raw text. "+this.debugInfo());this.type=t.Raw,this.value=this.stringify.raw(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.raw(this,this.options.writer.filterOptions(e))}}}).call(this)},function(e,t,n){(function(){var t,i;t=n(11),i=n(107),e.exports=function(){class e extends i{constructor(e,n){if(super(e),null==n)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=t.Text,this.value=this.stringify.text(n)}clone(){return Object.create(this)}toString(e){return this.options.writer.text(this,this.options.writer.filterOptions(e))}splitText(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}replaceWholeText(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}}return Object.defineProperty(e.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"wholeText",{get:function(){var e,t,n;for(n="",t=this.previousSibling;t;)n=t.data+n,t=t.previousSibling;for(n+=this.data,e=this.nextSibling;e;)n+=e.data,e=e.nextSibling;return n}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;t=n(11),i=n(107),e.exports=class extends i{constructor(e,n,i){if(super(e),null==n)throw new Error("Missing instruction target. "+this.debugInfo());this.type=t.ProcessingInstruction,this.target=this.stringify.insTarget(n),this.name=this.target,i&&(this.value=this.stringify.insValue(i))}clone(){return Object.create(this)}toString(e){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(e))}isEqualNode(e){return!!super.isEqualNode(e)&&e.target===this.target}}}).call(this)},function(e,t,n){(function(){var t;t=n(238),e.exports=class extends t{constructor(e){super(e)}document(e,t){var n,i,o,a,r;for(t=this.filterOptions(t),a="",i=0,o=(r=e.children).length;i<o;i++)n=r[i],a+=this.writeChildNode(n,t,0);return t.pretty&&a.slice(-t.newline.length)===t.newline&&(a=a.slice(0,-t.newline.length)),a}}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),a=n(10),r=n(1),s=n(2);t.MessageGroup=class{constructor(){this.type=i.TypeName.MessageGroup,this.descriptors=new o.Descriptors,this.messages=[],this.toString=(()=>s.Common.joinNotEmpty([this.descriptors.toString()].concat(this.messages.map(e=>e.toString())),"\n"))}applyJSON(e){if(r.Serialization.validateJson(e),r.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.messages=[],Array.isArray(e.messages))for(let t of e.messages)this.messages.push(r.Serialization.deserialize(t,a.Message,!1))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(17),a=n(1),r=n(2),s=n(3),l=n(48),u=n(4),c=n(19);t.Variable=class{constructor(e=null,t=null){this.type=i.TypeName.Variable,this.descriptors=new o.Descriptors,this.valueNumberMeasurementType=null,e?(this.valueArray=Array.isArray(e),this.valueType=this.valueArray&&e.length>0?typeof e[0]:t,this.value=e):(this.value=null,this.valueArray=!1,this.valueType=t||i.VariableValueType.Drone)}applyJSON(e){if(a.Serialization.validateJson(e),a.Serialization.validateType(e,this.type),this.descriptors.applyJSON(e.descriptors),this.valueType=r.Common.parseString(e.valueType,this.valueType),this.valueArray=r.Common.parseBoolean(e.valueArray,this.valueArray),this.valueNumberMeasurementType=r.Common.parseString(e.valueNumberMeasurementType),e.value){if(this.valueArray&&!Array.isArray(e.value))return void(this.value=null);switch(this.valueType){case i.VariableValueType.Null:case i.VariableValueType.Boolean:case i.VariableValueType.String:case i.VariableValueType.Number:return this.value=e.value,void(this.valueArray&&!Array.isArray(this.value)&&(this.value=null));default:if(this.valueArray){this.value=[];for(let t of e.value){const e=a.Serialization.deserialize(t);if(!e||e.type!==this.valueType)return void(this.value=null);this.value.push(e)}}else if(this.value=a.Serialization.read(e.value),this.value&&this.value.type!==this.valueType)return void(this.value=null);return}}this.value=null}get title(){return r.Common.joinNotEmpty([this.descriptors.name,`${s.Format.enum("VariableValueType",this.valueType)}${this.valueArray?"[]":""}`,this.valueNumberMeasurementTypeDisplay])}get subtitle(){return this.valueFormatted}get valueModelToUser(){if(null!==this.value&&this.valueType===i.VariableValueType.Number&&this.valueNumberMeasurementType){const e=c.Convert.converters(this.valueNumberMeasurementType);return Array.isArray(this.value)?this.value.map(t=>parseFloat(e.modelToUser.display(t))):parseFloat(e.modelToUser.display(this.value))}return this.value}set valueUserToModel(e){if(null!==e){if(this.valueType===i.VariableValueType.Number&&this.valueNumberMeasurementType&&(e=c.Convert.converters(this.valueNumberMeasurementType).userToModel.convert(e)),this.valueArray)return null===this.value&&(this.value=[]),void this.value.push(e);this.value=e}else this.value=null}clearValue(e=!1){this.value&&Array.isArray(this.value)?this.clearArrayValue(e):this.value=null}clearArrayValue(e=!1){e?this.value=null:this.value&&Array.isArray(this.value)&&(1===this.value.length?this.value=null:this.value.pop())}get valueFormatted(){let e=this.value;if(null===e)return u.Strings.Variable.nullValue;Array.isArray(e)&&(e=e[0]);let t="";switch(this.valueType){case i.VariableValueType.Null:break;case i.VariableValueType.Boolean:t=e?u.Strings.Common.yes:u.Strings.Common.no;break;case i.VariableValueType.Number:t=this.valueNumberMeasurementType?c.Convert.converters(this.valueNumberMeasurementType).format(e).toString():s.Format.number(e);break;case i.VariableValueType.String:t=e;break;case i.VariableValueType.Drone:e instanceof l.Drone&&(t=r.Common.joinNotEmpty([e.spatial.coordinate.toString(),e.spatial.altitude.toString()]))}return t?(Array.isArray(this.value)&&this.value.length>1&&(t=`${t} + ${s.Format.integer(this.value.length-1)} ${u.Strings.Common.more}`),t):u.Strings.Variable.nullValue}get valueNumberMeasurementTypeDisplay(){return this.valueNumberMeasurementType?c.Convert.converters(this.valueNumberMeasurementType).modelToUser.unit.abbreviation:""}defaultValue(e=null){let t=null;switch(this.valueType){case i.VariableValueType.Null:break;case i.VariableValueType.Boolean:t=!1;break;case i.VariableValueType.Number:t=0;break;case i.VariableValueType.String:t="test";break;case i.VariableValueType.Drone:t=e?a.Serialization.clone(e):new l.Drone}return this.valueArray?[t]:t}}},function(e,t,n){var i,o;
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */void 0===(o="function"==typeof(i=function(){var e,t,n,i,o,a={},r={},s={currentLocale:"en",zeroFormat:null,nullFormat:null,defaultFormat:"0,0",scalePercentBy100:!0},l={currentLocale:s.currentLocale,zeroFormat:s.zeroFormat,nullFormat:s.nullFormat,defaultFormat:s.defaultFormat,scalePercentBy100:s.scalePercentBy100};function u(e,t){this._input=e,this._value=t}return(e=function(n){var i,o,r,s;if(e.isNumeral(n))i=n.value();else if(0===n||void 0===n)i=0;else if(null===n||t.isNaN(n))i=null;else if("string"==typeof n)if(l.zeroFormat&&n===l.zeroFormat)i=0;else if(l.nullFormat&&n===l.nullFormat||!n.replace(/[^0-9]+/g,"").length)i=null;else{for(o in a)if((s="function"==typeof a[o].regexps.unformat?a[o].regexps.unformat():a[o].regexps.unformat)&&n.match(s)){r=a[o].unformat;break}i=(r=r||e._.stringToNumber)(n)}else i=Number(n)||null;return new u(n,i)}).version="2.0.6",e.isNumeral=function(e){return e instanceof u},e._=t={numberToFormat:function(t,n,i){var o,a,s,l,u,c,m,d,h=r[e.options.currentLocale],p=!1,f=!1,g="",y="",C=!1;if(t=t||0,s=Math.abs(t),e._.includes(n,"(")?(p=!0,n=n.replace(/[\(|\)]/g,"")):(e._.includes(n,"+")||e._.includes(n,"-"))&&(c=e._.includes(n,"+")?n.indexOf("+"):t<0?n.indexOf("-"):-1,n=n.replace(/[\+|\-]/g,"")),e._.includes(n,"a")&&(a=!!(a=n.match(/a(k|m|b|t)?/))&&a[1],e._.includes(n," a")&&(g=" "),n=n.replace(new RegExp(g+"a[kmbt]?"),""),s>=1e12&&!a||"t"===a?(g+=h.abbreviations.trillion,t/=1e12):s<1e12&&s>=1e9&&!a||"b"===a?(g+=h.abbreviations.billion,t/=1e9):s<1e9&&s>=1e6&&!a||"m"===a?(g+=h.abbreviations.million,t/=1e6):(s<1e6&&s>=1e3&&!a||"k"===a)&&(g+=h.abbreviations.thousand,t/=1e3)),e._.includes(n,"[.]")&&(f=!0,n=n.replace("[.]",".")),l=t.toString().split(".")[0],u=n.split(".")[1],m=n.indexOf(","),o=(n.split(".")[0].split(",")[0].match(/0/g)||[]).length,u?(e._.includes(u,"[")?(u=(u=u.replace("]","")).split("["),y=e._.toFixed(t,u[0].length+u[1].length,i,u[1].length)):y=e._.toFixed(t,u.length,i),l=y.split(".")[0],y=e._.includes(y,".")?h.delimiters.decimal+y.split(".")[1]:"",f&&0===Number(y.slice(1))&&(y="")):l=e._.toFixed(t,0,i),g&&!a&&Number(l)>=1e3&&g!==h.abbreviations.trillion)switch(l=String(Number(l)/1e3),g){case h.abbreviations.thousand:g=h.abbreviations.million;break;case h.abbreviations.million:g=h.abbreviations.billion;break;case h.abbreviations.billion:g=h.abbreviations.trillion}if(e._.includes(l,"-")&&(l=l.slice(1),C=!0),l.length<o)for(var v=o-l.length;v>0;v--)l="0"+l;return m>-1&&(l=l.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+h.delimiters.thousands)),0===n.indexOf(".")&&(l=""),d=l+y+(g||""),p?d=(p&&C?"(":"")+d+(p&&C?")":""):c>=0?d=0===c?(C?"-":"+")+d:d+(C?"-":"+"):C&&(d="-"+d),d},stringToNumber:function(e){var t,n,i,o=r[l.currentLocale],a=e,s={thousand:3,million:6,billion:9,trillion:12};if(l.zeroFormat&&e===l.zeroFormat)n=0;else if(l.nullFormat&&e===l.nullFormat||!e.replace(/[^0-9]+/g,"").length)n=null;else{for(t in n=1,"."!==o.delimiters.decimal&&(e=e.replace(/\./g,"").replace(o.delimiters.decimal,".")),s)if(i=new RegExp("[^a-zA-Z]"+o.abbreviations[t]+"(?:\\)|(\\"+o.currency.symbol+")?(?:\\))?)?$"),a.match(i)){n*=Math.pow(10,s[t]);break}n*=(e.split("-").length+Math.min(e.split("(").length-1,e.split(")").length-1))%2?1:-1,e=e.replace(/[^0-9\.]+/g,""),n*=Number(e)}return n},isNaN:function(e){return"number"==typeof e&&isNaN(e)},includes:function(e,t){return-1!==e.indexOf(t)},insert:function(e,t,n){return e.slice(0,n)+t+e.slice(n)},reduce:function(e,t){if(null===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof t)throw new TypeError(t+" is not a function");var n,i=Object(e),o=i.length>>>0,a=0;if(3===arguments.length)n=arguments[2];else{for(;a<o&&!(a in i);)a++;if(a>=o)throw new TypeError("Reduce of empty array with no initial value");n=i[a++]}for(;a<o;a++)a in i&&(n=t(n,i[a],a,i));return n},multiplier:function(e){var t=e.toString().split(".");return t.length<2?1:Math.pow(10,t[1].length)},correctionFactor:function(){return Array.prototype.slice.call(arguments).reduce(function(e,n){var i=t.multiplier(n);return e>i?e:i},1)},toFixed:function(e,t,n,i){var o,a,r,s,l=e.toString().split("."),u=t-(i||0);return o=2===l.length?Math.min(Math.max(l[1].length,u),t):u,r=Math.pow(10,o),s=(n(e+"e+"+o)/r).toFixed(o),i>t-o&&(a=new RegExp("\\.?0{1,"+(i-(t-o))+"}$"),s=s.replace(a,"")),s}},e.options=l,e.formats=a,e.locales=r,e.locale=function(e){return e&&(l.currentLocale=e.toLowerCase()),l.currentLocale},e.localeData=function(e){if(!e)return r[l.currentLocale];if(e=e.toLowerCase(),!r[e])throw new Error("Unknown locale : "+e);return r[e]},e.reset=function(){for(var e in s)l[e]=s[e]},e.zeroFormat=function(e){l.zeroFormat="string"==typeof e?e:null},e.nullFormat=function(e){l.nullFormat="string"==typeof e?e:null},e.defaultFormat=function(e){l.defaultFormat="string"==typeof e?e:"0.0"},e.register=function(e,t,n){if(t=t.toLowerCase(),this[e+"s"][t])throw new TypeError(t+" "+e+" already registered.");return this[e+"s"][t]=n,n},e.validate=function(t,n){var i,o,a,r,s,l,u,c;if("string"!=typeof t&&(t+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",t)),(t=t.trim()).match(/^\d+$/))return!0;if(""===t)return!1;try{u=e.localeData(n)}catch(t){u=e.localeData(e.locale())}return a=u.currency.symbol,s=u.abbreviations,i=u.delimiters.decimal,o="."===u.delimiters.thousands?"\\.":u.delimiters.thousands,!(null!==(c=t.match(/^[^\d]+/))&&(t=t.substr(1),c[0]!==a)||null!==(c=t.match(/[^\d]+$/))&&(t=t.slice(0,-1),c[0]!==s.thousand&&c[0]!==s.million&&c[0]!==s.billion&&c[0]!==s.trillion)||(l=new RegExp(o+"{2}"),t.match(/[^\d.,]/g)||(r=t.split(i)).length>2||(r.length<2?!r[0].match(/^\d+.*\d$/)||r[0].match(l):1===r[0].length?!r[0].match(/^\d+$/)||r[0].match(l)||!r[1].match(/^\d+$/):!r[0].match(/^\d+.*\d$/)||r[0].match(l)||!r[1].match(/^\d+$/))))},e.fn=u.prototype={clone:function(){return e(this)},format:function(t,n){var i,o,r,s=this._value,u=t||l.defaultFormat;if(n=n||Math.round,0===s&&null!==l.zeroFormat)o=l.zeroFormat;else if(null===s&&null!==l.nullFormat)o=l.nullFormat;else{for(i in a)if(u.match(a[i].regexps.format)){r=a[i].format;break}o=(r=r||e._.numberToFormat)(s,u,n)}return o},value:function(){return this._value},input:function(){return this._input},set:function(e){return this._value=Number(e),this},add:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([this._value,e],function(e,t,i,o){return e+Math.round(n*t)},0)/n,this},subtract:function(e){var n=t.correctionFactor.call(null,this._value,e);return this._value=t.reduce([e],function(e,t,i,o){return e-Math.round(n*t)},Math.round(this._value*n))/n,this},multiply:function(e){return this._value=t.reduce([this._value,e],function(e,n,i,o){var a=t.correctionFactor(e,n);return Math.round(e*a)*Math.round(n*a)/Math.round(a*a)},1),this},divide:function(e){return this._value=t.reduce([this._value,e],function(e,n,i,o){var a=t.correctionFactor(e,n);return Math.round(e*a)/Math.round(n*a)}),this},difference:function(t){return Math.abs(e(this._value).subtract(t).value())}},e.register("locale","en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var t=e%10;return 1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$"}}),e.register("format","bps",{regexps:{format:/(BPS)/,unformat:/(BPS)/},format:function(t,n,i){var o,a=e._.includes(n," BPS")?" ":"";return t*=1e4,n=n.replace(/\s?BPS/,""),o=e._.numberToFormat(t,n,i),e._.includes(o,")")?((o=o.split("")).splice(-1,0,a+"BPS"),o=o.join("")):o=o+a+"BPS",o},unformat:function(t){return+(1e-4*e._.stringToNumber(t)).toFixed(15)}}),i={base:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},o="("+(o=(n={base:1e3,suffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]}).suffixes.concat(i.suffixes.filter(function(e){return n.suffixes.indexOf(e)<0})).join("|")).replace("B","B(?!PS)")+")",e.register("format","bytes",{regexps:{format:/([0\s]i?b)/,unformat:new RegExp(o)},format:function(t,o,a){var r,s,l,u=e._.includes(o,"ib")?i:n,c=e._.includes(o," b")||e._.includes(o," ib")?" ":"";for(o=o.replace(/\s?i?b/,""),r=0;r<=u.suffixes.length;r++)if(s=Math.pow(u.base,r),l=Math.pow(u.base,r+1),null===t||0===t||t>=s&&t<l){c+=u.suffixes[r],s>0&&(t/=s);break}return e._.numberToFormat(t,o,a)+c},unformat:function(t){var o,a,r=e._.stringToNumber(t);if(r){for(o=n.suffixes.length-1;o>=0;o--){if(e._.includes(t,n.suffixes[o])){a=Math.pow(n.base,o);break}if(e._.includes(t,i.suffixes[o])){a=Math.pow(i.base,o);break}}r*=a||1}return r}}),e.register("format","currency",{regexps:{format:/(\$)/},format:function(t,n,i){var o,a,r=e.locales[e.options.currentLocale],s={before:n.match(/^([\+|\-|\(|\s|\$]*)/)[0],after:n.match(/([\+|\-|\)|\s|\$]*)$/)[0]};for(n=n.replace(/\s?\$\s?/,""),o=e._.numberToFormat(t,n,i),t>=0?(s.before=s.before.replace(/[\-\(]/,""),s.after=s.after.replace(/[\-\)]/,"")):t<0&&!e._.includes(s.before,"-")&&!e._.includes(s.before,"(")&&(s.before="-"+s.before),a=0;a<s.before.length;a++)switch(s.before[a]){case"$":o=e._.insert(o,r.currency.symbol,a);break;case" ":o=e._.insert(o," ",a+r.currency.symbol.length-1)}for(a=s.after.length-1;a>=0;a--)switch(s.after[a]){case"$":o=a===s.after.length-1?o+r.currency.symbol:e._.insert(o,r.currency.symbol,-(s.after.length-(1+a)));break;case" ":o=a===s.after.length-1?o+" ":e._.insert(o," ",-(s.after.length-(1+a)+r.currency.symbol.length-1))}return o}}),e.register("format","exponential",{regexps:{format:/(e\+|e-)/,unformat:/(e\+|e-)/},format:function(t,n,i){var o=("number"!=typeof t||e._.isNaN(t)?"0e+0":t.toExponential()).split("e");return n=n.replace(/e[\+|\-]{1}0/,""),e._.numberToFormat(Number(o[0]),n,i)+"e"+o[1]},unformat:function(t){var n=e._.includes(t,"e+")?t.split("e+"):t.split("e-"),i=Number(n[0]),o=Number(n[1]);return o=e._.includes(t,"e-")?o*=-1:o,e._.reduce([i,Math.pow(10,o)],function(t,n,i,o){var a=e._.correctionFactor(t,n);return t*a*(n*a)/(a*a)},1)}}),e.register("format","ordinal",{regexps:{format:/(o)/},format:function(t,n,i){var o=e.locales[e.options.currentLocale],a=e._.includes(n," o")?" ":"";return n=n.replace(/\s?o/,""),a+=o.ordinal(t),e._.numberToFormat(t,n,i)+a}}),e.register("format","percentage",{regexps:{format:/(%)/,unformat:/(%)/},format:function(t,n,i){var o,a=e._.includes(n," %")?" ":"";return e.options.scalePercentBy100&&(t*=100),n=n.replace(/\s?\%/,""),o=e._.numberToFormat(t,n,i),e._.includes(o,")")?((o=o.split("")).splice(-1,0,a+"%"),o=o.join("")):o=o+a+"%",o},unformat:function(t){var n=e._.stringToNumber(t);return e.options.scalePercentBy100?.01*n:n}}),e.register("format","time",{regexps:{format:/(:)/,unformat:/(:)/},format:function(e,t,n){var i=Math.floor(e/60/60),o=Math.floor((e-60*i*60)/60),a=Math.round(e-60*i*60-60*o);return i+":"+(o<10?"0"+o:o)+":"+(a<10?"0"+a:a)},unformat:function(e){var t=e.split(":"),n=0;return 3===t.length?(n+=60*Number(t[0])*60,n+=60*Number(t[1]),n+=Number(t[2])):2===t.length&&(n+=60*Number(t[0]),n+=Number(t[1])),Number(n)}}),e})?i.call(t,n,t,e):i)||(e.exports=o)},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(o.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new a(o.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(249),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(42))},function(e,t,n){e.exports=o;var i=n(110).EventEmitter;function o(){i.call(this)}n(51)(o,i),o.Readable=n(111),o.Writable=n(255),o.Duplex=n(256),o.Transform=n(257),o.PassThrough=n(258),o.Stream=o,o.prototype.pipe=function(e,t){var n=this;function o(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function a(){n.readable&&n.resume&&n.resume()}n.on("data",o),e.on("drain",a),e._isStdio||t&&!1===t.end||(n.on("end",s),n.on("close",l));var r=!1;function s(){r||(r=!0,e.end())}function l(){r||(r=!0,"function"==typeof e.destroy&&e.destroy())}function u(e){if(c(),0===i.listenerCount(this,"error"))throw e}function c(){n.removeListener("data",o),e.removeListener("drain",a),n.removeListener("end",s),n.removeListener("close",l),n.removeListener("error",u),e.removeListener("error",u),n.removeListener("end",c),n.removeListener("close",c),e.removeListener("close",c)}return n.on("error",u),e.on("error",u),n.on("end",c),n.on("close",c),e.on("close",c),e.emit("pipe",n),e}},function(e,t,n){"use strict";(function(t,i){var o=n(82);e.exports=v;var a,r=n(157);v.ReadableState=C;n(110).EventEmitter;var s=function(e,t){return e.listeners(t).length},l=n(161),u=n(83).Buffer,c=t.Uint8Array||function(){};var m=n(64);m.inherits=n(51);var d=n(250),h=void 0;h=d&&d.debuglog?d.debuglog("stream"):function(){};var p,f=n(251),g=n(162);m.inherits(v,l);var y=["error","close","destroy","pause","resume"];function C(e,t){e=e||{};var i=t instanceof(a=a||n(43));this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var o=e.highWaterMark,r=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:i&&(r||0===r)?r:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new f,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=n(163).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(a=a||n(43),!(this instanceof v))return new v(e);this._readableState=new C(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),l.call(this)}function S(e,t,n,i,o){var a,r=e._readableState;null===t?(r.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,M(e)}(e,r)):(o||(a=function(e,t){var n;i=t,u.isBuffer(i)||i instanceof c||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var i;return n}(r,t)),a?e.emit("error",a):r.objectMode||t&&t.length>0?("string"==typeof t||r.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),i?r.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):b(e,r,t,!0):r.ended?e.emit("error",new Error("stream.push() after EOF")):(r.reading=!1,r.decoder&&!n?(t=r.decoder.write(t),r.objectMode||0!==t.length?b(e,r,t,!1):T(e,r)):b(e,r,t,!1))):i||(r.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(r)}function b(e,t,n,i){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,i?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&M(e)),T(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var n,i=this._readableState;return i.objectMode?n=!0:"string"==typeof e&&((t=t||i.defaultEncoding)!==i.encoding&&(e=u.from(e,t),t=""),n=!0),S(this,e,t,!1,n)},v.prototype.unshift=function(e){return S(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=n(163).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var w=8388608;function x(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=w?e=w:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function M(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(h("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?o.nextTick(O,e):O(e))}function O(e){h("emit readable"),e.emit("readable"),F(e)}function T(e,t){t.readingMore||(t.readingMore=!0,o.nextTick(P,e,t))}function P(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(h("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function D(e){h("readable nexttick read 0"),e.read(0)}function E(e,t){t.reading||(h("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),F(e),t.flowing&&!t.reading&&e.read(0)}function F(e){var t=e._readableState;for(h("flow",t.flowing);t.flowing&&null!==e.read(););}function A(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var i;e<t.head.data.length?(i=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):i=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,i=1,o=n.data;e-=o.length;for(;n=n.next;){var a=n.data,r=e>a.length?a.length:e;if(r===a.length?o+=a:o+=a.slice(0,e),0===(e-=r)){r===a.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=a.slice(r));break}++i}return t.length-=i,o}(e,t):function(e,t){var n=u.allocUnsafe(e),i=t.head,o=1;i.data.copy(n),e-=i.data.length;for(;i=i.next;){var a=i.data,r=e>a.length?a.length:e;if(a.copy(n,n.length-e,0,r),0===(e-=r)){r===a.length?(++o,i.next?t.head=i.next:t.head=t.tail=null):(t.head=i,i.data=a.slice(r));break}++o}return t.length-=o,n}(e,t);return i}(e,t.buffer,t.decoder),n);var n}function N(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,o.nextTick(_,t,e))}function _(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function R(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1}v.prototype.read=function(e){h("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return h("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?N(this):M(this),null;if(0===(e=x(e,t))&&t.ended)return 0===t.length&&N(this),null;var i,o=t.needReadable;return h("need readable",o),(0===t.length||t.length-e<t.highWaterMark)&&h("length less than watermark",o=!0),t.ended||t.reading?h("reading or ended",o=!1):o&&(h("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=x(n,t))),null===(i=e>0?A(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&N(this)),null!==i&&this.emit("data",i),i},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var n=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=e;break;case 1:a.pipes=[a.pipes,e];break;default:a.pipes.push(e)}a.pipesCount+=1,h("pipe count=%d opts=%j",a.pipesCount,t);var l=(!t||!1!==t.end)&&e!==i.stdout&&e!==i.stderr?c:v;function u(t,i){h("onunpipe"),t===n&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,h("cleanup"),e.removeListener("close",y),e.removeListener("finish",C),e.removeListener("drain",m),e.removeListener("error",g),e.removeListener("unpipe",u),n.removeListener("end",c),n.removeListener("end",v),n.removeListener("data",f),d=!0,!a.awaitDrain||e._writableState&&!e._writableState.needDrain||m())}function c(){h("onend"),e.end()}a.endEmitted?o.nextTick(l):n.once("end",l),e.on("unpipe",u);var m=function(e){return function(){var t=e._readableState;h("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,F(e))}}(n);e.on("drain",m);var d=!1;var p=!1;function f(t){h("ondata"),p=!1,!1!==e.write(t)||p||((1===a.pipesCount&&a.pipes===e||a.pipesCount>1&&-1!==R(a.pipes,e))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function g(t){h("onerror",t),v(),e.removeListener("error",g),0===s(e,"error")&&e.emit("error",t)}function y(){e.removeListener("finish",C),v()}function C(){h("onfinish"),e.removeListener("close",y),v()}function v(){h("unpipe"),n.unpipe(e)}return n.on("data",f),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?r(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",g),e.once("close",y),e.once("finish",C),e.emit("pipe",n),a.flowing||(h("pipe resume"),n.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var i=t.pipes,o=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<o;a++)i[a].emit("unpipe",this,n);return this}var r=R(t.pipes,e);return-1===r?this:(t.pipes.splice(r,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},v.prototype.on=function(e,t){var n=l.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var i=this._readableState;i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.emittedReadable=!1,i.reading?i.length&&M(this):o.nextTick(D,this))}return n},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(h("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,o.nextTick(E,e,t))}(this,e)),this},v.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,n=this._readableState,i=!1;for(var o in e.on("end",function(){if(h("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(o){(h("wrapped data"),n.decoder&&(o=n.decoder.write(o)),n.objectMode&&null==o)||(n.objectMode||o&&o.length)&&(t.push(o)||(i=!0,e.pause()))}),e)void 0===this[o]&&"function"==typeof e[o]&&(this[o]=function(t){return function(){return e[t].apply(e,arguments)}}(o));for(var a=0;a<y.length;a++)e.on(y[a],this.emit.bind(this,y[a]));return this._read=function(t){h("wrapped _read",t),i&&(i=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=A}).call(this,n(42),n(63))},function(e,t,n){e.exports=n(110).EventEmitter},function(e,t,n){"use strict";var i=n(82);function o(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,a=this._readableState&&this._readableState.destroyed,r=this._writableState&&this._writableState.destroyed;return a||r?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||i.nextTick(o,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(i.nextTick(o,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){"use strict";var i=n(83).Buffer,o=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(i.isEncoding===o||!o(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=u,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=c,this.end=m,t=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(t)}function r(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var i=n.charCodeAt(n.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function c(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function m(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function h(e){return e&&e.length?this.write(e):""}t.StringDecoder=a,a.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},a.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},a.prototype.text=function(e,t){var n=function(e,t,n){var i=t.length-1;if(i<n)return 0;var o=r(t[i]);if(o>=0)return o>0&&(e.lastNeed=o-1),o;if(--i<n||-2===o)return 0;if((o=r(t[i]))>=0)return o>0&&(e.lastNeed=o-2),o;if(--i<n||-2===o)return 0;if((o=r(t[i]))>=0)return o>0&&(2===o?o=0:e.lastNeed=o-3),o;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var i=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",t,i)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";e.exports=r;var i=n(43),o=n(64);function a(e,t){var n=this._transformState;n.transforming=!1;var i=n.writecb;if(!i)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),i(e);var o=this._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}function r(e){if(!(this instanceof r))return new r(e);i.call(this,e),this._transformState={afterTransform:a.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){l(e,t,n)}):l(this,null,null)}function l(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}o.inherits=n(51),o.inherits(r,i),r.prototype.push=function(e,t){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,t)},r.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},r.prototype._write=function(e,t,n){var i=this._transformState;if(i.writecb=n,i.writechunk=e,i.writeencoding=t,!i.transforming){var o=this._readableState;(i.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},r.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},r.prototype._destroy=function(e,t){var n=this;i.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.CollisionAvoidanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.CollisionAvoidanceDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(1),s=n(2);t.ConnectionFailSafeBehaviorDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.ConnectionFailSafeBehaviorDroneCommand,this.connectionFailSafeBehavior=o.DroneConnectionFailSafeBehavior.Hover}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.connectionFailSafeBehavior=s.Common.parseString(e.connectionFailSafeBehavior,this.connectionFailSafeBehavior)}get subtitle(){return a.Format.enum("DroneConnectionFailSafeBehavior",this.connectionFailSafeBehavior)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.LandingGearAutomaticMovementDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingGearAutomaticMovementDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(1);t.LandingGearDeployDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingGearDeployDroneCommand}applyJSON(e){super.applyJSON(e),a.Serialization.validateType(e,this.type)}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(1);t.LandingGearRetractDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingGearRetractDroneCommand}applyJSON(e){super.applyJSON(e),a.Serialization.validateType(e,this.type)}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.LandingProtectionDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LandingProtectionDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.LightbridgeChannelDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LightbridgeChannelDroneCommand,this.lightbridgeChannel=0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.lightbridgeChannel=a.Common.parseInt(e.lightbridgeChannel,this.lightbridgeChannel)}get subtitle(){return`${r.Strings.LightbridgeChannelDroneCommand.values.lightbridgeChannel} ${this.lightbridgeChannel}`}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(1),s=n(2);t.LightbridgeChannelSelectionModeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LightbridgeChannelSelectionModeDroneCommand,this.lightbridgeChannelSelectionMode=o.DroneLightbridgeChannelSelectionMode.Auto}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.lightbridgeChannelSelectionMode=s.Common.parseString(e.lightbridgeChannelSelectionMode,this.lightbridgeChannelSelectionMode)}get subtitle(){return a.Format.enum("DroneLightbridgeChannelSelectionMode",this.lightbridgeChannelSelectionMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(1),s=n(2);t.LightbridgeFrequencyBandDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LightbridgeFrequencyBandDroneCommand,this.lightbridgeFrequencyBand=o.DroneLightbridgeFrequencyBand._2dot4ghz}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.lightbridgeFrequencyBand=s.Common.parseString(e.lightbridgeFrequencyBand,this.lightbridgeFrequencyBand)}get subtitle(){return a.Format.enum("DroneLightbridgeFrequencyBand",this.lightbridgeFrequencyBand)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(2),s=n(8),l=n(1);t.LowBatteryWarningThresholdDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.LowBatteryWarningThresholdDroneCommand,this.lowBatteryWarningThreshold=s.Constants.LowBatteryWarningThresholdDroneCommandValue}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.lowBatteryWarningThreshold=r.Common.parseFloat(e.lowBatteryWarningThreshold,this.lowBatteryWarningThreshold)}get subtitle(){return a.Format.percent(this.lowBatteryWarningThreshold).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(2),s=n(8),l=n(1);t.MaxAltitudeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.MaxAltitudeDroneCommand,this.maxAltitude=s.Constants.MaxAltitudeDroneCommandValue}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.maxAltitude=r.Common.parseFloat(e.maxAltitude,this.maxAltitude)}get subtitle(){return a.Format.altitude(this.maxAltitude).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(2),s=n(8),l=n(1);t.MaxDistanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.MaxDistanceDroneCommand,this.maxDistance=s.Constants.MaxDistanceDroneCommandValue}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.maxDistance=r.Common.parseFloat(e.maxDistance,this.maxDistance)}get subtitle(){return a.Format.altitude(this.maxDistance).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.MaxDistanceLimitationDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.MaxDistanceLimitationDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.OcuSyncChannelDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.OcuSyncChannelDroneCommand,this.ocuSyncChannel=0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.ocuSyncChannel=a.Common.parseInt(e.ocuSyncChannel,this.ocuSyncChannel)}get subtitle(){return`${r.Strings.OcuSyncChannelDroneCommand.values.ocuSyncChannel} ${this.ocuSyncChannel}`}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(1),s=n(2);t.OcuSyncChannelSelectionModeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.OcuSyncChannelSelectionModeDroneCommand,this.ocuSyncChannelSelectionMode=o.DroneOcuSyncChannelSelectionMode.Auto}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.ocuSyncChannelSelectionMode=s.Common.parseString(e.ocuSyncChannelSelectionMode,this.ocuSyncChannelSelectionMode)}get subtitle(){return a.Format.enum("DroneOcuSyncChannelSelectionMode",this.ocuSyncChannelSelectionMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(1),s=n(2);t.OcuSyncFrequencyBandDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.OcuSyncFrequencyBandDroneCommand,this.ocuSyncFrequencyBand=o.DroneOcuSyncFrequencyBand.Dual}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.ocuSyncFrequencyBand=s.Common.parseString(e.ocuSyncFrequencyBand,this.ocuSyncFrequencyBand)}get subtitle(){return a.Format.enum("DroneOcuSyncFrequencyBand",this.ocuSyncFrequencyBand)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.PrecisionLandingDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.PrecisionLandingDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(2),s=n(8),l=n(1);t.ReturnHomeAltitudeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.ReturnHomeAltitudeDroneCommand,this.returnHomeAltitude=s.Constants.ReturnHomeAltitudeDroneCommandValue}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.returnHomeAltitude=r.Common.parseFloat(e.returnHomeAltitude,this.returnHomeAltitude)}get subtitle(){return a.Format.altitude(this.returnHomeAltitude).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.ReturnHomeObstacleAvoidanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.ReturnHomeObstacleAvoidanceDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.ReturnHomeRemoteObstacleAvoidanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.ReturnHomeRemoteObstacleAvoidanceDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(3),r=n(2),s=n(8),l=n(1);t.SeriousLowBatteryWarningThresholdDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.SeriousLowBatteryWarningThresholdDroneCommand,this.seriousLowBatteryWarningThreshold=s.Constants.SeriousLowBatteryWarningThresholdDroneCommand}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.seriousLowBatteryWarningThreshold=r.Common.parseFloat(e.seriousLowBatteryWarningThreshold,this.seriousLowBatteryWarningThreshold)}get subtitle(){return a.Format.percent(this.seriousLowBatteryWarningThreshold).toString()}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.SmartReturnHomeDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.SmartReturnHomeDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.UpwardsAvoidanceDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.UpwardsAvoidanceDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7),o=n(0),a=n(2),r=n(4),s=n(1);t.VisionAssistedPositioningDroneCommand=class extends i.DroneCommand{constructor(){super(...arguments),this.type=o.TypeName.VisionAssistedPositioningDroneCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=a.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?r.Strings.Common.enabled:r.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.AEBCountCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.AEBCountCameraCommand,this.aebCount=o.CameraAEBCount._3}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.aebCount=r.Common.parseString(e.aebCount,this.aebCount)}get subtitle(){return a.Format.enum("CameraAEBCount",this.aebCount)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.ApertureCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ApertureCameraCommand,this.aperture=o.CameraAperture.F5dot6}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.aperture=r.Common.parseString(e.aperture,this.aperture)}get subtitle(){return a.Format.enum("CameraAperture",this.aperture)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(4),r=n(2),s=n(1);t.AutoExposureLockCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.AutoExposureLockCameraCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=r.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?a.Strings.Common.enabled:a.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(4),r=n(2),s=n(1);t.AutoLockGimbalCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.AutoLockGimbalCameraCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=r.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?a.Strings.Common.enabled:a.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.ColorCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ColorCameraCommand,this.color=o.CameraColor.None}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.color=r.Common.parseString(e.color,this.color)}get subtitle(){return a.Format.enum("CameraColor",this.color)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.ContrastCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ContrastCameraCommand,this.contrast=0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.contrast=r.Common.parseInt(e.contrast,this.contrast)}get subtitle(){return a.Format.integer(this.contrast)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.ExposureCompensationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ExposureCompensationCameraCommand,this.exposureCompensation=o.CameraExposureCompensation.N00}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.exposureCompensation=r.Common.parseString(e.exposureCompensation,this.exposureCompensation)}get subtitle(){return a.Format.enum("CameraExposureCompensation",this.exposureCompensation)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(4),l=n(1);t.ExposureCompensationStepCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ExposureCompensationStepCameraCommand,this.exposureCompensationSteps=1}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.exposureCompensationSteps=r.Common.parseInt(e.exposureCompensationSteps,this.exposureCompensationSteps)}get subtitle(){return a.Format.integer(this.exposureCompensationSteps,{singular:s.Strings.ExposureCompensationStepCameraCommand.values.exposureCompensationStep,plural:s.Strings.ExposureCompensationStepCameraCommand.values.exposureCompensationSteps})}get reengagementTiming(){return o.CommandReengagementTiming.Never}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.FileIndexModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.FileIndexModeCameraCommand,this.fileIndexMode=o.CameraFileIndexMode.Sequence}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.fileIndexMode=s.Common.parseString(e.fileIndexMode,this.fileIndexMode)}get subtitle(){return a.Format.enum("CameraFileIndexMode",this.fileIndexMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.FocusModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.FocusModeCameraCommand,this.focusMode=o.CameraFocusMode.Auto}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.focusMode=r.Common.parseString(e.focusMode,this.focusMode)}get subtitle(){return a.Format.enum("CameraFocusMode",this.focusMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.ISOCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ISOCameraCommand,this.iso=o.CameraISO.Auto}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.iso=s.Common.parseString(e.iso,this.iso)}get subtitle(){return a.Format.enum("CameraISO",this.iso)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(4),r=n(2),s=n(1);t.MechanicalShutterCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.MechanicalShutterCameraCommand,this.enabled=!0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.enabled=r.Common.parseBoolean(e.enabled,this.enabled)}get subtitle(){return this.enabled?a.Strings.Common.enabled:a.Strings.Common.disabled}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.MeteringModeCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.MeteringModeCameraCommand,this.meteringMode=o.CameraMeteringMode.Center}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.meteringMode=s.Common.parseString(e.meteringMode,this.meteringMode)}get subtitle(){return a.Format.enum("CameraMeteringMode",this.meteringMode)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.PhotoAspectRatioCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.PhotoAspectRatioCameraCommand,this.photoAspectRatio=o.CameraPhotoAspectRatio._4_3}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.photoAspectRatio=s.Common.parseString(e.photoAspectRatio,this.photoAspectRatio)}get subtitle(){return a.Format.enum("CameraPhotoAspectRatio",this.photoAspectRatio)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Photo}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.SaturationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.SaturationCameraCommand,this.saturation=0}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.saturation=s.Common.parseInt(e.saturation,this.saturation)}get subtitle(){return a.Format.integer(this.saturation)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.SharpnessCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.SharpnessCameraCommand,this.sharpness=0}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.sharpness=r.Common.parseInt(e.sharpness,this.sharpness)}get subtitle(){return a.Format.integer(this.sharpness)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.ShutterSpeedCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.ShutterSpeedCameraCommand,this.shutterSpeed=o.CameraShutterSpeed._1_800}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.shutterSpeed=s.Common.parseString(e.shutterSpeed,this.shutterSpeed)}get subtitle(){return a.Format.enum("CameraShutterSpeed",this.shutterSpeed)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(15),s=n(2),l=n(1);t.SpotMeteringTargetCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.SpotMeteringTargetCameraCommand,this.spotMeteringTarget=new r.Point2(.5,.5)}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.spotMeteringTarget.applyJSON(e.spotMeteringTarget)}get subtitle(){return s.Common.joinNotEmpty([a.Format.percent(this.spotMeteringTarget.x).toString(),a.Format.percent(this.spotMeteringTarget.y).toString()])}get reengagementTiming(){return o.CommandReengagementTiming.Destination}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.StorageLocationCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.StorageLocationCameraCommand,this.storageLocation=o.CameraStorageLocation.SDCard}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.storageLocation=r.Common.parseString(e.storageLocation,this.storageLocation)}get subtitle(){return a.Format.enum("CameraStorageLocation",this.storageLocation)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.VideoFileCompressionStandardCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoFileCompressionStandardCameraCommand,this.videoFileCompressionStandard=o.CameraVideoFileCompressionStandard.H264}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.videoFileCompressionStandard=s.Common.parseString(e.videoFileCompressionStandard,this.videoFileCompressionStandard)}get subtitle(){return a.Format.enum("CameraVideoFileCompressionStandard",this.videoFileCompressionStandard)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(2),s=n(1);t.VideoResolutionFrameRateCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoResolutionFrameRateCameraCommand,this.videoResolution=o.CameraVideoResolution._3840x2160,this.videoFrameRate=o.CameraVideoFrameRate._29dot970,this.videoFieldOfView=o.CameraVideoFieldOfView.Default}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.videoResolution=r.Common.parseString(e.videoResolution,this.videoResolution),this.videoFrameRate=r.Common.parseString(e.videoFrameRate,this.videoFrameRate),this.videoFieldOfView=r.Common.parseString(e.videoFieldOfView,this.videoFieldOfView)}get subtitle(){const e=`${a.Format.enum("CameraVideoResolution",this.videoResolution)}@${a.Format.enum("CameraVideoFrameRate",this.videoFrameRate)}`;return this.videoFieldOfView!==o.CameraVideoFieldOfView.Default?r.Common.joinNotEmpty([e,a.Format.enum("CameraVideoFieldOfView",this.videoFieldOfView)]):e}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.VideoStandardCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.VideoStandardCameraCommand,this.videoStandard=o.CameraVideoStandard.NTSC}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.videoStandard=s.Common.parseString(e.videoStandard,this.videoStandard)}get subtitle(){return a.Format.enum("CameraVideoStandard",this.videoStandard)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}get requiredMode(){return o.CameraMode.Video}get requiredCapturing(){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.WhiteBalanceCustomCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.WhiteBalanceCustomCameraCommand,this.whiteBalanceCustom=5600}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.whiteBalanceCustom=s.Common.parseInt(e.whiteBalanceCustom,this.whiteBalanceCustom)}get subtitle(){return a.Format.absoluteTemperature(this.whiteBalanceCustom)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),o=n(0),a=n(3),r=n(1),s=n(2);t.WhiteBalancePresetCameraCommand=class extends i.CameraCommand{constructor(){super(...arguments),this.type=o.TypeName.WhiteBalancePresetCameraCommand,this.whiteBalancePreset=o.CameraWhiteBalancePreset.Auto}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.whiteBalancePreset=s.Common.parseString(e.whiteBalancePreset,this.whiteBalancePreset)}get subtitle(){return a.Format.enum("CameraWhiteBalancePreset",this.whiteBalancePreset)}get reengagementTiming(){return o.CommandReengagementTiming.Approach}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(123)),o=r(n(214)),a=r(n(215));function r(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=(0,i.default)(e),n=t.latitude,r=t.longitude;if(Array.isArray(e)&&e.length>=2)return(0,a.default)(e[0])&&(0,o.default)(e[1]);if(void 0===n||void 0===r)return!1;var s=e[r],l=e[n];return void 0!==l&&void 0!==s&&!1!==(0,o.default)(l)&&!1!==(0,a.default)(s)};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(94)),o=s(n(95)),a=s(n(96)),r=n(14);function s(e){return e&&e.__esModule?e:{default:e}}var l=function e(t){return(0,i.default)(t)?!(parseFloat(t)>r.MAXLAT||t<r.MINLAT):!!(0,o.default)(t)&&e((0,a.default)(t))};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(94)),o=s(n(95)),a=s(n(96)),r=n(14);function s(e){return e&&e.__esModule?e:{default:e}}var l=function e(t){return(0,i.default)(t)?!(parseFloat(t)>r.MAXLON||t<r.MINLON):!!(0,o.default)(t)&&e((0,a.default)(t))};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(47))&&i.__esModule?i:{default:i};var a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default;return n="function"==typeof n?n:o.default,t.slice().sort(function(t,i){return n(e,t)-n(e,i)})};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=a(n(25)),o=a(n(26));function a(e){return e&&e.__esModule?e:{default:e}}var r=function(e){if(!1===Array.isArray(e)||0===e.length)throw new Error("No points were given.");return e.reduce(function(e,t){var n=(0,i.default)(t),a=(0,o.default)(t);return{maxLat:Math.max(n,e.maxLat),minLat:Math.min(n,e.minLat),maxLng:Math.max(a,e.maxLng),minLng:Math.min(a,e.minLng)}},{maxLat:-1/0,minLat:1/0,maxLng:-1/0,minLng:1/0})};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(25)),o=s(n(26)),a=s(n(32)),r=s(n(52));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t){var n=(0,a.default)((0,o.default)(t))-(0,a.default)((0,o.default)(e)),s=Math.log(Math.tan((0,a.default)((0,i.default)(t))/2+Math.PI/4)/Math.tan((0,a.default)((0,i.default)(e))/2+Math.PI/4));return Math.abs(n)>Math.PI&&(n=n>0?-1*(2*Math.PI-n):2*Math.PI+n),((0,r.default)(Math.atan2(n,s))+360)%360};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(47))&&i.__esModule?i:{default:i};var a=function(e,t,n){var i=(0,o.default)(t,e),a=(0,o.default)(e,n),r=(0,o.default)(t,n),s=Math.acos((i*i+r*r-a*a)/(2*i*r)),l=Math.acos((a*a+r*r-i*i)/(2*a*r));return s>Math.PI/2?i:l>Math.PI/2?a:Math.sin(s)*i};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(2);t.Payload=class extends i.Identifiable{constructor(e=0){super(),this.channel=e}applyJSON(e){super.applyJSON(e),this.channel=o.Common.parseInt(e.channel,this.channel)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.GeoSpatialSources=class{constructor(e,t,n){this.plan=e,this.drone=t,this.device=n}value(e,t=null){switch(e){case i.GeoSpatialSource.Input:return t||this.drone;case i.GeoSpatialSource.Plan:return this.plan;case i.GeoSpatialSource.Device:return this.device||this.drone;case i.GeoSpatialSource.Drone:return this.drone}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(0),a=n(10),r=n(1),s=n(4);t.DisengageComponent=class extends i.SubComponent{constructor(){super(...arguments),this.type=o.TypeName.DisengageComponent,this.reason=new a.Message}applyJSON(e){super.applyJSON(e),r.Serialization.validateType(e,this.type),this.reason.applyJSON(e.reason)}get subtitle(){return this.reason.toString()}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!0}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;const{engagement:n}=e;if(!e.preview){const t=r.Serialization.clone(this.reason);t.title||t.details||(t.title=s.Strings.DisengageComponent.messages.default),n.disengage(e.drone,t)}return this.succeeded(e),t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(75),o=n(0),a=n(1),r=n(8),s=n(76),l=n(18),u=n(2),c=n(9),m=n(41),d=n(74),h=n(4),p=n(12),f=n(21),g=n(98),y=n(60),C=n(39),v=n(27),S=n(20),b=n(16),w=n(49),x=n(30),M=n(37),O=n(38),T=n(45),P=n(31),D=n(62),E=n(40),F=n(19),A=n(10),N=n(119);t.FacadeComponent=class extends i.ApproachableComponent{constructor(){super(...arguments),this.type=o.TypeName.FacadeComponent,this.initialAltitude=new l.Altitude(r.Constants.FacadeComponentInitialAltitude),this.finalAltitude=new l.Altitude(r.Constants.FacadeComponentFinalAltitude),this.cameraSpecification=a.Serialization.clone(r.Constants.MapCameraSpecification),this.gimbalOrientations={0:new S.Orientation3Optional(r.Constants.FacadeComponentGimbalPitch)},this.droneOrientation=null,this.cameraMode=o.CameraMode.Photo,this.capturePriority=o.FacadeCapturePriority.Distance,this.minCaptureInterval=r.Constants.FacadeComponentMinCaptureInterval,this.targetDistance=r.Constants.FacadeComponentDistance,this.sampleDistanceGimbalAngleEnabled=!0,this.pattern=o.FacadePattern.Vertical,this.cornering=o.PathCornering.Rounded,this.cornerRadius=r.Constants.FacadeComponentCornerRadius,this.verticalOverlap=r.Constants.FacadeComponentFrontOverlap,this.horizontalOverlap=r.Constants.FacadeComponentSideOverlap,this.boundaryFace=o.FacadeBoundaryFace.LineLeft,this.boundaryPoints=[]}applyJSON(e){if(super.applyJSON(e),a.Serialization.validateType(e,this.type),this.cameraMode=u.Common.parseString(e.cameraMode,this.cameraMode),this.capturePriority=u.Common.parseString(e.capturePriority,this.capturePriority),this.minCaptureInterval=u.Common.parseFloat(e.minCaptureInterval,this.minCaptureInterval),this.targetDistance=u.Common.parseFloat(e.targetDistance,this.targetDistance),this.sampleDistanceGimbalAngleEnabled=u.Common.parseBoolean(e.sampleDistanceGimbalAngleEnabled,this.sampleDistanceGimbalAngleEnabled),this.pattern=u.Common.parseString(e.pattern,this.pattern),this.cornering=u.Common.parseString(e.cornering,this.cornering),this.cornerRadius=u.Common.parseFloat(e.cornerRadius,this.cornerRadius),this.verticalOverlap=u.Common.parseFloat(e.verticalOverlap,this.verticalOverlap),this.horizontalOverlap=u.Common.parseFloat(e.horizontalOverlap,this.horizontalOverlap),this.boundaryFace=u.Common.parseString(e.boundaryFace,this.boundaryFace),this.boundaryPoints=[],Array.isArray(e.boundaryPoints))for(let t of e.boundaryPoints)this.boundaryPoints.push(a.Serialization.deserialize(t,s.FacadeComponentBoundaryPoint,!1));if(this.droneOrientation=a.Serialization.deserialize(e.droneOrientation,S.Orientation3Optional),e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new S.Orientation3Optional;n.applyJSON(e.gimbalOrientations[t]),this.gimbalOrientations[t]=n}}else this.gimbalOrientations={0:new S.Orientation3Optional(r.Constants.FacadeComponentGimbalPitch)};this.initialAltitude.applyJSON(e.initialAltitude),this.finalAltitude.applyJSON(e.finalAltitude),this.cameraSpecification.applyJSON(e.cameraSpecification)}get subtitle(){return u.Common.joinNotEmpty([this.initialAltitude.toString(),this.finalAltitude.toString()])}verification(e){const t=super.verification(e);if(!t)return null;const n=t;return n.cameraMode=o.CameraMode.Unknown,n.droneOrientation=new S.Orientation3Optional,n.droneOrientation.z=0,n.droneOrientation.zReference=o.OrientationZReference.Path,n.gimbalOrientations={0:new S.Orientation3Optional(0)},n}cameraCaptureConfigurationsEnabled(e=null){return!1}alignment(e){let t=null;const n=this.boundarySegments;if(n.length>0)switch((t=new S.Orientation3Optional).yawReference=o.OrientationZReference.North,this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.LineRight:t.yaw=n[0].direction-this.boundaryFaceOrientation;break;case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:const i=this.path(e);i&&(t.yaw=i.sampleForDistance(0).direction-this.boundaryFaceOrientation);break;case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:t.yaw=n[0].direction+Math.PI}return{droneOrientation:t,gimbalOrientations:this.gimbalOrientations}}get referenceOffsets(){return super.referenceOffsets.concat(this.boundaryPointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.initialAltitude.system!==o.AltitudeSystem.AGL&&this.finalAltitude.system!==o.AltitudeSystem.AGL||t.push(this.approachCoordinate(e)),t}node(e=null){const t=super.node(e),n=new s.FacadeComponentBoundaryPointsNode(t);return this.boundaryPoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${h.Strings.Common.new} ${h.Strings.FacadeComponentBoundaryPoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addBoundaryPoint(e,t)}}),t.children.push(n),t}centerCoordinate(e){let t=c.Vector2.center(this.boundaryPointOffsets);return 2===this.boundaryPoints.length&&(t=t.add(new c.Vector2(this.boundaryPointOffsets[1].subtract(this.boundaryPointOffsets[0]).direction+this.boundaryFaceOrientation,this.targetDistance/2))),this.referenceCoordinate(e,t)}initialReferencedAltitude(e){return this.referencedAltitude(e,this.initialAltitude,this.approachCoordinate(e))}finalReferencedAltitude(e){return this.referencedAltitude(e,this.finalAltitude,this.approachCoordinate(e))}get surfaceSampleDistance(){let e=this.targetDistance;if(this.sampleDistanceGimbalAngleEnabled)for(const t in Object.keys(this.gimbalOrientations)){const n=this.gimbalOrientations[t];if(n&&n.pitch&&Math.abs(n.pitch)>F.Convert.degreesToRadians(1)){const t=Math.cos(n.pitch);e=0===t?e:e/t;break}}return this.cameraSpecification.groundSampleDistance(e)}resetApproachDestinationOffset(e){const t=this.path(e);t&&t.coordinates.length>0&&(this.approachComponent.destinationOffset=this.referenceCoordinate(e).offset(t.coordinates[0]))}reverseBoundaryPoints(e){this.boundaryPoints.reverse(),this.resetApproachDestinationOffset(e)}addBoundaryPoint(e,t=null,n=null){return null===n?this.boundaryPoints.push(e):this.boundaryPoints.splice(n,0,e),t&&this.resetApproachDestinationOffset(t),e}get boundaryClosed(){switch(this.boundaryFace){case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:return!0;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:default:return!1}}updateBoundaryPointCoordinate(e,t,n){const i=this.boundaryPoints[e].offset,a=this.referenceCoordinate(n).offset(t);this.boundaryPoints[e].offset=a;let r=this.boundarySegments;switch(this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.LineRight:for(var s=0;s<r.length;s++)for(var l=s+2;l<r.length;l++)if(null!==p.Geometry.lineIntersectionLine(r[s],r[l]))return void(this.boundaryPoints[e].offset=i);break;case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:let t=e,n=0;for(const o of r){if(n!==t&&n!==u.Common.modSafe(t+1,r.length)&&n!==u.Common.modSafe(t-1,r.length)&&null!==p.Geometry.lineIntersectionLine(r[t],o))return void(this.boundaryPoints[e].offset=i);n++}t=u.Common.modSafe(e-1,r.length),n=0;for(const o of r){if(n!==t&&n!==u.Common.modSafe(t+1,r.length)&&n!==u.Common.modSafe(t-1,r.length)&&null!==p.Geometry.lineIntersectionLine(r[t],o))return void(this.boundaryPoints[e].offset=i);n++}break;case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:break;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:r.length>1&&(this.boundaryPoints[2].offset=r[0].b.toVector2().add(new c.Vector2(r[0].direction,r[1].length-r[0].length)))}this.resetApproachDestinationOffset(n)}removeBoundaryPoint(e,t){return this.boundaryPoints=this.boundaryPoints.filter(t=>t!==e),this.resetApproachDestinationOffset(t),e}get boundaryPointOffsets(){return this.boundaryPoints.filter((e,t)=>0===this.maxBoundaryPoints||t<this.maxBoundaryPoints).map(e=>e.offset)}get maxBoundaryPoints(){switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:return 2;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:return 3;default:return 0}}get boundarySegments(){const e=this.boundaryPointOffsets;if(e.length<2)return[];switch(this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:const n=[];for(var t=1;t<e.length;t++)n.push(new m.Line2(e[0].toPoint2(),e[t].toPoint2()));return n}const n=e.map((t,n)=>new m.Line2(t.toPoint2(),e[(n+1)%e.length].toPoint2()));return this.boundaryClosed||n.splice(n.length-1,1),n}boundaryPointCoordinates(e){return this.boundaryPointOffsets.map(t=>this.referenceCoordinate(e,t))}boundaryPointCoordinate(e,t){return this.referenceCoordinate(e,this.boundaryPoints[t].offset)}get boundaryFaceOrientation(){let e=Math.PI/2;switch(this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.SpiralClockwise:e+=Math.PI}return e}estimate(e,t){const n=super.estimate(e,t);if(!e.pathRequired&&!e.timeRequired){const t=this.path(e);if(t){const i=u.Common.lastSafe(t.coordinates),a=this.finalReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);if(i&&a){const e=i.toGeoSpatial();e.altitude=a,n.droneSpatials.push(e)}}return n}if(!e.altitudeRequired&&!e.timeRequired){const t=this.path(e);if(t)switch(n.droneSpatials.push(...t.coordinates.map(e=>e.toGeoSpatial())),this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:break;default:if(this.patternResolved===o.FacadePattern.Horizontal&&!this.boundaryClosed){const i=this.modelParameters(e,t);i&&i.rows%2==0&&n.droneSpatials.push(...t.coordinates.reverse().map(e=>e.toGeoSpatial()))}}return n}const i=this.model(e,e.timeRequired);return i&&(i.addToEstimate(n),n.cameraCaptures=i.cameraCaptures),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(o.TypeName.FacadeComponent,()=>{const n=this.model(e);if(n){const e=new _(n.firstSample,n.captureInterval);return e.updateProgress(t.progress),e}return null})}engaging(e,t){super.engaging(e,t),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==o.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;0===t.progress&&this.cameraMode!==o.CameraMode.Unknown&&(0===n.setupComponents.length&&Object.keys(this.gimbalOrientations).forEach(e=>{const t=parseInt(e),i=new x.StopCaptureCameraCommand;i.channel=t,n.setupComponents.push(new C.CommandComponent(i));const a=new M.ModeCameraCommand;if(a.channel=t,a.mode=this.cameraMode,n.setupComponents.push(new C.CommandComponent(a)),this.cameraMode===o.CameraMode.Photo){const e=new O.PhotoModeCameraCommand;if(e.channel=t,e.photoMode=n.captureInterval?o.CameraPhotoMode.Interval:o.CameraPhotoMode.Single,n.setupComponents.push(new C.CommandComponent(e)),n.captureInterval){const e=new T.PhotoIntervalCameraCommand;e.channel=t,e.photoInterval=n.captureInterval,n.setupComponents.push(new C.CommandComponent(e))}}}),this.aligned(e)&&!n.addedInitialFocus&&(Object.keys(this.gimbalOrientations).forEach(e=>{const t=parseInt(e),i=new N.FocusCameraCommand;i.channel=t;const o=new C.CommandComponent(i);o.required=!1,n.setupComponents.push(o)}),n.addedInitialFocus=!0));const{engagement:i}=e;let a=!1;for(const t of n.setupComponents){const n=t.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(a=!0,t.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&t.required)return this.failed(e,n.error)}if(a)return t.messages.push(new A.Message(h.Strings.FacadeComponent.messages.setup.title)),t;if(!this.aligned(e))return t;const r=n.sampleLinked;let s=[];if(0===t.progress&&r&&r.current.component&&s.push(r.current.component),n.incrementTime(i.timeSinceLastExecution),n.sampleComponents.filter(t=>{const n=e.execution.getComponentState(t);return n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing}).length<3){let e=n.sampleLinked;for(;e&&e!==r;)e.current.component&&s.push(e.current.component),e=e.previous}n.addSampleComponents(s.reverse());const l=[];for(const t of n.sampleComponents){const n=t.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(l.push(t),t.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&t.required)return this.failed(e,n.error)}return n.sampleComponents=n.sampleComponents.filter(t=>{const n=e.execution.getComponentState(t);return n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing}),n.sampleLinked.next||0!==l.length?(this.addVelocityCommandsFromModel(e,n,this.cameraMode===o.CameraMode.Photo),t.progress=n.progress,t):this.succeeded(e)}modelParameters(e,t=null){let n=this.approachComponent.destinationReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL),i=this.initialReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL),a=this.finalReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);if(null===n||null===i||null===a)return null;const r=Math.abs(a.value-i.value),s=this.surfaceSampleDistance,l=Math.max(Math.ceil(r/(s.height*this.cameraSpecification.image.height*(1-this.verticalOverlap))),1);let u=t?Math.max(Math.ceil(t.distance/(s.width*this.cameraSpecification.image.width*(1-this.horizontalOverlap))),1):0;return this.boundaryClosed&&(u=Math.max(1,u-1)),{approachAltitude:n,initialAltitude:i,finalAltitude:a,rows:l,columns:u}}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!0){var n;const i=this.path(e);if(!i)return null;const s=this.modelParameters(e,i);if(!s)return null;s.initialAltitude.value===s.finalAltitude.value&&(s.finalAltitude.value=s.initialAltitude.value+.1);const l=this.surfaceSampleDistance,u=a.Serialization.clone(this.resolveDroneMotionLimits(e,this.droneMotionLimits));let m=null,d=null;if(this.cameraMode===o.CameraMode.Photo){let e=this.minCaptureInterval,t=0,n=.1;switch(this.capturePriority===o.FacadeCapturePriority.Time&&(e=Math.ceil(e),n=1),this.patternResolved){case o.FacadePattern.Horizontal:for(t=l.width*this.cameraSpecification.image.width*(1-this.horizontalOverlap);;){const i=b.Kinematic.v4(t,e);if(i<u.horizontal.velocity.max){u.horizontal.velocity.max=i;break}e+=n}break;case o.FacadePattern.Vertical:for(t=l.height*this.cameraSpecification.image.height*(1-this.verticalOverlap);;){const i=b.Kinematic.v4(t,e);if(i<Math.min(u.vertical.velocity.max,Math.abs(u.vertical.velocity.min))){u.vertical.velocity.max=i,u.vertical.velocity.min=-i;break}e+=n}break;default:return null}switch(this.capturePriority){case o.FacadeCapturePriority.Time:m=e;break;case o.FacadeCapturePriority.Distance:d=t;break;default:return null}}const h=d?Math.max(Math.min(.5*d,r.Constants.FacadeComponentSampleDistanceMax),r.Constants.FacadeComponentSampleDistanceMin):r.Constants.FacadeComponentSampleDistanceMax,p={},S=(e,t)=>{switch(p[e]||(p[e]=new g.ComponentEstimateCameraCapture(e)),this.cameraMode){case o.CameraMode.Photo:p[e].photos+=t;break;case o.CameraMode.Video:p[e].videos+=t}},M=(e,t,n,i=null)=>{if(!e)return;n.channel=parseInt(t);const o=new C.CommandComponent(n);if(null!==i&&(o.required=i),e.current.component)if(e.current.component instanceof D.ListComponent)e.current.component.childComponents.push(o);else{const t=new D.ListComponent;t.childComponents=[e.current.component,o],e.current.component=t}else e.current.component=o};let O=null;const T=[];switch(this.patternResolved){case o.FacadePattern.Horizontal:const e=Math.abs(s.finalAltitude.value-s.initialAltitude.value);let t=s.rows;switch(this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:t=1}const r=[i.samplesForMaxDistance(h)];this.boundaryClosed||r.push(i.samplesForMaxDistance(h).reverse());let l=s.initialAltitude.value;for(let n=0;n<t;n++){const p=2!==r.length||n%2==0,g=r[p?0:1];let C=0,v=T.length-1;if(g.forEach((e,t)=>{const r=e.direction+(p?0:Math.PI),h=w.OrientationReferenceSources.fromZ(r),D=new f.GeoSpatial;D.coordinate=e.coordinate,D.altitude.value=l,D.velocity.horizontal=new c.Vector2(r,u.horizontal.velocity.max),this.droneOrientation?(D.orientation.apply(this.droneOrientation),D.orientation.convertReferences(h)):(D.orientation.yaw=e.direction+this.boundaryFaceOrientation+Math.PI,D.orientation.yawReference=o.OrientationZReference.North);let F={};Object.keys(this.gimbalOrientations).forEach(e=>{F[e]=a.Serialization.clone(this.gimbalOrientations[e]),F[e].convertReferences(h)}),O=new y.LinkedValue(new I(D,u,F),O);let A=!1;switch(Object.keys(this.gimbalOrientations).forEach(n=>{null!==m||this.cameraMode===o.CameraMode.Video?0===t?M(O,n,new P.StartCaptureCameraCommand):t===g.length-1&&(M(O,n,new x.StopCaptureCameraCommand),S(parseInt(n),m?b.Kinematic.t1(u.horizontal.velocity.max,i.distance)/m:1)):null!==d&&(p?e.distance>=C&&(M(O,n,new P.StartCaptureCameraCommand,!1),A=!0):e.distance<=T[v]&&(M(O,n,new P.StartCaptureCameraCommand,!1),A=!0),A&&S(parseInt(n),1))}),null!==d&&A&&(p?(0===n&&T.push(e.distance),C+=d):v--),this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:l=E.Interpolation.linear(s.initialAltitude.value,s.finalAltitude.value,e.distance/i.distance)}}),!O)return null;if(n<t-1){const n=e/t,i=Math.floor(n/h),o=n/i,r=a.Serialization.clone(O.current.droneSpatial);r.velocity.horizontal=new c.Vector2;for(let e=0;e<i;e++){l+=o*(s.finalAltitude.value>s.initialAltitude.value?1:-1);const e=a.Serialization.clone(r);e.altitude.value=l;let t={};Object.keys(this.gimbalOrientations).forEach(e=>{var n;t[e]=a.Serialization.clone(null===(n=O)||void 0===n?void 0:n.current.gimbalOrientations[e])}),O=new y.LinkedValue(new I(e,u,t),O)}}}break;case o.FacadePattern.Vertical:const p=i.distance/s.columns,g=i.samplesForMaxDistance(h);let C=0,v=0;for(const e of g){const t=w.OrientationReferenceSources.fromZ(e.direction);let r={};if(Object.keys(this.gimbalOrientations).forEach(e=>{r[e]=a.Serialization.clone(this.gimbalOrientations[e]),r[e].convertReferences(t)}),v<s.columns&&(e.distance>=C||e.distance===i.distance)){const n=v%2==0?s.initialAltitude:s.finalAltitude,i=v%2==0?s.finalAltitude:s.initialAltitude,a=Math.abs(i.value-n.value),l=Math.ceil(a/h);null!==d&&(d=Math.min(d,a/Math.ceil(a/d)));let c=n.value,g=0,w=T.length-1;for(let h=0;h<l;h++){const p=new f.GeoSpatial;p.coordinate=e.coordinate,p.altitude.value=c,this.droneOrientation?(p.orientation.apply(this.droneOrientation),p.orientation.convertReferences(t)):(p.orientation.yaw=e.direction+this.boundaryFaceOrientation+Math.PI,p.orientation.yawReference=o.OrientationZReference.North),O=new y.LinkedValue(new I(p,u,r),O),c+=a/l*(i.value>n.value?1:-1);let C=!1;const D=Math.abs(p.altitude.value-s.initialAltitude.value);Object.keys(this.gimbalOrientations).forEach(e=>{null!==m||this.cameraMode===o.CameraMode.Video?0===h?M(O,e,new P.StartCaptureCameraCommand):h===l-1&&(M(O,e,new x.StopCaptureCameraCommand),S(parseInt(e),m?b.Kinematic.t1(u.vertical.velocity.max,a)/m:1)):null!==d&&(v%2==0?D>=g&&(M(O,e,new P.StartCaptureCameraCommand,!1),C=!0):D<=T[w]&&(M(O,e,new P.StartCaptureCameraCommand,!1),C=!0),C&&S(parseInt(e),1))}),null!==d&&C&&(v%2==0?(0===v&&T.push(D),g+=d):w--)}C=e.distance+p,v++}else{const i=new f.GeoSpatial;i.coordinate=e.coordinate,i.altitude.value=(null===(n=O)||void 0===n?void 0:n.current.droneSpatial.altitude.value)||s.initialAltitude.value,i.velocity.horizontal=new c.Vector2(e.direction,u.horizontal.velocity.max),this.droneOrientation&&t?(i.orientation.apply(this.droneOrientation),i.orientation.convertReferences(t)):(i.orientation.yaw=e.direction+this.boundaryFaceOrientation+Math.PI,i.orientation.yawReference=o.OrientationZReference.North),O=new y.LinkedValue(new I(i,u,r),O)}}break;default:return null}if(!(O=O?O.first:null))return null;if(!t)return new R(O,m,p);const F=(O.current.droneSpatial.altitude.value<s.approachAltitude.value?1:-1)*r.Constants.FacadeComponentSampleDistanceMax;for(;Math.abs(O.current.droneSpatial.altitude.value-s.approachAltitude.value)>r.Constants.FacadeComponentSampleDistanceMax;){const e=a.Serialization.clone(O.current.droneSpatial);e.altitude.value+=F,e.velocity.horizontal=new c.Vector2;let t={};Object.keys(this.gimbalOrientations).forEach(e=>{var n;t[e]=a.Serialization.clone(null===(n=O)||void 0===n?void 0:n.current.gimbalOrientations[e])}),O=O.insertBefore(new I(e,u,t))}return v.DroneMotionComponentModel.updateSamplesContrainVelocities(O,r.Constants.FacadeComponentSampleDistanceMax),new R(O,m,p)}path(e){const t=this.pathOffsets(e).map(e=>e.toPoint2());let n=null;switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:n=[t];break;default:switch(this.cornering){case o.PathCornering.Intersect:n=p.Geometry.cardinalSplinePoint2(t,this.boundaryClosed);break;case o.PathCornering.Rounded:n=p.Geometry.roundedCorners(t,this.cornerRadius,this.boundaryClosed)}}return null!==n&&n.length>0?new d.Path(n.map(t=>t.map(t=>this.referenceCoordinate(e,t.toVector2()))).filter(e=>{for(const t of e)if(null===t)return!1;return!0})):null}get pathCorneringEnabled(){switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:return!1;default:return!0}}get patternEnabled(){switch(this.boundaryFace){case o.FacadeBoundaryFace.LineLeft:case o.FacadeBoundaryFace.LineRight:case o.FacadeBoundaryFace.PolygonLeft:case o.FacadeBoundaryFace.PolygonRight:case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:return!0;default:return!1}}get patternResolved(){switch(this.boundaryFace){case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:return o.FacadePattern.Horizontal;default:return this.pattern}}pathOffsets(e){const t=this.boundarySegments,n=[];if(0===t.length)return n;const i=t[0].a.toVector2();switch(this.boundaryFace){case o.FacadeBoundaryFace.CircleClockwise:case o.FacadeBoundaryFace.CircleCounterclockwise:let a=t[0].direction;const s=t[0].length+this.targetDistance,l=r.Constants.FacadeComponentOrbitSteps;for(let e=0;e<=l;e++)n.push(i.add(new c.Vector2(a+2*Math.PI*(e/l)*(this.boundaryFace===o.FacadeBoundaryFace.CircleClockwise?1:-1),s)));return n;case o.FacadeBoundaryFace.SpiralClockwise:case o.FacadeBoundaryFace.SpiralCounterclockwise:const u=this.modelParameters(e);let m=t[0].direction;const d=t[0].length+this.targetDistance,h=t.length>1?t[1].length+this.targetDistance:d,p=u?u.rows:1,f=2*Math.PI*p,g=r.Constants.FacadeComponentOrbitSteps*p;for(let e=0;e<=g;e++)n.push(i.add(new c.Vector2(m+f*(e/g)*(this.boundaryFace===o.FacadeBoundaryFace.SpiralClockwise?1:-1),E.Interpolation.linear(d,h,e/g))));return n}const s=t.map(e=>e.add(new c.Vector2(e.direction+this.boundaryFaceOrientation,this.targetDistance)));return s.map((e,n)=>{const i={segment:e,traverse:null},o=this.boundaryClosed?s[u.Common.modSafe(n+1,s.length)]:n+1<s.length?s[n+1]:null;if(o){let r=p.Geometry.lineIntersectionLine(e,o);if(null===r){const a=e.b.midPoint(o.a).toVector2().subtract(t[n].b.toVector2());a.magnitude=this.targetDistance,i.traverse=t[n].b.toVector2().add(a).toPoint2()}else e.b=a.Serialization.clone(r),o.a=a.Serialization.clone(r)}return i}).forEach((e,t)=>{(0===t||s[t-1].b.distance(e.segment.a)>1)&&n.push(e.segment.a.toVector2());let i=!1;this.boundaryClosed?(t<s.length-1||e.segment.b.distance(s[0].a)>1)&&(i=!0):i=!0,i&&(n.push(e.segment.b.toVector2()),e.traverse&&n.push(e.traverse.toVector2()))}),n}};class _ extends v.DroneMotionComponentModelData{constructor(e,t){super(e),this.setupComponents=[],this.addedInitialFocus=!1,this.sampleComponents=[],this.captureInterval=t}addSampleComponents(e){this.sampleComponents.push(...e)}}t.FacadeComponentModelData=_;class R extends v.DroneMotionComponentModel{constructor(e,t,n){super(e),this.captureInterval=t,this.cameraCaptures=n}cameraCapture(e=0){return this.cameraCaptures[e]||(this.cameraCaptures[e]=new g.ComponentEstimateCameraCapture(e)),this.cameraCaptures[e]}}t.FacadeComponentModel=R;class I extends v.DroneMotionComponentModelSample{constructor(e,t,n){super(e,t,n,{}),this.component=null}}t.FacadeComponentModelSample=I},function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(75),r=n(8),s=n(46),l=n(77),u=n(4),c=n(9),m=n(1),d=n(2),h=n(3),p=n(19),f=n(41),g=n(21),y=n(98),C=n(27),v=n(15),S=n(60),b=n(12),w=n(16),x=n(74),M=n(31),O=n(30),T=n(39),P=n(37),D=n(38),E=n(45),F=n(20),A=n(40),N=i(n(297)),_=n(18),R=n(49),I=n(59),L=n(72);t.MapComponent=class extends a.ApproachableComponent{constructor(){super(...arguments),this.type=o.TypeName.MapComponent,this.cameraSpecification=m.Serialization.clone(r.Constants.MapCameraSpecification),this.direction=0,this.cameraMode=o.CameraMode.Photo,this.minCaptureInterval=r.Constants.MapComponentMinCaptureInterval,this.targetDistance=null,this.pattern=o.MapPattern.Normal,this.frontOverlap=r.Constants.MapComponentFrontOverlap,this.sideOverlap=r.Constants.MapComponentSideOverlap,this.droneOrientation=null,this.gimbalOrientation=new s.Orientation3(r.Constants.MapComponentGimbalPitch),this.boundaryPoints=[]}applyJSON(e){if(super.applyJSON(e),m.Serialization.validateType(e,this.type),this.direction=d.Common.parseFloat(e.direction),this.cameraMode=d.Common.parseString(e.cameraMode,this.cameraMode),this.minCaptureInterval=d.Common.parseFloat(e.minCaptureInterval,this.minCaptureInterval),this.targetDistance=d.Common.parseFloat(e.targetDistance,null),this.pattern=d.Common.parseString(e.pattern,this.pattern),this.frontOverlap=d.Common.parseFloat(e.frontOverlap,this.frontOverlap),this.sideOverlap=d.Common.parseFloat(e.sideOverlap,this.sideOverlap),this.boundaryPoints=[],Array.isArray(e.boundaryPoints))for(let t of e.boundaryPoints)this.boundaryPoints.push(m.Serialization.deserialize(t,l.MapComponentBoundaryPoint,!1));this.cameraSpecification.applyJSON(e.cameraSpecification),this.droneOrientation=m.Serialization.deserialize(e.droneOrientation,F.Orientation3Optional),this.gimbalOrientation.applyJSON(e.gimbalOrientation)}get subtitle(){return d.Common.joinNotEmpty([this.approachComponent.altitudeRange.altitude.toString(),h.Format.area(b.Geometry.polygonArea(this.boundaryPointOffsets.map(e=>e.toPoint2()).reverse())).toString(),this.pattern===o.MapPattern.Normal?"":h.Format.enum("MapPattern",this.pattern),Math.abs(this.gimbalOrientation.pitch-p.Convert.degreesToRadians(-90))<p.Convert.degreesToRadians(1)?"":h.Format.angle(this.gimbalOrientation.pitch,!1).toString(),h.Format.percent(this.frontOverlap).toString(),h.Format.percent(this.sideOverlap).toString()])}verification(e){const t=super.verification(e);if(!t)return null;const n=t;n.droneMotionLimits=new I.MotionLimits6Optional,n.droneMotionLimits.horizontal=new L.MotionLimitsOptional;const i=this.resolveDroneMotionLimitsCaptureInterval(e).motionLimits.horizontal;return n.droneMotionLimits.horizontal.velocity=i.velocity,n.droneMotionLimits.horizontal.acceleration=i.acceleration,n.targetDistance=this.targetDistanceResolved(e),n.droneOrientation=null,n.cameraMode=o.CameraMode.Unknown,n.gimbalOrientation.pitch=0,n}cameraCaptureConfigurationsEnabled(e=null){return!1}alignment(e){var t;let n=null;const i=this.segments(e);return i&&i.ordered.length>0&&(n=new s.Orientation3,this.droneOrientation?(n.apply(this.droneOrientation),n.convertReferences(R.OrientationReferenceSources.fromZ(i.ordered[0].direction))):(n.yaw=i.ordered[0].direction,n.yawReference=o.OrientationZReference.North)),{droneOrientation:(null===(t=n)||void 0===t?void 0:t.asOptional())||null,gimbalOrientations:{0:this.gimbalOrientation.asOptional()}}}get referenceOffsets(){return super.referenceOffsets.concat(this.boundaryPointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e);if(this.approachComponent.altitudeRange.altitude.system===o.AltitudeSystem.AGL){const n=this.model(e,!1,!1,!0);if(n){let e=null,i=n.firstSample;for(;i;){if(e){const n=i.current.distance-e.current.distance;(!i.next||n>=r.Constants.MapComponentTerrainFollowGranularity)&&(t.push(i.current.droneSpatial.coordinate),e=i)}else e=i,t.push(i.current.droneSpatial.coordinate);i=i.next}}}return t}node(e=null){const t=super.node(e),n=new l.MapComponentBoundaryPointsNode(t);return this.boundaryPoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${u.Strings.Common.new} ${u.Strings.MapComponentBoundaryPoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addBoundaryPoint(e,t)}}),t.children.push(n),t}centerCoordinate(e){return this.referenceCoordinate(e,c.Vector2.center(this.boundaryPointOffsets))}targetDistanceResolved(e){let t=this.targetDistance;if(null===t){let n=this.approachComponent.altitudeRange.altitude;if(n.system===o.AltitudeSystem.MSL){const t=this.approachComponent.destinationReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);t&&(n=t)}if(t=n.value,this.gimbalOrientation.pitch>p.Convert.degreesToRadians(-89)){const e=Math.cos(Math.abs(p.Convert.degreesToRadians(-90)-this.gimbalOrientation.pitch));t=0===e?t:t/e}}return Math.max(t,r.Constants.MapComponentMinimumTargetDistance)}groundSampleDistance(e){return this.cameraSpecification.groundSampleDistance(this.targetDistanceResolved(e))}resetApproachDestinationOffset(e){const t=this.segments(e);if(t){const{motionLimits:n}=this.resolveDroneMotionLimitsCaptureInterval(e),i=t.ordered[0];this.approachComponent.destinationOffset=i.a.toVector2().add(new c.Vector2(i.direction+Math.PI,Math.max(r.Constants.MapComponentBaseDistanceMin,w.Kinematic.d4(0,n.horizontal.velocity.max,n.horizontal.acceleration.max*r.Constants.MapComponentBaseAccelerationMultiplier))))}}addBoundaryPoint(e,t=null,n=null){return null===n?this.boundaryPoints.push(e):this.boundaryPoints.splice(n,0,e),t&&this.resetApproachDestinationOffset(t),e}updateBoundaryPointCoordinate(e,t,n){const i=this.boundaryPoints[e].offset,o=this.referenceCoordinate(n).offset(t);this.boundaryPoints[e].offset=o;let a=this.boundarySegments,r=e,s=0;for(const t of a){if(s!==r&&s!==d.Common.modSafe(r+1,a.length)&&s!==d.Common.modSafe(r-1,a.length)&&null!==b.Geometry.lineIntersectionLine(a[r],t))return void(this.boundaryPoints[e].offset=i);s++}r=d.Common.modSafe(e-1,a.length),s=0;for(const t of a){if(s!==r&&s!==d.Common.modSafe(r+1,a.length)&&s!==d.Common.modSafe(r-1,a.length)&&null!==b.Geometry.lineIntersectionLine(a[r],t))return void(this.boundaryPoints[e].offset=i);s++}this.resetApproachDestinationOffset(n)}removeBoundaryPoint(e,t){return this.boundaryPoints=this.boundaryPoints.filter(t=>t!==e),t&&this.resetApproachDestinationOffset(t),e}get boundaryPointOffsets(){return this.boundaryPoints.map(e=>e.offset)}get boundarySegments(){return b.Geometry.polygonSegements(this.boundaryPoints.map(e=>e.offset.toPoint2()))}boundaryBoundingBox(e=0){return v.Point2.boundingBox(this.boundaryPointOffsets.map(e=>e.toPoint2()),this.direction+e,1.5)}boundaryPointCoordinates(e){return this.boundaryPointOffsets.map(t=>this.referenceCoordinate(e,t))}boundaryPointCoordinate(e,t){return this.referenceCoordinate(e,this.boundaryPoints[t].offset)}estimate(e,t){const n=super.estimate(e,t);if(!e.pathRequired&&!e.timeRequired){const t=this.model(e,!1,!1,!1),i=(this.approachComponent.altitudeRange.altitude.system===o.AltitudeSystem.AGL?e.referencedAltitude(this.approachComponent.altitudeRange.altitude,this.elevations?d.Common.lastSafe(this.elevations):null):this.approachComponent.destinationReferencedAltitude(e)).toSystem(o.AltitudeSystem.ATL);if(t&&i){const e=d.Common.last(t.samples).current.droneSpatial;e.altitude=i,n.droneSpatials.push(e)}return n}const i=this.model(e,e.altitudeRequired,e.timeRequired,!1);return i&&(i.addToEstimate(n),n.cameraCaptures[0]=i.estimatedCapture),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(o.TypeName.MapComponent,()=>{const n=this.model(e);if(n){const e=new z(n.firstSample,n.captureInterval);return e.updateProgress(t.progress),e}return null})}engaging(e,t){super.engaging(e,t),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==o.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(!this.aligned(e))return t;if(0===t.progress&&this.cameraMode!==o.CameraMode.Unknown){n.commandComponents.push(new T.CommandComponent(new O.StopCaptureCameraCommand));const e=new P.ModeCameraCommand;if(e.mode=this.cameraMode,n.commandComponents.push(new T.CommandComponent(e)),this.cameraMode===o.CameraMode.Photo){const e=new D.PhotoModeCameraCommand;e.photoMode=o.CameraPhotoMode.Interval,n.commandComponents.push(new T.CommandComponent(e));const t=new E.PhotoIntervalCameraCommand;t.photoInterval=n.captureInterval,n.commandComponents.push(new T.CommandComponent(t))}}const{engagement:i}=e,a=n.sampleLinked;n.incrementTime(i.timeSinceLastExecution);let r=[],s=n.sampleLinked;for(;s&&s!==a;)s.current.commandComponent&&r.push(s.current.commandComponent),s=s.previous;r.reverse().forEach(e=>{n.commandComponents.push(e)});const l=[];for(const t of n.commandComponents){const n=t.execute(e);if(n.status===o.ComponentExecutionStatus.Pending||n.status===o.ComponentExecutionStatus.Executing){if(l.push(t),t.exclusiveExecution)break}else if(n.status===o.ComponentExecutionStatus.Failed&&t.required)return this.failed(e,n.error)}return n.sampleLinked.next||0!==l.length?(this.addVelocityCommandsFromModel(e,n,!0),t.progress=n.progress,t):this.succeeded(e)}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}resolveDroneMotionLimitsCaptureInterval(e){const t=m.Serialization.clone(this.resolveDroneMotionLimits(e,this.droneMotionLimits));let n=this.minCaptureInterval;if(this.cameraMode===o.CameraMode.Photo){const i=this.groundSampleDistance(e).height*this.cameraSpecification.image.height*(1-this.frontOverlap);for(;;){const e=w.Kinematic.v4(i,n);if(e<t.horizontal.velocity.max){t.horizontal.velocity.max=e;break}n+=1}}return{motionLimits:t,captureInterval:n}}model(e,t=!0,n=!0,i=!0){let a=this.segments(e);if(!a)return null;if(this.pattern===o.MapPattern.Grid){let t=this.segments(e,Math.PI/2,d.Common.last(a.ordered).b);if(!t)return null;a.ordered=a.ordered.concat(t.ordered)}const{motionLimits:s,captureInterval:l}=this.resolveDroneMotionLimitsCaptureInterval(e),u=new y.ComponentEstimateCameraCapture;let m=[],h=[];const p=[],f=Math.max(r.Constants.MapComponentBaseDistanceMin,w.Kinematic.d4(0,s.horizontal.velocity.max,s.horizontal.acceleration.max*r.Constants.MapComponentBaseAccelerationMultiplier));a.ordered.forEach(t=>{const n=t.a.toVector2(),i=t.b.toVector2(),a=i.subtract(n).direction,r=n.add(new c.Vector2(a+Math.PI,f)),d=i.add(new c.Vector2(a,f));if(p.push(r.toPoint2()),p.push(n.toPoint2()),p.push(i.toPoint2()),p.push(d.toPoint2()),this.cameraMode!==o.CameraMode.Unknown)switch(m.push(this.referenceCoordinate(e,n)),h.push(this.referenceCoordinate(e,i)),this.cameraMode){case o.CameraMode.Photo:u.photos+=Math.floor(w.Kinematic.t1(s.horizontal.velocity.max,i.subtract(n).magnitude)/l);break;case o.CameraMode.Video:u.videos++}});const v=b.Geometry.roundedCorners(p,5*f);if(!t&&!n&&!i){const t=[];v.forEach(e=>{e.forEach(e=>{t.push(e.toVector2())})});let n=0,i=null;return t.forEach((t,o)=>{if(0===o){const t=this.approachComponent.destinationCoordinate(e).toGeoSpatial();i=new S.LinkedValue(new B(t,s,{},n),i)}const a=this.referenceCoordinate(e,t).toGeoSpatial();i&&(n+=a.coordinate.distance(i.current.droneSpatial.coordinate)),i=new S.LinkedValue(new B(a,s,{},n),i)}),new k(i,l,u)}const P=[];v.forEach((t,n)=>{const i=[];0===n&&i.push(this.approachComponent.destinationCoordinate(e)),t.forEach(t=>{i.push(this.referenceCoordinate(e,t.toVector2()))}),P.push(i)});const D=new x.Path(P).samplesForMaxDistance(r.Constants.MapComponentSampleDistance);if(!D||0===D.length)return null;const E=this.approachComponent.destinationReferencedAltitude(e).toSystem(o.AltitudeSystem.ATL);if(t&&null===E)return null;const F=E||new _.Altitude;let I=null;for(const e of D){const t=new g.GeoSpatial;t.coordinate=e.coordinate,t.altitude.value=F.value,t.velocity.horizontal=new c.Vector2(e.direction,s.horizontal.velocity.max),this.droneOrientation?(t.orientation.apply(this.droneOrientation),t.orientation.convertReferences(R.OrientationReferenceSources.fromZ(e.direction))):(t.orientation.yaw=t.velocity.horizontal.direction,t.orientation.yawReference=o.OrientationZReference.North),I=new S.LinkedValue(new B(t,s,{0:this.gimbalOrientation.asOptional()},e.distance),I)}if(!t&&!n)return new k(I,l,u);if(this.elevations&&I&&this.approachComponent.altitudeRange.altitude.system===o.AltitudeSystem.AGL){const t=I.current.droneSpatial.coordinate,n=new N.default(this.elevations.map(e=>e.coordinate.offset(t).toPoint2()),e=>e.x,e=>e.y);let i=null,a=I.first;for(;a;){let s=!1;if(!i||a.current.distance-i.current.distance>.98*r.Constants.MapComponentTerrainFollowGranularity){const l=a.current.droneSpatial.coordinate.offset(t).toPoint2(),u=n.within(l.x,l.y,r.Constants.ComponentElevationTolerance);if(u&&u.length>0&&this.elevations){const t=e.referencedAltitude(this.approachComponent.altitudeRange.altitude,this.elevations[u[0]]).toSystem(o.AltitudeSystem.ATL);t&&(a.current.droneSpatial.altitude=t,i=a,s=!0)}}s||(a.current.droneSpatial.altitude.system=o.AltitudeSystem.AGL),a=a.next}for(i=null,a=I.first;a;){const e=a.current.droneSpatial.altitude;if(e.system===o.AltitudeSystem.ATL){let t=a.previous;const n=i?i.current.droneSpatial.altitude:F,r=i?i.current.distance:0,s=a.current.distance;for(;t&&t.current.droneSpatial.altitude.system===o.AltitudeSystem.AGL;)t.current.droneSpatial.altitude=n.interpolate(e,(e,n)=>A.Interpolation.sigmoid(e,n,((t?t.current.distance:0)-r)/(s-r),1.5)),t=t.previous;i=a}a=a.next}for(a=I.last;a&&a.current.droneSpatial.altitude.system===o.AltitudeSystem.AGL;)a.current.droneSpatial.altitude=i?i.current.droneSpatial.altitude:F,a=a.previous}if(!n)return new k(I,l,u);if(C.DroneMotionComponentModel.updateSamplesContrainVelocities(I,r.Constants.MapComponentSampleDistance),I){let e=!0;m=m.reverse(),h=h.reverse();for(const t of I.list){if(0===m.length&&0===h.length)break;if(t.previous){const n=d.Common.last(e?m:h),i=t.current.droneSpatial.coordinate.distance(n);i<10*r.Constants.MapComponentSampleDistance&&i>t.previous.current.droneSpatial.coordinate.distance(n)&&(t.previous.current.commandComponent=new T.CommandComponent(e?new M.StartCaptureCameraCommand:new O.StopCaptureCameraCommand),e?m.pop():h.pop(),e=!e)}}}return new k(I,l,u)}segments(e,t=0,n=null){if(this.boundaryPoints.length<3)return null;const i=this.boundarySegments,o=this.boundaryBoundingBox(t),a=this.groundSampleDistance(e),r=o.bottomRight.toVector2().subtract(o.bottomLeft.toVector2()),s=Math.ceil(r.magnitude/(a.width*this.cameraSpecification.image.width*(1-this.sideOverlap))),l=r.magnitude/s,u=[];for(let e=0;e<s;e++){const t=new c.Vector2(r.direction,l*e+l/2),n=new f.Line2(o.bottomLeft.toVector2().add(t).toPoint2(),o.topLeft.toVector2().add(t).toPoint2()),a=[];i.forEach(e=>{const t=b.Geometry.lineIntersectionLine(e,n);t&&a.push(t)});for(let e=0;e+1<a.length;e+=2)u.push(new f.Line2(a[e],a[e+1]))}const m=[];if(u.length>0){let e=n||u[0].b;for(;u.length>0;){u.sort((t,n)=>Math.min(e.distance(n.a),e.distance(n.b))-Math.min(e.distance(t.a),e.distance(t.b)));const t=u.pop();t&&(e.distance(t.a)<e.distance(t.b)?(m.push(new f.Line2(t.a,t.b)),e=t.b):(m.push(new f.Line2(t.b,t.a)),e=t.a))}}return 0===m.length?null:{ordered:m,baseDistance:l}}};class z extends C.DroneMotionComponentModelData{constructor(e,t){super(e),this.commandComponents=[],this.captureInterval=t}}t.MapComponentModelData=z;class k extends C.DroneMotionComponentModel{constructor(e,t,n){super(e),this.captureInterval=t,this.estimatedCapture=n}}t.MapComponentModel=k;class B extends C.DroneMotionComponentModelSample{constructor(e,t,n,i){super(e,t,n,{}),this.commandComponent=null,this.distance=i}}t.MapComponentModelSample=B},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(9),a=n(75),r=n(2),s=n(4),l=n(3),u=n(27),c=n(60),m=n(8),d=n(20),h=n(54),p=n(18),f=n(40),g=n(1),y=n(49);t.OrbitComponent=class extends a.ApproachableComponent{constructor(){super(...arguments),this.type=i.TypeName.OrbitComponent,this.centerOffset=new o.Vector2,this.direction=i.OrbitDirection.Clockwise,this.circumference=2*Math.PI,this.finalAltitude=null,this.finalRadius=null,this.droneOrientation=null,this.gimbalOrientations=null}applyJSON(e){if(super.applyJSON(e),g.Serialization.validateType(e,this.type),this.centerOffset.applyJSON(e.centerOffset),this.direction=r.Common.parseString(e.direction,this.direction),this.circumference=r.Common.parseFloat(e.circumference,2*Math.PI),this.finalAltitude=g.Serialization.deserialize(e.finalAltitude,p.Altitude),this.finalRadius=r.Common.parseFloat(e.finalRadius,null),this.droneOrientation=g.Serialization.deserialize(e.droneOrientation,d.Orientation3Optional),e.gimbalOrientations){this.gimbalOrientations={};for(let t of Object.keys(e.gimbalOrientations)){const n=new d.Orientation3Optional;n.applyJSON(e.gimbalOrientations[t]),this.gimbalOrientations[t]=n}}else this.gimbalOrientations=null}get subtitle(){return r.Common.joinNotEmpty([this.approachComponent.altitudeRange.altitude.toString(),s.Strings.formatString(s.Strings.OrbitComponent.subtitle,l.Format.angle(this.circumference,!1).toString(),l.Format.enum("OrbitDirection",this.direction),l.Format.distance(this.radius).toString())])}verification(e){const t=super.verification(e);if(!t)return null;const n=t;return n.gimbalOrientations=null,n.droneOrientation=new d.Orientation3Optional,n.droneOrientation.z=0,n.droneOrientation.zReference=i.OrientationZReference.Path,t}get pointsOfInterestEnabled(){return!0}get referenceOffsets(){return[this.centerOffset].concat(super.referenceOffsets)}get radius(){return Math.abs(this.approachComponent.destinationOffset.subtract(this.centerOffset).magnitude)}set radius(e){const t=this.approachComponent.destinationOffset.subtract(this.centerOffset);t.magnitude=e,this.approachComponent.destinationOffset=this.centerOffset.add(t)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e);return this.finalAltitude&&this.finalAltitude.system===i.AltitudeSystem.AGL&&t.push(this.finalCoordinate(e)),t}centerCoordinate(e){return this.referenceCoordinate(e,this.centerOffset)}finalCoordinate(e){const t=this.approachComponent.destinationCoordinate(e),n=this.centerCoordinate(e),o=n.offset(t);return o.direction+=(this.direction===i.OrbitDirection.Clockwise?1:-1)*this.circumference,this.finalRadius&&(o.magnitude=this.finalRadius),n.geoCoordinate(o)}finalReferencedAltitude(e){return this.finalAltitude?this.referencedAltitude(e,this.finalAltitude,this.finalCoordinate(e)):null}alignment(e){const t=this.model(e,!1,!0);return t?{droneOrientation:t.firstSample.current.droneSpatial.orientation.asOptional(),gimbalOrientations:t.firstSample.current.gimbalOrientations}:null}estimate(e,t){const n=super.estimate(e,t),i=this.model(e,!e.timeRequired);return i&&(e.pathRequired||e.timeRequired?i.addToEstimate(n):n.droneSpatials.push(r.Common.last(i.samples).current.droneSpatial)),n}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(i.TypeName.OrbitComponent,()=>{const n=this.model(e);if(n){const e=new u.DroneMotionComponentModelData(n.firstSample);return e.updateProgress(t.progress),e}return null})}engaging(e,t){super.engaging(e,t),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==i.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(!this.aligned(e))return t;const{engagement:o}=e;return n.incrementTime(o.timeSinceLastExecution),n.sampleLinked.next?(this.addVelocityCommandsFromModel(e,n,!1),t.progress=n.progress,t):this.succeeded(e)}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!1,n=!1){const a=this.approachComponent.destinationCoordinate(e),r=this.approachComponent.destinationReferencedAltitude(e).toSystem(i.AltitudeSystem.ATL);if(null===r)return null;const s=this.finalReferencedAltitude(e),l=this.resolveDroneMotionLimits(e,this.droneMotionLimits);let p=null;const C=this.centerCoordinate(e);let v=C.toGeoSpatial();this.pointsOfInterest.length>0&&(v=this.pointsOfInterest[0].referenceSpatial(e.spatialSources,this.reference));const S=C.offset(a),b=S.magnitude,w=Math.max(1,Math.ceil(this.circumference*S.magnitude/m.Constants.OrbitComponentSampleDistance)),x=this.direction===i.OrbitDirection.Clockwise?1:-1;for(let a=0;a<=w;a++){let m={};S.direction+=x*this.circumference*(1/w),this.finalRadius&&(S.magnitude=f.Interpolation.linear(b,this.finalRadius,a/w));const M=C.geoCoordinate(S).toGeoSpatial();let O=r.value;if(this.finalAltitude){const e=s?s.toSystem(i.AltitudeSystem.ATL):null;if(null===e)return null;O=f.Interpolation.linear(O,e.value,a/w)}if(M.altitude.value=O,!t){let t=S.direction+x*(Math.PI/2);p&&(t=p.current.droneSpatial.coordinate.bearing(M.coordinate)),M.velocity.horizontal=new o.Vector2(t,l.horizontal.velocity.max);const n=y.OrientationReferenceSources.fromZ(t);if(p&&(n.x.path=h.Gimbal.pitch(M.coordinate.distance(p.current.droneSpatial.coordinate),p.current.droneSpatial.altitude.value-M.altitude.value)),this.droneOrientation?(M.orientation.apply(this.droneOrientation),M.orientation.convertReferences(n)):(M.orientation.yaw=M.coordinate.bearing(v.coordinate),M.orientation.yawReference=i.OrientationZReference.North),this.gimbalOrientations)m=this.gimbalOrientations;else{const t=new d.Orientation3Optional;t.pitch=h.Gimbal.pitch(M.coordinate.distance(v.coordinate),M.altitude.value-e.referencedAltitude(v.altitude).altitude.value),t.roll=0,t.yaw=M.orientation.yaw,t.yawReference=M.orientation.yawReference,m[0]=t}Object.keys(m).forEach(e=>{m[e]=g.Serialization.clone(m[e]),m[e].convertReferences(n)})}const T=new u.DroneMotionComponentModelSample(M,l,m,{});if(p=null===p?new c.LinkedValue(T):p.insertAfter(T),n)break}return t||n||u.DroneMotionComponentModel.updateSamplesContrainVelocities(p,m.Constants.OrbitComponentSampleDistance),new u.DroneMotionComponentModel(p)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(9),o=n(1),a=n(0),r=n(12),s=n(75),l=n(4),u=n(3),c=n(2),m=n(78),d=n(8),h=n(79),p=n(74),f=n(227),g=n(20),y=n(27),C=n(69);t.PathComponent=class extends s.ApproachableComponent{constructor(){super(...arguments),this.type=a.TypeName.PathComponent,this.cornering=a.PathCornering.Intersect,this.cornerRadius=d.Constants.PathComponentCornerRadius,this.waypoints=[],this.markers=[]}applyJSON(e){if(super.applyJSON(e),o.Serialization.validateType(e,this.type),this.cornering=c.Common.parseString(e.cornering,this.cornering),this.cornerRadius=c.Common.parseFloat(e.cornerRadius,this.cornerRadius),this.waypoints=[],Array.isArray(e.waypoints))for(let t of e.waypoints)this.waypoints.push(o.Serialization.deserialize(t,m.PathComponentWaypoint,!1));if(this.markers=[],Array.isArray(e.markers))for(let t of e.markers)this.markers.push(o.Serialization.deserialize(t,h.PathComponentMarker,!1))}get subtitle(){return c.Common.joinNotEmpty([`${u.Format.integer(this.waypoints.length)} ${1===this.waypoints.length?l.Strings.PathComponentWaypoint.name:l.Strings.PathComponentWaypoint.multiple}`,0===this.markers.length?"":`${u.Format.integer(this.markers.length)} ${1===this.markers.length?l.Strings.PathComponentMarker.name:l.Strings.PathComponentMarker.multiple}`,0===this.pointsOfInterest.length?"":`${u.Format.integer(this.pointsOfInterest.length)} ${1===this.pointsOfInterest.length?l.Strings.PointOfInterest.name:l.Strings.PointOfInterest.multiple}`])||super.subtitle}verification(e){const t=super.verification(e);if(!t)return null;const n=t;return n.markers.forEach(t=>{if(t.pointOfInterestID=null,t.droneOrientation=null,t.gimbalOrientations=null,t.component){const n=t.component.verification(e);t.component=n||null}}),n}get pointsOfInterestEnabled(){return!0}get pointsOfInterestReferences(){return super.pointsOfInterestReferences.concat(this.markers.filter(e=>e.pointOfInterestID))}get waypointOffsets(){return this.waypoints.map(e=>e.offset)}get referenceOffsets(){return super.referenceOffsets.concat(this.waypointOffsets)}referenceOffsetsHandleCoordinate(e){return this.centerCoordinate(e)}elevationCoordinates(e){const t=super.elevationCoordinates(e),n=this.markerCoordinates(e);return n&&this.markers.forEach((e,i)=>{e.altitude&&e.altitude.system===a.AltitudeSystem.AGL&&t.push(n[i])}),t}node(e=null){const t=super.node(e),n=new m.PathComponentWaypointsNode(t);this.waypoints.forEach((e,t)=>{n.children.push(e.node(n,t))}),n.appends.push({title:`${l.Strings.Common.new} ${l.Strings.PathComponentWaypoint.name}`,tooltip:null,execute:(e,t=null)=>{this.addWaypoint(e,t)}}),t.children.push(n);const i=new h.PathComponentMarkersNode(t);return this.markers.forEach((e,t)=>{i.children.push(e.node(i,t))}),i.appends.push({title:`${l.Strings.Common.new} ${l.Strings.PathComponentMarker.name}`,tooltip:null,execute:e=>{this.addMarker(e)}}),t.children.push(i),t}centerCoordinate(e){return this.referenceCoordinate(e,i.Vector2.center(this.waypointOffsets.concat([this.approachComponent.destinationOffset])))}waypointCoordinate(e,t){return this.referenceCoordinate(e,this.waypoints[t].offset)}waypointCoordinates(e){return this.waypointOffsets.map(t=>this.referenceCoordinate(e,t))}addWaypoint(e,t=null){if(t&&this.markers.length>0){const n=this.markerCoordinates(t);if(n){this.waypoints.push(e);const i=this.path(t);return i&&(n.forEach((e,t)=>{this.markers[t].distance=i.nearestDistance(e)}),this.orderMarkers()),e}}return this.waypoints.push(e),e}markerCoordinates(e){const t=this.path(e);return t?t.samplesForDistances(this.markers.map(e=>e.distance)).map(e=>e.coordinate):null}addMarker(e){return this.markers.push(e),this.orderMarkers(),e}orderMarkers(){this.markers.sort((e,t)=>e.distance-t.distance)}path(e){const t=[this.approachComponent.destinationOffset].concat(this.waypointOffsets).map(e=>e.toPoint2());let n=null;switch(this.cornering){case a.PathCornering.Intersect:n=r.Geometry.cardinalSplinePoint2(t);break;case a.PathCornering.Rounded:n=r.Geometry.roundedCorners(t,[0].concat(this.waypoints.map(e=>e.cornerRadius||this.cornerRadius)).concat([0]))}return null!==n&&n.length>0?new p.Path(n.map(t=>t.map(t=>this.referenceCoordinate(e,t.toVector2()))).filter(e=>{for(const t of e)if(null===t)return!1;return!0})):null}alignment(e){const t=this.model(e,!1,!0);if(t){const e=t.firstSample.current.gimbalOrientations;if(0===Object.keys(e).length&&(e[0]=new g.Orientation3Optional,e[0].pitch=0),Object.keys(e).length>0)return{droneOrientation:t.firstSample.current.droneSpatial.orientation.asOptional(),gimbalOrientations:e}}return null}estimate(e,t){var n;const i=super.estimate(e,t);if(!e.pathRequired&&!e.timeRequired){const t=null===(n=c.Common.lastSafe(this.waypointCoordinates(e)))||void 0===n?void 0:n.toGeoSpatial();let o=this.approachComponent.destinationReferencedAltitude(e).toSystem(a.AltitudeSystem.ATL);if(t&&o){const n=this.markerCoordinates(e);this.markers.forEach((t,i)=>{t.altitude&&n&&(o=this.referencedAltitude(e,t.altitude,n[i]).toSystem(a.AltitudeSystem.ATL)||o)}),t.altitude=o,i.droneSpatials.push(t)}return i}if(e.altitudeRequired||e.timeRequired){const t=this.model(e,!e.timeRequired);if(t){t.addToEstimate(i);let n=0;const o=t.firstSample.last.current.time;this.markers.forEach(a=>{if(a.component){let r=t.firstSample;for(;r.next&&a.distance>r.next.current.pathDistance;)r=r.next;const s=a.component.estimate(e,r.current.droneSpatial),l=o-r.current.time;s.time>l&&(n=Math.max(n,s.time-l)),s.timeConcurrent=!0,i.children.push(s)}}),n>0&&(i.time+=n)}}else{const t=this.path(e);t&&t.segments.length>0&&i.droneSpatials.push(...t.coordinates.map(e=>e.toGeoSpatial()))}return i}cachedData(e){const t=e.execution.getComponentState(this);return t.cachedData(a.TypeName.PathComponent,()=>{const n=this.model(e);if(n){const e=new y.DroneMotionComponentModelData(n.firstSample);return e.updateProgress(t.progress),e}return null})}engaging(e,t){super.engaging(e,t),this.cachedData(e)}execute(e){const t=super.execute(e);if(t.status!==a.ComponentExecutionStatus.Executing)return t;if(e.execution.getComponentState(this.approachComponent).status!==a.ComponentExecutionStatus.Succeeded)return t;const n=this.cachedData(e);if(!n)return t;if(!this.aligned(e))return t;const{engagement:i}=e;n.incrementTime(i.timeSinceLastExecution);const o=[];for(const t of this.markers)if((null===n.sampleLinked.next||t.distance<=n.sampleLinked.current.pathDistance)&&t.component){const n=t.component.execute(e);if(n.status===a.ComponentExecutionStatus.Pending||n.status===a.ComponentExecutionStatus.Executing){if(o.push(t),t.component.exclusiveExecution)break}else if(n.status===a.ComponentExecutionStatus.Failed&&t.component.required)return this.failed(e,n.error)}return n.sampleLinked.next||0!==o.length?(this.addVelocityCommandsFromModel(e,n,!1),t.progress=n.progress,t):this.succeeded(e)}reengagementDroneSpatial(e){const t=this.cachedData(e);return t?t.sampleInterpolated.droneSpatial:super.reengagementDroneSpatial(e)}model(e,t=!1,n=!1){const i=this.path(e);if(!i)return null;const o=this.approachComponent.destinationReferencedAltitude(e).toSystem(a.AltitudeSystem.ATL);if(null===o)return null;let r=new f.PathComponentModelParameterAltitude(o.value),s=new f.PathComponentModelParameterMotionLimits6(this.resolveDroneMotionLimits(e)),l=null,u=new g.Orientation3Optional;u.yaw=0,u.yawReference=a.OrientationZReference.Path,l=new f.PathComponentModelParameterOrientation3Optional(u);let c={},m=null;const h=this.markerCoordinates(e);return h?(this.markers.forEach((t,n)=>{if(t.altitude){const i=this.referencedAltitude(e,t.altitude,h[n]).toSystem(a.AltitudeSystem.ATL);i&&(r=new f.PathComponentModelParameterAltitude(i.value,t,r))}if(t.droneMotionLimits&&(s=new f.PathComponentModelParameterMotionLimits6(this.resolveDroneMotionLimits(e,t.droneMotionLimits),t,s)),t.droneOrientation&&(l=new f.PathComponentModelParameterOrientation3Optional(t.droneOrientation,t,0===t.distance?null:l)),t.pointOfInterestID){const n=this.pointOfInterestCoordinateByID(e,t.pointOfInterestID),i=this.pointOfInterestReferencedAltitudeByID(e,t.pointOfInterestID),o=i?i.toSystem(a.AltitudeSystem.ATL):null;n&&null!==o&&(m=new f.PathComponentModelParameterPointOfInterest(new C.GeoLocation(n,o),t,m))}if(t.gimbalOrientations)for(const e of Object.keys(t.gimbalOrientations))c[e]=new f.PathComponentModelParameterOrientation3Optional(t.gimbalOrientations[e],t,c[e])}),f.PathComponentModel.generate(e,new f.PathComponentModelParameters(this.reference,t?d.Constants.PathComponentModelSampleDistancePosition:d.Constants.PathComponentModelSampleDistance,i,o.value,r,s,l,c,m),t,n)):null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(60),o=n(20),a=n(85),r=n(124),s=n(21),l=n(1),u=n(27),c=n(0),m=n(40),d=n(2),h=n(9),p=n(54),f=n(49),g=n(88),y=n(125);class C extends u.DroneMotionComponentModel{static generate(e,t,n,i){const o=C.createSamples(t,n,i);return o?(n||i||(C.insertSamplesAltitudeChanges(e,o,t),u.DroneMotionComponentModel.updateSamplesContrainVelocities(o,t.maxSampleDistance)),new C(o)):null}static createSamples(e,t,n){let a=null;const u=e.path.samplesForMaxDistance(e.maxSampleDistance);if(!u||0===u.length)return null;if(t)return u.forEach(t=>{e.advanceToDistance(t.distance);const n=new s.GeoSpatial;n.coordinate=t.coordinate,n.altitude.value=e.altitude.valueInterpolated(t.distance),a=new i.LinkedValue(new v(t.distance,n,e.droneMotionLimits.current.value),a)}),a;for(const t of u){e.advanceToDistance(t.distance);const u=new s.GeoSpatial;u.coordinate=t.coordinate,u.altitude.value=e.altitude.valueInterpolated(t.distance),u.velocity.horizontal=new h.Vector2(t.direction,e.droneMotionLimits.valueInterpolated(t.distance).horizontal.velocity.max);const m={},d=new f.OrientationReferenceSources(new y.OrientationXReferenceSources,new r.OrientationZReferenceSources(u.velocity.horizontal.direction,t.direction,t.direction));if(a&&(d.x.path=p.Gimbal.pitch(t.distance-a.current.pathDistance,a.current.droneSpatial.altitude.value-u.altitude.value)),e.pointOfInterest){const n=e.pointOfInterestInterpolates?e.pointOfInterest.valueInterpolated(t.distance):e.pointOfInterest.current.value;u.orientation.yaw=u.coordinate.bearing(n.coordinate),u.orientation.yawReference=c.OrientationZReference.North,d.z.heading=u.orientation.yaw;const i=new o.Orientation3Optional,a=u.coordinate.distance(n.coordinate),r=u.altitude.value-n.altitude.value;i.pitch=p.Gimbal.pitch(a,r),i.roll=0,i.yaw=u.orientation.yaw,i.yawReference=u.orientation.yawReference,m[0]=i}e.droneOrientation&&(e.droneOrientationInterpolates?u.orientation.apply(e.droneOrientation.valueInterpolated(t.distance,d)):(u.orientation.apply(e.droneOrientation.current.value),u.orientation.convertReferences(d)));for(const n of e.gimbalOrientations)e.gimbalOrientationInterpolates(n.channel)?m[n.channel]=n.orientation.valueInterpolated(t.distance,d):(m[n.channel]=l.Serialization.clone(n.orientation.current.value),m[n.channel].convertReferences(d));if(a=new i.LinkedValue(new v(t.distance,u,e.droneMotionLimits.current.value,m),a),n)break}return a}static insertSamplesAltitudeChanges(e,t,n){let i=t.first;for(;i.next;){const e=i.next.current.droneSpatial.altitude.value-i.current.droneSpatial.altitude.value;if(Math.abs(e)>n.maxSampleDistance){const t=Math.ceil(Math.abs(e)/n.maxSampleDistance),o=i,a=i.next;for(let e=1;e<t;e++)i=i.insertAfter(o.current.interpolate(a.current,e/t));i=a}else i=i.next}i=t.first;const o=n.approachAltitudeATL,a=(i.current.droneSpatial.altitude.value<o?1:-1)*n.maxSampleDistance;for(;Math.abs(i.current.droneSpatial.altitude.value-o)>n.maxSampleDistance;)(i=i.insertBefore(l.Serialization.clone(i.current))).current.droneSpatial.altitude.value+=a,i.current.droneSpatial.velocity.horizontal=new h.Vector2}}t.PathComponentModel=C;class v extends u.DroneMotionComponentModelSample{constructor(e=0,t=new s.GeoSpatial,n=new a.MotionLimits6,i={},o={}){super(t,n,i,o),this.type=c.TypeName.PathComponentModelSample,this.pathDistance=e,this.droneMotionLimits=n}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.pathDistance=d.Common.parseFloat(e.pathDistance,this.pathDistance)}interpolate(e,t,n){const i=super.interpolate(e,t,n);return new v(m.Interpolation.linear(this.pathDistance,e.pathDistance,t),i.droneSpatial,i.droneMotionLimits,i.gimbalOrientations,i.gimbalVelocities)}}t.PathComponentModelSample=v;class S{constructor(e,t=null){this.value=e,this.marker=t}get distance(){return this.marker?this.marker.distance:0}}t.PathComponentModelParameter=S;class b extends i.LinkedValue{constructor(e,t=null,n=null){super(new S(e,t),null!==t&&t.distance>0?n:null)}get nextMarker(){return this.next?this.next.current.marker:null}interpolationPercentForDistance(e){return this.next&&this.next.current.distance>this.current.distance?(e-this.current.distance)/(this.next.current.distance-this.current.distance):0}}t.PathComponentModelParameterLinked=b;t.PathComponentModelParameterAltitude=class extends b{valueInterpolated(e){return this.next&&this.nextMarker?this.nextMarker.interpolation.interpolate(this.current.value,this.next.current.value,this.interpolationPercentForDistance(e)):this.current.value}};t.PathComponentModelParameterOrientation3Optional=class extends b{valueInterpolated(e,t){if(this.next&&this.nextMarker){const n=this.nextMarker.interpolation,i=this.interpolationPercentForDistance(e);return this.current.value.interpolate(this.next.current.value,t,new g.OrientationReferenceTargets,(e,t)=>n.interpolate(e,t,i))}return this.current.value}};t.PathComponentModelParameterMotionLimits6=class extends b{valueInterpolated(e){if(this.next&&this.nextMarker){const t=this.nextMarker.interpolation,n=this.interpolationPercentForDistance(e);return this.current.value.interpolate(this.next.current.value,(e,i)=>t.interpolate(e,i,n))}return this.current.value}};t.PathComponentModelParameterPointOfInterest=class extends b{valueInterpolated(e){const t=this.current.value;if(this.next&&this.nextMarker){const n=this.next.current.value,i=l.Serialization.clone(t),o=this.nextMarker.interpolation,a=this.interpolationPercentForDistance(e);return i.coordinate=t.coordinate.interpolate(n.coordinate,e=>o.interpolate(0,e,a)),i.altitude=i.altitude.interpolate(n.altitude,(e,t)=>o.interpolate(e,t,a)),i}return t}};t.PathComponentModelParameters=class{constructor(e,t,n,i,o,a,r,s,l){this._distance=0,this.reference=e,this.maxSampleDistance=t,this.path=n,this.approachAltitudeATL=i,this._altitude=o,this._droneMotionLimits=a,this._droneOrientation=r,this._gimbalOrientations=s,this._pointOfInterest=l,this.resetToFirst()}resetToFirst(){this._distance=0,this._altitude=this._altitude.first,this._droneMotionLimits=this._droneMotionLimits.first,this._droneOrientation=this._droneOrientation.first;for(const e of Object.keys(this._gimbalOrientations))this._gimbalOrientations[e]=this._gimbalOrientations[e].first;return this._pointOfInterest&&(this._pointOfInterest=this._pointOfInterest.first),this}advanceToDistance(e){this._distance=e,this._altitude.next&&this._altitude.next.current.distance<=e&&(this._altitude=this._altitude.next),this._droneMotionLimits.next&&this._droneMotionLimits.next.current.distance<=e&&(this._droneMotionLimits=this._droneMotionLimits.next),this._droneOrientation.next&&this._droneOrientation.next.current.distance<=e&&(this._droneOrientation=this._droneOrientation.next);for(const t of Object.keys(this._gimbalOrientations)){const n=this._gimbalOrientations[t];n.next&&n.next.current.distance<=e&&(this._gimbalOrientations[t]=n.next)}return this._pointOfInterest&&this._pointOfInterest.next&&this._pointOfInterest.next.current.distance<=e&&(this._pointOfInterest=this._pointOfInterest.next),this}get distance(){return this._distance}get altitude(){return this._altitude}get droneMotionLimits(){return this._droneMotionLimits}get droneOrientation(){const e=this.pointOfInterest;return e&&this._droneOrientation.current.distance<=e.current.distance?null:this._droneOrientation}get droneOrientationInterpolates(){const e=this.pointOfInterestNext;return null!==this._droneOrientation.next&&(null===e||this._droneOrientation.next.current.distance<e.current.distance)}get gimbalOrientations(){const e=[];for(const t of Object.keys(this._gimbalOrientations)){const n=this.gimbalOrientation(parseInt(t));n&&e.push({channel:parseInt(t),orientation:n})}return e}gimbalOrientation(e){const t=this._gimbalOrientations[e];if(this.distance<t.current.distance)return null;if(0===e){const e=this.pointOfInterest;if(e&&t&&t.current.distance<=e.current.distance)return null}return t}gimbalOrientationInterpolates(e){const t=this._gimbalOrientations[e];if(t&&t.next){if(0===e){const e=this.pointOfInterestNext;return null===e||t.next.current.distance<e.current.distance}return!0}return!1}get orientationDistanceCurrent(){const e=this._droneOrientation.current.distance,t=this._gimbalOrientations[0];return t&&t.current.distance<e?t.current.distance:e}get orientationDistanceNext(){let e=null;this._droneOrientation.next&&(e=this._droneOrientation.next.current.distance);const t=this._gimbalOrientations[0];return t&&t.next&&(e=null===e?t.next.current.distance:Math.min(e,t.next.current.distance)),e}get pointOfInterest(){return this._pointOfInterest&&this._distance>=this._pointOfInterest.current.distance&&this._pointOfInterest.current.distance>=this.orientationDistanceCurrent?this._pointOfInterest:null}get pointOfInterestInterpolates(){return null!==this.pointOfInterestNext}get pointOfInterestNext(){if(this._pointOfInterest&&this._pointOfInterest.next){const e=this.orientationDistanceNext;if(null===e||this._pointOfInterest.next.current.distance<e)return this._pointOfInterest}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),o=n(8),a=n(3),r=n(2),s=n(71),l=n(1),u=n(16),c=n(29),m=n(44);t.RotationComponent=class extends s.AchievableDroneMotionComponent{constructor(){super(...arguments),this.type=i.TypeName.RotationComponent,this.direction=i.RotationDirection.Clockwise,this.time=0,this.distance=o.Constants.RotationComponentDistance}applyJSON(e){super.applyJSON(e),l.Serialization.validateType(e,this.type),this.direction=r.Common.parseString(e.direction,this.direction),this.time=r.Common.parseFloat(e.time,this.time),this.distance=r.Common.parseFloat(e.distance,this.distance)}get subtitle(){return`${this.time>0?a.Format.timeElapsed(this.time):a.Format.angle(this.distance,!1).toString()} ${a.Format.enum("RotationDirection",this.direction)}`}get repositionIfIncluded(){return!1}achieved(e){return 1===e.execution.getComponentState(this).progress}model(e){const t=this.resolveDroneMotionLimits(e),n=this.direction===i.RotationDirection.Clockwise?1:-1;if(this.time>0)return{time:this.time,distance:n*u.Kinematic.d1(t.rotational.velocity.max,this.time)};const o=n*this.distance;return{time:t.timeLineRotational(this.distance),distance:o}}estimate(e,t){const n=super.estimate(e,t),i=l.Serialization.clone(t),o=this.model(e);i.orientation.yaw+=o.distance,n.droneSpatials.push(i);let a=0;if(e.timeRequired){const e=n.time;n.time+=o.time,a=n.time-e;const t=n.children.find(e=>e.component===this.immediateComponent);t&&t.totalTime>n.time&&(n.time+=t.totalTime-n.time,a=t.totalTime),i.updated.increment(n.time-e)}if(this.achievedComponent){const o=l.Serialization.clone(i);o.updated.value=new Date(t.updated.value.getTime()+1e3*a);const r=this.achievedComponent.estimate(e,o);n.children.push(r)}return n}execute(e){const t=super.execute(e);if(t.status!==i.ComponentExecutionStatus.Executing)return t;const{drone:n,engagement:o}=e,a=n.projectSpatial(e.engagement.currentDatetime),r=this.resolveDroneMotionLimits(e),s=t.cachedData(i.TypeName.RotationComponent,()=>{const t=this.model(e);return new d(l.Serialization.clone(n.spatial),t.time,t.distance)});this.time>0?t.progress+=o.timeSinceLastExecution/s.time:(t.progress+=o.timeSinceLastExecution*s.velocityPrevious/s.distance,t.progress>.999&&(t.progress=1)),t.progress=Math.min(1,t.progress);const u=new c.Velocity6;if(s.time*(1-t.progress)>0){const n=s.distance*(1-t.progress);m.VelocityDroneCommand.updateBoundedVelocityRotational(u,n,r,this.referenceSpatial(e).velocity.rotational)}const h=a.coordinate.offset(s.startSpatial.coordinate),p=new c.Velocity6;return m.VelocityDroneCommand.updateBoundedVelocityHorizontal(p,h.direction,h.magnitude,r),u.horizontal=u.horizontal.add(p.horizontal),s.velocityPrevious=this.addDroneVelocityCommand(e,u).velocity.rotational,t}};class d{constructor(e,t,n){this.velocityPrevious=0,this.startSpatial=e,this.time=t,this.distance=n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(22),o=n(0),a=n(8),r=n(2),s=n(3),l=n(10),u=n(4),c=n(1);t.WaitComponent=class extends i.SubComponent{constructor(){super(...arguments),this.type=o.TypeName.WaitComponent,this.time=a.Constants.WaitComponentTime}applyJSON(e){super.applyJSON(e),c.Serialization.validateType(e,this.type),this.time=r.Common.parseFloat(e.time,this.time)}get subtitle(){return s.Format.timeElapsed(this.time)}get exclusiveReadonly(){return!0}get exclusiveExecution(){return!0}estimate(e,t){const n=super.estimate(e,t);return n.time+=this.time,n}execute(e){const t=super.execute(e);if(t.status!==o.ComponentExecutionStatus.Executing)return t;const{engagement:n}=e;return this.time>0&&(t.progress=Math.min(1,t.progress+n.timeSinceLastExecution/this.time),t.progress<1)?(t.messages.push(new l.Message(u.Strings.WaitComponent.messages.waiting.title,s.Format.number(this.time*t.progress))),t):(this.succeeded(e),t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),o=n(0),a=n(13),r=n(10),s=n(1);t.Disengagement=class extends i.Identifiable{constructor(e=new r.Message){super(),this.type=o.TypeName.Disengagement,this.disengaged=new a.Datetime,this.reason=e}applyJSON(e){super.applyJSON(e),s.Serialization.validateType(e,this.type),this.disengaged.applyJSON(e.disengaged),this.reason.applyJSON(e.reason)}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}l((i=i.apply(e,t||[])).next())})},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(48),r=n(24),s=n(2),l=n(44),u=n(55),c=n(0),m=n(8),d=n(5),h=n(29),p=n(66),f=n(7),g=n(37),y=n(38),C=n(118),v=n(65),S=n(90),b=n(67),w=n(31),x=n(30),M=n(13),O=n(91),T=n(10),P=n(4),D=n(56),E=n(12),F=n(45),A=n(89),N=n(120),_=n(1),R=o(n(156));t.Simulation=class{constructor(e=new r.GeoCoordinate,t){this.updateInterval=m.Constants.SimulationUpdateInterval,this.missionExecuteIntervalTarget=m.Constants.MissionExecuteIntervalTarget,this.preventThreadStarvation=!0,this.droneMotionLimits=m.Constants.DroneMotionLimits.Max(),this.rate=1,this.started=null,this.millisSinceStart=0,this.mission=null,this.engaged=!1,this.timeline=null,this.preview=!1,this.cameraFilesByChannel={},this.executionListeners=[],this.user=new u.User,this.device=new D.Device,this.device.spatial.coordinate=e,this.drone=new a.Drone,this.drone.takeoffCoordinate=e,this.drone.spatial.coordinate=e,t&&this.executionListeners.push(t)}get currentDatetime(){return new M.Datetime(this.started?new Date(this.started.value.getTime()+this.millisSinceStart):new Date)}start(){this.started||(this.millisSinceStart=0,this.started=this.currentDatetime,this.execute())}loadMission(e,t=null){this.engaged||(this.mission=e,this.timeline=t)}addExecutionListener(e){this.executionListeners.push(e)}engage(e,t=null){this.start(),this.engaged||(e&&this.loadMission(e,t),this.mission&&(this.engaged=!0,this.mission.engage(this.user,this.device,this.drone,this.currentDatetime)))}disengage(e){this.engaged&&this.mission&&(this.engaged=!1,this.mission.disengage(this.drone,e))}stop(){this.disengage(new T.Message(P.Strings.Simulation.messages.disengageStop)),this.started=null}generateCameraFile(e,t,n=1){const i=this.cameraFilesByChannel[e.channel]||[],o=e.settings.mode===c.CameraMode.Video?e.settings.videoFileFormat:e.settings.photoFileFormat;let a=Math.floor(Math.random()*(5e6+1)+5e6);e.settings.mode===c.CameraMode.Video&&(a*=n);const r=this.drone.createCameraFile(e.channel,`SIM_${R.default(i.length+1).format("0000")}.${o.toUpperCase()}`,a,t);return i.push(r),this.cameraFilesByChannel[e.channel]=i,this.mission&&this.engaged&&this.mission.execution.addCameraFile(e.channel,r),this.timeline&&this.timeline.addCapture(e,r,n),r}execute(){return i(this,void 0,void 0,function*(){let e=new l.VelocityDroneCommand,t={},n=[],i={},o={},a={},r=0;for(;this.started;){const u=this.currentDatetime,g=(new Date).getTime(),y=u.elapsedTime(this.drone.spatial.updated);if(y>=this.updateInterval){if(this.drone.spatial.velocity=l.VelocityDroneCommand.boundedVelocity(this.drone.spatial.velocity,e.velocity,y,this.droneMotionLimits),null!=e.heading){this.drone.spatial.velocity.rotational=0;const t=E.Geometry.angleDifferenceSigned(e.heading,this.drone.spatial.orientation.z),n=this.droneMotionLimits.rotational.velocity.max*y;Math.abs(t)>n?this.drone.spatial.orientation.z+=s.Common.matchSign(n,t):this.drone.spatial.orientation.z=e.heading}this.drone.spatial.applyVelocity(y),this.drone.spatial.updated.value=u.value,n=this.processCommands(u,n);for(let e of Object.keys(i))i[e]=this.processCommands(u,i[e]);for(let e of Object.keys(t)){const n=this.drone.gimbal(parseInt(e)),i=t[e];n.velocity=O.VelocityGimbalCommand.boundedVelocity(n.velocity,i.velocity,y,m.Constants.GimbalMotionLimits),n.orientation.applyVelocity(n.velocity,y),n.settings.mode===c.GimbalMode.YawFollow&&(n.velocity.yaw=0,n.orientation.yaw=this.drone.spatial.orientation.yaw),n.updated.value=u.value}for(let e of Object.keys(o))o[e]=this.processCommands(u,o[e]);for(let e of Object.values(this.drone.cameras))if(e.capturing)switch(a[e.channel]||(a[e.channel]=_.Serialization.clone(u)),e.settings.mode){case c.CameraMode.Photo:e.settings.photoMode===c.CameraPhotoMode.Interval&&u.elapsedTime(a[e.channel])>=e.settings.photoInterval&&(this.generateCameraFile(e,a[e.channel]),a[e.channel]=_.Serialization.clone(u))}else if(a[e.channel]){switch(e.settings.mode){case c.CameraMode.Photo:e.settings.photoMode!==c.CameraPhotoMode.Interval&&this.generateCameraFile(e,a[e.channel],Math.min(1,e.settings.photoInterval));break;case c.CameraMode.Video:this.generateCameraFile(e,a[e.channel],u.elapsedTime(a[e.channel]))}delete a[e.channel]}}if(e=new l.VelocityDroneCommand,t={},this.mission&&this.engaged){switch(this.mission.execute(this.user,this.device,this.drone,this.timeline,u,this.preview).status){case c.ComponentExecutionStatus.Pending:case c.ComponentExecutionStatus.Executing:this.drone.statelessCommands.forEach(n=>{n instanceof l.VelocityDroneCommand?e=n:n instanceof O.VelocityGimbalCommand&&(t[n.channel]=n)}),this.drone.statefulCommands.forEach(e=>{const t=this.drone.commandExecutionState(e.id);t&&t.status===c.CommandExecutionStatus.Pending&&(e instanceof f.DroneCommand?(t.update(c.CommandExecutionStatus.Queued,null,u),n.push(e)):e instanceof d.CameraCommand?(i[e.channel]||(i[e.channel]=[]),t.update(c.CommandExecutionStatus.Queued,null,u),i[e.channel].push(e)):e instanceof p.GimbalCommand&&(o[e.channel]||(o[e.channel]=[]),t.update(c.CommandExecutionStatus.Queued,null,u),o[e.channel].push(e))),this.timeline&&this.timeline.updateCommandExecutionState(e,t)});break;case c.ComponentExecutionStatus.Succeeded:switch(this.mission.plan.completeAction){case c.PlanCompleteAction.AutoLand:this.drone.spatial.altitude.value=0,this.drone.spatial.velocity=new h.Velocity6;break;case c.PlanCompleteAction.ReturnHome:this.drone.spatial.coordinate=this.drone.takeoffCoordinate,this.drone.spatial.velocity=new h.Velocity6,this.drone.spatial.altitude.value=0}break;case c.ComponentExecutionStatus.Failed:}this.engaged=this.mission.engaged}this.drone.statelessCommands=[],this.executionListeners.forEach(e=>{e(this)}),this.rate&&this.rate>0?yield s.Common.sleep(Math.max(5,this.missionExecuteIntervalTarget/this.rate*1e3-((new Date).getTime()-g))):this.preventThreadStarvation&&r%200==0&&(yield s.Common.sleep(5)),this.millisSinceStart+=1e3*this.missionExecuteIntervalTarget,r++}})}processCommands(e,t){let n=!1;return t.filter(t=>{const i=this.drone.commandExecutionState(t.id);if(!i)return!1;switch(i.status){case c.CommandExecutionStatus.Pending:case c.CommandExecutionStatus.Queued:return n||(this.applyCommandStart(e,t),i.update(c.CommandExecutionStatus.Executing,null,e),n=!0),!0;case c.CommandExecutionStatus.Executing:return i.started&&e.elapsedTime(i.started)>=t.estimatedTime?(this.applyCommandFinish(e,t),i.update(c.CommandExecutionStatus.Succeeded,null,e),!1):(n=!0,!0);case c.CommandExecutionStatus.Failed:case c.CommandExecutionStatus.Succeeded:return!1}})}applyCommandStart(e,t){t instanceof f.DroneCommand?this.applyDroneCommandStart(e,t):t instanceof v.PayloadCommand&&this.applyPayloadCommandStart(e,t)}applyCommandFinish(e,t){t instanceof f.DroneCommand?this.applyDroneCommandFinish(e,t):t instanceof v.PayloadCommand&&this.applyPayloadCommandFinish(e,t)}applyDroneCommandStart(e,t){}applyDroneCommandFinish(e,t){}applyPayloadCommandStart(e,t){t instanceof d.CameraCommand?this.applyCameraCommandStart(e,t):t instanceof p.GimbalCommand&&this.applyGimbalCommandStart(e,t)}applyPayloadCommandFinish(e,t){t instanceof d.CameraCommand?this.applyCameraCommandFinish(e,t):t instanceof p.GimbalCommand&&this.applyGimbalCommandFinish(e,t)}applyCameraCommandStart(e,t){const n=this.drone.camera(t.channel);n.updated.value=e.value,t instanceof w.StartCaptureCameraCommand&&w.StartCaptureCameraCommand.possible(n.settings.mode)&&(n.capturing=!0)}applyCameraCommandFinish(e,t){const n=this.drone.camera(t.channel);n.updated.value=e.value,t instanceof w.StartCaptureCameraCommand?w.StartCaptureCameraCommand.continuous(n.settings.mode,n.settings.photoMode)||(n.capturing=!1):t instanceof x.StopCaptureCameraCommand?n.capturing=!1:t instanceof g.ModeCameraCommand?n.settings.mode=t.mode:t instanceof C.ExposureModeCameraCommand||(t instanceof y.PhotoModeCameraCommand?n.settings.photoMode=t.photoMode:t instanceof A.PhotoFileFormatCameraCommand?n.settings.photoFileFormat=t.photoFileFormat:t instanceof F.PhotoIntervalCameraCommand?n.settings.photoInterval=t.photoInterval:t instanceof N.VideoFileFormatCameraCommand&&(n.settings.videoFileFormat=t.videoFileFormat))}applyGimbalCommandStart(e,t){this.drone.gimbal(t.channel).updated.value=e.value}applyGimbalCommandFinish(e,t){const n=this.drone.gimbal(t.channel);n.updated.value=e.value,t instanceof S.ModeGimbalCommand?n.settings.mode=t.mode:t instanceof b.OrientationGimbalCommand&&n.orientation.apply(t.orientation)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(53);t.ComponentExecuteContext=class extends i.Context{constructor(e,t,n){super(e),this.execution=t,this.engagement=n}elapsedTime(e){return this.engagement.currentDatetime.elapsedTime(e)}}},function(e,t){(function(){e.exports=class{hasFeature(e,t){return!0}createDocumentType(e,t,n){throw new Error("This DOM method is not implemented.")}createDocument(e,t,n){throw new Error("This DOM method is not implemented.")}createHTMLDocument(e){throw new Error("This DOM method is not implemented.")}getFeature(e,t){throw new Error("This DOM method is not implemented.")}}}).call(this)},function(e,t,n){(function(){var t,i,o,a,r,s,l;({isPlainObject:l}=n(34)),o=n(233),i=n(285),a=n(23),t=n(11),s=n(237),r=n(153),e.exports=function(){class e extends a{constructor(e){super(null),this.name="#document",this.type=t.Document,this.documentURI=null,this.domConfig=new i,e||(e={}),e.writer||(e.writer=new r),this.options=e,this.stringify=new s(e)}end(e){var t;return t={},e?l(e)&&(t=e,e=this.options.writer):e=this.options.writer,e.document(this,e.filterOptions(t))}toString(e){return this.options.writer.document(this,this.options.writer.filterOptions(e))}createElement(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createDocumentFragment(){throw new Error("This DOM method is not implemented."+this.debugInfo())}createTextNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createComment(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createCDATASection(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createProcessingInstruction(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createAttribute(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createEntityReference(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}importNode(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createElementNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}createAttributeNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByTagNameNS(e,t){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementById(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}adoptNode(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}normalizeDocument(){throw new Error("This DOM method is not implemented."+this.debugInfo())}renameNode(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}getElementsByClassName(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createEvent(e){throw new Error("This DOM method is not implemented."+this.debugInfo())}createRange(){throw new Error("This DOM method is not implemented."+this.debugInfo())}createNodeIterator(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}createTreeWalker(e,t,n){throw new Error("This DOM method is not implemented."+this.debugInfo())}}return Object.defineProperty(e.prototype,"implementation",{value:new o}),Object.defineProperty(e.prototype,"doctype",{get:function(){var e,n,i,o;for(n=0,i=(o=this.children).length;n<i;n++)if((e=o[n]).type===t.DocType)return e;return null}}),Object.defineProperty(e.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration?this.children[0].encoding:null}}),Object.defineProperty(e.prototype,"xmlStandalone",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration&&"yes"===this.children[0].standalone}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return 0!==this.children.length&&this.children[0].type===t.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(e.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(e.prototype,"origin",{get:function(){return null}}),Object.defineProperty(e.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(e.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(e.prototype,"contentType",{get:function(){return null}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t;t=n(11),n(23),e.exports=function(){class e{constructor(e,n,i){if(this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),null==n)throw new Error("Missing attribute name. "+this.debugInfo(n));this.name=this.stringify.name(n),this.value=this.stringify.attValue(i),this.type=t.Attribute,this.isId=!1,this.schemaTypeInfo=null}clone(){return Object.create(this)}toString(e){return this.options.writer.attribute(this,this.options.writer.filterOptions(e))}debugInfo(e){return null==(e=e||this.name)?"parent: <"+this.parent.name+">":"attribute: {"+e+"}, parent: <"+this.parent.name+">"}isEqualNode(e){return e.namespaceURI===this.namespaceURI&&(e.prefix===this.prefix&&(e.localName===this.localName&&e.value===this.value))}}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(e){return this.value=e||""}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"specified",{get:function(){return!0}}),e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i;i=n(23),t=n(11),e.exports=class extends i{constructor(e){super(e),this.type=t.Dummy}clone(){return Object.create(this)}toString(e){return""}}}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){class e{constructor(e){var n,i,o;for(n in this.assertLegalChar=this.assertLegalChar.bind(this),this.assertLegalName=this.assertLegalName.bind(this),e||(e={}),this.options=e,this.options.version||(this.options.version="1.0"),i=e.stringify||{})t.call(i,n)&&(o=i[n],this[n]=o)}name(e){return this.options.noValidation?e:this.assertLegalName(""+e||"")}text(e){return this.options.noValidation?e:this.assertLegalChar(this.textEscape(""+e||""))}cdata(e){return this.options.noValidation?e:(e=(e=""+e||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(e))}comment(e){if(this.options.noValidation)return e;if((e=""+e||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+e);return this.assertLegalChar(e)}raw(e){return this.options.noValidation?e:""+e||""}attValue(e){return this.options.noValidation?e:this.assertLegalChar(this.attEscape(e=""+e||""))}insTarget(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}insValue(e){if(this.options.noValidation)return e;if((e=""+e||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+e);return this.assertLegalChar(e)}xmlVersion(e){if(this.options.noValidation)return e;if(!(e=""+e||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+e);return e}xmlEncoding(e){if(this.options.noValidation)return e;if(!(e=""+e||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+e);return this.assertLegalChar(e)}xmlStandalone(e){return this.options.noValidation?e:e?"yes":"no"}dtdPubID(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdSysID(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdElementValue(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdAttType(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdAttDefault(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdEntityValue(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}dtdNData(e){return this.options.noValidation?e:this.assertLegalChar(""+e||"")}assertLegalChar(e){var t,n;if(this.options.noValidation)return e;if(t="","1.0"===this.options.version){if(t=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,n=e.match(t))throw new Error(`Invalid character in string: ${e} at index ${n.index}`)}else if("1.1"===this.options.version&&(t=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,n=e.match(t)))throw new Error(`Invalid character in string: ${e} at index ${n.index}`);return e}assertLegalName(e){var t;if(this.options.noValidation)return e;if(this.assertLegalChar(e),t=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!e.match(t))throw new Error("Invalid character in name");return e}textEscape(e){var t;return this.options.noValidation?e:(t=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))}attEscape(e){var t;return this.options.noValidation?e:(t=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))}}return e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e}.call(this)}).call(this)},function(e,t,n){(function(){var t,i,o,a={}.hasOwnProperty;({assign:o}=n(34)),t=n(11),n(144),n(145),n(142),n(143),n(140),n(150),n(151),n(152),n(236),n(146),n(148),n(147),n(149),i=n(108),e.exports=class{constructor(e){var t,n,i;for(t in e||(e={}),this.options=e,n=e.writer||{})a.call(n,t)&&(i=n[t],this["_"+t]=this[t],this[t]=i)}filterOptions(e){var t,n,a,r,s,l,u,c,m;return e||(e={}),e=o({},this.options,e),(t={writer:this}).pretty=e.pretty||!1,t.allowEmpty=e.allowEmpty||!1,t.indent=null!=(n=e.indent)?n:"  ",t.newline=null!=(a=e.newline)?a:"\n",t.offset=null!=(r=e.offset)?r:0,t.width=null!=(s=e.width)?s:0,t.dontPrettyTextNodes=null!=(l=null!=(u=e.dontPrettyTextNodes)?u:e.dontprettytextnodes)?l:0,t.spaceBeforeSlash=null!=(c=null!=(m=e.spaceBeforeSlash)?m:e.spacebeforeslash)?c:"",!0===t.spaceBeforeSlash&&(t.spaceBeforeSlash=" "),t.suppressPrettyCount=0,t.user={},t.state=i.None,t}indent(e,t,n){var i;return!t.pretty||t.suppressPrettyCount?"":t.pretty&&(i=(n||0)+t.offset+1)>0?new Array(i).join(t.indent):""}endline(e,t,n){return!t.pretty||t.suppressPrettyCount?"":t.newline}attribute(e,t,n){var i;return this.openAttribute(e,t,n),i=t.pretty&&t.width>0?e.name+'="'+e.value+'"':" "+e.name+'="'+e.value+'"',this.closeAttribute(e,t,n),i}cdata(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<![CDATA[",t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+="]]>"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}comment(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"\x3c!-- ",t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+=" --\x3e"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}declaration(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<?xml",t.state=i.InsideTag,o+=' version="'+e.version+'"',null!=e.encoding&&(o+=' encoding="'+e.encoding+'"'),null!=e.standalone&&(o+=' standalone="'+e.standalone+'"'),t.state=i.CloseTag,o+=t.spaceBeforeSlash+"?>",o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}docType(e,t,n){var o,a,r,s,l;if(n||(n=0),this.openNode(e,t,n),t.state=i.OpenTag,s=this.indent(e,t,n),s+="<!DOCTYPE "+e.root().name,e.pubID&&e.sysID?s+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(s+=' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(s+=" [",s+=this.endline(e,t,n),t.state=i.InsideTag,a=0,r=(l=e.children).length;a<r;a++)o=l[a],s+=this.writeChildNode(o,t,n+1);t.state=i.CloseTag,s+="]"}return t.state=i.CloseTag,s+=t.spaceBeforeSlash+">",s+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),s}element(e,n,o){var r,s,l,u,c,m,d,h,p,f,g,y,C,v,S,b,w,x;if(o||(o=0),g=!1,this.openNode(e,n,o),n.state=i.OpenTag,y=this.indent(e,n,o)+"<"+e.name,n.pretty&&n.width>0)for(f in d=y.length,v=e.attribs)a.call(v,f)&&(r=v[f],d+(C=this.attribute(r,n,o)).length>n.width?(x=this.indent(e,n,o+1)+C,y+=this.endline(e,n,o)+x,d=x.length):(y+=x=" "+C,d+=x.length));else for(f in S=e.attribs)a.call(S,f)&&(r=S[f],y+=this.attribute(r,n,o));if(u=0===(l=e.children.length)?null:e.children[0],0===l||e.children.every(function(e){return(e.type===t.Text||e.type===t.Raw)&&""===e.value}))n.allowEmpty?(y+=">",n.state=i.CloseTag,y+="</"+e.name+">"+this.endline(e,n,o)):(n.state=i.CloseTag,y+=n.spaceBeforeSlash+"/>"+this.endline(e,n,o));else if(!n.pretty||1!==l||u.type!==t.Text&&u.type!==t.Raw||null==u.value){if(n.dontPrettyTextNodes)for(c=0,h=(b=e.children).length;c<h;c++)if(((s=b[c]).type===t.Text||s.type===t.Raw)&&null!=s.value){n.suppressPrettyCount++,g=!0;break}for(y+=">"+this.endline(e,n,o),n.state=i.InsideTag,m=0,p=(w=e.children).length;m<p;m++)s=w[m],y+=this.writeChildNode(s,n,o+1);n.state=i.CloseTag,y+=this.indent(e,n,o)+"</"+e.name+">",g&&n.suppressPrettyCount--,y+=this.endline(e,n,o),n.state=i.None}else y+=">",n.state=i.InsideTag,n.suppressPrettyCount++,g=!0,y+=this.writeChildNode(u,n,o+1),n.suppressPrettyCount--,g=!1,n.state=i.CloseTag,y+="</"+e.name+">"+this.endline(e,n,o);return this.closeNode(e,n,o),y}writeChildNode(e,n,i){switch(e.type){case t.CData:return this.cdata(e,n,i);case t.Comment:return this.comment(e,n,i);case t.Element:return this.element(e,n,i);case t.Raw:return this.raw(e,n,i);case t.Text:return this.text(e,n,i);case t.ProcessingInstruction:return this.processingInstruction(e,n,i);case t.Dummy:return"";case t.Declaration:return this.declaration(e,n,i);case t.DocType:return this.docType(e,n,i);case t.AttributeDeclaration:return this.dtdAttList(e,n,i);case t.ElementDeclaration:return this.dtdElement(e,n,i);case t.EntityDeclaration:return this.dtdEntity(e,n,i);case t.NotationDeclaration:return this.dtdNotation(e,n,i);default:throw new Error("Unknown XML node type: "+e.constructor.name)}}processingInstruction(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<?",t.state=i.InsideTag,o+=e.target,e.value&&(o+=" "+e.value),t.state=i.CloseTag,o+=t.spaceBeforeSlash+"?>",o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}raw(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n),t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}text(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n),t.state=i.InsideTag,o+=e.value,t.state=i.CloseTag,o+=this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdAttList(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!ATTLIST",t.state=i.InsideTag,o+=" "+e.elementName+" "+e.attributeName+" "+e.attributeType,"#DEFAULT"!==e.defaultValueType&&(o+=" "+e.defaultValueType),e.defaultValue&&(o+=' "'+e.defaultValue+'"'),t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdElement(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!ELEMENT",t.state=i.InsideTag,o+=" "+e.name+" "+e.value,t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdEntity(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!ENTITY",t.state=i.InsideTag,e.pe&&(o+=" %"),o+=" "+e.name,e.value?o+=' "'+e.value+'"':(e.pubID&&e.sysID?o+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(o+=' SYSTEM "'+e.sysID+'"'),e.nData&&(o+=" NDATA "+e.nData)),t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}dtdNotation(e,t,n){var o;return this.openNode(e,t,n),t.state=i.OpenTag,o=this.indent(e,t,n)+"<!NOTATION",t.state=i.InsideTag,o+=" "+e.name,e.pubID&&e.sysID?o+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.pubID?o+=' PUBLIC "'+e.pubID+'"':e.sysID&&(o+=' SYSTEM "'+e.sysID+'"'),t.state=i.CloseTag,o+=t.spaceBeforeSlash+">"+this.endline(e,t,n),t.state=i.None,this.closeNode(e,t,n),o}openNode(e,t,n){}closeNode(e,t,n){}openAttribute(e,t,n){}closeAttribute(e,t,n){}}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ComponentNodeExecutionState=class{constructor(e,t){this.node=e,this.state=t}}},function(e,t,n){!function(){"use strict";var t=Math.abs,i=Math.min,o=Math.max,a=Math.cos,r=Math.sin,s=Math.acos,l=Math.sqrt,u=Math.PI,c={x:0,y:0,z:0},m=n(241),d=n(293),h=function(e){var n=e&&e.forEach?e:[].slice.call(arguments),i=!1;if("object"==typeof n[0]){i=n.length;var o=[];n.forEach(function(e){["x","y","z"].forEach(function(t){void 0!==e[t]&&o.push(e[t])})}),n=o}var a=!1,r=n.length;if(i){if(i>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");a=!0}}else if(6!==r&&8!==r&&9!==r&&12!==r&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");var s=!a&&(9===r||12===r)||e&&e[0]&&void 0!==e[0].z;this._3d=s;for(var l=[],u=0,c=s?3:2;u<r;u+=c){var d={x:n[u],y:n[u+1]};s&&(d.z=n[u+2]),l.push(d)}this.order=l.length-1,this.points=l;var h=["x","y"];s&&h.push("z"),this.dims=h,this.dimlen=h.length,function(e){for(var n=e.order,i=e.points,o=m.align(i,{p1:i[0],p2:i[n]}),a=0;a<o.length;a++)if(t(o[a].y)>1e-4)return void(e._linear=!1);e._linear=!0}(this),this._t1=0,this._t2=1,this.update()},p=n(294);function f(e,t,n,i,o){void 0===o&&(o=.5);var a=m.projectionratio(o,e),r=1-a,s={x:a*t.x+r*i.x,y:a*t.y+r*i.y},l=m.abcratio(o,e);return{A:{x:n.x+(n.x-s.x)/l,y:n.y+(n.y-s.y)/l},B:n,C:s}}h.SVGtoBeziers=function(e){return p(h,e)},h.quadraticFromPoints=function(e,t,n,i){if(void 0===i&&(i=.5),0===i)return new h(t,t,n);if(1===i)return new h(e,t,t);var o=f(2,e,t,n,i);return new h(e,o.A,n)},h.cubicFromPoints=function(e,t,n,i,o){void 0===i&&(i=.5);var a=f(3,e,t,n,i);void 0===o&&(o=m.dist(t,a.C));var r=o*(1-i)/i,s=m.dist(e,n),l=(n.x-e.x)/s,u=(n.y-e.y)/s,c=o*l,d=o*u,p=r*l,g=r*u,y=t.x-c,C=t.y-d,v=t.x+p,S=t.y+g,b=a.A,w=b.x+(y-b.x)/(1-i),x=b.y+(C-b.y)/(1-i),M=b.x+(v-b.x)/i,O=b.y+(S-b.y)/i,T={x:e.x+(w-e.x)/i,y:e.y+(x-e.y)/i},P={x:n.x+(M-n.x)/(1-i),y:n.y+(O-n.y)/(1-i)};return new h(e,T,P,n)};var g=function(){return m};h.getUtils=g,h.PolyBezier=d,h.prototype={getUtils:g,valueOf:function(){return this.toString()},toString:function(){return m.pointsToString(this.points)},toSVG:function(e){if(this._3d)return!1;for(var t=this.points,n=["M",t[0].x,t[0].y,2===this.order?"Q":"C"],i=1,o=t.length;i<o;i++)n.push(t[i].x),n.push(t[i].y);return n.join(" ")},setRatios:function(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]},update:function(){this._lut=[],this.dpoints=m.derive(this.points,this._3d),this.computedirection()},computedirection:function(){var e=this.points,t=m.angle(e[0],e[this.order],e[1]);this.clockwise=t>0},length:function(){return m.length(this.derivative.bind(this))},_lut:[],getLUT:function(e){if(e=e||100,this._lut.length===e)return this._lut;this._lut=[],e--;for(var t=0;t<=e;t++)this._lut.push(this.compute(t/e));return this._lut},on:function(e,t){t=t||5;for(var n,i=this.getLUT(),o=[],a=0,r=0;r<i.length;r++)n=i[r],m.dist(n,e)<t&&(o.push(n),a+=r/i.length);return!!o.length&&a/o.length},project:function(e){var t=this.getLUT(),n=t.length-1,i=m.closest(t,e),o=i.mdist,a=i.mpos;if(0===a||a===n){var r=a/n,s=this.compute(r);return s.t=r,s.d=o,s}var l,u,c,d=(a+1)/n,h=.1/n;for(o+=1,l=r=(a-1)/n;r<d+h;r+=h)u=this.compute(r),(c=m.dist(e,u))<o&&(o=c,l=r);return(u=this.compute(l)).t=l,u.d=o,u},get:function(e){return this.compute(e)},point:function(e){return this.points[e]},compute:function(e){return this.ratios?m.computeWithRatios(e,this.points,this.ratios,this._3d):m.compute(e,this.points,this._3d,this.ratios)},raise:function(){for(var e,t,n=this.points,i=[n[0]],o=n.length,a=1;a<o;a++)e=n[a],t=n[a-1],i[a]={x:(o-a)/o*e.x+a/o*t.x,y:(o-a)/o*e.y+a/o*t.y};return i[o]=n[o-1],new h(i)},derivative:function(e){var t,n,i=1-e,o=0,a=this.dpoints[0];2===this.order&&(a=[a[0],a[1],c],t=i,n=e),3===this.order&&(t=i*i,n=i*e*2,o=e*e);var r={x:t*a[0].x+n*a[1].x+o*a[2].x,y:t*a[0].y+n*a[1].y+o*a[2].y};return this._3d&&(r.z=t*a[0].z+n*a[1].z+o*a[2].z),r},curvature:function(e){return m.curvature(e,this.points,this._3d)},inflections:function(){return m.inflections(this.points)},normal:function(e){return this._3d?this.__normal3(e):this.__normal2(e)},__normal2:function(e){var t=this.derivative(e),n=l(t.x*t.x+t.y*t.y);return{x:-t.y/n,y:t.x/n}},__normal3:function(e){var t=this.derivative(e),n=this.derivative(e+.01),i=l(t.x*t.x+t.y*t.y+t.z*t.z),o=l(n.x*n.x+n.y*n.y+n.z*n.z);t.x/=i,t.y/=i,t.z/=i,n.x/=o,n.y/=o,n.z/=o;var a={x:n.y*t.z-n.z*t.y,y:n.z*t.x-n.x*t.z,z:n.x*t.y-n.y*t.x},r=l(a.x*a.x+a.y*a.y+a.z*a.z);a.x/=r,a.y/=r,a.z/=r;var s=[a.x*a.x,a.x*a.y-a.z,a.x*a.z+a.y,a.x*a.y+a.z,a.y*a.y,a.y*a.z-a.x,a.x*a.z-a.y,a.y*a.z+a.x,a.z*a.z];return{x:s[0]*t.x+s[1]*t.y+s[2]*t.z,y:s[3]*t.x+s[4]*t.y+s[5]*t.z,z:s[6]*t.x+s[7]*t.y+s[8]*t.z}},hull:function(e){var t,n=this.points,i=[],o=[],a=0,r=0,s=0;for(o[a++]=n[0],o[a++]=n[1],o[a++]=n[2],3===this.order&&(o[a++]=n[3]);n.length>1;){for(i=[],r=0,s=n.length-1;r<s;r++)t=m.lerp(e,n[r],n[r+1]),o[a++]=t,i.push(t);n=i}return o},split:function(e,t){if(0===e&&t)return this.split(t).left;if(1===t)return this.split(e).right;var n=this.hull(e),i={left:2===this.order?new h([n[0],n[3],n[5]]):new h([n[0],n[4],n[7],n[9]]),right:2===this.order?new h([n[5],n[4],n[2]]):new h([n[9],n[8],n[6],n[3]]),span:n};return i.left._t1=m.map(0,0,1,this._t1,this._t2),i.left._t2=m.map(e,0,1,this._t1,this._t2),i.right._t1=m.map(e,0,1,this._t1,this._t2),i.right._t2=m.map(1,0,1,this._t1,this._t2),t?(t=m.map(t,e,1,0,1),i.right.split(t).left):i},extrema:function(){var e,t,n=this.dims,i={},o=[];return n.forEach(function(n){t=function(e){return e[n]},e=this.dpoints[0].map(t),i[n]=m.droots(e),3===this.order&&(e=this.dpoints[1].map(t),i[n]=i[n].concat(m.droots(e))),i[n]=i[n].filter(function(e){return e>=0&&e<=1}),o=o.concat(i[n].sort(m.numberSort))}.bind(this)),o=o.sort(m.numberSort).filter(function(e,t){return o.indexOf(e)===t}),i.values=o,i},bbox:function(){var e=this.extrema(),t={};return this.dims.forEach(function(n){t[n]=m.getminmax(this,n,e[n])}.bind(this)),t},overlaps:function(e){var t=this.bbox(),n=e.bbox();return m.bboxoverlap(t,n)},offset:function(e,t){if(void 0!==t){var n=this.get(e),i=this.normal(e),o={c:n,n:i,x:n.x+i.x*t,y:n.y+i.y*t};return this._3d&&(o.z=n.z+i.z*t),o}if(this._linear){var a=this.normal(0),r=this.points.map(function(t){var n={x:t.x+e*a.x,y:t.y+e*a.y};return t.z&&i.z&&(n.z=t.z+e*a.z),n});return[new h(r)]}return this.reduce().map(function(t){return t.scale(e)})},simple:function(){if(3===this.order){var e=m.angle(this.points[0],this.points[3],this.points[1]),n=m.angle(this.points[0],this.points[3],this.points[2]);if(e>0&&n<0||e<0&&n>0)return!1}var i=this.normal(0),o=this.normal(1),a=i.x*o.x+i.y*o.y;return this._3d&&(a+=i.z*o.z),t(s(a))<u/3},reduce:function(){var e,n,i=0,o=0,a=[],r=[],s=this.extrema().values;for(-1===s.indexOf(0)&&(s=[0].concat(s)),-1===s.indexOf(1)&&s.push(1),i=s[0],e=1;e<s.length;e++)o=s[e],(n=this.split(i,o))._t1=i,n._t2=o,a.push(n),i=o;return a.forEach(function(e){for(i=0,o=0;o<=1;)for(o=i+.01;o<=1.01;o+=.01)if(!(n=e.split(i,o)).simple()){if(t(i-(o-=.01))<.01)return[];(n=e.split(i,o))._t1=m.map(i,0,1,e._t1,e._t2),n._t2=m.map(o,0,1,e._t1,e._t2),r.push(n),i=o;break}i<1&&((n=e.split(i,1))._t1=m.map(i,0,1,e._t1,e._t2),n._t2=e._t2,r.push(n))}),r},scale:function(e){var t=this.order,n=!1;if("function"==typeof e&&(n=e),n&&2===t)return this.raise().scale(n);var i=this.clockwise,o=n?n(0):e,a=n?n(1):e,r=[this.offset(0,10),this.offset(1,10)],s=m.lli4(r[0],r[0].c,r[1],r[1].c);if(!s)throw new Error("cannot scale this curve. Try reducing it first.");var u=this.points,c=[];return[0,1].forEach(function(e){var n=c[e*t]=m.copy(u[e*t]);n.x+=(e?a:o)*r[e].n.x,n.y+=(e?a:o)*r[e].n.y}.bind(this)),n?([0,1].forEach(function(o){if(2!==this.order||!o){var a=u[o+1],r={x:a.x-s.x,y:a.y-s.y},m=n?n((o+1)/t):e;n&&!i&&(m=-m);var d=l(r.x*r.x+r.y*r.y);r.x/=d,r.y/=d,c[o+1]={x:a.x+m*r.x,y:a.y+m*r.y}}}.bind(this)),new h(c)):([0,1].forEach(function(e){if(2!==this.order||!e){var n=c[e*t],i=this.derivative(e),o={x:n.x+i.x,y:n.y+i.y};c[e+1]=m.lli4(n,o,s,u[e+1])}}.bind(this)),new h(c))},outline:function(e,t,n,i){t=void 0===t?e:t;var o,a=this.reduce(),r=a.length,s=[],l=[],u=0,c=this.length(),h=void 0!==n&&void 0!==i;function p(e,t,n,i,o){return function(a){var r=i/n,s=(i+o)/n,l=t-e;return m.map(a,0,1,e+r*l,e+s*l)}}a.forEach(function(o){w=o.length(),h?(s.push(o.scale(p(e,n,c,u,w))),l.push(o.scale(p(-t,-i,c,u,w)))):(s.push(o.scale(e)),l.push(o.scale(-t))),u+=w}),l=l.map(function(e){return(o=e.points)[3]?e.points=[o[3],o[2],o[1],o[0]]:e.points=[o[2],o[1],o[0]],e}).reverse();var f=s[0].points[0],g=s[r-1].points[s[r-1].points.length-1],y=l[r-1].points[l[r-1].points.length-1],C=l[0].points[0],v=m.makeline(y,f),S=m.makeline(g,C),b=[v].concat(s).concat([S]).concat(l),w=b.length;return new d(b)},outlineshapes:function(e,t,n){t=t||e;for(var i=this.outline(e,t).curves,o=[],a=1,r=i.length;a<r/2;a++){var s=m.makeshape(i[a],i[r-a],n);s.startcap.virtual=a>1,s.endcap.virtual=a<r/2-1,o.push(s)}return o},intersects:function(e,t){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof h&&(e=e.reduce()),this.curveintersects(this.reduce(),e,t)):this.selfintersects(t)},lineIntersects:function(e){var t=i(e.p1.x,e.p2.x),n=i(e.p1.y,e.p2.y),a=o(e.p1.x,e.p2.x),r=o(e.p1.y,e.p2.y),s=this;return m.roots(this.points,e).filter(function(e){var i=s.get(e);return m.between(i.x,t,a)&&m.between(i.y,n,r)})},selfintersects:function(e){var t,n,i,o,a=this.reduce(),r=a.length-2,s=[];for(t=0;t<r;t++)i=a.slice(t,t+1),o=a.slice(t+2),n=this.curveintersects(i,o,e),s=s.concat(n);return s},curveintersects:function(e,t,n){var i=[];e.forEach(function(e){t.forEach(function(t){e.overlaps(t)&&i.push({left:e,right:t})})});var o=[];return i.forEach(function(e){var t=m.pairiteration(e.left,e.right,n);t.length>0&&(o=o.concat(t))}),o},arcs:function(e){e=e||.5;return this._iterate(e,[])},_error:function(e,n,i,o){var a=(o-i)/4,r=this.get(i+a),s=this.get(o-a),l=m.dist(e,n),u=m.dist(e,r),c=m.dist(e,s);return t(u-l)+t(c-l)},_iterate:function(e,t){var n,i=0,o=1;do{n=0,o=1;var s,l,u,c,d,h=this.get(i),p=!1,f=!1,g=o,y=1;do{if(f=p,c=u,g=(i+o)/2,0,s=this.get(g),l=this.get(o),(u=m.getccenter(h,s,l)).interval={start:i,end:o},p=this._error(u,h,i,o)<=e,(d=f&&!p)||(y=o),p){if(o>=1){if(u.interval.end=y=1,c=u,o>1){var C={x:u.x+u.r*a(u.e),y:u.y+u.r*r(u.e)};u.e+=m.angle({x:u.x,y:u.y},C,this.get(1))}break}o+=(o-i)/2}else o=g}while(!d&&n++<100);if(n>=100)break;c=c||u,t.push(c),i=y}while(o<1);return t}},e.exports=h}()},function(e,t,n){!function(){"use strict";var t=Math.abs,i=Math.cos,o=Math.sin,a=Math.acos,r=Math.atan2,s=Math.sqrt,l=Math.pow,u=function(e){return e<0?-l(-e,1/3):l(e,1/3)},c=Math.PI,m=2*c,d=c/2,h=Number.MAX_SAFE_INTEGER||9007199254740991,p=Number.MIN_SAFE_INTEGER||-9007199254740991,f={x:0,y:0,z:0},g={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(e,t){var n=t(e),i=n.x*n.x+n.y*n.y;return void 0!==n.z&&(i+=n.z*n.z),s(i)},compute:function(e,t,n){if(0===e)return t[0];var i=t.length-1;if(1===e)return t[i];var o=t,a=1-e;if(0===i)return t[0];if(1===i)return d={x:a*o[0].x+e*o[1].x,y:a*o[0].y+e*o[1].y},n&&(d.z=a*o[0].z+e*o[1].z),d;if(i<4){var r,s,l,u=a*a,c=e*e,m=0;2===i?(o=[o[0],o[1],o[2],f],r=u,s=a*e*2,l=c):3===i&&(r=u*a,s=u*e*3,l=a*c*3,m=e*c);var d={x:r*o[0].x+s*o[1].x+l*o[2].x+m*o[3].x,y:r*o[0].y+s*o[1].y+l*o[2].y+m*o[3].y};return n&&(d.z=r*o[0].z+s*o[1].z+l*o[2].z+m*o[3].z),d}for(var h=JSON.parse(JSON.stringify(t));h.length>1;){for(var p=0;p<h.length-1;p++)h[p]={x:h[p].x+(h[p+1].x-h[p].x)*e,y:h[p].y+(h[p+1].y-h[p].y)*e},void 0!==h[p].z&&(h[p]=h[p].z+(h[p+1].z-h[p].z)*e);h.splice(h.length-1,1)}return h[0]},computeWithRatios:function(e,t,n,i){var o,a=1-e,r=n,s=t,l=r[0],u=r[1],c=r[2],m=r[3];return l*=a,u*=e,2===s.length?(o=l+u,{x:(l*s[0].x+u*s[1].x)/o,y:(l*s[0].y+u*s[1].y)/o,z:!!i&&(l*s[0].z+u*s[1].z)/o}):(l*=a,u*=2*a,c*=e*e,3===s.length?(o=l+u+c,{x:(l*s[0].x+u*s[1].x+c*s[2].x)/o,y:(l*s[0].y+u*s[1].y+c*s[2].y)/o,z:!!i&&(l*s[0].z+u*s[1].z+c*s[2].z)/o}):(l*=a,u*=1.5*a,c*=3*a,m*=e*e*e,4===s.length?(o=l+u+c+m,{x:(l*s[0].x+u*s[1].x+c*s[2].x+m*s[3].x)/o,y:(l*s[0].y+u*s[1].y+c*s[2].y+m*s[3].y)/o,z:!!i&&(l*s[0].z+u*s[1].z+c*s[2].z+m*s[3].z)/o}):void 0))},derive:function(e,t){for(var n=[],i=e,o=i.length,a=o-1;o>1;o--,a--){for(var r,s=[],l=0;l<a;l++)r={x:a*(i[l+1].x-i[l].x),y:a*(i[l+1].y-i[l].y)},t&&(r.z=a*(i[l+1].z-i[l].z)),s.push(r);n.push(s),i=s}return n},between:function(e,t,n){return t<=e&&e<=n||g.approximately(e,t)||g.approximately(e,n)},approximately:function(e,n,i){return t(e-n)<=(i||1e-6)},length:function(e){var t,n,i=0,o=g.Tvalues.length;for(t=0;t<o;t++)n=.5*g.Tvalues[t]+.5,i+=g.Cvalues[t]*g.arcfn(n,e);return.5*i},map:function(e,t,n,i,o){return i+(o-i)*((e-t)/(n-t))},lerp:function(e,t,n){var i={x:t.x+e*(n.x-t.x),y:t.y+e*(n.y-t.y)};return t.z&&n.z&&(i.z=t.z+e*(n.z-t.z)),i},pointToString:function(e){var t=e.x+"/"+e.y;return void 0!==e.z&&(t+="/"+e.z),t},pointsToString:function(e){return"["+e.map(g.pointToString).join(", ")+"]"},copy:function(e){return JSON.parse(JSON.stringify(e))},angle:function(e,t,n){var i=t.x-e.x,o=t.y-e.y,a=n.x-e.x,s=n.y-e.y;return r(i*s-o*a,i*a+o*s)},round:function(e,t){var n=""+e,i=n.indexOf(".");return parseFloat(n.substring(0,i+1+t))},dist:function(e,t){var n=e.x-t.x,i=e.y-t.y;return s(n*n+i*i)},closest:function(e,t){var n,i,o=l(2,63);return e.forEach(function(e,a){(i=g.dist(t,e))<o&&(o=i,n=a)}),{mdist:o,mpos:n}},abcratio:function(e,n){if(2!==n&&3!==n)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;var i=l(e,n)+l(1-e,n);return t((i-1)/i)},projectionratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;var n=l(1-e,t);return n/(l(e,t)+n)},lli8:function(e,t,n,i,o,a,r,s){var l=(e-n)*(a-s)-(t-i)*(o-r);return 0!=l&&{x:((e*i-t*n)*(o-r)-(e-n)*(o*s-a*r))/l,y:((e*i-t*n)*(a-s)-(t-i)*(o*s-a*r))/l}},lli4:function(e,t,n,i){var o=e.x,a=e.y,r=t.x,s=t.y,l=n.x,u=n.y,c=i.x,m=i.y;return g.lli8(o,a,r,s,l,u,c,m)},lli:function(e,t){return g.lli4(e,e.c,t,t.c)},makeline:function(e,t){var i=n(240),o=e.x,a=e.y,r=t.x,s=t.y,l=(r-o)/3,u=(s-a)/3;return new i(o,a,o+l,a+u,o+2*l,a+2*u,r,s)},findbbox:function(e){var t=h,n=h,i=p,o=p;return e.forEach(function(e){var a=e.bbox();t>a.x.min&&(t=a.x.min),n>a.y.min&&(n=a.y.min),i<a.x.max&&(i=a.x.max),o<a.y.max&&(o=a.y.max)}),{x:{min:t,mid:(t+i)/2,max:i,size:i-t},y:{min:n,mid:(n+o)/2,max:o,size:o-n}}},shapeintersections:function(e,t,n,i,o){if(!g.bboxoverlap(t,i))return[];var a=[],r=[e.startcap,e.forward,e.back,e.endcap],s=[n.startcap,n.forward,n.back,n.endcap];return r.forEach(function(t){t.virtual||s.forEach(function(i){if(!i.virtual){var r=t.intersects(i,o);r.length>0&&(r.c1=t,r.c2=i,r.s1=e,r.s2=n,a.push(r))}})}),a},makeshape:function(e,t,n){var i=t.points.length,o=e.points.length,a=g.makeline(t.points[i-1],e.points[0]),r=g.makeline(e.points[o-1],t.points[0]),s={startcap:a,forward:e,back:t,endcap:r,bbox:g.findbbox([a,e,t,r])},l=g;return s.intersections=function(e){return l.shapeintersections(s,s.bbox,e,e.bbox,n)},s},getminmax:function(e,t,n){if(!n)return{min:0,max:0};var i,o,a=h,r=p;-1===n.indexOf(0)&&(n=[0].concat(n)),-1===n.indexOf(1)&&n.push(1);for(var s=0,l=n.length;s<l;s++)i=n[s],(o=e.get(i))[t]<a&&(a=o[t]),o[t]>r&&(r=o[t]);return{min:a,mid:(a+r)/2,max:r,size:r-a}},align:function(e,t){var n=t.p1.x,a=t.p1.y,s=-r(t.p2.y-a,t.p2.x-n);return e.map(function(e){return{x:(e.x-n)*i(s)-(e.y-a)*o(s),y:(e.x-n)*o(s)+(e.y-a)*i(s)}})},roots:function(e,t){t=t||{p1:{x:0,y:0},p2:{x:1,y:0}};var n=e.length-1,o=g.align(e,t),r=function(e){return 0<=e&&e<=1};if(2===n){if(0!==(f=(y=o[0].y)-2*(C=o[1].y)+(v=o[2].y))){var l=-s(C*C-y*v),c=-y+C;return[-(l+c)/f,-(-l+c)/f].filter(r)}return C!==v&&0===f?[(2*C-v)/(2*C-2*v)].filter(r):[]}var d=o[0].y,h=o[1].y,p=o[2].y,f=3*h-d-3*p+o[3].y,y=3*d-6*h+3*p,C=-3*d+3*h,v=d;if(g.approximately(f,0)){if(g.approximately(y,0))return g.approximately(C,0)?[]:[-v/C].filter(r);var S=2*y;return[((b=s(C*C-4*y*v))-C)/S,(-C-b)/S].filter(r)}var b,w,x=(o=(3*(C/=f)-(y/=f)*y)/3)/3,M=(b=(2*y*y*y-9*y*C+27*(v/=f))/27)/2,O=M*M+x*x*x;if(O<0){var T=-o/3,P=s(T*T*T),D=-b/(2*P),E=a(D<-1?-1:D>1?1:D),F=2*u(P);return[F*i(E/3)-y/3,F*i((E+m)/3)-y/3,F*i((E+2*m)/3)-y/3].filter(r)}if(0===O)return[2*(w=M<0?u(-M):-u(M))-y/3,-w-y/3].filter(r);var A=s(O);return[(w=u(-M+A))-u(M+A)-y/3].filter(r)},droots:function(e){if(3===e.length){var t=e[0],n=e[1],i=e[2],o=t-2*n+i;if(0!==o){var a=-s(n*n-t*i),r=-t+n;return[-(a+r)/o,-(-a+r)/o]}return n!==i&&0===o?[(2*n-i)/(2*(n-i))]:[]}if(2===e.length)return(t=e[0])!==(n=e[1])?[t/(t-n)]:[]},curvature:function(e,n,i,o){var a,r,u,c,m,d,h=g.derive(n),p=h[0],f=h[1],y=g.compute(e,p),C=g.compute(e,f),v=y.x*y.x+y.y*y.y;if(i?(a=s(l(y.y*C.z-C.y*y.z,2)+l(y.z*C.x-C.z*y.x,2)+l(y.x*C.y-C.x*y.y,2)),r=l(v+y.z*y.z,2/3)):(a=y.x*C.y-y.y*C.x,r=l(v,2/3)),0===a||0===r)return{k:0,r:0};if(m=a/r,d=r/a,!o){var S=g.curvature(e-.001,n,i,!0).k,b=g.curvature(e+.001,n,i,!0).k;c=(b-m+(m-S))/2,u=(t(b-m)+t(m-S))/2}return{k:m,r:d,dk:c,adk:u}},inflections:function(e){if(e.length<4)return[];var t=g.align(e,{p1:e[0],p2:e.slice(-1)[0]}),n=t[2].x*t[1].y,i=t[3].x*t[1].y,o=t[1].x*t[2].y,a=18*(-3*n+2*i+3*o-(m=t[3].x*t[2].y)),r=18*(3*n-i-3*o),s=18*(o-n);if(g.approximately(a,0)){if(!g.approximately(r,0)){var l=-s/r;if(0<=l&&l<=1)return[l]}return[]}var u=r*r-4*a*s,c=Math.sqrt(u),m=2*a;return g.approximately(m,0)?[]:[(c-r)/m,-(r+c)/m].filter(function(e){return 0<=e&&e<=1})},bboxoverlap:function(e,n){var i,o,a,r,s,l=["x","y"],u=l.length;for(i=0;i<u;i++)if(a=e[o=l[i]].mid,r=n[o].mid,s=(e[o].size+n[o].size)/2,t(a-r)>=s)return!1;return!0},expandbox:function(e,t){t.x.min<e.x.min&&(e.x.min=t.x.min),t.y.min<e.y.min&&(e.y.min=t.y.min),t.z&&t.z.min<e.z.min&&(e.z.min=t.z.min),t.x.max>e.x.max&&(e.x.max=t.x.max),t.y.max>e.y.max&&(e.y.max=t.y.max),t.z&&t.z.max>e.z.max&&(e.z.max=t.z.max),e.x.mid=(e.x.min+e.x.max)/2,e.y.mid=(e.y.min+e.y.max)/2,e.z&&(e.z.mid=(e.z.min+e.z.max)/2),e.x.size=e.x.max-e.x.min,e.y.size=e.y.max-e.y.min,e.z&&(e.z.size=e.z.max-e.z.min)},pairiteration:function(e,t,n){var i=e.bbox(),o=t.bbox(),a=1e5,r=n||.5;if(i.x.size+i.y.size<r&&o.x.size+o.y.size<r)return[(a*(e._t1+e._t2)/2|0)/a+"/"+(a*(t._t1+t._t2)/2|0)/a];var s=e.split(.5),l=t.split(.5),u=[{left:s.left,right:l.left},{left:s.left,right:l.right},{left:s.right,right:l.right},{left:s.right,right:l.left}];u=u.filter(function(e){return g.bboxoverlap(e.left.bbox(),e.right.bbox())});var c=[];return 0===u.length?c:(u.forEach(function(e){c=c.concat(g.pairiteration(e.left,e.right,r))}),c=c.filter(function(e,t){return c.indexOf(e)===t}))},getccenter:function(e,t,n){var a,s=t.x-e.x,l=t.y-e.y,u=n.x-t.x,c=n.y-t.y,h=s*i(d)-l*o(d),p=s*o(d)+l*i(d),f=u*i(d)-c*o(d),y=u*o(d)+c*i(d),C=(e.x+t.x)/2,v=(e.y+t.y)/2,S=(t.x+n.x)/2,b=(t.y+n.y)/2,w=C+h,x=v+p,M=S+f,O=b+y,T=g.lli8(C,v,w,x,S,b,M,O),P=g.dist(T,e),D=r(e.y-T.y,e.x-T.x),E=r(t.y-T.y,t.x-T.x),F=r(n.y-T.y,n.x-T.x);return D<F?((D>E||E>F)&&(D+=m),D>F&&(a=F,F=D,D=a)):F<E&&E<D?(a=F,F=D,D=a):F+=m,T.s=D,T.e=F,T.r=P,T},numberSort:function(e,t){return e-t}};e.exports=g}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);t.Common=i.Common;var o=n(19);t.Convert=o.Convert;var a=n(19);t.Converter=a.Converter;var r=n(19);t.Converters=r.Converters;var s=n(3);t.Format=s.Format;var l=n(3);t.FormattedValue=l.FormattedValue;var u=n(12);t.Geometry=u.Geometry;var c=n(16);t.Kinematic=c.Kinematic;var m=n(0);t.AltitudeSystem=m.AltitudeSystem;var d=n(0);t.CameraAEBCount=d.CameraAEBCount;var h=n(0);t.CameraAperture=h.CameraAperture;var p=n(0);t.CameraCaptureType=p.CameraCaptureType;var f=n(0);t.CameraColor=f.CameraColor;var g=n(0);t.CameraExposureCompensation=g.CameraExposureCompensation;var y=n(0);t.CameraExposureMode=y.CameraExposureMode;var C=n(0);t.CameraFileIndexMode=C.CameraFileIndexMode;var v=n(0);t.CameraFocusMode=v.CameraFocusMode;var S=n(0);t.CameraISO=S.CameraISO;var b=n(0);t.CameraMeteringMode=b.CameraMeteringMode;var w=n(0);t.CameraMode=w.CameraMode;var x=n(0);t.CameraPhotoAspectRatio=x.CameraPhotoAspectRatio;var M=n(0);t.CameraPhotoFileFormat=M.CameraPhotoFileFormat;var O=n(0);t.CameraPhotoMode=O.CameraPhotoMode;var T=n(0);t.CameraShutterSpeed=T.CameraShutterSpeed;var P=n(0);t.CameraStorageLocation=P.CameraStorageLocation;var D=n(0);t.CameraVideoFileCompressionStandard=D.CameraVideoFileCompressionStandard;var E=n(0);t.CameraVideoFieldOfView=E.CameraVideoFieldOfView;var F=n(0);t.CameraVideoFileFormat=F.CameraVideoFileFormat;var A=n(0);t.CameraVideoFrameRate=A.CameraVideoFrameRate;var N=n(0);t.CameraVideoResolution=N.CameraVideoResolution;var _=n(0);t.CameraVideoStandard=_.CameraVideoStandard;var R=n(0);t.CameraWhiteBalancePreset=R.CameraWhiteBalancePreset;var I=n(0);t.CommandExecutionStatus=I.CommandExecutionStatus;var L=n(0);t.CommandReengagementTiming=L.CommandReengagementTiming;var z=n(0);t.ComponentExecutionStatus=z.ComponentExecutionStatus;var k=n(0);t.DroneConnectionFailSafeBehavior=k.DroneConnectionFailSafeBehavior;var B=n(0);t.DroneLightbridgeChannelSelectionMode=B.DroneLightbridgeChannelSelectionMode;var V=n(0);t.DroneLightbridgeFrequencyBand=V.DroneLightbridgeFrequencyBand;var j=n(0);t.DroneOcuSyncChannelSelectionMode=j.DroneOcuSyncChannelSelectionMode;var U=n(0);t.DroneOcuSyncFrequencyBand=U.DroneOcuSyncFrequencyBand;var J=n(0);t.FacadePattern=J.FacadePattern;var G=n(0);t.FacadeBoundaryFace=G.FacadeBoundaryFace;var H=n(0);t.FacadeCapturePriority=H.FacadeCapturePriority;var W=n(0);t.GeoSpatialSource=W.GeoSpatialSource;var q=n(0);t.GimbalMode=q.GimbalMode;var Z=n(0);t.InterpolationFunction=Z.InterpolationFunction;var $=n(0);t.MapPattern=$.MapPattern;var K=n(0);t.MeasurementType=K.MeasurementType;var X=n(0);t.MessageLevel=X.MessageLevel;var Y=n(0);t.OrbitDirection=Y.OrbitDirection;var Q=n(0);t.OrientationXReference=Q.OrientationXReference;var ee=n(0);t.OrientationZReference=ee.OrientationZReference;var te=n(0);t.PathCornering=te.PathCornering;var ne=n(0);t.PathMarkerPositioning=ne.PathMarkerPositioning;var ie=n(0);t.PlanCompleteAction=ie.PlanCompleteAction;var oe=n(0);t.RotationDirection=oe.RotationDirection;var ae=n(0);t.TypeName=ae.TypeName;var re=n(0);t.UnitSystem=re.UnitSystem;var se=n(0);t.VariableValueType=se.VariableValueType;var le=n(0);t.ZoneMotionPriority=le.ZoneMotionPriority;var ue=n(0);t.ZoneShape=ue.ZoneShape;var ce=n(18);t.Altitude=ce.Altitude;var me=n(132);t.AltitudeRange=me.AltitudeRange;var de=n(102);t.Asset=de.Asset;var he=n(136);t.AssetManifest=he.AssetManifest;var pe=n(126);t.AssetSource=pe.AssetSource;var fe=n(101);t.Camera=fe.Camera;var ge=n(127);t.CameraCaptureConfiguration=ge.CameraCaptureConfiguration;var ye=n(70);t.CameraFile=ye.CameraFile;var Ce=n(114);t.CameraImageSpecification=Ce.CameraImageSpecification;var ve=n(115);t.CameraLensSpecification=ve.CameraLensSpecification;var Se=n(116);t.CameraSensorSpecification=Se.CameraSensorSpecification;var be=n(113);t.CameraSpecification=be.CameraSpecification;var we=n(8);t.Constants=we.Constants;var xe=n(13);t.Datetime=xe.Datetime;var Me=n(17);t.Descriptors=Me.Descriptors;var Oe=n(61);t.DistanceTolerance=Oe.DistanceTolerance;var Te=n(56);t.Device=Te.Device;var Pe=n(48);t.Drone=Pe.Drone;var De=n(137);t.Engagement=De.Engagement;var Ee=n(139);t.Execution=Ee.Execution;var Fe=n(117);t.FieldOfView=Fe.FieldOfView;var Ae=n(81);t.Func=Ae.Func;var Ne=n(81);t.FuncInput=Ne.FuncInput;var _e=n(24);t.GeoCoordinate=_e.GeoCoordinate;var Re=n(69);t.GeoLocation=Re.GeoLocation;var Ie=n(128);t.GeoReferencedOffset=Ie.GeoReferencedOffset;var Le=n(21);t.GeoSpatial=Le.GeoSpatial;var ze=n(221);t.GeoSpatialSources=ze.GeoSpatialSources;var ke=n(54);t.Gimbal=ke.Gimbal;var Be=n(6);t.Identifiable=Be.Identifiable;var Ve=n(40);t.Interpolation=Ve.Interpolation;var je=n(28);t.Limits=je.Limits;var Ue=n(41);t.Line2=Ue.Line2;var Je=n(58);t.ListElementNode=Je.ListElementNode;var Ge=n(50);t.ListNode=Ge.ListNode;var He=n(10);t.Message=He.Message;var We=n(154);t.MessageGroup=We.MessageGroup;var qe=n(138);t.Mission=qe.Mission;var Ze=n(87);t.MotionLimits=Ze.MotionLimits;var $e=n(72);t.MotionLimitsOptional=$e.MotionLimitsOptional;var Ke=n(86);t.MotionLimits3=Ke.MotionLimits3;var Xe=n(131);t.MotionLimits3Optional=Xe.MotionLimits3Optional;var Ye=n(85);t.MotionLimits6=Ye.MotionLimits6;var Qe=n(59);t.MotionLimits6Optional=Qe.MotionLimits6Optional;var et=n(100);t.Node=et.Node;var tt=n(46);t.Orientation3=tt.Orientation3;var nt=n(20);t.Orientation3Optional=nt.Orientation3Optional;var it=n(74);t.Path=it.Path;var ot=n(15);t.Point2=ot.Point2;var at=n(57);t.PointOfInterest=at.PointOfInterest;var rt=n(57);t.PointOfInterestNode=rt.PointOfInterestNode;var st=n(57);t.PointsOfInterestNode=st.PointsOfInterestNode;var lt=n(1);t.Serialization=lt.Serialization;var ut=n(231);t.Simulation=ut.Simulation;var ct=n(68);t.SourcedGeoSpatial=ct.SourcedGeoSpatial;var mt=n(4);t.Strings=mt.Strings;var dt=n(33);t.Timeline=dt.Timeline;var ht=n(33);t.TimelineCameraCapture=ht.TimelineCameraCapture;var pt=n(33);t.TimelineCommand=pt.TimelineCommand;var ft=n(33);t.TimelineFrame=ft.TimelineFrame;var gt=n(55);t.User=gt.User;var yt=n(155);t.Variable=yt.Variable;var Ct=n(9);t.Vector2=Ct.Vector2;var vt=n(36);t.Velocity3=vt.Velocity3;var St=n(29);t.Velocity6=St.Velocity6;var bt=n(104);t.Zone=bt.Zone;var wt=n(73);t.ZoneBoundaryPoint=wt.ZoneBoundaryPoint;var xt=n(73);t.ZoneBoundaryPointNode=xt.ZoneBoundaryPointNode;var Mt=n(35);t.Command=Mt.Command;var Ot=n(84);t.CommandExecutionState=Ot.CommandExecutionState;var Tt=n(129);t.DefaultCommand=Tt.DefaultCommand;var Pt=n(65);t.PayloadCommand=Pt.PayloadCommand;var Dt=n(7);t.DroneCommand=Dt.DroneCommand;var Et=n(5);t.CameraCommand=Et.CameraCommand;var Ft=n(66);t.GimbalCommand=Ft.GimbalCommand;var At=n(165);t.CollisionAvoidanceDroneCommand=At.CollisionAvoidanceDroneCommand;var Nt=n(166);t.ConnectionFailSafeBehaviorDroneCommand=Nt.ConnectionFailSafeBehaviorDroneCommand;var _t=n(167);t.LandingGearAutomaticMovementDroneCommand=_t.LandingGearAutomaticMovementDroneCommand;var Rt=n(168);t.LandingGearDeployDroneCommand=Rt.LandingGearDeployDroneCommand;var It=n(169);t.LandingGearRetractDroneCommand=It.LandingGearRetractDroneCommand;var Lt=n(170);t.LandingProtectionDroneCommand=Lt.LandingProtectionDroneCommand;var zt=n(171);t.LightbridgeChannelDroneCommand=zt.LightbridgeChannelDroneCommand;var kt=n(172);t.LightbridgeChannelSelectionModeDroneCommand=kt.LightbridgeChannelSelectionModeDroneCommand;var Bt=n(173);t.LightbridgeFrequencyBandDroneCommand=Bt.LightbridgeFrequencyBandDroneCommand;var Vt=n(174);t.LowBatteryWarningThresholdDroneCommand=Vt.LowBatteryWarningThresholdDroneCommand;var jt=n(175);t.MaxAltitudeDroneCommand=jt.MaxAltitudeDroneCommand;var Ut=n(176);t.MaxDistanceDroneCommand=Ut.MaxDistanceDroneCommand;var Jt=n(177);t.MaxDistanceLimitationDroneCommand=Jt.MaxDistanceLimitationDroneCommand;var Gt=n(178);t.OcuSyncChannelDroneCommand=Gt.OcuSyncChannelDroneCommand;var Ht=n(179);t.OcuSyncChannelSelectionModeDroneCommand=Ht.OcuSyncChannelSelectionModeDroneCommand;var Wt=n(180);t.OcuSyncFrequencyBandDroneCommand=Wt.OcuSyncFrequencyBandDroneCommand;var qt=n(181);t.PrecisionLandingDroneCommand=qt.PrecisionLandingDroneCommand;var Zt=n(182);t.ReturnHomeAltitudeDroneCommand=Zt.ReturnHomeAltitudeDroneCommand;var $t=n(183);t.ReturnHomeObstacleAvoidanceDroneCommand=$t.ReturnHomeObstacleAvoidanceDroneCommand;var Kt=n(184);t.ReturnHomeRemoteObstacleAvoidanceDroneCommand=Kt.ReturnHomeRemoteObstacleAvoidanceDroneCommand;var Xt=n(185);t.SeriousLowBatteryWarningThresholdDroneCommand=Xt.SeriousLowBatteryWarningThresholdDroneCommand;var Yt=n(186);t.SmartReturnHomeDroneCommand=Yt.SmartReturnHomeDroneCommand;var Qt=n(187);t.UpwardsAvoidanceDroneCommand=Qt.UpwardsAvoidanceDroneCommand;var en=n(44);t.VelocityDroneCommand=en.VelocityDroneCommand;var tn=n(188);t.VisionAssistedPositioningDroneCommand=tn.VisionAssistedPositioningDroneCommand;var nn=n(189);t.AEBCountCameraCommand=nn.AEBCountCameraCommand;var on=n(190);t.ApertureCameraCommand=on.ApertureCameraCommand;var an=n(191);t.AutoExposureLockCameraCommand=an.AutoExposureLockCameraCommand;var rn=n(192);t.AutoLockGimbalCameraCommand=rn.AutoLockGimbalCameraCommand;var sn=n(193);t.ColorCameraCommand=sn.ColorCameraCommand;var ln=n(194);t.ContrastCameraCommand=ln.ContrastCameraCommand;var un=n(195);t.ExposureCompensationCameraCommand=un.ExposureCompensationCameraCommand;var cn=n(196);t.ExposureCompensationStepCameraCommand=cn.ExposureCompensationStepCameraCommand;var mn=n(118);t.ExposureModeCameraCommand=mn.ExposureModeCameraCommand;var dn=n(197);t.FileIndexModeCameraCommand=dn.FileIndexModeCameraCommand;var hn=n(119);t.FocusCameraCommand=hn.FocusCameraCommand;var pn=n(198);t.FocusModeCameraCommand=pn.FocusModeCameraCommand;var fn=n(199);t.ISOCameraCommand=fn.ISOCameraCommand;var gn=n(200);t.MechanicalShutterCameraCommand=gn.MechanicalShutterCameraCommand;var yn=n(201);t.MeteringModeCameraCommand=yn.MeteringModeCameraCommand;var Cn=n(202);t.PhotoAspectRatioCameraCommand=Cn.PhotoAspectRatioCameraCommand;var vn=n(89);t.PhotoFileFormatCameraCommand=vn.PhotoFileFormatCameraCommand;var Sn=n(45);t.PhotoIntervalCameraCommand=Sn.PhotoIntervalCameraCommand;var bn=n(38);t.PhotoModeCameraCommand=bn.PhotoModeCameraCommand;var wn=n(37);t.ModeCameraCommand=wn.ModeCameraCommand;var xn=n(203);t.SaturationCameraCommand=xn.SaturationCameraCommand;var Mn=n(204);t.SharpnessCameraCommand=Mn.SharpnessCameraCommand;var On=n(205);t.ShutterSpeedCameraCommand=On.ShutterSpeedCameraCommand;var Tn=n(206);t.SpotMeteringTargetCameraCommand=Tn.SpotMeteringTargetCameraCommand;var Pn=n(31);t.StartCaptureCameraCommand=Pn.StartCaptureCameraCommand;var Dn=n(30);t.StopCaptureCameraCommand=Dn.StopCaptureCameraCommand;var En=n(207);t.StorageLocationCameraCommand=En.StorageLocationCameraCommand;var Fn=n(208);t.VideoFileCompressionStandardCameraCommand=Fn.VideoFileCompressionStandardCameraCommand;var An=n(120);t.VideoFileFormatCameraCommand=An.VideoFileFormatCameraCommand;var Nn=n(209);t.VideoResolutionFrameRateCameraCommand=Nn.VideoResolutionFrameRateCameraCommand;var _n=n(210);t.VideoStandardCameraCommand=_n.VideoStandardCameraCommand;var Rn=n(211);t.WhiteBalanceCustomCameraCommand=Rn.WhiteBalanceCustomCameraCommand;var In=n(212);t.WhiteBalancePresetCameraCommand=In.WhiteBalancePresetCameraCommand;var Ln=n(90);t.ModeGimbalCommand=Ln.ModeGimbalCommand;var zn=n(67);t.OrientationGimbalCommand=zn.OrientationGimbalCommand;var kn=n(91);t.VelocityGimbalCommand=kn.VelocityGimbalCommand;var Bn=n(97);t.Component=Bn.Component;var Vn=n(98);t.ComponentEstimate=Vn.ComponentEstimate;var jn=n(133);t.ComponentEstimateContext=jn.ComponentEstimateContext;var Un=n(232);t.ComponentExecuteContext=Un.ComponentExecuteContext;var Jn=n(92);t.ComponentExecutionState=Jn.ComponentExecutionState;var Gn=n(39);t.CommandComponent=Gn.CommandComponent;var Hn=n(99);t.ComponentNode=Hn.ComponentNode;var Wn=n(239);t.ComponentNodeExecutionState=Wn.ComponentNodeExecutionState;var qn=n(121);t.ComponentSource=qn.ComponentSource;var Zn=n(71);t.AchievableDroneMotionComponent=Zn.AchievableDroneMotionComponent;var $n=n(103);t.DestinationComponent=$n.DestinationComponent;var Kn=n(222);t.DisengageComponent=Kn.DisengageComponent;var Xn=n(27);t.DroneMotionComponent=Xn.DroneMotionComponent;var Yn=n(130);t.CourseComponent=Yn.CourseComponent;var Qn=n(223);t.FacadeComponent=Qn.FacadeComponent;var ei=n(76);t.FacadeComponentBoundaryPoint=ei.FacadeComponentBoundaryPoint;var ti=n(76);t.FacadeComponentBoundaryPointNode=ti.FacadeComponentBoundaryPointNode;var ni=n(76);t.FacadeComponentBoundaryPointsNode=ni.FacadeComponentBoundaryPointsNode;var ii=n(105);t.HeadingComponent=ii.HeadingComponent;var oi=n(62);t.ListComponent=oi.ListComponent;var ai=n(224);t.MapComponent=ai.MapComponent;var ri=n(77);t.MapComponentBoundaryPoint=ri.MapComponentBoundaryPoint;var si=n(77);t.MapComponentBoundaryPointNode=si.MapComponentBoundaryPointNode;var li=n(77);t.MapComponentBoundaryPointsNode=li.MapComponentBoundaryPointsNode;var ui=n(225);t.OrbitComponent=ui.OrbitComponent;var ci=n(226);t.PathComponent=ci.PathComponent;var mi=n(134);t.PathComponentElementNode=mi.PathComponentElementNode;var di=n(79);t.PathComponentMarker=di.PathComponentMarker;var hi=n(79);t.PathComponentMarkerNode=hi.PathComponentMarkerNode;var pi=n(79);t.PathComponentMarkersNode=pi.PathComponentMarkersNode;var fi=n(78);t.PathComponentWaypoint=fi.PathComponentWaypoint;var gi=n(78);t.PathComponentWaypointNode=gi.PathComponentWaypointNode;var yi=n(78);t.PathComponentWaypointsNode=yi.PathComponentWaypointsNode;var Ci=n(106);t.PlanComponent=Ci.PlanComponent;var vi=n(135);t.PlanReengagementRules=vi.PlanReengagementRules;var Si=n(80);t.PlanRestrictionZone=Si.PlanRestrictionZone;var bi=n(80);t.PlanRestrictionZonesNode=bi.PlanRestrictionZonesNode;var wi=n(80);t.PlanRestrictionZoneNode=wi.PlanRestrictionZoneNode;var xi=n(228);t.RotationComponent=xi.RotationComponent;var Mi=n(22);t.SubComponent=Mi.SubComponent;var Oi=n(75);t.ApproachableComponent=Oi.ApproachableComponent;var Ti=n(229);t.WaitComponent=Ti.WaitComponent;var Pi=n(53);t.Context=Pi.Context},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,o=!1,a=void 0;try{for(var r,s=e[Symbol.iterator]();!(i=(r=s.next()).done)&&(n.push(r.value),!t||n.length!==t);i=!0);}catch(e){o=!0,a=e}finally{try{!i&&s.return&&s.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(244));var l=/(\{[\d|\w]+\})/,u=/(\$ref\{[\w|.]+\})/,c=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"==typeof n&&(n={customLanguageInterface:n}),this._opts=a({},{customLanguageInterface:s.getInterfaceLanguage,pseudo:!1,pseudoMultipleLanguages:!1,logsEnabled:!0},n),this._interfaceLanguage=this._opts.customLanguageInterface(),this._language=this._interfaceLanguage,this.setContent(t)}return r(e,[{key:"setContent",value:function(e){var t=this,n=Object.keys(e),i=o(n,1)[0];this._defaultLanguage=i,this._defaultLanguageFirstLevelKeys=[],this._props=e,s.validateTranslationKeys(Object.keys(e[this._defaultLanguage])),Object.keys(this._props[this._defaultLanguage]).forEach(function(e){"string"==typeof t._props[t._defaultLanguage][e]&&t._defaultLanguageFirstLevelKeys.push(e)}),this.setLanguage(this._interfaceLanguage),this._opts.pseudo&&this._pseudoAllValues(this._props)}},{key:"_pseudoAllValues",value:function(e){var t=this;Object.keys(e).forEach(function(n){if("object"===i(e[n]))t._pseudoAllValues(e[n]);else if("string"==typeof e[n]){if(0===e[n].indexOf("[")&&e[n].lastIndexOf("]")===e[n].length-1)return;for(var o=e[n].split(" "),a=0;a<o.length;a+=1)if(o[a].match(l));else if(o[a].match(u));else{var r=o[a].length;t._opts.pseudoMultipleLanguages&&(r=parseInt(1.4*r,10)),o[a]=s.randomPseudo(r)}e[n]="["+o.join(" ")+"]"}})}},{key:"setLanguage",value:function(e){var t=this,n=s.getBestMatchingLanguage(e,this._props),i=Object.keys(this._props)[0];if(this._language=n,this._props[n]){for(var o=0;o<this._defaultLanguageFirstLevelKeys.length;o+=1)delete this[this._defaultLanguageFirstLevelKeys[o]];var r=a({},this._props[this._language]);Object.keys(r).forEach(function(e){t[e]=r[e]}),i!==this._language&&(r=this._props[i],this._fallbackValues(r,this))}}},{key:"_fallbackValues",value:function(e,t){var n=this;Object.keys(e).forEach(function(i){Object.prototype.hasOwnProperty.call(e,i)&&!t[i]&&""!==t[i]?(t[i]=e[i],n._opts.logsEnabled&&console.log("🚧 👷 key '"+i+"' not found in localizedStrings for language "+n._language+" 🚧")):"string"!=typeof t[i]&&n._fallbackValues(e[i],t[i])})}},{key:"getLanguage",value:function(){return this._language}},{key:"getInterfaceLanguage",value:function(){return this._interfaceLanguage}},{key:"getAvailableLanguages",value:function(){var e=this;return this._availableLanguages||(this._availableLanguages=[],Object.keys(this._props).forEach(function(t){e._availableLanguages.push(t)})),this._availableLanguages}},{key:"formatString",value:function(e){for(var t=this,n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];var a=e||"";return"string"==typeof a&&(a=this.getString(e,null,!0)||a),a.split(u).filter(function(e){return!!e}).map(function(n){if(n.match(u)){var i=n.slice(5,-1),o=t.getString(i);return o||(t._opts.logsEnabled&&console.log("No Localization ref found for '"+n+"' in string '"+e+"'"),"$ref(id:"+i+")")}return n}).join("").split(l).filter(function(e){return!!e}).map(function(e){if(e.match(l)){var t=e.slice(1,-1),n=i[t];if(void 0===n){var o=i[0][t];if(void 0===o)return n;n=o}return n}return e}).join("")}},{key:"getString",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];try{for(var i=this._props[t||this._language],o=e.split("."),a=0;a<o.length;a+=1){if(void 0===i[o[a]])throw Error(o[a]);i=i[o[a]]}return i}catch(i){!n&&this._opts.logsEnabled&&console.log("No localization found for key '"+e+"' and language '"+t+"', failed on "+i.message)}return null}},{key:"getContent",value:function(){return this._props}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInterfaceLanguage=function(){if("undefined"==typeof navigator)return"en-US";var e=navigator;if(e){if(e.language)return e.language;if(e.languages&&e.languages[0])return e.languages[0];if(e.userLanguage)return e.userLanguage;if(e.browserLanguage)return e.browserLanguage}return"en-US"},t.getBestMatchingLanguage=function(e,t){if(t[e])return e;var n=e.indexOf("-"),i=n>=0?e.substring(0,n):e;return t[i]?i:Object.keys(t)[0]},t.validateTranslationKeys=function(e){var t=["_interfaceLanguage","_language","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props"];e.forEach(function(e){if(-1!==t.indexOf(e))throw new Error(e+" cannot be used as a key. It is a reserved word.")})},t.randomPseudo=function(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=0;i<e;i+=1)t+=n.charAt(Math.floor(Math.random()*n.length));return t}},function(e,t,n){(function(e,t,i,o,a){
/*!
 LZ-UTF8 v0.5.5

 Copyright (c) 2018, Rotem Dan
 Released under the MIT license.

 Build date: 2018-07-30 

 Please report any issue at https://github.com/rotemdan/lzutf8.js/issues
*/
var r;if(function(o){o.runningInNodeJS=function(){return"object"==typeof e&&"object"==typeof e.versions&&"string"==typeof e.versions.node},o.runningInMainNodeJSModule=function(){return o.runningInNodeJS()&&n.c[n.s]===t},o.commonJSAvailable=function(){return"object"==typeof t.exports},o.runningInWebWorker=function(){return"undefined"==typeof window&&"object"==typeof self&&"function"==typeof self.addEventListener&&"function"==typeof self.close},o.runningInNodeChildProcess=function(){return o.runningInNodeJS()&&"function"==typeof e.send},o.runningInNullOrigin=function(){return"object"==typeof window&&"object"==typeof window.location&&("http:"!==document.location.protocol&&"https:"!==document.location.protocol)},o.webWorkersAvailable=function(){return"function"==typeof Worker&&!o.runningInNullOrigin()&&(!o.runningInNodeJS()&&!(navigator&&navigator.userAgent&&navigator.userAgent.indexOf("Android 4.3")>=0))},o.log=function(e,t){void 0===t&&(t=!1),"object"==typeof console&&(console.log(e),t&&"object"==typeof document&&(document.body.innerHTML+=e+"<br/>"))},o.createErrorMessage=function(e,t){if(void 0===t&&(t="Unhandled exception"),null==e)return t;if(t+=": ","object"==typeof e.content){if(o.runningInNodeJS())return t+e.content.stack;var n=JSON.stringify(e.content);return"{}"!==n?t+n:t+e.content}return"string"==typeof e.content?t+e.content:t+e},o.printExceptionAndStackTraceToConsole=function(e,t){void 0===t&&(t="Unhandled exception"),o.log(o.createErrorMessage(e,t))},o.getGlobalObject=function(){return"object"==typeof i?i:"object"==typeof window?window:"object"==typeof self?self:{}},o.toString=Object.prototype.toString,o.commonJSAvailable()&&(t.exports=o)}(r||(r={})),"function"==typeof Uint8Array&&0!==new Uint8Array(1).subarray(1).byteLength){var s=function(e,t){var n=function(e,t,n){return e<t?t:e>n?n:e};e|=0,t|=0,arguments.length<1&&(e=0),arguments.length<2&&(t=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e=n(e,0,this.length);var i=(t=n(t,0,this.length))-e;return i<0&&(i=0),new this.constructor(this.buffer,this.byteOffset+e*this.BYTES_PER_ELEMENT,i)},l=["Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],u=void 0;if("object"==typeof window?u=window:"object"==typeof self&&(u=self),void 0!==u)for(var c=0;c<l.length;c++)u[l[c]]&&(u[l[c]].prototype.subarray=s)}!function(e){var t=function(){function t(){}return t.compressAsync=function(t,n,i){var o=new e.Timer,a=new e.Compressor;if(!i)throw new TypeError("compressAsync: No callback argument given");if("string"==typeof t)t=e.encodeUTF8(t);else if(null==t||!(t instanceof Uint8Array))return void i(void 0,new TypeError("compressAsync: Invalid input argument, only 'string' and 'Uint8Array' are supported"));var r=e.ArrayTools.splitByteArray(t,n.blockSize),s=[],l=function(t){if(t<r.length){var u=void 0;try{u=a.compressBlock(r[t])}catch(e){return void i(void 0,e)}s.push(u),o.getElapsedTime()<=20?l(t+1):(e.enqueueImmediate(function(){return l(t+1)}),o.restart())}else{var c=e.ArrayTools.concatUint8Arrays(s);e.enqueueImmediate(function(){var t;try{t=e.CompressionCommon.encodeCompressedBytes(c,n.outputEncoding)}catch(e){return void i(void 0,e)}e.enqueueImmediate(function(){return i(t)})})}};e.enqueueImmediate(function(){return l(0)})},t.createCompressionStream=function(){var t=new e.Compressor,i=new(n(159).Transform)({decodeStrings:!0,highWaterMark:65536});return i._transform=function(n,o,a){var r;try{r=e.BufferTools.uint8ArrayToBuffer(t.compressBlock(e.BufferTools.bufferToUint8Array(n)))}catch(e){return void i.emit("error",e)}i.push(r),a()},i},t}();e.AsyncCompressor=t}(r||(r={})),function(e){var t=function(){function t(){}return t.decompressAsync=function(t,n,i){if(!i)throw new TypeError("decompressAsync: No callback argument given");var o=new e.Timer;try{t=e.CompressionCommon.decodeCompressedBytes(t,n.inputEncoding)}catch(e){return void i(void 0,e)}var a=new e.Decompressor,r=e.ArrayTools.splitByteArray(t,n.blockSize),s=[],l=function(t){if(t<r.length){var u=void 0;try{u=a.decompressBlock(r[t])}catch(e){return void i(void 0,e)}s.push(u),o.getElapsedTime()<=20?l(t+1):(e.enqueueImmediate(function(){return l(t+1)}),o.restart())}else{var c=e.ArrayTools.concatUint8Arrays(s);e.enqueueImmediate(function(){var t;try{t=e.CompressionCommon.encodeDecompressedBytes(c,n.outputEncoding)}catch(e){return void i(void 0,e)}e.enqueueImmediate(function(){return i(t)})})}};e.enqueueImmediate(function(){return l(0)})},t.createDecompressionStream=function(){var t=new e.Decompressor,i=new(n(159).Transform)({decodeStrings:!0,highWaterMark:65536});return i._transform=function(n,o,a){var r;try{r=e.BufferTools.uint8ArrayToBuffer(t.decompressBlock(e.BufferTools.bufferToUint8Array(n)))}catch(e){return void i.emit("error",e)}i.push(r),a()},i},t}();e.AsyncDecompressor=t}(r||(r={})),function(e){var t;!function(t){t.compressAsync=function(e,n,i){if("ByteArray"!=n.inputEncoding||e instanceof Uint8Array){var o={token:Math.random().toString(),type:"compress",data:e,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},a=function(e){var n=e.data;n&&n.token==o.token&&(t.globalWorker.removeEventListener("message",a),"error"==n.type?i(void 0,new Error(n.error)):i(n.data))};t.globalWorker.addEventListener("message",a),t.globalWorker.postMessage(o,[])}else i(void 0,new TypeError("compressAsync: input is not a Uint8Array"))},t.decompressAsync=function(e,n,i){var o={token:Math.random().toString(),type:"decompress",data:e,inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding},a=function(e){var n=e.data;n&&n.token==o.token&&(t.globalWorker.removeEventListener("message",a),"error"==n.type?i(void 0,new Error(n.error)):i(n.data))};t.globalWorker.addEventListener("message",a),t.globalWorker.postMessage(o,[])},t.installWebWorkerIfNeeded=function(){"object"==typeof self&&void 0===self.document&&null!=self.addEventListener&&(self.addEventListener("message",function(t){var n=t.data;if("compress"==n.type){var i=void 0;try{i=e.compress(n.data,{outputEncoding:n.outputEncoding})}catch(t){return void self.postMessage({token:n.token,type:"error",error:e.createErrorMessage(t)},[])}(o={token:n.token,type:"compressionResult",data:i,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(o,[o.data.buffer]):self.postMessage(o,[])}else if("decompress"==n.type){var o,a=void 0;try{a=e.decompress(n.data,{inputEncoding:n.inputEncoding,outputEncoding:n.outputEncoding})}catch(t){return void self.postMessage({token:n.token,type:"error",error:e.createErrorMessage(t)},[])}(o={token:n.token,type:"decompressionResult",data:a,encoding:n.outputEncoding}).data instanceof Uint8Array&&-1===navigator.appVersion.indexOf("MSIE 10")?self.postMessage(o,[o.data.buffer]):self.postMessage(o,[])}}),self.addEventListener("error",function(t){e.log(e.createErrorMessage(t.error,"Unexpected LZUTF8 WebWorker exception"))}))},t.createGlobalWorkerIfNeeded=function(){if(t.globalWorker)return!0;if(!e.webWorkersAvailable())return!1;if(!t.scriptURI&&"object"==typeof document){var n=document.getElementById("lzutf8");null!=n&&(t.scriptURI=n.getAttribute("src")||void 0)}return!!t.scriptURI&&(t.globalWorker=new Worker(t.scriptURI),!0)},t.terminate=function(){t.globalWorker&&(t.globalWorker.terminate(),t.globalWorker=void 0)}}(t=e.WebWorker||(e.WebWorker={})),t.installWebWorkerIfNeeded()}(r||(r={})),function(e){var t=function(){function e(e,t,n){this.container=e,this.startPosition=t,this.length=n}return e.prototype.get=function(e){return this.container[this.startPosition+e]},e.prototype.getInReversedOrder=function(e){return this.container[this.startPosition+this.length-1-e]},e.prototype.set=function(e,t){this.container[this.startPosition+e]=t},e}();e.ArraySegment=t}(r||(r={})),function(e){!function(e){e.copyElements=function(e,t,n,i,o){for(;o--;)n[i++]=e[t++]},e.zeroElements=function(e,t,n){for(;n--;)e[t++]=0},e.countNonzeroValuesInArray=function(e){for(var t=0,n=0;n<e.length;n++)e[n]&&t++;return t},e.truncateStartingElements=function(e,t){if(e.length<=t)throw new RangeError("truncateStartingElements: Requested length should be smaller than array length");for(var n=e.length-t,i=0;i<t;i++)e[i]=e[n+i];e.length=t},e.doubleByteArrayCapacity=function(e){var t=new Uint8Array(2*e.length);return t.set(e),t},e.concatUint8Arrays=function(e){for(var t=0,n=0,i=e;n<i.length;n++){t+=(l=i[n]).length}for(var o=new Uint8Array(t),a=0,r=0,s=e;r<s.length;r++){var l=s[r];o.set(l,a),a+=l.length}return o},e.splitByteArray=function(e,t){for(var n=[],i=0;i<e.length;){var o=Math.min(t,e.length-i);n.push(e.subarray(i,i+o)),i+=o}return n}}(e.ArrayTools||(e.ArrayTools={}))}(r||(r={})),function(e){!function(e){e.convertToUint8ArrayIfNeeded=function(t){return"function"==typeof o&&o.isBuffer(t)?e.bufferToUint8Array(t):t},e.uint8ArrayToBuffer=function(e){if(o.prototype instanceof Uint8Array){var t=new Uint8Array(e.buffer,e.byteOffset,e.byteLength);return Object.setPrototypeOf(t,o.prototype),t}for(var n=e.length,i=new o(n),a=0;a<n;a++)i[a]=e[a];return i},e.bufferToUint8Array=function(e){if(o.prototype instanceof Uint8Array)return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);for(var t=e.length,n=new Uint8Array(t),i=0;i<t;i++)n[i]=e[i];return n}}(e.BufferTools||(e.BufferTools={}))}(r||(r={})),function(e){!function(t){t.getCroppedBuffer=function(e,t,n,i){void 0===i&&(i=0);var o=new Uint8Array(n+i);return o.set(e.subarray(t,t+n)),o},t.getCroppedAndAppendedByteArray=function(t,n,i,o){return e.ArrayTools.concatUint8Arrays([t.subarray(n,n+i),o])},t.detectCompressionSourceEncoding=function(e){if(null==e)throw new TypeError("detectCompressionSourceEncoding: input is null or undefined");if("string"==typeof e)return"String";if(e instanceof Uint8Array||"function"==typeof o&&o.isBuffer(e))return"ByteArray";throw new TypeError("detectCompressionSourceEncoding: input must be of type 'string', 'Uint8Array' or 'Buffer'")},t.encodeCompressedBytes=function(t,n){switch(n){case"ByteArray":return t;case"Buffer":return e.BufferTools.uint8ArrayToBuffer(t);case"Base64":return e.encodeBase64(t);case"BinaryString":return e.encodeBinaryString(t);case"StorageBinaryString":return e.encodeStorageBinaryString(t);default:throw new TypeError("encodeCompressedBytes: invalid output encoding requested")}},t.decodeCompressedBytes=function(t,n){if(null==n)throw new TypeError("decodeCompressedData: Input is null or undefined");switch(n){case"ByteArray":case"Buffer":var i=e.BufferTools.convertToUint8ArrayIfNeeded(t);if(!(i instanceof Uint8Array))throw new TypeError("decodeCompressedData: 'ByteArray' or 'Buffer' input type was specified but input is not a Uint8Array or Buffer");return i;case"Base64":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'Base64' input type was specified but input is not a string");return e.decodeBase64(t);case"BinaryString":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'BinaryString' input type was specified but input is not a string");return e.decodeBinaryString(t);case"StorageBinaryString":if("string"!=typeof t)throw new TypeError("decodeCompressedData: 'StorageBinaryString' input type was specified but input is not a string");return e.decodeStorageBinaryString(t);default:throw new TypeError("decodeCompressedData: invalid input encoding requested: '"+n+"'")}},t.encodeDecompressedBytes=function(t,n){switch(n){case"String":return e.decodeUTF8(t);case"ByteArray":return t;case"Buffer":if("function"!=typeof o)throw new TypeError("encodeDecompressedBytes: a 'Buffer' type was specified but is not supported at the current envirnment");return e.BufferTools.uint8ArrayToBuffer(t);default:throw new TypeError("encodeDecompressedBytes: invalid output encoding requested")}}}(e.CompressionCommon||(e.CompressionCommon={}))}(r||(r={})),function(e){var t;!function(t){var n,i=[];t.enqueueImmediate=function(e){i.push(e),1===i.length&&n()},t.initializeScheduler=function(){var t=function(){for(var t=0,n=i;t<n.length;t++){var o=n[t];try{o.call(void 0)}catch(t){e.printExceptionAndStackTraceToConsole(t,"enqueueImmediate exception")}}i.length=0};if(e.runningInNodeJS()&&(n=function(){return a(function(){return t()})}),"object"==typeof window&&"function"==typeof window.addEventListener&&"function"==typeof window.postMessage){var o,r="enqueueImmediate-"+Math.random().toString();window.addEventListener("message",function(e){e.data===r&&t()}),o=e.runningInNullOrigin()?"*":window.location.href,n=function(){return window.postMessage(r,o)}}else if("function"==typeof MessageChannel&&"function"==typeof MessagePort){var s=new MessageChannel;s.port1.onmessage=function(){return t()},n=function(){return s.port2.postMessage(0)}}else n=function(){return setTimeout(function(){return t()},0)}},t.initializeScheduler()}(t=e.EventLoop||(e.EventLoop={})),e.enqueueImmediate=function(e){return t.enqueueImmediate(e)}}(r||(r={})),function(e){!function(e){e.override=function(t,n){return e.extend(t,n)},e.extend=function(e,t){if(null==e)throw new TypeError("obj is null or undefined");if("object"!=typeof e)throw new TypeError("obj is not an object");if(null==t&&(t={}),"object"!=typeof t)throw new TypeError("newProperties is not an object");if(null!=t)for(var n in t)e[n]=t[n];return e}}(e.ObjectTools||(e.ObjectTools={}))}(r||(r={})),function(e){e.getRandomIntegerInRange=function(e,t){return e+Math.floor(Math.random()*(t-e))},e.getRandomUTF16StringOfLength=function(t){for(var n="",i=0;i<t;i++){var o=void 0;do{o=e.getRandomIntegerInRange(0,1114112)}while(o>=55296&&o<=57343);n+=e.Encoding.CodePoint.decodeToString(o)}return n}}(r||(r={})),function(e){var t=function(){function e(e){void 0===e&&(e=1024),this.outputBufferCapacity=e,this.outputPosition=0,this.outputString="",this.outputBuffer=new Uint16Array(this.outputBufferCapacity)}return e.prototype.appendCharCode=function(e){this.outputBuffer[this.outputPosition++]=e,this.outputPosition===this.outputBufferCapacity&&this.flushBufferToOutputString()},e.prototype.appendCharCodes=function(e){for(var t=0,n=e.length;t<n;t++)this.appendCharCode(e[t])},e.prototype.appendString=function(e){for(var t=0,n=e.length;t<n;t++)this.appendCharCode(e.charCodeAt(t))},e.prototype.appendCodePoint=function(e){if(e<=65535)this.appendCharCode(e);else{if(!(e<=1114111))throw new Error("appendCodePoint: A code point of "+e+" cannot be encoded in UTF-16");this.appendCharCode(55296+(e-65536>>>10)),this.appendCharCode(56320+(e-65536&1023))}},e.prototype.getOutputString=function(){return this.flushBufferToOutputString(),this.outputString},e.prototype.flushBufferToOutputString=function(){this.outputPosition===this.outputBufferCapacity?this.outputString+=String.fromCharCode.apply(null,this.outputBuffer):this.outputString+=String.fromCharCode.apply(null,this.outputBuffer.subarray(0,this.outputPosition)),this.outputPosition=0},e}();e.StringBuilder=t}(r||(r={})),function(t){var n=function(){function n(){this.restart()}return n.prototype.restart=function(){this.startTime=n.getTimestamp()},n.prototype.getElapsedTime=function(){return n.getTimestamp()-this.startTime},n.prototype.getElapsedTimeAndRestart=function(){var e=this.getElapsedTime();return this.restart(),e},n.prototype.logAndRestart=function(e,n){void 0===n&&(n=!0);var i=this.getElapsedTime(),o=e+": "+i.toFixed(3)+"ms";return t.log(o,n),this.restart(),i},n.getTimestamp=function(){return this.timestampFunc||this.createGlobalTimestampFunction(),this.timestampFunc()},n.getMicrosecondTimestamp=function(){return Math.floor(1e3*n.getTimestamp())},n.createGlobalTimestampFunction=function(){if("object"==typeof e&&"function"==typeof e.hrtime){var t=0;this.timestampFunc=function(){var n=e.hrtime(),i=1e3*n[0]+n[1]/1e6;return t+i},t=Date.now()-this.timestampFunc()}else if("object"==typeof chrome&&chrome.Interval){var n=Date.now(),i=new chrome.Interval;i.start(),this.timestampFunc=function(){return n+i.microseconds()/1e3}}else if("object"==typeof performance&&performance.now){var o=Date.now()-performance.now();this.timestampFunc=function(){return o+performance.now()}}else Date.now?this.timestampFunc=function(){return Date.now()}:this.timestampFunc=function(){return(new Date).getTime()}},n}();t.Timer=n}(r||(r={})),function(e){var t=function(){function t(t){void 0===t&&(t=!0),this.MinimumSequenceLength=4,this.MaximumSequenceLength=31,this.MaximumMatchDistance=32767,this.PrefixHashTableSize=65537,this.inputBufferStreamOffset=1,t&&"function"==typeof Uint32Array?this.prefixHashTable=new e.CompressorCustomHashTable(this.PrefixHashTableSize):this.prefixHashTable=new e.CompressorSimpleHashTable(this.PrefixHashTableSize)}return t.prototype.compressBlock=function(t){if(null==t)throw new TypeError("compressBlock: undefined or null input received");return"string"==typeof t&&(t=e.encodeUTF8(t)),t=e.BufferTools.convertToUint8ArrayIfNeeded(t),this.compressUtf8Block(t)},t.prototype.compressUtf8Block=function(e){if(!e||0==e.length)return new Uint8Array(0);var t=this.cropAndAddNewBytesToInputBuffer(e),n=this.inputBuffer,i=this.inputBuffer.length;this.outputBuffer=new Uint8Array(e.length),this.outputBufferPosition=0;for(var o=0,a=t;a<i;a++){var r=n[a],s=a<o;if(a>i-this.MinimumSequenceLength)s||this.outputRawByte(r);else{var l=this.getBucketIndexForPrefix(a);if(!s){var u=this.findLongestMatch(a,l);null!=u&&(this.outputPointerBytes(u.length,u.distance),o=a+u.length,s=!0)}s||this.outputRawByte(r);var c=this.inputBufferStreamOffset+a;this.prefixHashTable.addValueToBucket(l,c)}}return this.outputBuffer.subarray(0,this.outputBufferPosition)},t.prototype.findLongestMatch=function(e,t){var n=this.prefixHashTable.getArraySegmentForBucketIndex(t,this.reusableArraySegmentObject);if(null==n)return null;for(var i,o=this.inputBuffer,a=0,r=0;r<n.length;r++){var s=n.getInReversedOrder(r)-this.inputBufferStreamOffset,l=e-s,u=void 0;if(u=void 0===i?this.MinimumSequenceLength-1:i<128&&l>=128?a+(a>>>1):a,l>this.MaximumMatchDistance||u>=this.MaximumSequenceLength||e+u>=o.length)break;if(o[s+u]===o[e+u])for(var c=0;;c++){if(e+c===o.length||o[s+c]!==o[e+c]){c>u&&(i=l,a=c);break}if(c===this.MaximumSequenceLength)return{distance:l,length:this.MaximumSequenceLength}}}return void 0!==i?{distance:i,length:a}:null},t.prototype.getBucketIndexForPrefix=function(e){return(7880599*this.inputBuffer[e]+39601*this.inputBuffer[e+1]+199*this.inputBuffer[e+2]+this.inputBuffer[e+3])%this.PrefixHashTableSize},t.prototype.outputPointerBytes=function(e,t){t<128?(this.outputRawByte(192|e),this.outputRawByte(t)):(this.outputRawByte(224|e),this.outputRawByte(t>>>8),this.outputRawByte(255&t))},t.prototype.outputRawByte=function(e){this.outputBuffer[this.outputBufferPosition++]=e},t.prototype.cropAndAddNewBytesToInputBuffer=function(t){if(void 0===this.inputBuffer)return this.inputBuffer=t,0;var n=Math.min(this.inputBuffer.length,this.MaximumMatchDistance),i=this.inputBuffer.length-n;return this.inputBuffer=e.CompressionCommon.getCroppedAndAppendedByteArray(this.inputBuffer,i,n,t),this.inputBufferStreamOffset+=i,n},t}();e.Compressor=t}(r||(r={})),function(e){var t=function(){function t(e){this.minimumBucketCapacity=4,this.maximumBucketCapacity=64,this.bucketLocators=new Uint32Array(2*e),this.storage=new Uint32Array(2*e),this.storageIndex=1}return t.prototype.addValueToBucket=function(t,n){t<<=1,this.storageIndex>=this.storage.length>>>1&&this.compact();var i,o=this.bucketLocators[t];if(0===o)o=this.storageIndex,i=1,this.storage[this.storageIndex]=n,this.storageIndex+=this.minimumBucketCapacity;else{(i=this.bucketLocators[t+1])===this.maximumBucketCapacity-1&&(i=this.truncateBucketToNewerElements(o,i,this.maximumBucketCapacity/2));var a=o+i;0===this.storage[a]?(this.storage[a]=n,a===this.storageIndex&&(this.storageIndex+=i)):(e.ArrayTools.copyElements(this.storage,o,this.storage,this.storageIndex,i),o=this.storageIndex,this.storageIndex+=i,this.storage[this.storageIndex++]=n,this.storageIndex+=i),i++}this.bucketLocators[t]=o,this.bucketLocators[t+1]=i},t.prototype.truncateBucketToNewerElements=function(t,n,i){var o=t+n-i;return e.ArrayTools.copyElements(this.storage,o,this.storage,t,i),e.ArrayTools.zeroElements(this.storage,t+i,n-i),i},t.prototype.compact=function(){var t=this.bucketLocators,n=this.storage;this.bucketLocators=new Uint32Array(this.bucketLocators.length),this.storageIndex=1;for(var i=0;i<t.length;i+=2){var o=t[i+1];0!==o&&(this.bucketLocators[i]=this.storageIndex,this.bucketLocators[i+1]=o,this.storageIndex+=Math.max(Math.min(2*o,this.maximumBucketCapacity),this.minimumBucketCapacity))}this.storage=new Uint32Array(8*this.storageIndex);for(i=0;i<t.length;i+=2){var a=t[i];if(0!==a){var r=this.bucketLocators[i],s=this.bucketLocators[i+1];e.ArrayTools.copyElements(n,a,this.storage,r,s)}}},t.prototype.getArraySegmentForBucketIndex=function(t,n){t<<=1;var i=this.bucketLocators[t];return 0===i?null:(void 0===n&&(n=new e.ArraySegment(this.storage,i,this.bucketLocators[t+1])),n)},t.prototype.getUsedBucketCount=function(){return Math.floor(e.ArrayTools.countNonzeroValuesInArray(this.bucketLocators)/2)},t.prototype.getTotalElementCount=function(){for(var e=0,t=0;t<this.bucketLocators.length;t+=2)e+=this.bucketLocators[t+1];return e},t}();e.CompressorCustomHashTable=t}(r||(r={})),function(e){var t=function(){function t(e){this.maximumBucketCapacity=64,this.buckets=new Array(e)}return t.prototype.addValueToBucket=function(t,n){var i=this.buckets[t];void 0===i?this.buckets[t]=[n]:(i.length===this.maximumBucketCapacity-1&&e.ArrayTools.truncateStartingElements(i,this.maximumBucketCapacity/2),i.push(n))},t.prototype.getArraySegmentForBucketIndex=function(t,n){var i=this.buckets[t];return void 0===i?null:(void 0===n&&(n=new e.ArraySegment(i,0,i.length)),n)},t.prototype.getUsedBucketCount=function(){return e.ArrayTools.countNonzeroValuesInArray(this.buckets)},t.prototype.getTotalElementCount=function(){for(var e=0,t=0;t<this.buckets.length;t++)void 0!==this.buckets[t]&&(e+=this.buckets[t].length);return e},t}();e.CompressorSimpleHashTable=t}(r||(r={})),function(e){var t=function(){function t(){this.MaximumMatchDistance=32767,this.outputPosition=0}return t.prototype.decompressBlockToString=function(t){return t=e.BufferTools.convertToUint8ArrayIfNeeded(t),e.decodeUTF8(this.decompressBlock(t))},t.prototype.decompressBlock=function(t){this.inputBufferRemainder&&(t=e.ArrayTools.concatUint8Arrays([this.inputBufferRemainder,t]),this.inputBufferRemainder=void 0);for(var n=this.cropOutputBufferToWindowAndInitialize(Math.max(4*t.length,1024)),i=0,o=t.length;i<o;i++){var a=t[i];if(a>>>6==3){var r=a>>>5;if(i==o-1||i==o-2&&7==r){this.inputBufferRemainder=t.subarray(i);break}if(t[i+1]>>>7==1)this.outputByte(a);else{var s=31&a,l=void 0;6==r?(l=t[i+1],i+=1):(l=t[i+1]<<8|t[i+2],i+=2);for(var u=this.outputPosition-l,c=0;c<s;c++)this.outputByte(this.outputBuffer[u+c])}}else this.outputByte(a)}return this.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence(),e.CompressionCommon.getCroppedBuffer(this.outputBuffer,n,this.outputPosition-n)},t.prototype.outputByte=function(t){this.outputPosition===this.outputBuffer.length&&(this.outputBuffer=e.ArrayTools.doubleByteArrayCapacity(this.outputBuffer)),this.outputBuffer[this.outputPosition++]=t},t.prototype.cropOutputBufferToWindowAndInitialize=function(t){if(!this.outputBuffer)return this.outputBuffer=new Uint8Array(t),0;var n=Math.min(this.outputPosition,this.MaximumMatchDistance);if(this.outputBuffer=e.CompressionCommon.getCroppedBuffer(this.outputBuffer,this.outputPosition-n,n,t),this.outputPosition=n,this.outputBufferRemainder){for(var i=0;i<this.outputBufferRemainder.length;i++)this.outputByte(this.outputBufferRemainder[i]);this.outputBufferRemainder=void 0}return n},t.prototype.rollBackIfOutputBufferEndsWithATruncatedMultibyteSequence=function(){for(var e=1;e<=4&&this.outputPosition-e>=0;e++){var t=this.outputBuffer[this.outputPosition-e];if(e<4&&t>>>3==30||e<3&&t>>>4==14||e<2&&t>>>5==6)return this.outputBufferRemainder=this.outputBuffer.subarray(this.outputPosition-e,this.outputPosition),void(this.outputPosition-=e)}},t}();e.Decompressor=t}(r||(r={})),function(e){!function(t){!function(t){var n=new Uint8Array([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47]),i=new Uint8Array([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,255,255,255,255]);t.encode=function(n){return n&&0!=n.length?e.runningInNodeJS()?e.BufferTools.uint8ArrayToBuffer(n).toString("base64"):t.encodeWithJS(n):""},t.decode=function(n){return n?e.runningInNodeJS()?e.BufferTools.bufferToUint8Array(new o(n,"base64")):t.decodeWithJS(n):new Uint8Array(0)},t.encodeWithJS=function(t,i){if(void 0===i&&(i=!0),!t||0==t.length)return"";for(var o,a=n,r=new e.StringBuilder,s=0,l=t.length;s<l;s+=3)s<=l-3?(o=t[s]<<16|t[s+1]<<8|t[s+2],r.appendCharCode(a[o>>>18&63]),r.appendCharCode(a[o>>>12&63]),r.appendCharCode(a[o>>>6&63]),r.appendCharCode(a[63&o]),o=0):s===l-2?(o=t[s]<<16|t[s+1]<<8,r.appendCharCode(a[o>>>18&63]),r.appendCharCode(a[o>>>12&63]),r.appendCharCode(a[o>>>6&63]),i&&r.appendCharCode(61)):s===l-1&&(o=t[s]<<16,r.appendCharCode(a[o>>>18&63]),r.appendCharCode(a[o>>>12&63]),i&&(r.appendCharCode(61),r.appendCharCode(61)));return r.getOutputString()},t.decodeWithJS=function(e,t){if(!e||0==e.length)return new Uint8Array(0);var n=e.length%4;if(1===n)throw new Error("Invalid Base64 string: length % 4 == 1");2===n?e+="==":3===n&&(e+="="),t||(t=new Uint8Array(e.length));for(var o=0,a=e.length,r=0;r<a;r+=4){var s=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)];t[o++]=s>>>16&255,t[o++]=s>>>8&255,t[o++]=255&s}return 61==e.charCodeAt(a-1)&&o--,61==e.charCodeAt(a-2)&&o--,t.subarray(0,o)}}(t.Base64||(t.Base64={}))}(e.Encoding||(e.Encoding={}))}(r||(r={})),function(e){!function(t){!function(t){t.encode=function(t){if(null==t)throw new TypeError("BinaryString.encode: undefined or null input received");if(0===t.length)return"";for(var n=t.length,i=new e.StringBuilder,o=0,a=1,r=0;r<n;r+=2){var s=void 0;s=r==n-1?t[r]<<8:t[r]<<8|t[r+1],i.appendCharCode(o<<16-a|s>>>a),o=s&(1<<a)-1,15===a?(i.appendCharCode(o),o=0,a=1):a+=1,r>=n-2&&i.appendCharCode(o<<16-a)}return i.appendCharCode(32768|n%2),i.getOutputString()},t.decode=function(e){if("string"!=typeof e)throw new TypeError("BinaryString.decode: invalid input type");if(""==e)return new Uint8Array(0);for(var t=new Uint8Array(3*e.length),n=0,i=function(e){t[n++]=e>>>8,t[n++]=255&e},o=0,a=0,r=0;r<e.length;r++){var s=e.charCodeAt(r);s>=32768?(32769==s&&n--,a=0):(0==a?o=s:(i(o<<a|s>>>15-a),o=s&(1<<15-a)-1),15==a?a=0:a+=1)}return t.subarray(0,n)}}(t.BinaryString||(t.BinaryString={}))}(e.Encoding||(e.Encoding={}))}(r||(r={})),function(e){!function(e){!function(e){e.encodeFromString=function(e,t){var n=e.charCodeAt(t);if(n<55296||n>56319)return n;var i=e.charCodeAt(t+1);if(i>=56320&&i<=57343)return i-56320+(n-55296<<10)+65536;throw new Error("getUnicodeCodePoint: Received a lead surrogate character, char code "+n+", followed by "+i+", which is not a trailing surrogate character code.")},e.decodeToString=function(e){if(e<=65535)return String.fromCharCode(e);if(e<=1114111)return String.fromCharCode(55296+(e-65536>>>10),56320+(e-65536&1023));throw new Error("getStringFromUnicodeCodePoint: A code point of "+e+" cannot be encoded in UTF-16")}}(e.CodePoint||(e.CodePoint={}))}(e.Encoding||(e.Encoding={}))}(r||(r={})),function(e){!function(e){!function(e){var t=["000","001","002","003","004","005","006","007","008","009","010","011","012","013","014","015","016","017","018","019","020","021","022","023","024","025","026","027","028","029","030","031","032","033","034","035","036","037","038","039","040","041","042","043","044","045","046","047","048","049","050","051","052","053","054","055","056","057","058","059","060","061","062","063","064","065","066","067","068","069","070","071","072","073","074","075","076","077","078","079","080","081","082","083","084","085","086","087","088","089","090","091","092","093","094","095","096","097","098","099","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255"];e.encode=function(e){for(var n=[],i=0;i<e.length;i++)n.push(t[e[i]]);return n.join(" ")}}(e.DecimalString||(e.DecimalString={}))}(e.Encoding||(e.Encoding={}))}(r||(r={})),function(e){!function(e){!function(t){t.encode=function(t){return e.BinaryString.encode(t).replace(/\0/g,"耂")},t.decode=function(t){return e.BinaryString.decode(t.replace(/\u8002/g,"\0"))}}(e.StorageBinaryString||(e.StorageBinaryString={}))}(e.Encoding||(e.Encoding={}))}(r||(r={})),function(e){!function(t){!function(n){var i,a;n.encode=function(t){return t&&0!=t.length?e.runningInNodeJS()?e.BufferTools.bufferToUint8Array(new o(t,"utf8")):n.createNativeTextEncoderAndDecoderIfAvailable()?i.encode(t):n.encodeWithJS(t):new Uint8Array(0)},n.decode=function(t){return t&&0!=t.length?e.runningInNodeJS()?e.BufferTools.uint8ArrayToBuffer(t).toString("utf8"):n.createNativeTextEncoderAndDecoderIfAvailable()?a.decode(t):n.decodeWithJS(t):""},n.encodeWithJS=function(e,n){if(!e||0==e.length)return new Uint8Array(0);n||(n=new Uint8Array(4*e.length));for(var i=0,o=0;o<e.length;o++){var a=t.CodePoint.encodeFromString(e,o);if(a<=127)n[i++]=a;else if(a<=2047)n[i++]=192|a>>>6,n[i++]=128|63&a;else if(a<=65535)n[i++]=224|a>>>12,n[i++]=128|a>>>6&63,n[i++]=128|63&a;else{if(!(a<=1114111))throw new Error("Invalid UTF-16 string: Encountered a character unsupported by UTF-8/16 (RFC 3629)");n[i++]=240|a>>>18,n[i++]=128|a>>>12&63,n[i++]=128|a>>>6&63,n[i++]=128|63&a,o++}}return n.subarray(0,i)},n.decodeWithJS=function(t,n,i){if(void 0===n&&(n=0),!t||0==t.length)return"";void 0===i&&(i=t.length);for(var o,a,r=new e.StringBuilder,s=n,l=i;s<l;){if((a=t[s])>>>7==0)o=a,s+=1;else if(a>>>5==6){if(s+1>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(31&a)<<6|63&t[s+1],s+=2}else if(a>>>4==14){if(s+2>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(15&a)<<12|(63&t[s+1])<<6|63&t[s+2],s+=3}else{if(a>>>3!=30)throw new Error("Invalid UTF-8 stream: An invalid lead byte value encountered at position "+s);if(s+3>=i)throw new Error("Invalid UTF-8 stream: Truncated codepoint sequence encountered at position "+s);o=(7&a)<<18|(63&t[s+1])<<12|(63&t[s+2])<<6|63&t[s+3],s+=4}r.appendCodePoint(o)}return r.getOutputString()},n.createNativeTextEncoderAndDecoderIfAvailable=function(){return!!i||"function"==typeof TextEncoder&&(i=new TextEncoder("utf-8"),a=new TextDecoder("utf-8"),!0)}}(t.UTF8||(t.UTF8={}))}(e.Encoding||(e.Encoding={}))}(r||(r={})),function(e){e.compress=function(t,n){if(void 0===n&&(n={}),null==t)throw new TypeError("compress: undefined or null input received");var i=e.CompressionCommon.detectCompressionSourceEncoding(t);n=e.ObjectTools.override({inputEncoding:i,outputEncoding:"ByteArray"},n);var o=(new e.Compressor).compressBlock(t);return e.CompressionCommon.encodeCompressedBytes(o,n.outputEncoding)},e.decompress=function(t,n){if(void 0===n&&(n={}),null==t)throw new TypeError("decompress: undefined or null input received");n=e.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String"},n);var i=e.CompressionCommon.decodeCompressedBytes(t,n.inputEncoding),o=(new e.Decompressor).decompressBlock(i);return e.CompressionCommon.encodeDecompressedBytes(o,n.outputEncoding)},e.compressAsync=function(t,n,i){var o;null==i&&(i=function(){});try{o=e.CompressionCommon.detectCompressionSourceEncoding(t)}catch(e){return void i(void 0,e)}n=e.ObjectTools.override({inputEncoding:o,outputEncoding:"ByteArray",useWebWorker:!0,blockSize:65536},n),e.enqueueImmediate(function(){n.useWebWorker&&e.WebWorker.createGlobalWorkerIfNeeded()?e.WebWorker.compressAsync(t,n,i):e.AsyncCompressor.compressAsync(t,n,i)})},e.decompressAsync=function(t,n,i){if(null==i&&(i=function(){}),null!=t){n=e.ObjectTools.override({inputEncoding:"ByteArray",outputEncoding:"String",useWebWorker:!0,blockSize:65536},n);var o=e.BufferTools.convertToUint8ArrayIfNeeded(t);e.EventLoop.enqueueImmediate(function(){n.useWebWorker&&e.WebWorker.createGlobalWorkerIfNeeded()?e.WebWorker.decompressAsync(o,n,i):e.AsyncDecompressor.decompressAsync(t,n,i)})}else i(void 0,new TypeError("decompressAsync: undefined or null input received"))},e.createCompressionStream=function(){return e.AsyncCompressor.createCompressionStream()},e.createDecompressionStream=function(){return e.AsyncDecompressor.createDecompressionStream()},e.encodeUTF8=function(t){return e.Encoding.UTF8.encode(t)},e.decodeUTF8=function(t){return e.Encoding.UTF8.decode(t)},e.encodeBase64=function(t){return e.Encoding.Base64.encode(t)},e.decodeBase64=function(t){return e.Encoding.Base64.decode(t)},e.encodeBinaryString=function(t){return e.Encoding.BinaryString.encode(t)},e.decodeBinaryString=function(t){return e.Encoding.BinaryString.decode(t)},e.encodeStorageBinaryString=function(t){return e.Encoding.StorageBinaryString.encode(t)},e.decodeStorageBinaryString=function(t){return e.Encoding.StorageBinaryString.decode(t)}}(r||(r={}))}).call(this,n(63),n(246)(e),n(42),n(109).Buffer,n(158).setImmediate)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],i=t[1];return 3*(n+i)/4-i},t.toByteArray=function(e){for(var t,n=u(e),i=n[0],r=n[1],s=new a(function(e,t,n){return 3*(t+n)/4-n}(0,i,r)),l=0,c=r>0?i-4:i,m=0;m<c;m+=4)t=o[e.charCodeAt(m)]<<18|o[e.charCodeAt(m+1)]<<12|o[e.charCodeAt(m+2)]<<6|o[e.charCodeAt(m+3)],s[l++]=t>>16&255,s[l++]=t>>8&255,s[l++]=255&t;2===r&&(t=o[e.charCodeAt(m)]<<2|o[e.charCodeAt(m+1)]>>4,s[l++]=255&t);1===r&&(t=o[e.charCodeAt(m)]<<10|o[e.charCodeAt(m+1)]<<4|o[e.charCodeAt(m+2)]>>2,s[l++]=t>>8&255,s[l++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,a=[],r=0,s=n-o;r<s;r+=16383)a.push(c(e,r,r+16383>s?s:r+16383));1===o?(t=e[n-1],a.push(i[t>>2]+i[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],a.push(i[t>>10]+i[t>>4&63]+i[t<<2&63]+"="));return a.join("")};for(var i=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,l=r.length;s<l;++s)i[s]=r[s],o[r.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e,t,n){for(var o,a,r=[],s=t;s<n;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),r.push(i[(a=o)>>18&63]+i[a>>12&63]+i[a>>6&63]+i[63&a]);return r.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,i,o){var a,r,s=8*o-i-1,l=(1<<s)-1,u=l>>1,c=-7,m=n?o-1:0,d=n?-1:1,h=e[t+m];for(m+=d,a=h&(1<<-c)-1,h>>=-c,c+=s;c>0;a=256*a+e[t+m],m+=d,c-=8);for(r=a&(1<<-c)-1,a>>=-c,c+=i;c>0;r=256*r+e[t+m],m+=d,c-=8);if(0===a)a=1-u;else{if(a===l)return r?NaN:1/0*(h?-1:1);r+=Math.pow(2,i),a-=u}return(h?-1:1)*r*Math.pow(2,a-i)},t.write=function(e,t,n,i,o,a){var r,s,l,u=8*a-o-1,c=(1<<u)-1,m=c>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=i?0:a-1,p=i?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,r=c):(r=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-r))<1&&(r--,l*=2),(t+=r+m>=1?d/l:d*Math.pow(2,1-m))*l>=2&&(r++,l/=2),r+m>=c?(s=0,r=c):r+m>=1?(s=(t*l-1)*Math.pow(2,o),r+=m):(s=t*Math.pow(2,m-1)*Math.pow(2,o),r=0));o>=8;e[n+h]=255&s,h+=p,s/=256,o-=8);for(r=r<<o|s,u+=o;u>0;e[n+h]=255&r,h+=p,r/=256,u-=8);e[n+h-p]|=128*f}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,o,a,r,s,l=1,u={},c=!1,m=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){p(e.data)},i=function(e){a.port2.postMessage(e)}):m&&"onreadystatechange"in m.createElement("script")?(o=m.documentElement,i=function(e){var t=m.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):i=function(e){setTimeout(p,0,e)}:(r="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(r)&&p(+t.data.slice(r.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(r+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return u[l]=o,i(l),l++},d.clearImmediate=h}function h(e){delete u[e]}function p(e){if(c)setTimeout(p,0,e);else{var t=u[e];if(t){c=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{h(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(42),n(63))},function(e,t){},function(e,t,n){"use strict";var i=n(83).Buffer,o=n(252);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var t,n,o,a=i.allocUnsafe(e>>>0),r=this.head,s=0;r;)t=r.data,n=a,o=s,t.copy(n,o),s+=r.data.length,r=r.next;return a},e}(),o&&o.inspect&&o.inspect.custom&&(e.exports.prototype[o.inspect.custom]=function(){var e=o.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var i=!1;return function(){if(!i){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),i=!0}return e.apply(this,arguments)}}}).call(this,n(42))},function(e,t,n){"use strict";e.exports=a;var i=n(164),o=n(64);function a(e){if(!(this instanceof a))return new a(e);i.call(this,e)}o.inherits=n(51),o.inherits(a,i),a.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(112)},function(e,t,n){e.exports=n(43)},function(e,t,n){e.exports=n(111).Transform},function(e,t,n){e.exports=n(111).PassThrough},function(e){e.exports={name:"dronelink-kernel",version:"1.5.0",description:"The Dronelink Kernel",main:"dist/index.js",types:"dist/index.d.ts",scripts:{test:'echo "Error: no test specified" && exit 1',build:"tsc","build:webpack":"webpack","build:webpack-npm":"webpack --config webpack-npm.config.js"},author:"Dronelink",license:"DRONELINK",dependencies:{"@types/bezier-js":"^0.0.8","@types/kdbush":"^3.0.0","@types/node":"^12.12.7","@types/numeral":"0.0.26","bezier-js":"^2.4.4","convexhull-js":"^1.0.0",geolib:"^3.1.0",kdbush:"^3.0.0","localized-strings":"^0.2.4",lzutf8:"^0.5.5",numeral:"^2.0.6",xmlbuilder:"^13.0.2"},devDependencies:{"expose-loader":"^0.7.5","ts-loader":"^6.2.1",tsify:"^4.0.1",typescript:"^3.7.2"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"computeDestinationPoint",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"convertArea",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"convertDistance",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"convertSpeed",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"decimalToSexagesimal",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"findNearest",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"getAreaOfPolygon",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"getBounds",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"getBoundsOfDistance",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"getCenter",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"getCenterOfBounds",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"getCompassDirection",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"getCoordinateKey",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"getCoordinateKeys",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"getDistance",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"getDistanceFromLine",{enumerable:!0,get:function(){return C.default}}),Object.defineProperty(t,"getGreatCircleBearing",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"getLatitude",{enumerable:!0,get:function(){return S.default}}),Object.defineProperty(t,"getLongitude",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"getPathLength",{enumerable:!0,get:function(){return w.default}}),Object.defineProperty(t,"getPreciseDistance",{enumerable:!0,get:function(){return x.default}}),Object.defineProperty(t,"getRhumbLineBearing",{enumerable:!0,get:function(){return M.default}}),Object.defineProperty(t,"getRoughCompassDirection",{enumerable:!0,get:function(){return O.default}}),Object.defineProperty(t,"getSpeed",{enumerable:!0,get:function(){return T.default}}),Object.defineProperty(t,"isDecimal",{enumerable:!0,get:function(){return P.default}}),Object.defineProperty(t,"isPointInLine",{enumerable:!0,get:function(){return D.default}}),Object.defineProperty(t,"isPointInPolygon",{enumerable:!0,get:function(){return E.default}}),Object.defineProperty(t,"isPointNearLine",{enumerable:!0,get:function(){return F.default}}),Object.defineProperty(t,"isPointWithinRadius",{enumerable:!0,get:function(){return A.default}}),Object.defineProperty(t,"isSexagesimal",{enumerable:!0,get:function(){return N.default}}),Object.defineProperty(t,"isValidCoordinate",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"isValidLatitude",{enumerable:!0,get:function(){return R.default}}),Object.defineProperty(t,"isValidLongitude",{enumerable:!0,get:function(){return I.default}}),Object.defineProperty(t,"orderByDistance",{enumerable:!0,get:function(){return L.default}}),Object.defineProperty(t,"sexagesimalToDecimal",{enumerable:!0,get:function(){return z.default}}),Object.defineProperty(t,"toDecimal",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(t,"toRad",{enumerable:!0,get:function(){return B.default}}),Object.defineProperty(t,"toDeg",{enumerable:!0,get:function(){return V.default}});var i=j(n(261)),o=j(n(262)),a=j(n(263)),r=j(n(264)),s=j(n(265)),l=j(n(266)),u=j(n(267)),c=j(n(217)),m=j(n(268)),d=j(n(269)),h=j(n(270)),p=j(n(271)),f=j(n(93)),g=j(n(123)),y=j(n(47)),C=j(n(219)),v=j(n(272)),S=j(n(25)),b=j(n(26)),w=j(n(273)),x=j(n(274)),M=j(n(218)),O=j(n(275)),T=j(n(276)),P=j(n(94)),D=j(n(277)),E=j(n(278)),F=j(n(279)),A=j(n(280)),N=j(n(95)),_=j(n(213)),R=j(n(214)),I=j(n(215)),L=j(n(216)),z=j(n(96)),k=j(n(122)),B=j(n(32)),V=j(n(52));function j(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=l(n(25)),o=l(n(26)),a=l(n(32)),r=l(n(52)),s=n(14);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t,n){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:6371e3,u=(0,i.default)(e),c=(0,o.default)(e),m=t/l,d=(0,a.default)(n),h=(0,a.default)(u),p=(0,a.default)(c),f=Math.asin(Math.sin(h)*Math.cos(m)+Math.cos(h)*Math.sin(m)*Math.cos(d)),g=p+Math.atan2(Math.sin(d)*Math.sin(m)*Math.cos(h),Math.cos(m)-Math.sin(h)*Math.sin(f)),y=(0,r.default)(g);return(y<s.MINLON||y>s.MAXLON)&&(g=(g+3*Math.PI)%(2*Math.PI)-Math.PI,y=(0,r.default)(g)),{latitude:(0,r.default)(f),longitude:y}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"m",n=i.areaConversion[t];if(n)return e*n;throw new Error("Invalid unit used for area conversion.")};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"m",n=i.distanceConversion[t];if(n)return e*n;throw new Error("Invalid unit used for distance conversion.")};t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=n(14),o=function(e){switch(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"kmh"){case"kmh":return e*i.timeConversion.h*i.distanceConversion.km;case"mph":return e*i.timeConversion.h*i.distanceConversion.mi;default:return e}};t.default=o},function(e,t,n){"use strict";function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],i=!0,o=!1,a=void 0;try{for(var r,s=e[Symbol.iterator]();!(i=(r=s.next()).done)&&(n.push(r.value),!t||n.length!==t);i=!0);}catch(e){o=!0,a=e}finally{try{i||null==s.return||s.return()}finally{if(o)throw a}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){var t=Math.pow(10,12);return Math.round(e*t)/t},a=function(e){var t=i(e.toString().split("."),2),n=t[0],a=t[1],r=Math.abs(Number(n)),s=o(60*Number("0."+(a||0))),l=Math.floor(s),u=o(60*(s%l||0));return r+"° "+Number(l.toFixed(6)).toString().split(".").map(function(e,t){return 0===t?e.padStart(2,"0"):e}).join(".")+"' "+Number(u.toFixed(4)).toString().split(".").map(function(e,t){return 0===t?e.padStart(2,"0"):e}).join(".")+'"'};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(216))&&i.__esModule?i:{default:i};var a=function(e,t){return(0,o.default)(e,t)[0]};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(32)),o=s(n(25)),a=s(n(26)),r=n(14);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t=0;if(e.length>2){for(var n,s,l,u=0;u<e.length;u++){u===e.length-2?(n=e.length-2,s=e.length-1,l=0):u===e.length-1?(n=e.length-1,s=0,l=1):(n=u,s=u+1,l=u+2);var c=(0,a.default)(e[n]),m=(0,o.default)(e[s]),d=(0,a.default)(e[l]);t+=((0,i.default)(d)-(0,i.default)(c))*Math.sin((0,i.default)(m))}t=t*r.earthRadius*r.earthRadius/2}return Math.abs(t)};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=l(n(25)),o=l(n(26)),a=l(n(32)),r=l(n(52)),s=n(14);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e,t){var n,l,u=(0,i.default)(e),c=(0,o.default)(e),m=(0,a.default)(u),d=(0,a.default)(c),h=t/s.earthRadius,p=m-h,f=m+h,g=(0,a.default)(s.MAXLAT),y=(0,a.default)(s.MINLAT),C=(0,a.default)(s.MAXLON),v=(0,a.default)(s.MINLON);if(p>y&&f<g){var S=Math.asin(Math.sin(h)/Math.cos(m));(n=d-S)<v&&(n+=2*Math.PI),(l=d+S)>C&&(l-=2*Math.PI)}else p=Math.max(p,y),f=Math.min(f,g),n=v,l=C;return[{latitude:(0,r.default)(p),longitude:(0,r.default)(n)},{latitude:(0,r.default)(f),longitude:(0,r.default)(l)}]};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(25)),o=s(n(26)),a=s(n(32)),r=s(n(52));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){if(!1===Array.isArray(e)||0===e.length)return!1;var t=e.length,n=e.reduce(function(e,t){var n=(0,a.default)((0,i.default)(t)),r=(0,a.default)((0,o.default)(t));return{X:e.X+Math.cos(n)*Math.cos(r),Y:e.Y+Math.cos(n)*Math.sin(r),Z:e.Z+Math.sin(n)}},{X:0,Y:0,Z:0}),s=n.X/t,l=n.Y/t,u=n.Z/t;return{longitude:(0,r.default)(Math.atan2(l,s)),latitude:(0,r.default)(Math.atan2(u,Math.sqrt(s*s+l*l)))}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(217))&&i.__esModule?i:{default:i};var a=function(e){var t=(0,o.default)(e),n=t.minLat+(t.maxLat-t.minLat)/2,i=t.minLng+(t.maxLng-t.minLng)/2;return{latitude:parseFloat(n.toFixed(6)),longitude:parseFloat(i.toFixed(6))}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(218))&&i.__esModule?i:{default:i};var a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default,i="function"==typeof n?n(e,t):(0,o.default)(e,t);if(isNaN(i))throw new Error("Could not calculate bearing for given points. Check your bearing function");switch(Math.round(i/22.5)){case 1:return"NNE";case 2:return"NE";case 3:return"ENE";case 4:return"E";case 5:return"ESE";case 6:return"SE";case 7:return"SSE";case 8:return"S";case 9:return"SSW";case 10:return"SW";case 11:return"WSW";case 12:return"W";case 13:return"WNW";case 14:return"NW";case 15:return"NNW";default:return"N"}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(25)),o=s(n(26)),a=s(n(32)),r=s(n(52));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t){var n=(0,i.default)(t),s=(0,o.default)(t),l=(0,i.default)(e),u=(0,o.default)(e);return((0,r.default)(Math.atan2(Math.sin((0,a.default)(s)-(0,a.default)(u))*Math.cos((0,a.default)(n)),Math.cos((0,a.default)(l))*Math.sin((0,a.default)(n))-Math.sin((0,a.default)(l))*Math.cos((0,a.default)(n))*Math.cos((0,a.default)(s)-(0,a.default)(u))))+360)%360};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(47))&&i.__esModule?i:{default:i};function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.default;return e.reduce(function(e,n){return"object"===a(e)&&null!==e.last&&(e.distance+=t(n,e.last)),e.last=n,e},{last:null,distance:0}).distance};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=s(n(25)),o=s(n(26)),a=s(n(32)),r=n(14);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;n=void 0===n||isNaN(n)?1:n;var s,l,u,c,m,d,h,p=(0,i.default)(e),f=(0,o.default)(e),g=(0,i.default)(t),y=(0,o.default)(t),C=6356752.314245,v=(0,a.default)(y-f),S=Math.atan(.9966471893352525*Math.tan((0,a.default)(parseFloat(p)))),b=Math.atan(.9966471893352525*Math.tan((0,a.default)(parseFloat(g)))),w=Math.sin(S),x=Math.cos(S),M=Math.sin(b),O=Math.cos(b),T=v,P=100;do{var D=Math.sin(T),E=Math.cos(T);if(0===(d=Math.sqrt(O*D*(O*D)+(x*M-w*O*E)*(x*M-w*O*E))))return 0;s=w*M+x*O*E,l=Math.atan2(d,s),m=s-2*w*M/(c=1-(u=x*O*D/d)*u),isNaN(m)&&(m=0);var F=1/298.257223563/16*c*(4+1/298.257223563*(4-3*c));h=T,T=v+1/298.257223563*(1-F)*u*(l+F*d*(m+F*s*(2*m*m-1)))}while(Math.abs(T-h)>1e-12&&--P>0);if(0===P)return NaN;var A=c*(r.earthRadius*r.earthRadius-C*C)/(C*C),N=A/1024*(256+A*(A*(74-47*A)-128)),_=C*(1+A/16384*(4096+A*(A*(320-175*A)-768)))*(l-N*d*(m+N/4*(s*(2*m*m-1)-N/6*m*(4*d*d-3)*(4*m*m-3))));return Math.round(_/n)*n};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(e){return/^NNE|NE|NNW|N$/.test(e)?"N":/^ENE|E|ESE|SE$/.test(e)?"E":/^SSE|S|SSW|SW$/.test(e)?"S":/^WSW|W|WNW|NW$/.test(e)?"W":void 0};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(47))&&i.__esModule?i:{default:i};var a=function(e,t){return(arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.default)(e,t)/(Number(t.time)-Number(e.time))*1e3};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(47))&&i.__esModule?i:{default:i};var a=function(e,t,n){return(0,o.default)(t,e)+(0,o.default)(e,n)===(0,o.default)(t,n)};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=a(n(25)),o=a(n(26));function a(e){return e&&e.__esModule?e:{default:e}}var r=function(e,t){for(var n=!1,a=t.length,r=-1,s=a-1;++r<a;s=r)((0,o.default)(t[r])<=(0,o.default)(e)&&(0,o.default)(e)<(0,o.default)(t[s])||(0,o.default)(t[s])<=(0,o.default)(e)&&(0,o.default)(e)<(0,o.default)(t[r]))&&(0,i.default)(e)<((0,i.default)(t[s])-(0,i.default)(t[r]))*((0,o.default)(e)-(0,o.default)(t[r]))/((0,o.default)(t[s])-(0,o.default)(t[r]))+(0,i.default)(t[r])&&(n=!n);return n};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(219))&&i.__esModule?i:{default:i};var a=function(e,t,n,i){return(0,o.default)(e,t,n)<i};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i,o=(i=n(47))&&i.__esModule?i:{default:i};var a=function(e,t,n){return(0,o.default)(e,t)<n};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(18),o=n(0);t.ReferencedAltitude=class{constructor(e,t,n){this.altitude=e,this.takeoffLocation=t,this.groundLocation=n}toSystem(e){if(e===this.altitude.system)return this.altitude;let t=this.altitude.value;switch(this.altitude.system){case o.AltitudeSystem.ATL:if(!this.takeoffLocation)return null;t+=this.takeoffLocation.altitude.value;break;case o.AltitudeSystem.MSL:break;case o.AltitudeSystem.AGL:if(!this.groundLocation)return null;t+=this.groundLocation.altitude.value}switch(e){case o.AltitudeSystem.ATL:if(!this.takeoffLocation)return null;t-=this.takeoffLocation.altitude.value;break;case o.AltitudeSystem.MSL:break;case o.AltitudeSystem.AGL:if(!this.groundLocation)return null;t-=this.groundLocation.altitude.value}return new i.Altitude(t,e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(58);t.FacadeComponentElementNode=class extends i.ListElementNode{get facadeComponentNode(){return this.parent.parent}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(58);t.MapComponentElementNode=class extends i.ListElementNode{get mapComponentNode(){return this.parent.parent}}},function(e,t,n){(function(){var t,i,o,a,r,s,l,u,c;({assign:u,isFunction:c}=n(34)),o=n(233),a=n(234),r=n(290),l=n(153),s=n(291),t=n(11),i=n(108),e.exports.create=function(e,t,n,i){var o,r;if(null==e)throw new Error("Root element needs a name.");return i=u({},t,n,i),r=(o=new a(i)).element(e),i.headless||(o.declaration(i),null==i.pubID&&null==i.sysID||o.dtd(i)),r},e.exports.begin=function(e,t,n){return c(e)&&([t,n]=[e,t],e={}),t?new r(e,t,n):new a(e)},e.exports.stringWriter=function(e){return new l(e)},e.exports.streamWriter=function(e,t){return new s(e,t)},e.exports.implementation=new o,e.exports.nodeType=t,e.exports.writerState=i}).call(this)},function(e,t,n){(function(){var t,i;t=n(286),i=n(287),e.exports=function(){class e{constructor(){this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new t,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=Object.create(this.defaultParams)}getParameter(e){return this.params.hasOwnProperty(e)?this.params[e]:null}canSetParameter(e,t){return!0}setParameter(e,t){return null!=t?this.params[e]=t:delete this.params[e]}}return Object.defineProperty(e.prototype,"parameterNames",{get:function(){return new i(Object.keys(this.defaultParams))}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=class{constructor(){}handleError(e){throw new Error(e)}}}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.arr=e||[]}item(e){return this.arr[e]||null}contains(e){return-1!==this.arr.indexOf(e)}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.arr.length}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports=function(){class e{constructor(e){this.nodes=e}clone(){return this.nodes=null}item(e){return this.nodes[e]||null}}return Object.defineProperty(e.prototype,"length",{get:function(){return this.nodes.length||0}}),e}.call(this)}).call(this)},function(e,t){(function(){e.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(this)},function(e,t,n){(function(){var t,i,o,a,r,s,l,u,c,m,d,h,p,f,g,y,C,v,S,b,w,x,M={}.hasOwnProperty;({isObject:w,isFunction:b,isPlainObject:x,getValue:S}=n(34)),t=n(11),h=n(234),p=n(140),a=n(142),r=n(143),g=n(150),v=n(151),f=n(152),m=n(144),d=n(145),s=n(146),u=n(147),l=n(148),c=n(149),o=n(235),C=n(237),y=n(153),i=n(108),e.exports=class{constructor(e,n,i){var o;this.name="?xml",this.type=t.Document,e||(e={}),o={},e.writer?x(e.writer)&&(o=e.writer,e.writer=new y):e.writer=new y,this.options=e,this.writer=e.writer,this.writerOptions=this.writer.filterOptions(o),this.stringify=new C(e),this.onDataCallback=n||function(){},this.onEndCallback=i||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}createChildNode(e){var n,i,o,a,r,s,l,u;switch(e.type){case t.CData:this.cdata(e.value);break;case t.Comment:this.comment(e.value);break;case t.Element:for(i in o={},l=e.attribs)M.call(l,i)&&(n=l[i],o[i]=n.value);this.node(e.name,o);break;case t.Dummy:this.dummy();break;case t.Raw:this.raw(e.value);break;case t.Text:this.text(e.value);break;case t.ProcessingInstruction:this.instruction(e.target,e.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+e.constructor.name)}for(r=0,s=(u=e.children).length;r<s;r++)a=u[r],this.createChildNode(a),a.type===t.Element&&this.up();return this}dummy(){return this}node(e,t,n){if(null==e)throw new Error("Missing node name.");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node. "+this.debugInfo(e));return this.openCurrent(),e=S(e),null==t&&(t={}),t=S(t),w(t)||([n,t]=[t,n]),this.currentNode=new p(this,e,t),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=n&&this.text(n),this}element(e,n,i){var o,a,r,s,l,u;if(this.currentNode&&this.currentNode.type===t.DocType)this.dtdElement(...arguments);else if(Array.isArray(e)||w(e)||b(e))for(s=this.options.noValidation,this.options.noValidation=!0,(u=new h(this.options).element("TEMP_ROOT")).element(e),this.options.noValidation=s,a=0,r=(l=u.children).length;a<r;a++)o=l[a],this.createChildNode(o),o.type===t.Element&&this.up();else this.node(e,n,i);return this}attribute(e,t){var n,i;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(e));if(null!=e&&(e=S(e)),w(e))for(n in e)M.call(e,n)&&(i=e[n],this.attribute(n,i));else b(t)&&(t=t.apply()),this.options.keepNullAttributes&&null==t?this.currentNode.attribs[e]=new o(this,e,""):null!=t&&(this.currentNode.attribs[e]=new o(this,e,t));return this}text(e){var t;return this.openCurrent(),t=new v(this,e),this.onData(this.writer.text(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}cdata(e){var t;return this.openCurrent(),t=new a(this,e),this.onData(this.writer.cdata(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}comment(e){var t;return this.openCurrent(),t=new r(this,e),this.onData(this.writer.comment(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}raw(e){var t;return this.openCurrent(),t=new g(this,e),this.onData(this.writer.raw(t,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}instruction(e,t){var n,i,o,a,r;if(this.openCurrent(),null!=e&&(e=S(e)),null!=t&&(t=S(t)),Array.isArray(e))for(n=0,a=e.length;n<a;n++)i=e[n],this.instruction(i);else if(w(e))for(i in e)M.call(e,i)&&(o=e[i],this.instruction(i,o));else b(t)&&(t=t.apply()),r=new f(this,e,t),this.onData(this.writer.processingInstruction(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this}declaration(e,t,n){var i;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return i=new m(this,e,t,n),this.onData(this.writer.declaration(i,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}doctype(e,t,n){if(this.openCurrent(),null==e)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new d(this,t,n),this.currentNode.rootNodeName=e,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this}dtdElement(e,t){var n;return this.openCurrent(),n=new l(this,e,t),this.onData(this.writer.dtdElement(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}attList(e,t,n,i,o){var a;return this.openCurrent(),a=new s(this,e,t,n,i,o),this.onData(this.writer.dtdAttList(a,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}entity(e,t){var n;return this.openCurrent(),n=new u(this,!1,e,t),this.onData(this.writer.dtdEntity(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}pEntity(e,t){var n;return this.openCurrent(),n=new u(this,!0,e,t),this.onData(this.writer.dtdEntity(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}notation(e,t){var n;return this.openCurrent(),n=new c(this,e,t),this.onData(this.writer.dtdNotation(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this}up(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this}end(){for(;this.currentLevel>=0;)this.up();return this.onEnd()}openCurrent(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)}openNode(e){var n,o,a,r;if(!e.isOpen){if(this.root||0!==this.currentLevel||e.type!==t.Element||(this.root=e),o="",e.type===t.Element){for(a in this.writerOptions.state=i.OpenTag,o=this.writer.indent(e,this.writerOptions,this.currentLevel)+"<"+e.name,r=e.attribs)M.call(r,a)&&(n=r[a],o+=this.writer.attribute(n,this.writerOptions,this.currentLevel));o+=(e.children?">":"/>")+this.writer.endline(e,this.writerOptions,this.currentLevel),this.writerOptions.state=i.InsideTag}else this.writerOptions.state=i.OpenTag,o=this.writer.indent(e,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+e.rootNodeName,e.pubID&&e.sysID?o+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(o+=' SYSTEM "'+e.sysID+'"'),e.children?(o+=" [",this.writerOptions.state=i.InsideTag):(this.writerOptions.state=i.CloseTag,o+=">"),o+=this.writer.endline(e,this.writerOptions,this.currentLevel);return this.onData(o,this.currentLevel),e.isOpen=!0}}closeNode(e){var n;if(!e.isClosed)return n="",this.writerOptions.state=i.CloseTag,n=e.type===t.Element?this.writer.indent(e,this.writerOptions,this.currentLevel)+"</"+e.name+">"+this.writer.endline(e,this.writerOptions,this.currentLevel):this.writer.indent(e,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(e,this.writerOptions,this.currentLevel),this.writerOptions.state=i.None,this.onData(n,this.currentLevel),e.isClosed=!0}onData(e,t){return this.documentStarted=!0,this.onDataCallback(e,t+1)}onEnd(){return this.documentCompleted=!0,this.onEndCallback()}debugInfo(e){return null==e?"":"node: <"+e+">"}ele(){return this.element(...arguments)}nod(e,t,n){return this.node(e,t,n)}txt(e){return this.text(e)}dat(e){return this.cdata(e)}com(e){return this.comment(e)}ins(e,t){return this.instruction(e,t)}dec(e,t,n){return this.declaration(e,t,n)}dtd(e,t,n){return this.doctype(e,t,n)}e(e,t,n){return this.element(e,t,n)}n(e,t,n){return this.node(e,t,n)}t(e){return this.text(e)}d(e){return this.cdata(e)}c(e){return this.comment(e)}r(e){return this.raw(e)}i(e,t){return this.instruction(e,t)}att(){return this.currentNode&&this.currentNode.type===t.DocType?this.attList(...arguments):this.attribute(...arguments)}a(){return this.currentNode&&this.currentNode.type===t.DocType?this.attList(...arguments):this.attribute(...arguments)}ent(e,t){return this.entity(e,t)}pent(e,t){return this.pEntity(e,t)}not(e,t){return this.notation(e,t)}}}).call(this)},function(e,t,n){(function(){var t,i,o,a={}.hasOwnProperty;t=n(11),o=n(238),i=n(108),e.exports=class extends o{constructor(e,t){super(t),this.stream=e}endline(e,t,n){return e.isLastRootNode&&t.state===i.CloseTag?"":super.endline(e,t,n)}document(e,t){var n,i,o,a,r,s,l,u,c;for(i=o=0,r=(l=e.children).length;o<r;i=++o)(n=l[i]).isLastRootNode=i===e.children.length-1;for(t=this.filterOptions(t),c=[],a=0,s=(u=e.children).length;a<s;a++)n=u[a],c.push(this.writeChildNode(n,t,0));return c}cdata(e,t,n){return this.stream.write(super.cdata(e,t,n))}comment(e,t,n){return this.stream.write(super.comment(e,t,n))}declaration(e,t,n){return this.stream.write(super.declaration(e,t,n))}docType(e,t,n){var o,a,r,s;if(n||(n=0),this.openNode(e,t,n),t.state=i.OpenTag,this.stream.write(this.indent(e,t,n)),this.stream.write("<!DOCTYPE "+e.root().name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(e,t,n)),t.state=i.InsideTag,a=0,r=(s=e.children).length;a<r;a++)o=s[a],this.writeChildNode(o,t,n+1);t.state=i.CloseTag,this.stream.write("]")}return t.state=i.CloseTag,this.stream.write(t.spaceBeforeSlash+">"),this.stream.write(this.endline(e,t,n)),t.state=i.None,this.closeNode(e,t,n)}element(e,n,o){var r,s,l,u,c,m,d,h,p,f,g,y,C,v;if(o||(o=0),this.openNode(e,n,o),n.state=i.OpenTag,p=this.indent(e,n,o)+"<"+e.name,n.pretty&&n.width>0)for(h in m=p.length,g=e.attribs)a.call(g,h)&&(r=g[h],m+(f=this.attribute(r,n,o)).length>n.width?(v=this.indent(e,n,o+1)+f,p+=this.endline(e,n,o)+v,m=v.length):(p+=v=" "+f,m+=v.length));else for(h in y=e.attribs)a.call(y,h)&&(r=y[h],p+=this.attribute(r,n,o));if(this.stream.write(p),u=0===(l=e.children.length)?null:e.children[0],0===l||e.children.every(function(e){return(e.type===t.Text||e.type===t.Raw)&&""===e.value}))n.allowEmpty?(this.stream.write(">"),n.state=i.CloseTag,this.stream.write("</"+e.name+">")):(n.state=i.CloseTag,this.stream.write(n.spaceBeforeSlash+"/>"));else if(!n.pretty||1!==l||u.type!==t.Text&&u.type!==t.Raw||null==u.value){for(this.stream.write(">"+this.endline(e,n,o)),n.state=i.InsideTag,c=0,d=(C=e.children).length;c<d;c++)s=C[c],this.writeChildNode(s,n,o+1);n.state=i.CloseTag,this.stream.write(this.indent(e,n,o)+"</"+e.name+">")}else this.stream.write(">"),n.state=i.InsideTag,n.suppressPrettyCount++,!0,this.writeChildNode(u,n,o+1),n.suppressPrettyCount--,!1,n.state=i.CloseTag,this.stream.write("</"+e.name+">");return this.stream.write(this.endline(e,n,o)),n.state=i.None,this.closeNode(e,n,o)}processingInstruction(e,t,n){return this.stream.write(super.processingInstruction(e,t,n))}raw(e,t,n){return this.stream.write(super.raw(e,t,n))}text(e,t,n){return this.stream.write(super.text(e,t,n))}dtdAttList(e,t,n){return this.stream.write(super.dtdAttList(e,t,n))}dtdElement(e,t,n){return this.stream.write(super.dtdElement(e,t,n))}dtdEntity(e,t,n){return this.stream.write(super.dtdEntity(e,t,n))}dtdNotation(e,t,n){return this.stream.write(super.dtdNotation(e,t,n))}}}).call(this)},function(e,t,n){e.exports=n(240)},function(e,t,n){!function(){"use strict";var t=n(241),i=function(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)};i.prototype={valueOf:function(){return this.toString()},toString:function(){return"["+this.curves.map(function(e){return t.pointsToString(e.points)}).join(", ")+"]"},addCurve:function(e){this.curves.push(e),this._3d=this._3d||e._3d},length:function(){return this.curves.map(function(e){return e.length()}).reduce(function(e,t){return e+t})},curve:function(e){return this.curves[e]},bbox:function(){for(var e=this.curves,n=e[0].bbox(),i=1;i<e.length;i++)t.expandbox(n,e[i].bbox());return n},offset:function(e){var t=[];return this.curves.forEach(function(n){t=t.concat(n.offset(e))}),new i(t)}},e.exports=i}()},function(e,t,n){var i=n(295),o={x:!1,y:!1};function a(e,t,n){if("Z"!==t){if("M"!==t){var i=[!1,o.x,o.y].concat(n),a=new(e.bind.apply(e,i)),r=n.slice(-2);return o={x:r[0],y:r[1]},a}o={x:n[0],y:n[1]}}}e.exports=function(e,t){for(var n,o,r=i(t).split(" "),s=new RegExp("[MLCQZ]",""),l=[],u={C:6,Q:4,L:2,M:2};r.length;)n=r.splice(0,1)[0],s.test(n)&&(o=a(e,n,r.splice(0,u[n]).map(parseFloat)))&&l.push(o);return new e.PolyBezier(l)}},function(e,t){e.exports=function(e){var t,n,i,o,a,r,s=(e=e.replace(/,/g," ").replace(/-/g," - ").replace(/-\s+/g,"-").replace(/([a-zA-Z])/g," $1 ")).replace(/([a-zA-Z])\s?/g,"|$1").split("|"),l=s.length,u=[],c=0,m=0,d=0,h=0,p=0,f=0,g=0,y=0,C="";for(t=1;t<l;t++)if(o=(i=(n=s[t]).substring(0,1)).toLowerCase(),a=(u=(u=n.replace(i,"").trim().split(" ")).filter(function(e){return""!==e}).map(parseFloat)).length,"m"===o){if(C+="M ","m"===i?(d+=u[0],h+=u[1]):(d=u[0],h=u[1]),c=d,m=h,C+=d+" "+h+" ",a>2)for(r=0;r<a;r+=2)"m"===i?(d+=u[r],h+=u[r+1]):(d=u[r],h=u[r+1]),C+=["L",d,h,""].join(" ")}else if("l"===o)for(r=0;r<a;r+=2)"l"===i?(d+=u[r],h+=u[r+1]):(d=u[r],h=u[r+1]),C+=["L",d,h,""].join(" ");else if("h"===o)for(r=0;r<a;r++)"h"===i?d+=u[r]:d=u[r],C+=["L",d,h,""].join(" ");else if("v"===o)for(r=0;r<a;r++)"v"===i?h+=u[r]:h=u[r],C+=["L",d,h,""].join(" ");else if("q"===o)for(r=0;r<a;r+=4)"q"===i?(p=d+u[r],f=h+u[r+1],d+=u[r+2],h+=u[r+3]):(p=u[r],f=u[r+1],d=u[r+2],h=u[r+3]),C+=["Q",p,f,d,h,""].join(" ");else if("t"===o)for(r=0;r<a;r+=2)p=d+(d-p),f=h+(h-f),"t"===i?(d+=u[r],h+=u[r+1]):(d=u[r],h=u[r+1]),C+=["Q",p,f,d,h,""].join(" ");else if("c"===o)for(r=0;r<a;r+=6)"c"===i?(p=d+u[r],f=h+u[r+1],g=d+u[r+2],y=h+u[r+3],d+=u[r+4],h+=u[r+5]):(p=u[r],f=u[r+1],g=u[r+2],y=u[r+3],d=u[r+4],h=u[r+5]),C+=["C",p,f,g,y,d,h,""].join(" ");else if("s"===o)for(r=0;r<a;r+=4)p=d+(d-g),f=h+(h-y),"s"===i?(g=d+u[r],y=h+u[r+1],d+=u[r+2],h+=u[r+3]):(g=u[r],y=u[r+1],d=u[r+2],h=u[r+3]),C+=["C",p,f,g,y,d,h,""].join(" ");else"z"===o&&(C+="Z ",d=c,h=m);return C.trim()}},function(e,t,n){var i;!function(){"use strict";function o(e){e.sort(function(e,t){return e.x!=t.x?e.x-t.x:e.y-t.y});for(var t,n,i,o,a,r=e.length,s=[],l=0;l<2*r;l++){for(var u=l<r?l:2*r-1-l;s.length>=2&&(t=s[s.length-2],n=s[s.length-1],i=e[u],o=void 0,a=void 0,o=(t.x-n.x)*(i.y-n.y)-(t.y-n.y)*(i.x-n.x),a=(t.x-n.x)*(i.x-n.x)+(t.y-n.y)*(i.y-n.y),o<0||0==o&&a<=0);)s.pop();s.push(e[u])}return s.pop(),s}void 0===(i=function(){return o}.call(t,n,t,e))||(e.exports=i)}()},function(e,t,n){"use strict";function i(e,t,n,a,r,s){if(r-a<=n)return;const l=a+r>>1;!function e(t,n,i,a,r,s){for(;r>a;){if(r-a>600){const o=r-a+1,l=i-a+1,u=Math.log(o),c=.5*Math.exp(2*u/3),m=.5*Math.sqrt(u*c*(o-c)/o)*(l-o/2<0?-1:1),d=Math.max(a,Math.floor(i-l*c/o+m)),h=Math.min(r,Math.floor(i+(o-l)*c/o+m));e(t,n,i,d,h,s)}const l=n[2*i+s];let u=a,c=r;for(o(t,n,a,i),n[2*r+s]>l&&o(t,n,a,r);u<c;){for(o(t,n,u,c),u++,c--;n[2*u+s]<l;)u++;for(;n[2*c+s]>l;)c--}n[2*a+s]===l?o(t,n,a,c):o(t,n,++c,r),c<=i&&(a=c+1),i<=c&&(r=c-1)}}(e,t,l,a,r,s%2),i(e,t,n,a,l-1,s+1),i(e,t,n,l+1,r,s+1)}function o(e,t,n,i){a(e,n,i),a(t,2*n,2*i),a(t,2*n+1,2*i+1)}function a(e,t,n){const i=e[t];e[t]=e[n],e[n]=i}function r(e,t,n,i){const o=e-n,a=t-i;return o*o+a*a}n.r(t),n.d(t,"default",function(){return u});const s=e=>e[0],l=e=>e[1];class u{constructor(e,t=s,n=l,o=64,a=Float64Array){this.nodeSize=o,this.points=e;const r=e.length<65536?Uint16Array:Uint32Array,u=this.ids=new r(e.length),c=this.coords=new a(2*e.length);for(let i=0;i<e.length;i++)u[i]=i,c[2*i]=t(e[i]),c[2*i+1]=n(e[i]);i(u,c,o,0,u.length-1,0)}range(e,t,n,i){return function(e,t,n,i,o,a,r){const s=[0,e.length-1,0],l=[];let u,c;for(;s.length;){const m=s.pop(),d=s.pop(),h=s.pop();if(d-h<=r){for(let r=h;r<=d;r++)u=t[2*r],c=t[2*r+1],u>=n&&u<=o&&c>=i&&c<=a&&l.push(e[r]);continue}const p=Math.floor((h+d)/2);u=t[2*p],c=t[2*p+1],u>=n&&u<=o&&c>=i&&c<=a&&l.push(e[p]);const f=(m+1)%2;(0===m?n<=u:i<=c)&&(s.push(h),s.push(p-1),s.push(f)),(0===m?o>=u:a>=c)&&(s.push(p+1),s.push(d),s.push(f))}return l}(this.ids,this.coords,e,t,n,i,this.nodeSize)}within(e,t,n){return function(e,t,n,i,o,a){const s=[0,e.length-1,0],l=[],u=o*o;for(;s.length;){const c=s.pop(),m=s.pop(),d=s.pop();if(m-d<=a){for(let o=d;o<=m;o++)r(t[2*o],t[2*o+1],n,i)<=u&&l.push(e[o]);continue}const h=Math.floor((d+m)/2),p=t[2*h],f=t[2*h+1];r(p,f,n,i)<=u&&l.push(e[h]);const g=(c+1)%2;(0===c?n-o<=p:i-o<=f)&&(s.push(d),s.push(h-1),s.push(g)),(0===c?n+o>=p:i+o>=f)&&(s.push(h+1),s.push(m),s.push(g))}return l}(this.ids,this.coords,e,t,n,this.nodeSize)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,